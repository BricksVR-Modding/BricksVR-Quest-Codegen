// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.Data.Connection
#include "Steamworks/Data/Connection.hpp"
// Including type: Steamworks.Data.HSteamNetPollGroup
#include "Steamworks/Data/HSteamNetPollGroup.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: ISocketManager
  class ISocketManager;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Steamworks::Data
namespace Steamworks::Data {
  // Forward declaring type: ConnectionInfo
  struct ConnectionInfo;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SocketManager
  class SocketManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::SocketManager);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::SocketManager*, "Steamworks", "SocketManager");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.SocketManager
  // [TokenAttribute] Offset: FFFFFFFF
  class SocketManager : public ::Il2CppObject {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0xBB920
    // private Steamworks.ISocketManager <Interface>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Steamworks::ISocketManager* Interface;
    // Field size check
    static_assert(sizeof(::Steamworks::ISocketManager*) == 0x8);
    // public System.Collections.Generic.List`1<Steamworks.Data.Connection> Connecting
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Steamworks::Data::Connection>* Connecting;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Steamworks::Data::Connection>*) == 0x8);
    // public System.Collections.Generic.List`1<Steamworks.Data.Connection> Connected
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Steamworks::Data::Connection>* Connected;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Steamworks::Data::Connection>*) == 0x8);
    // Steamworks.Data.HSteamNetPollGroup pollGroup
    // Size: 0x4
    // Offset: 0x28
    ::Steamworks::Data::HSteamNetPollGroup pollGroup;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::HSteamNetPollGroup) == 0x4);
    public:
    // Get instance field reference: private Steamworks.ISocketManager <Interface>k__BackingField
    [[deprecated("Use field access instead!")]] ::Steamworks::ISocketManager*& dyn_$Interface$k__BackingField();
    // Get instance field reference: public System.Collections.Generic.List`1<Steamworks.Data.Connection> Connecting
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Steamworks::Data::Connection>*& dyn_Connecting();
    // Get instance field reference: public System.Collections.Generic.List`1<Steamworks.Data.Connection> Connected
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Steamworks::Data::Connection>*& dyn_Connected();
    // Get instance field reference: Steamworks.Data.HSteamNetPollGroup pollGroup
    [[deprecated("Use field access instead!")]] ::Steamworks::Data::HSteamNetPollGroup& dyn_pollGroup();
    // public Steamworks.ISocketManager get_Interface()
    // Offset: 0x1E1920
    ::Steamworks::ISocketManager* get_Interface();
    // public System.Void OnConnectionChanged(Steamworks.Data.Connection connection, Steamworks.Data.ConnectionInfo info)
    // Offset: 0x5C0720
    void OnConnectionChanged(::Steamworks::Data::Connection connection, ::Steamworks::Data::ConnectionInfo info);
    // public System.Void OnConnecting(Steamworks.Data.Connection connection, Steamworks.Data.ConnectionInfo info)
    // Offset: 0x5C0610
    void OnConnecting(::Steamworks::Data::Connection connection, ::Steamworks::Data::ConnectionInfo info);
    // public System.Void OnConnected(Steamworks.Data.Connection connection, Steamworks.Data.ConnectionInfo info)
    // Offset: 0x5C04D0
    void OnConnected(::Steamworks::Data::Connection connection, ::Steamworks::Data::ConnectionInfo info);
    // public System.Void OnDisconnected(Steamworks.Data.Connection connection, Steamworks.Data.ConnectionInfo info)
    // Offset: 0x5C0A60
    void OnDisconnected(::Steamworks::Data::Connection connection, ::Steamworks::Data::ConnectionInfo info);
  }; // Steamworks.SocketManager
  #pragma pack(pop)
  static check_size<sizeof(SocketManager), 40 + sizeof(::Steamworks::Data::HSteamNetPollGroup)> __Steamworks_SocketManagerSizeCheck;
  static_assert(sizeof(SocketManager) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::SocketManager::get_Interface
// Il2CppName: get_Interface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::ISocketManager* (Steamworks::SocketManager::*)()>(&Steamworks::SocketManager::get_Interface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SocketManager*), "get_Interface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SocketManager::OnConnectionChanged
// Il2CppName: OnConnectionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SocketManager::*)(::Steamworks::Data::Connection, ::Steamworks::Data::ConnectionInfo)>(&Steamworks::SocketManager::OnConnectionChanged)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SocketManager*), "OnConnectionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, info});
  }
};
// Writing MetadataGetter for method: Steamworks::SocketManager::OnConnecting
// Il2CppName: OnConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SocketManager::*)(::Steamworks::Data::Connection, ::Steamworks::Data::ConnectionInfo)>(&Steamworks::SocketManager::OnConnecting)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SocketManager*), "OnConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, info});
  }
};
// Writing MetadataGetter for method: Steamworks::SocketManager::OnConnected
// Il2CppName: OnConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SocketManager::*)(::Steamworks::Data::Connection, ::Steamworks::Data::ConnectionInfo)>(&Steamworks::SocketManager::OnConnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SocketManager*), "OnConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, info});
  }
};
// Writing MetadataGetter for method: Steamworks::SocketManager::OnDisconnected
// Il2CppName: OnDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SocketManager::*)(::Steamworks::Data::Connection, ::Steamworks::Data::ConnectionInfo)>(&Steamworks::SocketManager::OnDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SocketManager*), "OnDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, info});
  }
};
