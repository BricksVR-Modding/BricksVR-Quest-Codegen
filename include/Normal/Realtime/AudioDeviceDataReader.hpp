// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: MicrophoneDevice
  class MicrophoneDevice;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: AudioDeviceDataReader
  class AudioDeviceDataReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::AudioDeviceDataReader);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::AudioDeviceDataReader*, "Normal.Realtime", "AudioDeviceDataReader");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.AudioDeviceDataReader
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioDeviceDataReader : public ::Il2CppObject {
    public:
    public:
    // private Normal.Realtime.MicrophoneDevice <microphone>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Normal::Realtime::MicrophoneDevice* microphone;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::MicrophoneDevice*) == 0x8);
    // private System.Int32 _previousLocalWriteHeadPosition
    // Size: 0x4
    // Offset: 0x18
    int previousLocalWriteHeadPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _writeHeadLoopCount
    // Size: 0x4
    // Offset: 0x1C
    int writeHeadLoopCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _readHeadPosition
    // Size: 0x4
    // Offset: 0x20
    int readHeadPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private Normal.Realtime.MicrophoneDevice <microphone>k__BackingField
    [[deprecated]] ::Normal::Realtime::MicrophoneDevice*& dyn_$microphone$k__BackingField();
    // Get instance field reference: private System.Int32 _previousLocalWriteHeadPosition
    [[deprecated]] int& dyn__previousLocalWriteHeadPosition();
    // Get instance field reference: private System.Int32 _writeHeadLoopCount
    [[deprecated]] int& dyn__writeHeadLoopCount();
    // Get instance field reference: private System.Int32 _readHeadPosition
    [[deprecated]] int& dyn__readHeadPosition();
    // public Normal.Realtime.MicrophoneDevice get_microphone()
    // Offset: 0x1E1920
    ::Normal::Realtime::MicrophoneDevice* get_microphone();
    // private System.Void set_microphone(Normal.Realtime.MicrophoneDevice value)
    // Offset: 0x269100
    void set_microphone(::Normal::Realtime::MicrophoneDevice* value);
    // public System.Void .ctor(Normal.Realtime.MicrophoneDevice microphone)
    // Offset: 0xBDA4E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioDeviceDataReader* New_ctor(::Normal::Realtime::MicrophoneDevice* microphone) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::AudioDeviceDataReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioDeviceDataReader*, creationType>(microphone)));
    }
    // public System.Boolean GetData(System.Single[] buffer)
    // Offset: 0xBD9DE0
    bool GetData(::ArrayW<float> buffer);
    // public System.Boolean GetMostRecentData(System.Single[] buffer)
    // Offset: 0xBDA130
    bool GetMostRecentData(::ArrayW<float> buffer);
  }; // Normal.Realtime.AudioDeviceDataReader
  #pragma pack(pop)
  static check_size<sizeof(AudioDeviceDataReader), 32 + sizeof(int)> __Normal_Realtime_AudioDeviceDataReaderSizeCheck;
  static_assert(sizeof(AudioDeviceDataReader) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::AudioDeviceDataReader::get_microphone
// Il2CppName: get_microphone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::MicrophoneDevice* (Normal::Realtime::AudioDeviceDataReader::*)()>(&Normal::Realtime::AudioDeviceDataReader::get_microphone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioDeviceDataReader*), "get_microphone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioDeviceDataReader::set_microphone
// Il2CppName: set_microphone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioDeviceDataReader::*)(::Normal::Realtime::MicrophoneDevice*)>(&Normal::Realtime::AudioDeviceDataReader::set_microphone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "MicrophoneDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioDeviceDataReader*), "set_microphone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioDeviceDataReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::AudioDeviceDataReader::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::AudioDeviceDataReader::*)(::ArrayW<float>)>(&Normal::Realtime::AudioDeviceDataReader::GetData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioDeviceDataReader*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioDeviceDataReader::GetMostRecentData
// Il2CppName: GetMostRecentData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::AudioDeviceDataReader::*)(::ArrayW<float>)>(&Normal::Realtime::AudioDeviceDataReader::GetMostRecentData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioDeviceDataReader*), "GetMostRecentData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
