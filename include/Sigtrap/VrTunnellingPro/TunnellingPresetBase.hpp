// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode
#include "Sigtrap/VrTunnellingPro/TunnellingBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Sigtrap::VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Cubemap
  class Cubemap;
}
// Completed forward declares
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Forward declaring type: TunnellingPresetBase
  class TunnellingPresetBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Sigtrap::VrTunnellingPro::TunnellingPresetBase);
DEFINE_IL2CPP_ARG_TYPE(::Sigtrap::VrTunnellingPro::TunnellingPresetBase*, "Sigtrap.VrTunnellingPro", "TunnellingPresetBase");
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Size: 0xAD
  #pragma pack(push, 1)
  // Autogenerated type: Sigtrap.VrTunnellingPro.TunnellingPresetBase
  // [TokenAttribute] Offset: FFFFFFFF
  class TunnellingPresetBase : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings
    class MotionSettings;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Boolean _overrideAll
    // Size: 0x1
    // Offset: 0x18
    bool overrideAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideAll and: effectCoverage
    char __padding0[0x3] = {};
    // [RangeAttribute] Offset: 0x72B780
    // private System.Single _effectCoverage
    // Size: 0x4
    // Offset: 0x1C
    float effectCoverage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _overrideEffectCoverage
    // Size: 0x1
    // Offset: 0x20
    bool overrideEffectCoverage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideEffectCoverage and: effectColor
    char __padding2[0x3] = {};
    // private UnityEngine.Color _effectColor
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color effectColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _overrideEffectColor
    // Size: 0x1
    // Offset: 0x34
    bool overrideEffectColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideEffectColor and: effectFeather
    char __padding4[0x3] = {};
    // [RangeAttribute] Offset: 0x72B7F0
    // private System.Single _effectFeather
    // Size: 0x4
    // Offset: 0x38
    float effectFeather;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _overrideEffectFeather
    // Size: 0x1
    // Offset: 0x3C
    bool overrideEffectFeather;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _applyColorToBackground
    // Size: 0x1
    // Offset: 0x3D
    bool applyColorToBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideApplyColorToBackground
    // Size: 0x1
    // Offset: 0x3E
    bool overrideApplyColorToBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideApplyColorToBackground and: skybox
    char __padding8[0x1] = {};
    // private UnityEngine.Cubemap _skybox
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Cubemap* skybox;
    // Field size check
    static_assert(sizeof(::UnityEngine::Cubemap*) == 0x8);
    // private System.Boolean _overrideSkybox
    // Size: 0x1
    // Offset: 0x48
    bool overrideSkybox;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideSkybox and: angularVelocity
    char __padding10[0x7] = {};
    // private Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings _angularVelocity
    // Size: 0x8
    // Offset: 0x50
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* angularVelocity;
    // Field size check
    static_assert(sizeof(::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*) == 0x8);
    // private System.Boolean _overrideAngularVelocity
    // Size: 0x1
    // Offset: 0x58
    bool overrideAngularVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideAngularVelocity and: acceleration
    char __padding12[0x7] = {};
    // private Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings _acceleration
    // Size: 0x8
    // Offset: 0x60
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* acceleration;
    // Field size check
    static_assert(sizeof(::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*) == 0x8);
    // private System.Boolean _overrideAcceleration
    // Size: 0x1
    // Offset: 0x68
    bool overrideAcceleration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideAcceleration and: velocity
    char __padding14[0x7] = {};
    // private Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings _velocity
    // Size: 0x8
    // Offset: 0x70
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* velocity;
    // Field size check
    static_assert(sizeof(::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*) == 0x8);
    // private System.Boolean _overrideVelocity
    // Size: 0x1
    // Offset: 0x78
    bool overrideVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _useCounterMotion
    // Size: 0x1
    // Offset: 0x79
    bool useCounterMotion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideUseCounterMotion
    // Size: 0x1
    // Offset: 0x7A
    bool overrideUseCounterMotion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideUseCounterMotion and: counterRotationStrength
    char __padding18[0x1] = {};
    // [RangeAttribute] Offset: 0x72B900
    // private System.Single _counterRotationStrength
    // Size: 0x4
    // Offset: 0x7C
    float counterRotationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _overrideCounterRotationStrength
    // Size: 0x1
    // Offset: 0x80
    bool overrideCounterRotationStrength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideCounterRotationStrength and: counterRotationPerAxis
    char __padding20[0x3] = {};
    // private UnityEngine.Vector3 _counterRotationPerAxis
    // Size: 0xC
    // Offset: 0x84
    ::UnityEngine::Vector3 counterRotationPerAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _overrideCounterRotationPerAxis
    // Size: 0x1
    // Offset: 0x90
    bool overrideCounterRotationPerAxis;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _useArtificialTilt
    // Size: 0x1
    // Offset: 0x91
    bool useArtificialTilt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideUseArtificialTilt
    // Size: 0x1
    // Offset: 0x92
    bool overrideUseArtificialTilt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideUseArtificialTilt and: framerateDivision
    char __padding24[0x1] = {};
    // [RangeAttribute] Offset: 0x72B990
    // private System.Int32 _framerateDivision
    // Size: 0x4
    // Offset: 0x94
    int framerateDivision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _overrideFramerateDivision
    // Size: 0x1
    // Offset: 0x98
    bool overrideFramerateDivision;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _divideTranslation
    // Size: 0x1
    // Offset: 0x99
    bool divideTranslation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideDivideTranslation
    // Size: 0x1
    // Offset: 0x9A
    bool overrideDivideTranslation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _divideRotation
    // Size: 0x1
    // Offset: 0x9B
    bool divideRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideDivideRotation
    // Size: 0x1
    // Offset: 0x9C
    bool overrideDivideRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideDivideRotation and: forceVignetteMode
    char __padding30[0x3] = {};
    // private Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode _forceVignetteMode
    // Size: 0x4
    // Offset: 0xA0
    ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode forceVignetteMode;
    // Field size check
    static_assert(sizeof(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode) == 0x4);
    // private System.Boolean _overrideForceVignetteMode
    // Size: 0x1
    // Offset: 0xA4
    bool overrideForceVignetteMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideForceVignetteMode and: forceVignetteValue
    char __padding32[0x3] = {};
    // [RangeAttribute] Offset: 0x72BA44
    // private System.Single _forceVignetteValue
    // Size: 0x4
    // Offset: 0xA8
    float forceVignetteValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _overrideForceVignetteValue
    // Size: 0x1
    // Offset: 0xAC
    bool overrideForceVignetteValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean _overrideAll
    bool& dyn__overrideAll();
    // Get instance field reference: private System.Single _effectCoverage
    float& dyn__effectCoverage();
    // Get instance field reference: private System.Boolean _overrideEffectCoverage
    bool& dyn__overrideEffectCoverage();
    // Get instance field reference: private UnityEngine.Color _effectColor
    ::UnityEngine::Color& dyn__effectColor();
    // Get instance field reference: private System.Boolean _overrideEffectColor
    bool& dyn__overrideEffectColor();
    // Get instance field reference: private System.Single _effectFeather
    float& dyn__effectFeather();
    // Get instance field reference: private System.Boolean _overrideEffectFeather
    bool& dyn__overrideEffectFeather();
    // Get instance field reference: private System.Boolean _applyColorToBackground
    bool& dyn__applyColorToBackground();
    // Get instance field reference: private System.Boolean _overrideApplyColorToBackground
    bool& dyn__overrideApplyColorToBackground();
    // Get instance field reference: private UnityEngine.Cubemap _skybox
    ::UnityEngine::Cubemap*& dyn__skybox();
    // Get instance field reference: private System.Boolean _overrideSkybox
    bool& dyn__overrideSkybox();
    // Get instance field reference: private Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings _angularVelocity
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*& dyn__angularVelocity();
    // Get instance field reference: private System.Boolean _overrideAngularVelocity
    bool& dyn__overrideAngularVelocity();
    // Get instance field reference: private Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings _acceleration
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*& dyn__acceleration();
    // Get instance field reference: private System.Boolean _overrideAcceleration
    bool& dyn__overrideAcceleration();
    // Get instance field reference: private Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings _velocity
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*& dyn__velocity();
    // Get instance field reference: private System.Boolean _overrideVelocity
    bool& dyn__overrideVelocity();
    // Get instance field reference: private System.Boolean _useCounterMotion
    bool& dyn__useCounterMotion();
    // Get instance field reference: private System.Boolean _overrideUseCounterMotion
    bool& dyn__overrideUseCounterMotion();
    // Get instance field reference: private System.Single _counterRotationStrength
    float& dyn__counterRotationStrength();
    // Get instance field reference: private System.Boolean _overrideCounterRotationStrength
    bool& dyn__overrideCounterRotationStrength();
    // Get instance field reference: private UnityEngine.Vector3 _counterRotationPerAxis
    ::UnityEngine::Vector3& dyn__counterRotationPerAxis();
    // Get instance field reference: private System.Boolean _overrideCounterRotationPerAxis
    bool& dyn__overrideCounterRotationPerAxis();
    // Get instance field reference: private System.Boolean _useArtificialTilt
    bool& dyn__useArtificialTilt();
    // Get instance field reference: private System.Boolean _overrideUseArtificialTilt
    bool& dyn__overrideUseArtificialTilt();
    // Get instance field reference: private System.Int32 _framerateDivision
    int& dyn__framerateDivision();
    // Get instance field reference: private System.Boolean _overrideFramerateDivision
    bool& dyn__overrideFramerateDivision();
    // Get instance field reference: private System.Boolean _divideTranslation
    bool& dyn__divideTranslation();
    // Get instance field reference: private System.Boolean _overrideDivideTranslation
    bool& dyn__overrideDivideTranslation();
    // Get instance field reference: private System.Boolean _divideRotation
    bool& dyn__divideRotation();
    // Get instance field reference: private System.Boolean _overrideDivideRotation
    bool& dyn__overrideDivideRotation();
    // Get instance field reference: private Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode _forceVignetteMode
    ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode& dyn__forceVignetteMode();
    // Get instance field reference: private System.Boolean _overrideForceVignetteMode
    bool& dyn__overrideForceVignetteMode();
    // Get instance field reference: private System.Single _forceVignetteValue
    float& dyn__forceVignetteValue();
    // Get instance field reference: private System.Boolean _overrideForceVignetteValue
    bool& dyn__overrideForceVignetteValue();
    // protected System.Boolean get_overrideAll()
    // Offset: 0x10C1F84
    bool get_overrideAll();
    // public System.Single get_effectCoverage()
    // Offset: 0x10C1F8C
    float get_effectCoverage();
    // public System.Boolean get_overrideEffectCoverage()
    // Offset: 0x10BB4C8
    bool get_overrideEffectCoverage();
    // public UnityEngine.Color get_effectColor()
    // Offset: 0x10C1F94
    ::UnityEngine::Color get_effectColor();
    // public System.Boolean get_overrideEffectColor()
    // Offset: 0x10BB4E8
    bool get_overrideEffectColor();
    // public System.Single get_effectFeather()
    // Offset: 0x10C1FA0
    float get_effectFeather();
    // public System.Boolean get_overrideEffectFeather()
    // Offset: 0x10BB508
    bool get_overrideEffectFeather();
    // public System.Boolean get_applyColorToBackground()
    // Offset: 0x10C1FA8
    bool get_applyColorToBackground();
    // public System.Boolean get_overrideApplyColorToBackground()
    // Offset: 0x10BB528
    bool get_overrideApplyColorToBackground();
    // public UnityEngine.Cubemap get_skybox()
    // Offset: 0x10C1FB0
    ::UnityEngine::Cubemap* get_skybox();
    // public System.Boolean get_overrideSkybox()
    // Offset: 0x10BB548
    bool get_overrideSkybox();
    // public Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings get_angularVelocity()
    // Offset: 0x10C1FB8
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* get_angularVelocity();
    // public System.Boolean get_overrideAngularVelocity()
    // Offset: 0x10BB568
    bool get_overrideAngularVelocity();
    // public Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings get_acceleration()
    // Offset: 0x10C1FC0
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* get_acceleration();
    // public System.Boolean get_overrideAcceleration()
    // Offset: 0x10BB588
    bool get_overrideAcceleration();
    // public Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings get_velocity()
    // Offset: 0x10C1FC8
    ::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* get_velocity();
    // public System.Boolean get_overrideVelocity()
    // Offset: 0x10BB5A8
    bool get_overrideVelocity();
    // public System.Boolean get_useCounterMotion()
    // Offset: 0x10C1FD0
    bool get_useCounterMotion();
    // public System.Boolean get_overrideUseCounterMotion()
    // Offset: 0x10BB5C8
    bool get_overrideUseCounterMotion();
    // public System.Single get_counterRotationStrength()
    // Offset: 0x10C1FD8
    float get_counterRotationStrength();
    // public System.Boolean get_overrideCounterRotationStrength()
    // Offset: 0x10C1FE0
    bool get_overrideCounterRotationStrength();
    // public UnityEngine.Vector3 get_counterRotationPerAxis()
    // Offset: 0x10C2000
    ::UnityEngine::Vector3 get_counterRotationPerAxis();
    // public System.Boolean get_overrideCounterRotationPerAxis()
    // Offset: 0x10BB5E8
    bool get_overrideCounterRotationPerAxis();
    // public System.Boolean get_useArtificialTilt()
    // Offset: 0x10C200C
    bool get_useArtificialTilt();
    // public System.Boolean get_overrideUseArtificialTilt()
    // Offset: 0x10BB608
    bool get_overrideUseArtificialTilt();
    // public System.Int32 get_framerateDivision()
    // Offset: 0x10C2014
    int get_framerateDivision();
    // public System.Boolean get_overrideFramerateDivision()
    // Offset: 0x10BB628
    bool get_overrideFramerateDivision();
    // public System.Boolean get_divideTranslation()
    // Offset: 0x10C201C
    bool get_divideTranslation();
    // public System.Boolean get_overrideDivideTranslation()
    // Offset: 0x10BB648
    bool get_overrideDivideTranslation();
    // public System.Boolean get_divideRotation()
    // Offset: 0x10C2024
    bool get_divideRotation();
    // public System.Boolean get_overrideDividerotation()
    // Offset: 0x10BB668
    bool get_overrideDividerotation();
    // public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode get_forceVignetteMode()
    // Offset: 0x10C202C
    ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode get_forceVignetteMode();
    // public System.Boolean get_overrideForceVignetteMode()
    // Offset: 0x10BB688
    bool get_overrideForceVignetteMode();
    // public System.Single get_forceVignetteValue()
    // Offset: 0x10C2034
    float get_forceVignetteValue();
    // public System.Boolean get_overrideForceVignetteValue()
    // Offset: 0x10BB6A8
    bool get_overrideForceVignetteValue();
    // protected System.Void .ctor()
    // Offset: 0x10C1E90
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TunnellingPresetBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Sigtrap::VrTunnellingPro::TunnellingPresetBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TunnellingPresetBase*, creationType>()));
    }
  }; // Sigtrap.VrTunnellingPro.TunnellingPresetBase
  #pragma pack(pop)
  static check_size<sizeof(TunnellingPresetBase), 172 + sizeof(bool)> __Sigtrap_VrTunnellingPro_TunnellingPresetBaseSizeCheck;
  static_assert(sizeof(TunnellingPresetBase) == 0xAD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideAll
// Il2CppName: get_overrideAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_effectCoverage
// Il2CppName: get_effectCoverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_effectCoverage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_effectCoverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideEffectCoverage
// Il2CppName: get_overrideEffectCoverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideEffectCoverage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideEffectCoverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_effectColor
// Il2CppName: get_effectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_effectColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_effectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideEffectColor
// Il2CppName: get_overrideEffectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideEffectColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideEffectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_effectFeather
// Il2CppName: get_effectFeather
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_effectFeather)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_effectFeather", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideEffectFeather
// Il2CppName: get_overrideEffectFeather
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideEffectFeather)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideEffectFeather", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_applyColorToBackground
// Il2CppName: get_applyColorToBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_applyColorToBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_applyColorToBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideApplyColorToBackground
// Il2CppName: get_overrideApplyColorToBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideApplyColorToBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideApplyColorToBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_skybox
// Il2CppName: get_skybox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Cubemap* (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_skybox)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_skybox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideSkybox
// Il2CppName: get_overrideSkybox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideSkybox)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideSkybox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_angularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideAngularVelocity
// Il2CppName: get_overrideAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_acceleration
// Il2CppName: get_acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_acceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideAcceleration
// Il2CppName: get_overrideAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideAcceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings* (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideVelocity
// Il2CppName: get_overrideVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_useCounterMotion
// Il2CppName: get_useCounterMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_useCounterMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_useCounterMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideUseCounterMotion
// Il2CppName: get_overrideUseCounterMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideUseCounterMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideUseCounterMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_counterRotationStrength
// Il2CppName: get_counterRotationStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_counterRotationStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_counterRotationStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideCounterRotationStrength
// Il2CppName: get_overrideCounterRotationStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideCounterRotationStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideCounterRotationStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_counterRotationPerAxis
// Il2CppName: get_counterRotationPerAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_counterRotationPerAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_counterRotationPerAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideCounterRotationPerAxis
// Il2CppName: get_overrideCounterRotationPerAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideCounterRotationPerAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideCounterRotationPerAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_useArtificialTilt
// Il2CppName: get_useArtificialTilt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_useArtificialTilt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_useArtificialTilt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideUseArtificialTilt
// Il2CppName: get_overrideUseArtificialTilt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideUseArtificialTilt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideUseArtificialTilt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_framerateDivision
// Il2CppName: get_framerateDivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_framerateDivision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_framerateDivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideFramerateDivision
// Il2CppName: get_overrideFramerateDivision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideFramerateDivision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideFramerateDivision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_divideTranslation
// Il2CppName: get_divideTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_divideTranslation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_divideTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideDivideTranslation
// Il2CppName: get_overrideDivideTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideDivideTranslation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideDivideTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_divideRotation
// Il2CppName: get_divideRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_divideRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_divideRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideDividerotation
// Il2CppName: get_overrideDividerotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideDividerotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideDividerotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_forceVignetteMode
// Il2CppName: get_forceVignetteMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_forceVignetteMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_forceVignetteMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideForceVignetteMode
// Il2CppName: get_overrideForceVignetteMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideForceVignetteMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideForceVignetteMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_forceVignetteValue
// Il2CppName: get_forceVignetteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_forceVignetteValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_forceVignetteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideForceVignetteValue
// Il2CppName: get_overrideForceVignetteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::get_overrideForceVignetteValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase*), "get_overrideForceVignetteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
