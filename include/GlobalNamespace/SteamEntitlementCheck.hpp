// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BaseEntitlementCheck
#include "GlobalNamespace/BaseEntitlementCheck.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SteamManager
  class SteamManager;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamEntitlementCheck
  class SteamEntitlementCheck;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamEntitlementCheck);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamEntitlementCheck*, "", "SteamEntitlementCheck");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: SteamEntitlementCheck
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamEntitlementCheck : public ::GlobalNamespace::BaseEntitlementCheck {
    public:
    public:
    // public SteamManager steamManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SteamManager* steamManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamManager*) == 0x8);
    // private System.Boolean _isCheckingEntitlement
    // Size: 0x1
    // Offset: 0x20
    bool isCheckingEntitlement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public SteamManager steamManager
    [[deprecated]] ::GlobalNamespace::SteamManager*& dyn_steamManager();
    // Get instance field reference: private System.Boolean _isCheckingEntitlement
    [[deprecated]] bool& dyn__isCheckingEntitlement();
    // public System.Void .ctor()
    // Offset: 0x4D3750
    // Implemented from: BaseEntitlementCheck
    // Base method: System.Void BaseEntitlementCheck::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamEntitlementCheck* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamEntitlementCheck::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamEntitlementCheck*, creationType>()));
    }
    // public override System.Void IsEntitled(System.Action`2<System.Boolean,System.String> entitlementCallback)
    // Offset: 0x6CFBC0
    // Implemented from: BaseEntitlementCheck
    // Base method: System.Void BaseEntitlementCheck::IsEntitled(System.Action`2<System.Boolean,System.String> entitlementCallback)
    void IsEntitled(::System::Action_2<bool, ::StringW>* entitlementCallback);
  }; // SteamEntitlementCheck
  #pragma pack(pop)
  static check_size<sizeof(SteamEntitlementCheck), 32 + sizeof(bool)> __GlobalNamespace_SteamEntitlementCheckSizeCheck;
  static_assert(sizeof(SteamEntitlementCheck) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamEntitlementCheck::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SteamEntitlementCheck::IsEntitled
// Il2CppName: IsEntitled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamEntitlementCheck::*)(::System::Action_2<bool, ::StringW>*)>(&GlobalNamespace::SteamEntitlementCheck::IsEntitled)> {
  static const MethodInfo* get() {
    static auto* entitlementCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamEntitlementCheck*), "IsEntitled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entitlementCallback});
  }
};
