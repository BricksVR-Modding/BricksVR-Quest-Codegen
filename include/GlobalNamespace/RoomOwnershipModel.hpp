// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeModel
#include "Normal/Realtime/RealtimeModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: ReliableProperty`1<T>
  template<typename T>
  class ReliableProperty_1;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: StreamContext because it is already included!
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RoomOwnershipModel
  class RoomOwnershipModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomOwnershipModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomOwnershipModel*, "", "RoomOwnershipModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: RoomOwnershipModel
  // [TokenAttribute] Offset: FFFFFFFF
  // [RealtimeModelAttribute] Offset: D4660
  class RoomOwnershipModel : public ::Normal::Realtime::RealtimeModel {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    // Nested type: ::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<T>
    template<typename T>
    class PropertyChangedHandler_1;
    // Nested type: ::GlobalNamespace::RoomOwnershipModel::PropertyID
    struct PropertyID;
    public:
    // [RealtimePropertyAttribute] Offset: 0xF0420
    // private System.Boolean _locked
    // Size: 0x1
    // Offset: 0x90
    bool locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [RealtimePropertyAttribute] Offset: 0xF0480
    // private System.Boolean _lowGravity
    // Size: 0x1
    // Offset: 0x91
    bool lowGravity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [RealtimePropertyAttribute] Offset: 0xF04B0
    // private System.Boolean _blockedFromMovingThroughBricks
    // Size: 0x1
    // Offset: 0x92
    bool blockedFromMovingThroughBricks;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: blockedFromMovingThroughBricks and: lockedDidChange
    char __padding2[0x5] = {};
    // private RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> lockedDidChange
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* lockedDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*) == 0x8);
    // private RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> lowGravityDidChange
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* lowGravityDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*) == 0x8);
    // private RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> blockedFromMovingThroughBricksDidChange
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* blockedFromMovingThroughBricksDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Boolean> _lockedProperty
    // Size: 0x8
    // Offset: 0xB0
    ::Normal::Realtime::ReliableProperty_1<bool>* lockedProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<bool>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Boolean> _lowGravityProperty
    // Size: 0x8
    // Offset: 0xB8
    ::Normal::Realtime::ReliableProperty_1<bool>* lowGravityProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<bool>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Boolean> _blockedFromMovingThroughBricksProperty
    // Size: 0x8
    // Offset: 0xC0
    ::Normal::Realtime::ReliableProperty_1<bool>* blockedFromMovingThroughBricksProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<bool>*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean _locked
    [[deprecated("Use field access instead!")]] bool& dyn__locked();
    // Get instance field reference: private System.Boolean _lowGravity
    [[deprecated("Use field access instead!")]] bool& dyn__lowGravity();
    // Get instance field reference: private System.Boolean _blockedFromMovingThroughBricks
    [[deprecated("Use field access instead!")]] bool& dyn__blockedFromMovingThroughBricks();
    // Get instance field reference: private RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> lockedDidChange
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*& dyn_lockedDidChange();
    // Get instance field reference: private RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> lowGravityDidChange
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*& dyn_lowGravityDidChange();
    // Get instance field reference: private RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> blockedFromMovingThroughBricksDidChange
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*& dyn_blockedFromMovingThroughBricksDidChange();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Boolean> _lockedProperty
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::ReliableProperty_1<bool>*& dyn__lockedProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Boolean> _lowGravityProperty
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::ReliableProperty_1<bool>*& dyn__lowGravityProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Boolean> _blockedFromMovingThroughBricksProperty
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::ReliableProperty_1<bool>*& dyn__blockedFromMovingThroughBricksProperty();
    // public System.Boolean get_locked()
    // Offset: 0x6CB2C0
    bool get_locked();
    // public System.Void set_locked(System.Boolean value)
    // Offset: 0x6CB5A0
    void set_locked(bool value);
    // public System.Boolean get_lowGravity()
    // Offset: 0x6CB300
    bool get_lowGravity();
    // public System.Void set_lowGravity(System.Boolean value)
    // Offset: 0x6CB620
    void set_lowGravity(bool value);
    // public System.Boolean get_blockedFromMovingThroughBricks()
    // Offset: 0x6CB280
    bool get_blockedFromMovingThroughBricks();
    // public System.Void set_blockedFromMovingThroughBricks(System.Boolean value)
    // Offset: 0x6CB520
    void set_blockedFromMovingThroughBricks(bool value);
    // public System.Void add_lockedDidChange(RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6CB140
    void add_lockedDidChange(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void remove_lockedDidChange(RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6CB3E0
    void remove_lockedDidChange(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void add_lowGravityDidChange(RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6CB1E0
    void add_lowGravityDidChange(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void remove_lowGravityDidChange(RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6CB480
    void remove_lowGravityDidChange(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void add_blockedFromMovingThroughBricksDidChange(RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6CB0A0
    void add_blockedFromMovingThroughBricksDidChange(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void remove_blockedFromMovingThroughBricksDidChange(RoomOwnershipModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6CB340
    void remove_blockedFromMovingThroughBricksDidChange(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void .ctor()
    // Offset: 0x6CAF90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomOwnershipModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomOwnershipModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomOwnershipModel*, creationType>()));
    }
    // private System.Void FireLockedDidChange(System.Boolean value)
    // Offset: 0x6CA800
    void FireLockedDidChange(bool value);
    // private System.Void FireLowGravityDidChange(System.Boolean value)
    // Offset: 0x6CA8A0
    void FireLowGravityDidChange(bool value);
    // private System.Void FireBlockedFromMovingThroughBricksDidChange(System.Boolean value)
    // Offset: 0x6CA760
    void FireBlockedFromMovingThroughBricksDidChange(bool value);
    // private System.Void UpdateBackingFields()
    // Offset: 0x6CACC0
    void UpdateBackingFields();
    // protected override System.Void OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    // Offset: 0x6CA940
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    void OnParentReplaced(::Normal::Realtime::RealtimeModel* previousParent, ::Normal::Realtime::RealtimeModel* currentParent);
    // protected override System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6CAD70
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Int32 RealtimeModel::WriteLength(Normal.Realtime.Serialization.StreamContext context)
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6CAE60
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6CA9C0
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
  }; // RoomOwnershipModel
  #pragma pack(pop)
  static check_size<sizeof(RoomOwnershipModel), 192 + sizeof(::Normal::Realtime::ReliableProperty_1<bool>*)> __GlobalNamespace_RoomOwnershipModelSizeCheck;
  static_assert(sizeof(RoomOwnershipModel) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::get_locked
// Il2CppName: get_locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipModel::*)()>(&GlobalNamespace::RoomOwnershipModel::get_locked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "get_locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::set_locked
// Il2CppName: set_locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(bool)>(&GlobalNamespace::RoomOwnershipModel::set_locked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "set_locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::get_lowGravity
// Il2CppName: get_lowGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipModel::*)()>(&GlobalNamespace::RoomOwnershipModel::get_lowGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "get_lowGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::set_lowGravity
// Il2CppName: set_lowGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(bool)>(&GlobalNamespace::RoomOwnershipModel::set_lowGravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "set_lowGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::get_blockedFromMovingThroughBricks
// Il2CppName: get_blockedFromMovingThroughBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipModel::*)()>(&GlobalNamespace::RoomOwnershipModel::get_blockedFromMovingThroughBricks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "get_blockedFromMovingThroughBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::set_blockedFromMovingThroughBricks
// Il2CppName: set_blockedFromMovingThroughBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(bool)>(&GlobalNamespace::RoomOwnershipModel::set_blockedFromMovingThroughBricks)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "set_blockedFromMovingThroughBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::add_lockedDidChange
// Il2CppName: add_lockedDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::RoomOwnershipModel::add_lockedDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "add_lockedDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::remove_lockedDidChange
// Il2CppName: remove_lockedDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::RoomOwnershipModel::remove_lockedDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "remove_lockedDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::add_lowGravityDidChange
// Il2CppName: add_lowGravityDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::RoomOwnershipModel::add_lowGravityDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "add_lowGravityDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::remove_lowGravityDidChange
// Il2CppName: remove_lowGravityDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::RoomOwnershipModel::remove_lowGravityDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "remove_lowGravityDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::add_blockedFromMovingThroughBricksDidChange
// Il2CppName: add_blockedFromMovingThroughBricksDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::RoomOwnershipModel::add_blockedFromMovingThroughBricksDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "add_blockedFromMovingThroughBricksDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::remove_blockedFromMovingThroughBricksDidChange
// Il2CppName: remove_blockedFromMovingThroughBricksDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::GlobalNamespace::RoomOwnershipModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::RoomOwnershipModel::remove_blockedFromMovingThroughBricksDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "remove_blockedFromMovingThroughBricksDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::FireLockedDidChange
// Il2CppName: FireLockedDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(bool)>(&GlobalNamespace::RoomOwnershipModel::FireLockedDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "FireLockedDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::FireLowGravityDidChange
// Il2CppName: FireLowGravityDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(bool)>(&GlobalNamespace::RoomOwnershipModel::FireLowGravityDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "FireLowGravityDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::FireBlockedFromMovingThroughBricksDidChange
// Il2CppName: FireBlockedFromMovingThroughBricksDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(bool)>(&GlobalNamespace::RoomOwnershipModel::FireBlockedFromMovingThroughBricksDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "FireBlockedFromMovingThroughBricksDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::UpdateBackingFields
// Il2CppName: UpdateBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)()>(&GlobalNamespace::RoomOwnershipModel::UpdateBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "UpdateBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::OnParentReplaced
// Il2CppName: OnParentReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::Normal::Realtime::RealtimeModel*, ::Normal::Realtime::RealtimeModel*)>(&GlobalNamespace::RoomOwnershipModel::OnParentReplaced)> {
  static const MethodInfo* get() {
    static auto* previousParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    static auto* currentParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "OnParentReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousParent, currentParent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::RoomOwnershipModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::RoomOwnershipModel::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::RoomOwnershipModel::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipModel::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::RoomOwnershipModel::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipModel*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
