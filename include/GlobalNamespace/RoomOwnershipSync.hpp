// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeComponent`1
#include "Normal/Realtime/RealtimeComponent_1.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RoomOwnershipModel
  class RoomOwnershipModel;
  // Forward declaring type: QuickInteractor
  class QuickInteractor;
  // Forward declaring type: KeepPlayerOutOfWalls
  class KeepPlayerOutOfWalls;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RoomOwnershipSync
  class RoomOwnershipSync;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomOwnershipSync);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomOwnershipSync*, "", "RoomOwnershipSync");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: RoomOwnershipSync
  // [TokenAttribute] Offset: FFFFFFFF
  class RoomOwnershipSync : public ::Normal::Realtime::RealtimeComponent_1<::GlobalNamespace::RoomOwnershipModel*> {
    public:
    public:
    // public QuickInteractor leftHandInteractor
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::QuickInteractor* leftHandInteractor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::QuickInteractor*) == 0x8);
    // public QuickInteractor rightHandInteractor
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::QuickInteractor* rightHandInteractor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::QuickInteractor*) == 0x8);
    // public KeepPlayerOutOfWalls keepPlayerOutOfWalls
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::KeepPlayerOutOfWalls* keepPlayerOutOfWalls;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::KeepPlayerOutOfWalls*) == 0x8);
    // private UnityEngine.LayerMask _interactorUnlockedMask
    // Size: 0x4
    // Offset: 0x40
    ::UnityEngine::LayerMask interactorUnlockedMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.LayerMask _interactorLockedMask
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::LayerMask interactorLockedMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.UI.Toggle roomLockedToggle
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UI::Toggle* roomLockedToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public UnityEngine.UI.Toggle lowGravityToggle
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Toggle* lowGravityToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x102570
    // public UnityEngine.UI.Toggle blockedFromMovingThroughBricksToggle
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UI::Toggle* blockedFromMovingThroughBricksToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public System.Boolean overrideLocked
    // Size: 0x1
    // Offset: 0x60
    bool overrideLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.String overrideOwnerId
    // Size: 0x8
    // Offset: 0x68
    ::StringW overrideOwnerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _ownerIdPrefix
    // Size: 0x8
    // Offset: 0x70
    ::StringW ownerIdPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String roomName
    // Size: 0x8
    // Offset: 0x78
    ::StringW roomName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static private UnityEngine.Vector3 _lowGravityVector
    static ::UnityEngine::Vector3 _get__lowGravityVector();
    // Set static field: static private UnityEngine.Vector3 _lowGravityVector
    static void _set__lowGravityVector(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 _regularGravityVector
    static ::UnityEngine::Vector3 _get__regularGravityVector();
    // Set static field: static private UnityEngine.Vector3 _regularGravityVector
    static void _set__regularGravityVector(::UnityEngine::Vector3 value);
    // Get instance field reference: public QuickInteractor leftHandInteractor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::QuickInteractor*& dyn_leftHandInteractor();
    // Get instance field reference: public QuickInteractor rightHandInteractor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::QuickInteractor*& dyn_rightHandInteractor();
    // Get instance field reference: public KeepPlayerOutOfWalls keepPlayerOutOfWalls
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::KeepPlayerOutOfWalls*& dyn_keepPlayerOutOfWalls();
    // Get instance field reference: private UnityEngine.LayerMask _interactorUnlockedMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn__interactorUnlockedMask();
    // Get instance field reference: private UnityEngine.LayerMask _interactorLockedMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn__interactorLockedMask();
    // Get instance field reference: public UnityEngine.UI.Toggle roomLockedToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn_roomLockedToggle();
    // Get instance field reference: public UnityEngine.UI.Toggle lowGravityToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn_lowGravityToggle();
    // Get instance field reference: public UnityEngine.UI.Toggle blockedFromMovingThroughBricksToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn_blockedFromMovingThroughBricksToggle();
    // Get instance field reference: public System.Boolean overrideLocked
    [[deprecated("Use field access instead!")]] bool& dyn_overrideLocked();
    // Get instance field reference: public System.String overrideOwnerId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_overrideOwnerId();
    // Get instance field reference: private System.String _ownerIdPrefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn__ownerIdPrefix();
    // Get instance field reference: public System.String roomName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_roomName();
    // public System.Void .ctor()
    // Offset: 0x6CC6C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomOwnershipSync* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomOwnershipSync::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomOwnershipSync*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x6CC600
    static void _cctor();
    // private System.Void Awake()
    // Offset: 0x6CB6A0
    void Awake();
    // public System.Boolean Locked()
    // Offset: 0x6CBCF0
    bool Locked();
    // public System.Boolean LowGravity()
    // Offset: 0x6CBED0
    bool LowGravity();
    // public System.Boolean BlockedFromMovingThroughBricks()
    // Offset: 0x6CBA30
    bool BlockedFromMovingThroughBricks();
    // private System.String OwnerIdPrefix()
    // Offset: 0x2F6AF0
    ::StringW OwnerIdPrefix();
    // public System.Boolean IsRoomOwner()
    // Offset: 0x6CBAB0
    bool IsRoomOwner();
    // public System.Boolean IsRoomOwner(System.String shortId)
    // Offset: 0x6CBAA0
    bool IsRoomOwner(::StringW shortId);
    // public System.Boolean IsUserAllowedToMakeChanges()
    // Offset: 0x6CBAE0
    bool IsUserAllowedToMakeChanges();
    // private System.Void LockedSet()
    // Offset: 0x6CBB90
    void LockedSet();
    // private System.Void LowGravitySet()
    // Offset: 0x6CBD70
    void LowGravitySet();
    // private System.Void BlockedFromMovingThroughBricksSet()
    // Offset: 0x6CB950
    void BlockedFromMovingThroughBricksSet();
    // protected System.Void OnRealtimeModelReplaced(RoomOwnershipModel previousModel, RoomOwnershipModel currentModel)
    // Offset: 0x6CBF40
    void OnRealtimeModelReplaced(::GlobalNamespace::RoomOwnershipModel* previousModel, ::GlobalNamespace::RoomOwnershipModel* currentModel);
    // private System.Void LockedDidChange(RoomOwnershipModel model, System.Boolean locked)
    // Offset: 0x6CBB80
    void LockedDidChange(::GlobalNamespace::RoomOwnershipModel* model, bool locked);
    // private System.Void LowGravityDidChange(RoomOwnershipModel model, System.Boolean lowGravity)
    // Offset: 0x6CBD60
    void LowGravityDidChange(::GlobalNamespace::RoomOwnershipModel* model, bool lowGravity);
    // private System.Void BlockedFromMovingThroughBricksDidChange(RoomOwnershipModel model, System.Boolean blockedFromMovingThroughBricks)
    // Offset: 0x6CB940
    void BlockedFromMovingThroughBricksDidChange(::GlobalNamespace::RoomOwnershipModel* model, bool blockedFromMovingThroughBricks);
    // public System.Void SetLocked(System.Boolean locked)
    // Offset: 0x6CC500
    void SetLocked(bool locked);
    // public System.Void SetGravity(System.Boolean lowGravity)
    // Offset: 0x6CC460
    void SetGravity(bool lowGravity);
    // public System.Void SetBlockedFromMovingThroughBricks(System.Boolean blocked)
    // Offset: 0x6CC3C0
    void SetBlockedFromMovingThroughBricks(bool blocked);
    // public System.Void SetOwnerIdPrefix(System.String ownerIdPrefix)
    // Offset: 0x2F6C80
    void SetOwnerIdPrefix(::StringW ownerIdPrefix);
  }; // RoomOwnershipSync
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::RoomOwnershipSync::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::Locked
// Il2CppName: Locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::Locked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "Locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::LowGravity
// Il2CppName: LowGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::LowGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "LowGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::BlockedFromMovingThroughBricks
// Il2CppName: BlockedFromMovingThroughBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::BlockedFromMovingThroughBricks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "BlockedFromMovingThroughBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::OwnerIdPrefix
// Il2CppName: OwnerIdPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::OwnerIdPrefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "OwnerIdPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::IsRoomOwner
// Il2CppName: IsRoomOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::IsRoomOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "IsRoomOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::IsRoomOwner
// Il2CppName: IsRoomOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipSync::*)(::StringW)>(&GlobalNamespace::RoomOwnershipSync::IsRoomOwner)> {
  static const MethodInfo* get() {
    static auto* shortId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "IsRoomOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shortId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::IsUserAllowedToMakeChanges
// Il2CppName: IsUserAllowedToMakeChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::IsUserAllowedToMakeChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "IsUserAllowedToMakeChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::LockedSet
// Il2CppName: LockedSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::LockedSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "LockedSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::LowGravitySet
// Il2CppName: LowGravitySet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::LowGravitySet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "LowGravitySet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::BlockedFromMovingThroughBricksSet
// Il2CppName: BlockedFromMovingThroughBricksSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)()>(&GlobalNamespace::RoomOwnershipSync::BlockedFromMovingThroughBricksSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "BlockedFromMovingThroughBricksSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::OnRealtimeModelReplaced
// Il2CppName: OnRealtimeModelReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(::GlobalNamespace::RoomOwnershipModel*, ::GlobalNamespace::RoomOwnershipModel*)>(&GlobalNamespace::RoomOwnershipSync::OnRealtimeModelReplaced)> {
  static const MethodInfo* get() {
    static auto* previousModel = &::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel")->byval_arg;
    static auto* currentModel = &::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "OnRealtimeModelReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousModel, currentModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::LockedDidChange
// Il2CppName: LockedDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(::GlobalNamespace::RoomOwnershipModel*, bool)>(&GlobalNamespace::RoomOwnershipSync::LockedDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel")->byval_arg;
    static auto* locked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "LockedDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, locked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::LowGravityDidChange
// Il2CppName: LowGravityDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(::GlobalNamespace::RoomOwnershipModel*, bool)>(&GlobalNamespace::RoomOwnershipSync::LowGravityDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel")->byval_arg;
    static auto* lowGravity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "LowGravityDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, lowGravity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::BlockedFromMovingThroughBricksDidChange
// Il2CppName: BlockedFromMovingThroughBricksDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(::GlobalNamespace::RoomOwnershipModel*, bool)>(&GlobalNamespace::RoomOwnershipSync::BlockedFromMovingThroughBricksDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "RoomOwnershipModel")->byval_arg;
    static auto* blockedFromMovingThroughBricks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "BlockedFromMovingThroughBricksDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, blockedFromMovingThroughBricks});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::SetLocked
// Il2CppName: SetLocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(bool)>(&GlobalNamespace::RoomOwnershipSync::SetLocked)> {
  static const MethodInfo* get() {
    static auto* locked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "SetLocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::SetGravity
// Il2CppName: SetGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(bool)>(&GlobalNamespace::RoomOwnershipSync::SetGravity)> {
  static const MethodInfo* get() {
    static auto* lowGravity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "SetGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lowGravity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::SetBlockedFromMovingThroughBricks
// Il2CppName: SetBlockedFromMovingThroughBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(bool)>(&GlobalNamespace::RoomOwnershipSync::SetBlockedFromMovingThroughBricks)> {
  static const MethodInfo* get() {
    static auto* blocked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "SetBlockedFromMovingThroughBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blocked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomOwnershipSync::SetOwnerIdPrefix
// Il2CppName: SetOwnerIdPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RoomOwnershipSync::*)(::StringW)>(&GlobalNamespace::RoomOwnershipSync::SetOwnerIdPrefix)> {
  static const MethodInfo* get() {
    static auto* ownerIdPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomOwnershipSync*), "SetOwnerIdPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ownerIdPrefix});
  }
};
