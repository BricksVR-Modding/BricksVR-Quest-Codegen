// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Normal.Realtime.Serialization.ISerializer`1
#include "Normal/Realtime/Serialization/ISerializer_1.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: Vector4Serializer
  struct Vector4Serializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::Vector4Serializer, "Normal.Realtime.Serialization", "Vector4Serializer");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.Serialization.Vector4Serializer
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct Vector4Serializer/*, public ::System::ValueType, public ::Normal::Realtime::Serialization::ISerializer_1<::UnityEngine::Vector4>*/ {
    public:
    // Creating value type constructor for type: Vector4Serializer
    constexpr Vector4Serializer() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::ISerializer_1<::UnityEngine::Vector4>
    operator ::Normal::Realtime::Serialization::ISerializer_1<::UnityEngine::Vector4>() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::ISerializer_1<::UnityEngine::Vector4>*>(this);
    }
    // static field const value: static private System.Int32 LENGTH
    static constexpr const int LENGTH = 16;
    // Get static field: static private System.Int32 LENGTH
    static int _get_LENGTH();
    // Set static field: static private System.Int32 LENGTH
    static void _set_LENGTH(int value);
    // public System.Int32 Length(UnityEngine.Vector4 value)
    // Offset: 0xA6FDD4
    int Length(::UnityEngine::Vector4 value);
    // public System.Void Write(ref Normal.Realtime.Serialization.WriteStream stream, UnityEngine.Vector4 value)
    // Offset: 0xA6FDDC
    void Write(ByRef<::Normal::Realtime::Serialization::WriteStream*> stream, ::UnityEngine::Vector4 value);
    // public System.Void Read(ref Normal.Realtime.Serialization.ReadStream stream, ref UnityEngine.Vector4 value)
    // Offset: 0xA6FE90
    void Read(ByRef<::Normal::Realtime::Serialization::ReadStream*> stream, ByRef<::UnityEngine::Vector4> value);
  }; // Normal.Realtime.Serialization.Vector4Serializer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::Vector4Serializer::Length
// Il2CppName: Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Serialization::Vector4Serializer::*)(::UnityEngine::Vector4)>(&Normal::Realtime::Serialization::Vector4Serializer::Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::Vector4Serializer), "Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::Vector4Serializer::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::Vector4Serializer::*)(ByRef<::Normal::Realtime::Serialization::WriteStream*>, ::UnityEngine::Vector4)>(&Normal::Realtime::Serialization::Vector4Serializer::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::Vector4Serializer), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::Vector4Serializer::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::Vector4Serializer::*)(ByRef<::Normal::Realtime::Serialization::ReadStream*>, ByRef<::UnityEngine::Vector4>)>(&Normal::Realtime::Serialization::Vector4Serializer::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::Vector4Serializer), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
