// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRComposition
#include "GlobalNamespace/OVRComposition.hpp"
// Including type: OVRPlugin/CameraDevice
#include "GlobalNamespace/OVRPlugin_CameraDevice.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraComposition
  class OVRCameraComposition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRCameraComposition);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRCameraComposition*, "", "OVRCameraComposition");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6D
  #pragma pack(push, 1)
  // Autogenerated type: OVRCameraComposition
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRCameraComposition : public ::GlobalNamespace::OVRComposition {
    public:
    // Nested type: ::GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager
    class OVRCameraFrameCompositionManager;
    public:
    // protected UnityEngine.GameObject cameraFramePlaneObject
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* cameraFramePlaneObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected System.Single cameraFramePlaneDistance
    // Size: 0x4
    // Offset: 0x48
    float cameraFramePlaneDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected readonly System.Boolean hasCameraDeviceOpened
    // Size: 0x1
    // Offset: 0x4C
    bool hasCameraDeviceOpened;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected readonly System.Boolean useDynamicLighting
    // Size: 0x1
    // Offset: 0x4D
    bool useDynamicLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDynamicLighting and: cameraDevice
    char __padding3[0x2] = {};
    // readonly OVRPlugin/CameraDevice cameraDevice
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::OVRPlugin::CameraDevice cameraDevice;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::CameraDevice) == 0x4);
    // Padding between fields: cameraDevice and: boundaryMesh
    char __padding4[0x4] = {};
    // private UnityEngine.Mesh boundaryMesh
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Mesh* boundaryMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private System.Single boundaryMeshTopY
    // Size: 0x4
    // Offset: 0x60
    float boundaryMeshTopY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single boundaryMeshBottomY
    // Size: 0x4
    // Offset: 0x64
    float boundaryMeshBottomY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OVRManager/VirtualGreenScreenType boundaryMeshType
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::OVRManager_VirtualGreenScreenType boundaryMeshType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_VirtualGreenScreenType) == 0x4);
    // private System.Boolean nullcameraRigWarningDisplayed
    // Size: 0x1
    // Offset: 0x6C
    bool nullcameraRigWarningDisplayed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: protected UnityEngine.GameObject cameraFramePlaneObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_cameraFramePlaneObject();
    // Get instance field reference: protected System.Single cameraFramePlaneDistance
    [[deprecated]] float& dyn_cameraFramePlaneDistance();
    // Get instance field reference: protected readonly System.Boolean hasCameraDeviceOpened
    [[deprecated]] bool& dyn_hasCameraDeviceOpened();
    // Get instance field reference: protected readonly System.Boolean useDynamicLighting
    [[deprecated]] bool& dyn_useDynamicLighting();
    // Get instance field reference: readonly OVRPlugin/CameraDevice cameraDevice
    [[deprecated]] ::GlobalNamespace::OVRPlugin::CameraDevice& dyn_cameraDevice();
    // Get instance field reference: private UnityEngine.Mesh boundaryMesh
    [[deprecated]] ::UnityEngine::Mesh*& dyn_boundaryMesh();
    // Get instance field reference: private System.Single boundaryMeshTopY
    [[deprecated]] float& dyn_boundaryMeshTopY();
    // Get instance field reference: private System.Single boundaryMeshBottomY
    [[deprecated]] float& dyn_boundaryMeshBottomY();
    // Get instance field reference: private OVRManager/VirtualGreenScreenType boundaryMeshType
    [[deprecated]] ::GlobalNamespace::OVRManager_VirtualGreenScreenType& dyn_boundaryMeshType();
    // Get instance field reference: private System.Boolean nullcameraRigWarningDisplayed
    [[deprecated]] bool& dyn_nullcameraRigWarningDisplayed();
    // protected System.Void .ctor(UnityEngine.GameObject parentObject, UnityEngine.Camera mainCamera, OVRManager/CameraDevice inCameraDevice, System.Boolean inUseDynamicLighting, OVRManager/DepthQuality depthQuality)
    // Offset: 0x22F1C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRCameraComposition* New_ctor(::UnityEngine::GameObject* parentObject, ::UnityEngine::Camera* mainCamera, ::GlobalNamespace::OVRManager_CameraDevice inCameraDevice, bool inUseDynamicLighting, ::GlobalNamespace::OVRManager_DepthQuality depthQuality) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCameraComposition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRCameraComposition*, creationType>(parentObject, mainCamera, inCameraDevice, inUseDynamicLighting, depthQuality)));
    }
    // protected System.Void RefreshCameraFramePlaneObject(UnityEngine.GameObject parentObject, UnityEngine.Camera mixedRealityCamera, System.Boolean useDynamicLighting)
    // Offset: 0x22E170
    void RefreshCameraFramePlaneObject(::UnityEngine::GameObject* parentObject, ::UnityEngine::Camera* mixedRealityCamera, bool useDynamicLighting);
    // protected System.Void UpdateCameraFramePlaneObject(UnityEngine.Camera mainCamera, UnityEngine.Camera mixedRealityCamera, UnityEngine.RenderTexture boundaryMeshMaskTexture)
    // Offset: 0x22E450
    void UpdateCameraFramePlaneObject(::UnityEngine::Camera* mainCamera, ::UnityEngine::Camera* mixedRealityCamera, ::UnityEngine::RenderTexture* boundaryMeshMaskTexture);
    // protected System.Void RefreshBoundaryMesh(UnityEngine.Camera camera, out System.Single cullingDistance)
    // Offset: 0x22DBC0
    void RefreshBoundaryMesh(::UnityEngine::Camera* camera, ByRef<float> cullingDistance);
    // public override System.Void Cleanup()
    // Offset: 0x22DA50
    // Implemented from: OVRComposition
    // Base method: System.Void OVRComposition::Cleanup()
    void Cleanup();
    // public override System.Void RecenterPose()
    // Offset: 0x22DBA0
    // Implemented from: OVRComposition
    // Base method: System.Void OVRComposition::RecenterPose()
    void RecenterPose();
  }; // OVRCameraComposition
  #pragma pack(pop)
  static check_size<sizeof(OVRCameraComposition), 108 + sizeof(bool)> __GlobalNamespace_OVRCameraCompositionSizeCheck;
  static_assert(sizeof(OVRCameraComposition) == 0x6D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::RefreshCameraFramePlaneObject
// Il2CppName: RefreshCameraFramePlaneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::*)(::UnityEngine::GameObject*, ::UnityEngine::Camera*, bool)>(&GlobalNamespace::OVRCameraComposition::RefreshCameraFramePlaneObject)> {
  static const MethodInfo* get() {
    static auto* parentObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* mixedRealityCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* useDynamicLighting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition*), "RefreshCameraFramePlaneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentObject, mixedRealityCamera, useDynamicLighting});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::UpdateCameraFramePlaneObject
// Il2CppName: UpdateCameraFramePlaneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::*)(::UnityEngine::Camera*, ::UnityEngine::Camera*, ::UnityEngine::RenderTexture*)>(&GlobalNamespace::OVRCameraComposition::UpdateCameraFramePlaneObject)> {
  static const MethodInfo* get() {
    static auto* mainCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* mixedRealityCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* boundaryMeshMaskTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition*), "UpdateCameraFramePlaneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainCamera, mixedRealityCamera, boundaryMeshMaskTexture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::RefreshBoundaryMesh
// Il2CppName: RefreshBoundaryMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::*)(::UnityEngine::Camera*, ByRef<float>)>(&GlobalNamespace::OVRCameraComposition::RefreshBoundaryMesh)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cullingDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition*), "RefreshBoundaryMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cullingDistance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::*)()>(&GlobalNamespace::OVRCameraComposition::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::RecenterPose
// Il2CppName: RecenterPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::*)()>(&GlobalNamespace::OVRCameraComposition::RecenterPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition*), "RecenterPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
