// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SyncVoiceWithSettings
  class SyncVoiceWithSettings;
  // Forward declaring type: RoomOwnershipSync
  class RoomOwnershipSync;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeAvatar
  class RealtimeAvatar;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerListItem
  class PlayerListItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerListItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerListItem*, "", "PlayerListItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PlayerListItem
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerListItem : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public TMPro.TextMeshProUGUI nameText
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshProUGUI* nameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public UnityEngine.GameObject ownerCrown
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* ownerCrown;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.UI.Image micImage
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Image* micImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Button micButton
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Button* micButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.Sprite micMutedSprite
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Sprite* micMutedSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // public UnityEngine.Sprite micEnabledSprite
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Sprite* micEnabledSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private SyncVoiceWithSettings _syncVoiceWithSettings
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::SyncVoiceWithSettings* syncVoiceWithSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SyncVoiceWithSettings*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public TMPro.TextMeshProUGUI nameText
    ::TMPro::TextMeshProUGUI*& dyn_nameText();
    // Get instance field reference: public UnityEngine.GameObject ownerCrown
    ::UnityEngine::GameObject*& dyn_ownerCrown();
    // Get instance field reference: public UnityEngine.UI.Image micImage
    ::UnityEngine::UI::Image*& dyn_micImage();
    // Get instance field reference: public UnityEngine.UI.Button micButton
    ::UnityEngine::UI::Button*& dyn_micButton();
    // Get instance field reference: public UnityEngine.Sprite micMutedSprite
    ::UnityEngine::Sprite*& dyn_micMutedSprite();
    // Get instance field reference: public UnityEngine.Sprite micEnabledSprite
    ::UnityEngine::Sprite*& dyn_micEnabledSprite();
    // Get instance field reference: private SyncVoiceWithSettings _syncVoiceWithSettings
    ::GlobalNamespace::SyncVoiceWithSettings*& dyn__syncVoiceWithSettings();
    // public System.Void Initialize(Normal.Realtime.RealtimeAvatar avatar, RoomOwnershipSync ownershipSync)
    // Offset: 0x105A93C
    void Initialize(::Normal::Realtime::RealtimeAvatar* avatar, ::GlobalNamespace::RoomOwnershipSync* ownershipSync);
    // public System.Void MuteButtonPressed()
    // Offset: 0x105AAC4
    void MuteButtonPressed();
    // private System.Void SetMicrophoneSprite()
    // Offset: 0x105AA80
    void SetMicrophoneSprite();
    // public System.Void .ctor()
    // Offset: 0x105AAF8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerListItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerListItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerListItem*, creationType>()));
    }
  }; // PlayerListItem
  #pragma pack(pop)
  static check_size<sizeof(PlayerListItem), 72 + sizeof(::GlobalNamespace::SyncVoiceWithSettings*)> __GlobalNamespace_PlayerListItemSizeCheck;
  static_assert(sizeof(PlayerListItem) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerListItem::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerListItem::*)(::Normal::Realtime::RealtimeAvatar*, ::GlobalNamespace::RoomOwnershipSync*)>(&GlobalNamespace::PlayerListItem::Initialize)> {
  static const MethodInfo* get() {
    static auto* avatar = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatar")->byval_arg;
    static auto* ownershipSync = &::il2cpp_utils::GetClassFromName("", "RoomOwnershipSync")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerListItem*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{avatar, ownershipSync});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerListItem::MuteButtonPressed
// Il2CppName: MuteButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerListItem::*)()>(&GlobalNamespace::PlayerListItem::MuteButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerListItem*), "MuteButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerListItem::SetMicrophoneSprite
// Il2CppName: SetMicrophoneSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerListItem::*)()>(&GlobalNamespace::PlayerListItem::SetMicrophoneSprite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerListItem*), "SetMicrophoneSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerListItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
