// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: CubemapFace
  struct CubemapFace;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBufferExecutionFlags
  struct CommandBufferExecutionFlags;
  // Forward declaring type: RenderTargetIdentifier
  struct RenderTargetIdentifier;
  // Forward declaring type: RenderBufferLoadAction
  struct RenderBufferLoadAction;
  // Forward declaring type: RenderBufferStoreAction
  struct RenderBufferStoreAction;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rendering::CommandBuffer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::CommandBuffer*, "UnityEngine.Rendering", "CommandBuffer");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rendering.CommandBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: 6DA820
  // [NativeTypeAttribute] Offset: 6DA820
  // [NativeHeaderAttribute] Offset: 6DA820
  // [NativeHeaderAttribute] Offset: 6DA820
  // [UsedByNativeCodeAttribute] Offset: 6DA820
  class CommandBuffer : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // Get instance field reference: System.IntPtr m_Ptr
    ::System::IntPtr& dyn_m_Ptr();
    // public System.Void set_name(System.String value)
    // Offset: 0x1163104
    void set_name(::StringW value);
    // static private System.IntPtr InitBuffer()
    // Offset: 0x1163090
    static ::System::IntPtr InitBuffer();
    // private System.Void ReleaseBuffer()
    // Offset: 0x11630C4
    void ReleaseBuffer();
    // public System.Void Clear()
    // Offset: 0x1163154
    void Clear();
    // private System.Void Internal_DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 submeshIndex, System.Int32 shaderPass, UnityEngine.MaterialPropertyBlock properties)
    // Offset: 0x1163194
    void Internal_DrawMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Material* material, int submeshIndex, int shaderPass, ::UnityEngine::MaterialPropertyBlock* properties);
    // private System.Void Internal_DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material, System.Int32 submeshIndex, System.Int32 shaderPass)
    // Offset: 0x11632A4
    void Internal_DrawRenderer(::UnityEngine::Renderer* renderer, ::UnityEngine::Material* material, int submeshIndex, int shaderPass);
    // public System.Void ClearRenderTarget(System.Boolean clearDepth, System.Boolean clearColor, UnityEngine.Color backgroundColor, System.Single depth)
    // Offset: 0x1163314
    void ClearRenderTarget(bool clearDepth, bool clearColor, ::UnityEngine::Color backgroundColor, float depth);
    // public System.Void ClearRenderTarget(System.Boolean clearDepth, System.Boolean clearColor, UnityEngine.Color backgroundColor)
    // Offset: 0x116340C
    void ClearRenderTarget(bool clearDepth, bool clearColor, ::UnityEngine::Color backgroundColor);
    // private System.Boolean ValidateAgainstExecutionFlags(UnityEngine.Rendering.CommandBufferExecutionFlags requiredFlags, UnityEngine.Rendering.CommandBufferExecutionFlags invalidFlags)
    // Offset: 0x11634A8
    bool ValidateAgainstExecutionFlags(::UnityEngine::Rendering::CommandBufferExecutionFlags requiredFlags, ::UnityEngine::Rendering::CommandBufferExecutionFlags invalidFlags);
    // public System.Void SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, System.Int32 mipLevel, UnityEngine.CubemapFace cubemapFace, System.Int32 depthSlice)
    // Offset: 0x1163500
    void SetRenderTarget(::UnityEngine::Rendering::RenderTargetIdentifier color, ::UnityEngine::Rendering::RenderTargetIdentifier depth, int mipLevel, ::UnityEngine::CubemapFace cubemapFace, int depthSlice);
    // private System.Void SetRenderTargetColorDepth_Internal(UnityEngine.Rendering.RenderTargetIdentifier color, UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction)
    // Offset: 0x11636DC
    void SetRenderTargetColorDepth_Internal(::UnityEngine::Rendering::RenderTargetIdentifier color, ::UnityEngine::Rendering::RenderTargetIdentifier depth, ::UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::RenderBufferLoadAction depthLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction);
    // public System.Void Dispose()
    // Offset: 0x11638C4
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1163858
    void Dispose(bool disposing);
    // public System.Void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 submeshIndex, System.Int32 shaderPass, UnityEngine.MaterialPropertyBlock properties)
    // Offset: 0x1163984
    void DrawMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Material* material, int submeshIndex, int shaderPass, ::UnityEngine::MaterialPropertyBlock* properties);
    // public System.Void DrawMesh(UnityEngine.Mesh mesh, UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 submeshIndex, System.Int32 shaderPass)
    // Offset: 0x1163C4C
    void DrawMesh(::UnityEngine::Mesh* mesh, ::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Material* material, int submeshIndex, int shaderPass);
    // public System.Void DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material, System.Int32 submeshIndex, System.Int32 shaderPass)
    // Offset: 0x1163C80
    void DrawRenderer(::UnityEngine::Renderer* renderer, ::UnityEngine::Material* material, int submeshIndex, int shaderPass);
    // public System.Void DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material, System.Int32 submeshIndex)
    // Offset: 0x1163EA4
    void DrawRenderer(::UnityEngine::Renderer* renderer, ::UnityEngine::Material* material, int submeshIndex);
    // public System.Void DrawRenderer(UnityEngine.Renderer renderer, UnityEngine.Material material)
    // Offset: 0x1163EAC
    void DrawRenderer(::UnityEngine::Renderer* renderer, ::UnityEngine::Material* material);
    // private System.Void Internal_DrawMesh_Injected(UnityEngine.Mesh mesh, ref UnityEngine.Matrix4x4 matrix, UnityEngine.Material material, System.Int32 submeshIndex, System.Int32 shaderPass, UnityEngine.MaterialPropertyBlock properties)
    // Offset: 0x116321C
    void Internal_DrawMesh_Injected(::UnityEngine::Mesh* mesh, ByRef<::UnityEngine::Matrix4x4> matrix, ::UnityEngine::Material* material, int submeshIndex, int shaderPass, ::UnityEngine::MaterialPropertyBlock* properties);
    // private System.Void ClearRenderTarget_Injected(System.Boolean clearDepth, System.Boolean clearColor, ref UnityEngine.Color backgroundColor, System.Single depth)
    // Offset: 0x1163394
    void ClearRenderTarget_Injected(bool clearDepth, bool clearColor, ByRef<::UnityEngine::Color> backgroundColor, float depth);
    // private System.Void SetRenderTargetColorDepth_Internal_Injected(ref UnityEngine.Rendering.RenderTargetIdentifier color, ref UnityEngine.Rendering.RenderTargetIdentifier depth, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RenderBufferLoadAction depthLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStoreAction)
    // Offset: 0x1163764
    void SetRenderTargetColorDepth_Internal_Injected(ByRef<::UnityEngine::Rendering::RenderTargetIdentifier> color, ByRef<::UnityEngine::Rendering::RenderTargetIdentifier> depth, ::UnityEngine::Rendering::RenderBufferLoadAction colorLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction colorStoreAction, ::UnityEngine::Rendering::RenderBufferLoadAction depthLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction depthStoreAction);
    // public System.Void .ctor()
    // Offset: 0x1163938
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CommandBuffer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rendering::CommandBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CommandBuffer*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x11637EC
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.Rendering.CommandBuffer
  #pragma pack(pop)
  static check_size<sizeof(CommandBuffer), 16 + sizeof(::System::IntPtr)> __UnityEngine_Rendering_CommandBufferSizeCheck;
  static_assert(sizeof(CommandBuffer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::StringW)>(&UnityEngine::Rendering::CommandBuffer::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::InitBuffer
// Il2CppName: InitBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&UnityEngine::Rendering::CommandBuffer::InitBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "InitBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::ReleaseBuffer
// Il2CppName: ReleaseBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)()>(&UnityEngine::Rendering::CommandBuffer::ReleaseBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "ReleaseBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)()>(&UnityEngine::Rendering::CommandBuffer::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh
// Il2CppName: Internal_DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4, ::UnityEngine::Material*, int, int, ::UnityEngine::MaterialPropertyBlock*)>(&UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shaderPass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "Internal_DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, material, submeshIndex, shaderPass, properties});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::Internal_DrawRenderer
// Il2CppName: Internal_DrawRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Renderer*, ::UnityEngine::Material*, int, int)>(&UnityEngine::Rendering::CommandBuffer::Internal_DrawRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shaderPass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "Internal_DrawRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, material, submeshIndex, shaderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::ClearRenderTarget
// Il2CppName: ClearRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(bool, bool, ::UnityEngine::Color, float)>(&UnityEngine::Rendering::CommandBuffer::ClearRenderTarget)> {
  static const MethodInfo* get() {
    static auto* clearDepth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* backgroundColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "ClearRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearDepth, clearColor, backgroundColor, depth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::ClearRenderTarget
// Il2CppName: ClearRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(bool, bool, ::UnityEngine::Color)>(&UnityEngine::Rendering::CommandBuffer::ClearRenderTarget)> {
  static const MethodInfo* get() {
    static auto* clearDepth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* backgroundColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "ClearRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearDepth, clearColor, backgroundColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::ValidateAgainstExecutionFlags
// Il2CppName: ValidateAgainstExecutionFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Rendering::CommandBufferExecutionFlags, ::UnityEngine::Rendering::CommandBufferExecutionFlags)>(&UnityEngine::Rendering::CommandBuffer::ValidateAgainstExecutionFlags)> {
  static const MethodInfo* get() {
    static auto* requiredFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBufferExecutionFlags")->byval_arg;
    static auto* invalidFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBufferExecutionFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "ValidateAgainstExecutionFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requiredFlags, invalidFlags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::SetRenderTarget
// Il2CppName: SetRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier, int, ::UnityEngine::CubemapFace, int)>(&UnityEngine::Rendering::CommandBuffer::SetRenderTarget)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cubemapFace = &::il2cpp_utils::GetClassFromName("UnityEngine", "CubemapFace")->byval_arg;
    static auto* depthSlice = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "SetRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, depth, mipLevel, cubemapFace, depthSlice});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::SetRenderTargetColorDepth_Internal
// Il2CppName: SetRenderTargetColorDepth_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderTargetIdentifier, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction)>(&UnityEngine::Rendering::CommandBuffer::SetRenderTargetColorDepth_Internal)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->byval_arg;
    static auto* colorLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* depthLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* depthStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "SetRenderTargetColorDepth_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, depth, colorLoadAction, colorStoreAction, depthLoadAction, depthStoreAction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)()>(&UnityEngine::Rendering::CommandBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(bool)>(&UnityEngine::Rendering::CommandBuffer::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4, ::UnityEngine::Material*, int, int, ::UnityEngine::MaterialPropertyBlock*)>(&UnityEngine::Rendering::CommandBuffer::DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shaderPass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, material, submeshIndex, shaderPass, properties});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::DrawMesh
// Il2CppName: DrawMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Mesh*, ::UnityEngine::Matrix4x4, ::UnityEngine::Material*, int, int)>(&UnityEngine::Rendering::CommandBuffer::DrawMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shaderPass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "DrawMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, material, submeshIndex, shaderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::DrawRenderer
// Il2CppName: DrawRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Renderer*, ::UnityEngine::Material*, int, int)>(&UnityEngine::Rendering::CommandBuffer::DrawRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shaderPass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "DrawRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, material, submeshIndex, shaderPass});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::DrawRenderer
// Il2CppName: DrawRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Renderer*, ::UnityEngine::Material*, int)>(&UnityEngine::Rendering::CommandBuffer::DrawRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "DrawRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, material, submeshIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::DrawRenderer
// Il2CppName: DrawRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Renderer*, ::UnityEngine::Material*)>(&UnityEngine::Rendering::CommandBuffer::DrawRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "DrawRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, material});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh_Injected
// Il2CppName: Internal_DrawMesh_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(::UnityEngine::Mesh*, ByRef<::UnityEngine::Matrix4x4>, ::UnityEngine::Material*, int, int, ::UnityEngine::MaterialPropertyBlock*)>(&UnityEngine::Rendering::CommandBuffer::Internal_DrawMesh_Injected)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* submeshIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shaderPass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "Internal_DrawMesh_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, matrix, material, submeshIndex, shaderPass, properties});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::ClearRenderTarget_Injected
// Il2CppName: ClearRenderTarget_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(bool, bool, ByRef<::UnityEngine::Color>, float)>(&UnityEngine::Rendering::CommandBuffer::ClearRenderTarget_Injected)> {
  static const MethodInfo* get() {
    static auto* clearDepth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* clearColor = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* backgroundColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "ClearRenderTarget_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearDepth, clearColor, backgroundColor, depth});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::SetRenderTargetColorDepth_Internal_Injected
// Il2CppName: SetRenderTargetColorDepth_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)(ByRef<::UnityEngine::Rendering::RenderTargetIdentifier>, ByRef<::UnityEngine::Rendering::RenderTargetIdentifier>, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction, ::UnityEngine::Rendering::RenderBufferLoadAction, ::UnityEngine::Rendering::RenderBufferStoreAction)>(&UnityEngine::Rendering::CommandBuffer::SetRenderTargetColorDepth_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->this_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderTargetIdentifier")->this_arg;
    static auto* colorLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* colorStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    static auto* depthLoadAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferLoadAction")->byval_arg;
    static auto* depthStoreAction = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "RenderBufferStoreAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "SetRenderTargetColorDepth_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, depth, colorLoadAction, colorStoreAction, depthLoadAction, depthStoreAction});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rendering::CommandBuffer::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rendering::CommandBuffer::*)()>(&UnityEngine::Rendering::CommandBuffer::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::CommandBuffer*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
