// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlacedBrickRendererManagerTwo
  class PlacedBrickRendererManagerTwo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlacedBrickRendererManagerTwo);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlacedBrickRendererManagerTwo*, "", "PlacedBrickRendererManagerTwo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: PlacedBrickRendererManagerTwo
  // [TokenAttribute] Offset: FFFFFFFF
  class PlacedBrickRendererManagerTwo : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue
    class MeshRendererQueue;
    // Nested type: ::GlobalNamespace::PlacedBrickRendererManagerTwo::RendererBufferRecycler
    class RendererBufferRecycler;
    // Nested type: ::GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup
    class RenderQueueGroup;
    public:
    // public UnityEngine.Material brickMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* brickMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private PlacedBrickRendererManagerTwo/RendererBufferRecycler _rendererBufferRecycler
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PlacedBrickRendererManagerTwo::RendererBufferRecycler* rendererBufferRecycler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlacedBrickRendererManagerTwo::RendererBufferRecycler*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Mesh,PlacedBrickRendererManagerTwo/MeshRendererQueue> _meshToRendererQueue
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, ::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*>* meshToRendererQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, ::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,PlacedBrickRendererManagerTwo/MeshRendererQueue> _objectHashCodesToRendererQueues
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*>* objectHashCodesToRendererQueues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<PlacedBrickRendererManagerTwo/MeshRendererQueue,System.Collections.Generic.Dictionary`2<System.Int32,System.Boolean>> _objectsToBeRemoved
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*, ::System::Collections::Generic::Dictionary_2<int, bool>*>* objectsToBeRemoved;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*, ::System::Collections::Generic::Dictionary_2<int, bool>*>*) == 0x8);
    // private readonly UnityEngine.Vector3 _brickScale
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 brickScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean rendering
    // Size: 0x1
    // Offset: 0x4C
    bool rendering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private PlacedBrickRendererManagerTwo _instance
    static ::GlobalNamespace::PlacedBrickRendererManagerTwo* _get__instance();
    // Set static field: static private PlacedBrickRendererManagerTwo _instance
    static void _set__instance(::GlobalNamespace::PlacedBrickRendererManagerTwo* value);
    // Get static field: static private readonly System.Int32 ColorKey
    static int _get_ColorKey();
    // Set static field: static private readonly System.Int32 ColorKey
    static void _set_ColorKey(int value);
    // static field const value: static private System.Int32 MaximumBatchSize
    static constexpr const int MaximumBatchSize = 1023;
    // Get static field: static private System.Int32 MaximumBatchSize
    static int _get_MaximumBatchSize();
    // Set static field: static private System.Int32 MaximumBatchSize
    static void _set_MaximumBatchSize(int value);
    // Get instance field reference: public UnityEngine.Material brickMaterial
    [[deprecated]] ::UnityEngine::Material*& dyn_brickMaterial();
    // Get instance field reference: private PlacedBrickRendererManagerTwo/RendererBufferRecycler _rendererBufferRecycler
    [[deprecated]] ::GlobalNamespace::PlacedBrickRendererManagerTwo::RendererBufferRecycler*& dyn__rendererBufferRecycler();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Mesh,PlacedBrickRendererManagerTwo/MeshRendererQueue> _meshToRendererQueue
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, ::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*>*& dyn__meshToRendererQueue();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,PlacedBrickRendererManagerTwo/MeshRendererQueue> _objectHashCodesToRendererQueues
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*>*& dyn__objectHashCodesToRendererQueues();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<PlacedBrickRendererManagerTwo/MeshRendererQueue,System.Collections.Generic.Dictionary`2<System.Int32,System.Boolean>> _objectsToBeRemoved
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::PlacedBrickRendererManagerTwo::MeshRendererQueue*, ::System::Collections::Generic::Dictionary_2<int, bool>*>*& dyn__objectsToBeRemoved();
    // Get instance field reference: private readonly UnityEngine.Vector3 _brickScale
    [[deprecated]] ::UnityEngine::Vector3& dyn__brickScale();
    // Get instance field reference: public System.Boolean rendering
    [[deprecated]] bool& dyn_rendering();
    // static public PlacedBrickRendererManagerTwo GetInstance()
    // Offset: 0x678C30
    static ::GlobalNamespace::PlacedBrickRendererManagerTwo* GetInstance();
    // public System.Void AddBrick(System.Int32 objectInstanceId, UnityEngine.Transform t, UnityEngine.Color color, UnityEngine.Mesh mesh)
    // Offset: 0x6787C0
    void AddBrick(int objectInstanceId, ::UnityEngine::Transform* t, ::UnityEngine::Color color, ::UnityEngine::Mesh* mesh);
    // public System.Void RemoveBrick(System.Int32 objectInstanceId)
    // Offset: 0x678F10
    void RemoveBrick(int objectInstanceId);
    // public System.Void RemoveBrickSynchronously(System.Int32 objectInstanceId)
    // Offset: 0x678DB0
    void RemoveBrickSynchronously(int objectInstanceId);
    // public System.Boolean HasObjectWithInstanceId(System.Int32 instanceId)
    // Offset: 0x678D50
    bool HasObjectWithInstanceId(int instanceId);
    // private System.Void Update()
    // Offset: 0x679090
    void Update();
    // public System.Void .ctor()
    // Offset: 0x6792E0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlacedBrickRendererManagerTwo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlacedBrickRendererManagerTwo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlacedBrickRendererManagerTwo*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x679290
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // PlacedBrickRendererManagerTwo
  #pragma pack(pop)
  static check_size<sizeof(PlacedBrickRendererManagerTwo), 76 + sizeof(bool)> __GlobalNamespace_PlacedBrickRendererManagerTwoSizeCheck;
  static_assert(sizeof(PlacedBrickRendererManagerTwo) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlacedBrickRendererManagerTwo* (*)()>(&GlobalNamespace::PlacedBrickRendererManagerTwo::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::AddBrick
// Il2CppName: AddBrick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlacedBrickRendererManagerTwo::*)(int, ::UnityEngine::Transform*, ::UnityEngine::Color, ::UnityEngine::Mesh*)>(&GlobalNamespace::PlacedBrickRendererManagerTwo::AddBrick)> {
  static const MethodInfo* get() {
    static auto* objectInstanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo*), "AddBrick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectInstanceId, t, color, mesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::RemoveBrick
// Il2CppName: RemoveBrick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlacedBrickRendererManagerTwo::*)(int)>(&GlobalNamespace::PlacedBrickRendererManagerTwo::RemoveBrick)> {
  static const MethodInfo* get() {
    static auto* objectInstanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo*), "RemoveBrick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectInstanceId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::RemoveBrickSynchronously
// Il2CppName: RemoveBrickSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlacedBrickRendererManagerTwo::*)(int)>(&GlobalNamespace::PlacedBrickRendererManagerTwo::RemoveBrickSynchronously)> {
  static const MethodInfo* get() {
    static auto* objectInstanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo*), "RemoveBrickSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectInstanceId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::HasObjectWithInstanceId
// Il2CppName: HasObjectWithInstanceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlacedBrickRendererManagerTwo::*)(int)>(&GlobalNamespace::PlacedBrickRendererManagerTwo::HasObjectWithInstanceId)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo*), "HasObjectWithInstanceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlacedBrickRendererManagerTwo::*)()>(&GlobalNamespace::PlacedBrickRendererManagerTwo::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::PlacedBrickRendererManagerTwo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
