// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: SnapTurnProvider
  class SnapTurnProvider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SmoothTurn
  class SmoothTurn;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RotationSettingHandler
  class RotationSettingHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RotationSettingHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RotationSettingHandler*, "", "RotationSettingHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: RotationSettingHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class RotationSettingHandler : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider _snapTurn
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider* snapTurn;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*) == 0x8);
    // private SmoothTurn _smoothTurn
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::SmoothTurn* smoothTurn;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SmoothTurn*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider _snapTurn
    ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*& dyn__snapTurn();
    // Get instance field reference: private SmoothTurn _smoothTurn
    ::GlobalNamespace::SmoothTurn*& dyn__smoothTurn();
    // private System.Void Awake()
    // Offset: 0x10B7910
    void Awake();
    // public System.Void OnRotationSettingUpdated(System.Boolean smoothRotationEnabled)
    // Offset: 0x10B7980
    void OnRotationSettingUpdated(bool smoothRotationEnabled);
    // public System.Void OnRotationSpeedUpdated(System.Single rotationSpeed)
    // Offset: 0x10B79CC
    void OnRotationSpeedUpdated(float rotationSpeed);
    // public System.Void .ctor()
    // Offset: 0x10B7A40
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationSettingHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSettingHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationSettingHandler*, creationType>()));
    }
  }; // RotationSettingHandler
  #pragma pack(pop)
  static check_size<sizeof(RotationSettingHandler), 32 + sizeof(::GlobalNamespace::SmoothTurn*)> __GlobalNamespace_RotationSettingHandlerSizeCheck;
  static_assert(sizeof(RotationSettingHandler) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RotationSettingHandler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotationSettingHandler::*)()>(&GlobalNamespace::RotationSettingHandler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotationSettingHandler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotationSettingHandler::OnRotationSettingUpdated
// Il2CppName: OnRotationSettingUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotationSettingHandler::*)(bool)>(&GlobalNamespace::RotationSettingHandler::OnRotationSettingUpdated)> {
  static const MethodInfo* get() {
    static auto* smoothRotationEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotationSettingHandler*), "OnRotationSettingUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{smoothRotationEnabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotationSettingHandler::OnRotationSpeedUpdated
// Il2CppName: OnRotationSpeedUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotationSettingHandler::*)(float)>(&GlobalNamespace::RotationSettingHandler::OnRotationSpeedUpdated)> {
  static const MethodInfo* get() {
    static auto* rotationSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotationSettingHandler*), "OnRotationSpeedUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotationSpeed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotationSettingHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
