// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UIButtonEvents
  class UIButtonEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UIButtonEvents);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UIButtonEvents*, "", "UIButtonEvents");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: UIButtonEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class UIButtonEvents : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.Color textBaseColor
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color textBaseColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color textHoveredColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color textHoveredColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color textSelectedColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color textSelectedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [FormerlySerializedAsAttribute] Offset: 0x72A70C
    // public UnityEngine.Color imageBaseColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color imageBaseColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [FormerlySerializedAsAttribute] Offset: 0x72A744
    // public UnityEngine.Color imageHoveredColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color imageHoveredColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color imageSelectedColor
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color imageSelectedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public TMPro.TextMeshProUGUI text
    // Size: 0x8
    // Offset: 0x78
    ::TMPro::TextMeshProUGUI* text;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public UnityEngine.UI.Image image
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UI::Image* image;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public System.Single hoverGrowFactor
    // Size: 0x4
    // Offset: 0x88
    float hoverGrowFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _initialButtonScale
    // Size: 0xC
    // Offset: 0x8C
    ::UnityEngine::Vector3 initialButtonScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single animationSpeed
    // Size: 0x4
    // Offset: 0x98
    float animationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _animationIndex
    // Size: 0x4
    // Offset: 0x9C
    float animationIndex;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _hovered
    // Size: 0x1
    // Offset: 0xA0
    bool hovered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _selected
    // Size: 0x1
    // Offset: 0xA1
    bool selected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: selected and: defaultButtonImageColor
    char __padding13[0x2] = {};
    // private UnityEngine.Color _defaultButtonImageColor
    // Size: 0x10
    // Offset: 0xA4
    ::UnityEngine::Color defaultButtonImageColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectedButtonImageColor
    // Size: 0x10
    // Offset: 0xB4
    ::UnityEngine::Color selectedButtonImageColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _hoveredButtonImageColor
    // Size: 0x10
    // Offset: 0xC4
    ::UnityEngine::Color hoveredButtonImageColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: hoveredButtonImageColor and: button
    char __padding16[0x4] = {};
    // private UnityEngine.UI.Button _button
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Color textBaseColor
    ::UnityEngine::Color& dyn_textBaseColor();
    // Get instance field reference: public UnityEngine.Color textHoveredColor
    ::UnityEngine::Color& dyn_textHoveredColor();
    // Get instance field reference: public UnityEngine.Color textSelectedColor
    ::UnityEngine::Color& dyn_textSelectedColor();
    // Get instance field reference: public UnityEngine.Color imageBaseColor
    ::UnityEngine::Color& dyn_imageBaseColor();
    // Get instance field reference: public UnityEngine.Color imageHoveredColor
    ::UnityEngine::Color& dyn_imageHoveredColor();
    // Get instance field reference: public UnityEngine.Color imageSelectedColor
    ::UnityEngine::Color& dyn_imageSelectedColor();
    // Get instance field reference: public TMPro.TextMeshProUGUI text
    ::TMPro::TextMeshProUGUI*& dyn_text();
    // Get instance field reference: public UnityEngine.UI.Image image
    ::UnityEngine::UI::Image*& dyn_image();
    // Get instance field reference: public System.Single hoverGrowFactor
    float& dyn_hoverGrowFactor();
    // Get instance field reference: private UnityEngine.Vector3 _initialButtonScale
    ::UnityEngine::Vector3& dyn__initialButtonScale();
    // Get instance field reference: public System.Single animationSpeed
    float& dyn_animationSpeed();
    // Get instance field reference: private System.Single _animationIndex
    float& dyn__animationIndex();
    // Get instance field reference: private System.Boolean _hovered
    bool& dyn__hovered();
    // Get instance field reference: private System.Boolean _selected
    bool& dyn__selected();
    // Get instance field reference: private UnityEngine.Color _defaultButtonImageColor
    ::UnityEngine::Color& dyn__defaultButtonImageColor();
    // Get instance field reference: private UnityEngine.Color _selectedButtonImageColor
    ::UnityEngine::Color& dyn__selectedButtonImageColor();
    // Get instance field reference: private UnityEngine.Color _hoveredButtonImageColor
    ::UnityEngine::Color& dyn__hoveredButtonImageColor();
    // Get instance field reference: private UnityEngine.UI.Button _button
    ::UnityEngine::UI::Button*& dyn__button();
    // private System.Void Awake()
    // Offset: 0x11480C4
    void Awake();
    // private System.Void Update()
    // Offset: 0x114820C
    void Update();
    // public System.Void SetSelected(System.Boolean selected)
    // Offset: 0x1148534
    void SetSelected(bool selected);
    // private System.Void RunAnimations()
    // Offset: 0x114834C
    void RunAnimations();
    // private System.Void OnDisable()
    // Offset: 0x11486D0
    void OnDisable();
    // public System.Void OnPointerEnter(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x11486DC
    void OnPointerEnter(::UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnPointerExit(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x11486E8
    void OnPointerExit(::UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void .ctor()
    // Offset: 0x11486F0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIButtonEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIButtonEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIButtonEvents*, creationType>()));
    }
  }; // UIButtonEvents
  #pragma pack(pop)
  static check_size<sizeof(UIButtonEvents), 216 + sizeof(::UnityEngine::UI::Button*)> __GlobalNamespace_UIButtonEventsSizeCheck;
  static_assert(sizeof(UIButtonEvents) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIButtonEvents::*)()>(&GlobalNamespace::UIButtonEvents::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIButtonEvents*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIButtonEvents::*)()>(&GlobalNamespace::UIButtonEvents::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIButtonEvents*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::SetSelected
// Il2CppName: SetSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIButtonEvents::*)(bool)>(&GlobalNamespace::UIButtonEvents::SetSelected)> {
  static const MethodInfo* get() {
    static auto* selected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIButtonEvents*), "SetSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selected});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::RunAnimations
// Il2CppName: RunAnimations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIButtonEvents::*)()>(&GlobalNamespace::UIButtonEvents::RunAnimations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIButtonEvents*), "RunAnimations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIButtonEvents::*)()>(&GlobalNamespace::UIButtonEvents::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIButtonEvents*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::OnPointerEnter
// Il2CppName: OnPointerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIButtonEvents::*)(::UnityEngine::EventSystems::BaseEventData*)>(&GlobalNamespace::UIButtonEvents::OnPointerEnter)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIButtonEvents*), "OnPointerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::OnPointerExit
// Il2CppName: OnPointerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UIButtonEvents::*)(::UnityEngine::EventSystems::BaseEventData*)>(&GlobalNamespace::UIButtonEvents::OnPointerExit)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UIButtonEvents*), "OnPointerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UIButtonEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
