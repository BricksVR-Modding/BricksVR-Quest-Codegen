// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Sigtrap::VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Forward declaring type: Angle
  struct Angle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Sigtrap::VrTunnellingPro::Angle, "Sigtrap.VrTunnellingPro", "Angle");
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Sigtrap.VrTunnellingPro.Angle
  // [TokenAttribute] Offset: FFFFFFFF
  struct Angle/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Sigtrap::VrTunnellingPro::Angle::AngleType
    struct AngleType;
    public:
    // private System.Single _angle
    // Size: 0x4
    // Offset: 0x0
    float angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Angle
    constexpr Angle(float angle_ = {}) noexcept : angle{angle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return angle;
    }
    // Get instance field reference: private System.Single _angle
    [[deprecated("Use field access instead!")]] float& dyn__angle();
    // public System.Single get_angle()
    // Offset: 0x1DD610
    float get_angle();
    // public System.Single get_acute()
    // Offset: 0x6C4E80
    float get_acute();
    // public System.Single get_reflex()
    // Offset: 0x6C4F00
    float get_reflex();
    // public System.Void .ctor(System.Single a)
    // Offset: 0x6C4E10
    // ABORTED: conflicts with another method.  Angle(float a);
    // public System.Void .ctor(Sigtrap.VrTunnellingPro.Angle a)
    // Offset: 0x6C4DA0
    // ABORTED: is copy constructor.  Angle(::Sigtrap::VrTunnellingPro::Angle a);
    // public System.Single ToFloat(Sigtrap.VrTunnellingPro.Angle/Sigtrap.VrTunnellingPro.AngleType type)
    // Offset: 0x6C4D30
    float ToFloat(::Sigtrap::VrTunnellingPro::Angle::AngleType type);
    // static public System.Single ToAngle(System.Single a, Sigtrap.VrTunnellingPro.Angle/Sigtrap.VrTunnellingPro.AngleType type)
    // Offset: 0x6C4C80
    static float ToAngle(float a, ::Sigtrap::VrTunnellingPro::Angle::AngleType type);
    // public override System.String ToString()
    // Offset: 0x6C4D40
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x6C4BB0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x6C4C70
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Sigtrap.VrTunnellingPro.Angle
  #pragma pack(pop)
  static check_size<sizeof(Angle), 0 + sizeof(float)> __Sigtrap_VrTunnellingPro_AngleSizeCheck;
  static_assert(sizeof(Angle) == 0x4);
  // static public System.Boolean op_LessThan(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C54E0
  bool operator <(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_GreaterThan(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5330
  bool operator >(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_LessThanOrEqual(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C54D0
  bool operator <=(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_GreaterThanOrEqual(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5220
  bool operator >=(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Addition(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5050
  ::Sigtrap::VrTunnellingPro::Angle operator+(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Subtraction(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5780
  ::Sigtrap::VrTunnellingPro::Angle operator-(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_Equality(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5200
  bool operator ==(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_Inequality(Sigtrap.VrTunnellingPro.Angle a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5430
  bool operator !=(const ::Sigtrap::VrTunnellingPro::Angle& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_LessThan(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C54F0
  bool operator <(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public System.Boolean op_GreaterThan(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C5340
  bool operator >(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public System.Boolean op_LessThanOrEqual(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C5450
  bool operator <=(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public System.Boolean op_GreaterThanOrEqual(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C52B0
  bool operator >=(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Addition(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C50C0
  ::Sigtrap::VrTunnellingPro::Angle operator+(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Subtraction(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C55E0
  ::Sigtrap::VrTunnellingPro::Angle operator-(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Multiply(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C5570
  ::Sigtrap::VrTunnellingPro::Angle operator*(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Division(Sigtrap.VrTunnellingPro.Angle a, System.Single b)
  // Offset: 0x6C5190
  ::Sigtrap::VrTunnellingPro::Angle operator/(const ::Sigtrap::VrTunnellingPro::Angle& a, const float& b);
  // static public System.Boolean op_LessThan(System.Single a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5230
  bool operator <(const float& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_GreaterThan(System.Single a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5230
  bool operator >(const float& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_LessThanOrEqual(System.Single a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5230
  bool operator <=(const float& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public System.Boolean op_GreaterThanOrEqual(System.Single a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C5230
  bool operator >=(const float& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Addition(System.Single a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C4F80
  ::Sigtrap::VrTunnellingPro::Angle operator+(const float& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
  // static public Sigtrap.VrTunnellingPro.Angle op_Subtraction(System.Single a, Sigtrap.VrTunnellingPro.Angle b)
  // Offset: 0x6C56B0
  ::Sigtrap::VrTunnellingPro::Angle operator-(const float& a, const ::Sigtrap::VrTunnellingPro::Angle& b);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::get_angle
// Il2CppName: get_angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::Angle::*)()>(&Sigtrap::VrTunnellingPro::Angle::get_angle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "get_angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::get_acute
// Il2CppName: get_acute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::Angle::*)()>(&Sigtrap::VrTunnellingPro::Angle::get_acute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "get_acute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::get_reflex
// Il2CppName: get_reflex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::Angle::*)()>(&Sigtrap::VrTunnellingPro::Angle::get_reflex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "get_reflex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::Angle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::Angle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::ToFloat
// Il2CppName: ToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::Angle::*)(::Sigtrap::VrTunnellingPro::Angle::AngleType)>(&Sigtrap::VrTunnellingPro::Angle::ToFloat)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Sigtrap.VrTunnellingPro", "Angle/AngleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "ToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::ToAngle
// Il2CppName: ToAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, ::Sigtrap::VrTunnellingPro::Angle::AngleType)>(&Sigtrap::VrTunnellingPro::Angle::ToAngle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("Sigtrap.VrTunnellingPro", "Angle/AngleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "ToAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, type});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Sigtrap::VrTunnellingPro::Angle::*)()>(&Sigtrap::VrTunnellingPro::Angle::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::Angle::*)(::Il2CppObject*)>(&Sigtrap::VrTunnellingPro::Angle::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Sigtrap::VrTunnellingPro::Angle::*)()>(&Sigtrap::VrTunnellingPro::Angle::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::Angle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator <=
// Il2CppName: op_LessThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator >=
// Il2CppName: op_GreaterThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator <=
// Il2CppName: op_LessThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator >=
// Il2CppName: op_GreaterThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator/
// Il2CppName: op_Division
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator <=
// Il2CppName: op_LessThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator >=
// Il2CppName: op_GreaterThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::Angle::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
