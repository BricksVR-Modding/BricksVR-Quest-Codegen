// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeModel
#include "Normal/Realtime/RealtimeModel.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: UnreliableProperty`1<T>
  template<typename T>
  class UnreliableProperty_1;
  // Forward declaring type: ReliableProperty`1<T>
  template<typename T>
  class ReliableProperty_1;
  // Skipping declaration: PhysicsState because it is already included!
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: StreamContext because it is already included!
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeTransformModel
  class RealtimeTransformModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeTransformModel);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeTransformModel*, "Normal.Realtime", "RealtimeTransformModel");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x138
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeTransformModel
  // [TokenAttribute] Offset: FFFFFFFF
  // [RealtimeModelAttribute] Offset: 715B9C
  class RealtimeTransformModel : public ::Normal::Realtime::RealtimeModel {
    public:
    // Nested type: ::Normal::Realtime::RealtimeTransformModel::PhysicsState
    struct PhysicsState;
    // Nested type: ::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler
    class TransformWriteHandler;
    // Nested type: ::Normal::Realtime::RealtimeTransformModel::TransformReadHandler
    class TransformReadHandler;
    // Nested type: ::Normal::Realtime::RealtimeTransformModel::PropertyID
    struct PropertyID;
    // Nested type: ::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet
    class PropertyChangeSet;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct PhysicsState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PhysicsState
      constexpr PhysicsState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState Default
      static constexpr const int Default = 0;
      // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState Default
      static ::Normal::Realtime::RealtimeTransformModel::PhysicsState _get_Default();
      // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState Default
      static void _set_Default(::Normal::Realtime::RealtimeTransformModel::PhysicsState value);
      // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState ShouldExtrapolate
      static constexpr const int ShouldExtrapolate = 1;
      // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState ShouldExtrapolate
      static ::Normal::Realtime::RealtimeTransformModel::PhysicsState _get_ShouldExtrapolate();
      // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState ShouldExtrapolate
      static void _set_ShouldExtrapolate(::Normal::Realtime::RealtimeTransformModel::PhysicsState value);
      // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState UseGravity
      static constexpr const int UseGravity = 2;
      // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState UseGravity
      static ::Normal::Realtime::RealtimeTransformModel::PhysicsState _get_UseGravity();
      // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState UseGravity
      static void _set_UseGravity(::Normal::Realtime::RealtimeTransformModel::PhysicsState value);
      // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState IsKinematic
      static constexpr const int IsKinematic = 4;
      // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState IsKinematic
      static ::Normal::Realtime::RealtimeTransformModel::PhysicsState _get_IsKinematic();
      // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState IsKinematic
      static void _set_IsKinematic(::Normal::Realtime::RealtimeTransformModel::PhysicsState value);
      // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState IsSleeping
      static constexpr const int IsSleeping = 8;
      // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState IsSleeping
      static ::Normal::Realtime::RealtimeTransformModel::PhysicsState _get_IsSleeping();
      // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState IsSleeping
      static void _set_IsSleeping(::Normal::Realtime::RealtimeTransformModel::PhysicsState value);
      // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState MaintainOwnershipWhileSleeping
      static constexpr const int MaintainOwnershipWhileSleeping = 16;
      // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState MaintainOwnershipWhileSleeping
      static ::Normal::Realtime::RealtimeTransformModel::PhysicsState _get_MaintainOwnershipWhileSleeping();
      // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState MaintainOwnershipWhileSleeping
      static void _set_MaintainOwnershipWhileSleeping(::Normal::Realtime::RealtimeTransformModel::PhysicsState value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState
    #pragma pack(pop)
    static check_size<sizeof(RealtimeTransformModel::PhysicsState), 0 + sizeof(int)> __Normal_Realtime_RealtimeTransformModel_PhysicsStateSizeCheck;
    static_assert(sizeof(RealtimeTransformModel::PhysicsState) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // [RealtimePropertyAttribute] Offset: 0x716228
    // private UnityEngine.Vector3 _position
    // Size: 0xC
    // Offset: 0x8C
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [RealtimePropertyAttribute] Offset: 0x716244
    // private UnityEngine.Quaternion _rotation
    // Size: 0x10
    // Offset: 0x98
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // [RealtimePropertyAttribute] Offset: 0x716260
    // private UnityEngine.Vector3 _scale
    // Size: 0xC
    // Offset: 0xA8
    ::UnityEngine::Vector3 scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [RealtimePropertyAttribute] Offset: 0x71627C
    // private UnityEngine.Vector3 _velocity
    // Size: 0xC
    // Offset: 0xB4
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [RealtimePropertyAttribute] Offset: 0x716298
    // private UnityEngine.Vector3 _angularVelocity
    // Size: 0xC
    // Offset: 0xC0
    ::UnityEngine::Vector3 angularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [RealtimePropertyAttribute] Offset: 0x7162B4
    // private Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState _physicsState
    // Size: 0x4
    // Offset: 0xCC
    ::Normal::Realtime::RealtimeTransformModel::PhysicsState physicsState;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeTransformModel::PhysicsState) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0x7162D0
    // private System.Single _physicsBodyTimeOffset
    // Size: 0x4
    // Offset: 0xD0
    float physicsBodyTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0x7162EC
    // private System.Single _physicsStateTimeOffset
    // Size: 0x4
    // Offset: 0xD4
    float physicsStateTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformWriteHandler onWillWrite
    // Size: 0x8
    // Offset: 0xD8
    ::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler* onWillWrite;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler*) == 0x8);
    // private Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformReadHandler onDidRead
    // Size: 0x8
    // Offset: 0xE0
    ::Normal::Realtime::RealtimeTransformModel::TransformReadHandler* onDidRead;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeTransformModel::TransformReadHandler*) == 0x8);
    // private System.Double <timestamp>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    double timestamp;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _positionProperty
    // Size: 0x8
    // Offset: 0xF0
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>* positionProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<UnityEngine.Quaternion> _rotationProperty
    // Size: 0x8
    // Offset: 0xF8
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Quaternion>* rotationProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Quaternion>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _scaleProperty
    // Size: 0x8
    // Offset: 0x100
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>* scaleProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _velocityProperty
    // Size: 0x8
    // Offset: 0x108
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>* velocityProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _angularVelocityProperty
    // Size: 0x8
    // Offset: 0x110
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>* angularVelocityProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.UInt32> _physicsStateProperty
    // Size: 0x8
    // Offset: 0x118
    ::Normal::Realtime::ReliableProperty_1<uint>* physicsStateProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<uint>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<System.Single> _physicsBodyTimeOffsetProperty
    // Size: 0x8
    // Offset: 0x120
    ::Normal::Realtime::UnreliableProperty_1<float>* physicsBodyTimeOffsetProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<float>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Single> _physicsStateTimeOffsetProperty
    // Size: 0x8
    // Offset: 0x128
    ::Normal::Realtime::ReliableProperty_1<float>* physicsStateTimeOffsetProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<float>*) == 0x8);
    // private readonly Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyChangeSet _propertyChangeSet
    // Size: 0x8
    // Offset: 0x130
    ::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet* propertyChangeSet;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet*) == 0x8);
    public:
    // static field const value: static private System.Single EPSILON_POSITION
    static constexpr const float EPSILON_POSITION = 1e-10;
    // Get static field: static private System.Single EPSILON_POSITION
    static float _get_EPSILON_POSITION();
    // Set static field: static private System.Single EPSILON_POSITION
    static void _set_EPSILON_POSITION(float value);
    // static field const value: static private System.Single EPSILON_ROTATION
    static constexpr const float EPSILON_ROTATION = 1e-06;
    // Get static field: static private System.Single EPSILON_ROTATION
    static float _get_EPSILON_ROTATION();
    // Set static field: static private System.Single EPSILON_ROTATION
    static void _set_EPSILON_ROTATION(float value);
    // static field const value: static private System.Single EPSILON_SCALE
    static constexpr const float EPSILON_SCALE = 1e-10;
    // Get static field: static private System.Single EPSILON_SCALE
    static float _get_EPSILON_SCALE();
    // Set static field: static private System.Single EPSILON_SCALE
    static void _set_EPSILON_SCALE(float value);
    // static field const value: static private System.Single EPSILON_VELOCITY
    static constexpr const float EPSILON_VELOCITY = 1e-10;
    // Get static field: static private System.Single EPSILON_VELOCITY
    static float _get_EPSILON_VELOCITY();
    // Set static field: static private System.Single EPSILON_VELOCITY
    static void _set_EPSILON_VELOCITY(float value);
    // static field const value: static private System.Single EPSILON_ANGULAR_VELOCITY
    static constexpr const float EPSILON_ANGULAR_VELOCITY = 1e-10;
    // Get static field: static private System.Single EPSILON_ANGULAR_VELOCITY
    static float _get_EPSILON_ANGULAR_VELOCITY();
    // Set static field: static private System.Single EPSILON_ANGULAR_VELOCITY
    static void _set_EPSILON_ANGULAR_VELOCITY(float value);
    // Get instance field reference: private UnityEngine.Vector3 _position
    ::UnityEngine::Vector3& dyn__position();
    // Get instance field reference: private UnityEngine.Quaternion _rotation
    ::UnityEngine::Quaternion& dyn__rotation();
    // Get instance field reference: private UnityEngine.Vector3 _scale
    ::UnityEngine::Vector3& dyn__scale();
    // Get instance field reference: private UnityEngine.Vector3 _velocity
    ::UnityEngine::Vector3& dyn__velocity();
    // Get instance field reference: private UnityEngine.Vector3 _angularVelocity
    ::UnityEngine::Vector3& dyn__angularVelocity();
    // Get instance field reference: private Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState _physicsState
    ::Normal::Realtime::RealtimeTransformModel::PhysicsState& dyn__physicsState();
    // Get instance field reference: private System.Single _physicsBodyTimeOffset
    float& dyn__physicsBodyTimeOffset();
    // Get instance field reference: private System.Single _physicsStateTimeOffset
    float& dyn__physicsStateTimeOffset();
    // Get instance field reference: private Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformWriteHandler onWillWrite
    ::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler*& dyn_onWillWrite();
    // Get instance field reference: private Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformReadHandler onDidRead
    ::Normal::Realtime::RealtimeTransformModel::TransformReadHandler*& dyn_onDidRead();
    // Get instance field reference: private System.Double <timestamp>k__BackingField
    double& dyn_$timestamp$k__BackingField();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _positionProperty
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*& dyn__positionProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<UnityEngine.Quaternion> _rotationProperty
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Quaternion>*& dyn__rotationProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _scaleProperty
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*& dyn__scaleProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _velocityProperty
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*& dyn__velocityProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<UnityEngine.Vector3> _angularVelocityProperty
    ::Normal::Realtime::UnreliableProperty_1<::UnityEngine::Vector3>*& dyn__angularVelocityProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.UInt32> _physicsStateProperty
    ::Normal::Realtime::ReliableProperty_1<uint>*& dyn__physicsStateProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<System.Single> _physicsBodyTimeOffsetProperty
    ::Normal::Realtime::UnreliableProperty_1<float>*& dyn__physicsBodyTimeOffsetProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Single> _physicsStateTimeOffsetProperty
    ::Normal::Realtime::ReliableProperty_1<float>*& dyn__physicsStateTimeOffsetProperty();
    // Get instance field reference: private readonly Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyChangeSet _propertyChangeSet
    ::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet*& dyn__propertyChangeSet();
    // public System.Boolean get_useGravity()
    // Offset: 0xAFAC88
    bool get_useGravity();
    // public System.Void set_useGravity(System.Boolean value)
    // Offset: 0xAFACA0
    void set_useGravity(bool value);
    // public System.Boolean get_isKinematic()
    // Offset: 0xAF80FC
    bool get_isKinematic();
    // public System.Void set_isKinematic(System.Boolean value)
    // Offset: 0xAFACEC
    void set_isKinematic(bool value);
    // public System.Boolean get_isSleeping()
    // Offset: 0xAFAD38
    bool get_isSleeping();
    // public System.Void set_isSleeping(System.Boolean value)
    // Offset: 0xAFAD50
    void set_isSleeping(bool value);
    // public System.Boolean get_maintainOwnershipWhileSleeping()
    // Offset: 0xAFAD9C
    bool get_maintainOwnershipWhileSleeping();
    // public System.Void set_maintainOwnershipWhileSleeping(System.Boolean value)
    // Offset: 0xAFADB4
    void set_maintainOwnershipWhileSleeping(bool value);
    // public System.Double get_timestamp()
    // Offset: 0xAFB5AC
    double get_timestamp();
    // private System.Void set_timestamp(System.Double value)
    // Offset: 0xAFB5B4
    void set_timestamp(double value);
    // public System.Boolean get_hasTransformChanges()
    // Offset: 0xAFB5BC
    bool get_hasTransformChanges();
    // public System.Boolean get_hasPhysicsBodyChanges()
    // Offset: 0xAFB63C
    bool get_hasPhysicsBodyChanges();
    // public System.Boolean get_hasPhysicsStateChanges()
    // Offset: 0xAFB6B8
    bool get_hasPhysicsStateChanges();
    // public UnityEngine.Vector3 get_position()
    // Offset: 0xAF9378
    ::UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0xAFA404
    void set_position(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0xAF93CC
    ::UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0xAFA500
    void set_rotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_scale()
    // Offset: 0xAF9420
    ::UnityEngine::Vector3 get_scale();
    // public System.Void set_scale(UnityEngine.Vector3 value)
    // Offset: 0xAFA614
    void set_scale(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0xAFA7D0
    ::UnityEngine::Vector3 get_velocity();
    // public System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0xAFA824
    void set_velocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0xAFA9E0
    ::UnityEngine::Vector3 get_angularVelocity();
    // public System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0xAFAA34
    void set_angularVelocity(::UnityEngine::Vector3 value);
    // public System.Single get_physicsBodyTimeOffset()
    // Offset: 0xAFB708
    float get_physicsBodyTimeOffset();
    // public System.Void set_physicsBodyTimeOffset(System.Single value)
    // Offset: 0xAFB758
    void set_physicsBodyTimeOffset(float value);
    // public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState get_physicsState()
    // Offset: 0xAFAB58
    ::Normal::Realtime::RealtimeTransformModel::PhysicsState get_physicsState();
    // public System.Void set_physicsState(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState value)
    // Offset: 0xAFABF4
    void set_physicsState(::Normal::Realtime::RealtimeTransformModel::PhysicsState value);
    // public System.Single get_physicsStateTimeOffset()
    // Offset: 0xAFB7EC
    float get_physicsStateTimeOffset();
    // public System.Void set_physicsStateTimeOffset(System.Single value)
    // Offset: 0xAFB83C
    void set_physicsStateTimeOffset(float value);
    // public System.Void add_onWillWrite(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformWriteHandler value)
    // Offset: 0xAF8A70
    void add_onWillWrite(::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler* value);
    // public System.Void remove_onWillWrite(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformWriteHandler value)
    // Offset: 0xAF8BC8
    void remove_onWillWrite(::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler* value);
    // public System.Void add_onDidRead(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformReadHandler value)
    // Offset: 0xAF8B24
    void add_onDidRead(::Normal::Realtime::RealtimeTransformModel::TransformReadHandler* value);
    // public System.Void remove_onDidRead(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.TransformReadHandler value)
    // Offset: 0xAF8C6C
    void remove_onDidRead(::Normal::Realtime::RealtimeTransformModel::TransformReadHandler* value);
    // static private System.Boolean IsVectorNaN(UnityEngine.Vector3 v)
    // Offset: 0xAFA230
    static bool IsVectorNaN(::UnityEngine::Vector3 v);
    // static private System.Boolean IsVectorEqual(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single epsilon)
    // Offset: 0xAFA284
    static bool IsVectorEqual(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, float epsilon);
    // static private System.Boolean IsQuaternionNaN(UnityEngine.Quaternion q)
    // Offset: 0xAFA2B0
    static bool IsQuaternionNaN(::UnityEngine::Quaternion q);
    // static private System.Boolean IsQuaternionEqual(UnityEngine.Quaternion a, UnityEngine.Quaternion b, System.Single epsilon)
    // Offset: 0xAFA324
    static bool IsQuaternionEqual(::UnityEngine::Quaternion a, ::UnityEngine::Quaternion b, float epsilon);
    // public System.Void SetSafePosition(UnityEngine.Vector3 p)
    // Offset: 0xAF958C
    void SetSafePosition(::UnityEngine::Vector3 p);
    // public System.Void SetSafeRotation(UnityEngine.Quaternion r)
    // Offset: 0xAF964C
    void SetSafeRotation(::UnityEngine::Quaternion r);
    // public System.Void SetSafeScale(UnityEngine.Vector3 s)
    // Offset: 0xAF97A0
    void SetSafeScale(::UnityEngine::Vector3 s);
    // public System.Void SetSafeVelocity(UnityEngine.Vector3 v)
    // Offset: 0xAFA710
    void SetSafeVelocity(::UnityEngine::Vector3 v);
    // public System.Void SetSafeAngularVelocity(UnityEngine.Vector3 v)
    // Offset: 0xAFA920
    void SetSafeAngularVelocity(::UnityEngine::Vector3 v);
    // private System.Boolean GetPhysicsFlag(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState flag)
    // Offset: 0xAFAB30
    bool GetPhysicsFlag(::Normal::Realtime::RealtimeTransformModel::PhysicsState flag);
    // private System.Void SetPhysicsFlag(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PhysicsState flag, System.Boolean value)
    // Offset: 0xAFABA8
    void SetPhysicsFlag(::Normal::Realtime::RealtimeTransformModel::PhysicsState flag, bool value);
    // private System.Void OnWillWrite()
    // Offset: 0xAFAE00
    void OnWillWrite();
    // private System.Void OnDidReadProperties(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyChangeSet changes)
    // Offset: 0xAFB1A8
    void OnDidReadProperties(::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet* changes);
    // private System.Void OnDidReadPropertiesWrapper()
    // Offset: 0xAFB8D0
    void OnDidReadPropertiesWrapper();
    // private System.Void UpdateBackingFields()
    // Offset: 0xAFC350
    void UpdateBackingFields();
    // public System.Void .ctor()
    // Offset: 0xAFB8E8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeTransformModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeTransformModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeTransformModel*, creationType>()));
    }
    // protected override System.Void OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    // Offset: 0xAFBBCC
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    void OnParentReplaced(::Normal::Realtime::RealtimeModel* previousParent, ::Normal::Realtime::RealtimeModel* currentParent);
    // protected override System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xAFBC3C
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Int32 RealtimeModel::WriteLength(Normal.Realtime.Serialization.StreamContext context)
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xAFBE68
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xAFC0AC
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
  }; // Normal.Realtime.RealtimeTransformModel
  #pragma pack(pop)
  static check_size<sizeof(RealtimeTransformModel), 304 + sizeof(::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet*)> __Normal_Realtime_RealtimeTransformModelSizeCheck;
  static_assert(sizeof(RealtimeTransformModel) == 0x138);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeTransformModel::PhysicsState, "Normal.Realtime", "RealtimeTransformModel/PhysicsState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_useGravity
// Il2CppName: get_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_useGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_useGravity
// Il2CppName: set_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(bool)>(&Normal::Realtime::RealtimeTransformModel::set_useGravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_isKinematic
// Il2CppName: get_isKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_isKinematic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_isKinematic
// Il2CppName: set_isKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(bool)>(&Normal::Realtime::RealtimeTransformModel::set_isKinematic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_isSleeping
// Il2CppName: get_isSleeping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_isSleeping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_isSleeping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_isSleeping
// Il2CppName: set_isSleeping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(bool)>(&Normal::Realtime::RealtimeTransformModel::set_isSleeping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_isSleeping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_maintainOwnershipWhileSleeping
// Il2CppName: get_maintainOwnershipWhileSleeping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_maintainOwnershipWhileSleeping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_maintainOwnershipWhileSleeping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_maintainOwnershipWhileSleeping
// Il2CppName: set_maintainOwnershipWhileSleeping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(bool)>(&Normal::Realtime::RealtimeTransformModel::set_maintainOwnershipWhileSleeping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_maintainOwnershipWhileSleeping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_timestamp
// Il2CppName: get_timestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_timestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_timestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_timestamp
// Il2CppName: set_timestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(double)>(&Normal::Realtime::RealtimeTransformModel::set_timestamp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_timestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_hasTransformChanges
// Il2CppName: get_hasTransformChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_hasTransformChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_hasTransformChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_hasPhysicsBodyChanges
// Il2CppName: get_hasPhysicsBodyChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_hasPhysicsBodyChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_hasPhysicsBodyChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_hasPhysicsStateChanges
// Il2CppName: get_hasPhysicsStateChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_hasPhysicsStateChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_hasPhysicsStateChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Quaternion)>(&Normal::Realtime::RealtimeTransformModel::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_scale
// Il2CppName: get_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_scale
// Il2CppName: set_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::set_scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::set_velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_angularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_angularVelocity
// Il2CppName: set_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::set_angularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_physicsBodyTimeOffset
// Il2CppName: get_physicsBodyTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_physicsBodyTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_physicsBodyTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_physicsBodyTimeOffset
// Il2CppName: set_physicsBodyTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(float)>(&Normal::Realtime::RealtimeTransformModel::set_physicsBodyTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_physicsBodyTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_physicsState
// Il2CppName: get_physicsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeTransformModel::PhysicsState (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_physicsState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_physicsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_physicsState
// Il2CppName: set_physicsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::PhysicsState)>(&Normal::Realtime::RealtimeTransformModel::set_physicsState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/PhysicsState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_physicsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::get_physicsStateTimeOffset
// Il2CppName: get_physicsStateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::get_physicsStateTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "get_physicsStateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::set_physicsStateTimeOffset
// Il2CppName: set_physicsStateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(float)>(&Normal::Realtime::RealtimeTransformModel::set_physicsStateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "set_physicsStateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::add_onWillWrite
// Il2CppName: add_onWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler*)>(&Normal::Realtime::RealtimeTransformModel::add_onWillWrite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/TransformWriteHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "add_onWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::remove_onWillWrite
// Il2CppName: remove_onWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::TransformWriteHandler*)>(&Normal::Realtime::RealtimeTransformModel::remove_onWillWrite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/TransformWriteHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "remove_onWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::add_onDidRead
// Il2CppName: add_onDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::TransformReadHandler*)>(&Normal::Realtime::RealtimeTransformModel::add_onDidRead)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/TransformReadHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "add_onDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::remove_onDidRead
// Il2CppName: remove_onDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::TransformReadHandler*)>(&Normal::Realtime::RealtimeTransformModel::remove_onDidRead)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/TransformReadHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "remove_onDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::IsVectorNaN
// Il2CppName: IsVectorNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::IsVectorNaN)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "IsVectorNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::IsVectorEqual
// Il2CppName: IsVectorEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Normal::Realtime::RealtimeTransformModel::IsVectorEqual)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* epsilon = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "IsVectorEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, epsilon});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::IsQuaternionNaN
// Il2CppName: IsQuaternionNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Quaternion)>(&Normal::Realtime::RealtimeTransformModel::IsQuaternionNaN)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "IsQuaternionNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::IsQuaternionEqual
// Il2CppName: IsQuaternionEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion, float)>(&Normal::Realtime::RealtimeTransformModel::IsQuaternionEqual)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* epsilon = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "IsQuaternionEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, epsilon});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::SetSafePosition
// Il2CppName: SetSafePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::SetSafePosition)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "SetSafePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::SetSafeRotation
// Il2CppName: SetSafeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Quaternion)>(&Normal::Realtime::RealtimeTransformModel::SetSafeRotation)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "SetSafeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::SetSafeScale
// Il2CppName: SetSafeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::SetSafeScale)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "SetSafeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::SetSafeVelocity
// Il2CppName: SetSafeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::SetSafeVelocity)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "SetSafeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::SetSafeAngularVelocity
// Il2CppName: SetSafeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransformModel::SetSafeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "SetSafeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::GetPhysicsFlag
// Il2CppName: GetPhysicsFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::PhysicsState)>(&Normal::Realtime::RealtimeTransformModel::GetPhysicsFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/PhysicsState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "GetPhysicsFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::SetPhysicsFlag
// Il2CppName: SetPhysicsFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::PhysicsState, bool)>(&Normal::Realtime::RealtimeTransformModel::SetPhysicsFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/PhysicsState")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "SetPhysicsFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::OnWillWrite
// Il2CppName: OnWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::OnWillWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "OnWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::OnDidReadProperties
// Il2CppName: OnDidReadProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet*)>(&Normal::Realtime::RealtimeTransformModel::OnDidReadProperties)> {
  static const MethodInfo* get() {
    static auto* changes = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/PropertyChangeSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "OnDidReadProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changes});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::OnDidReadPropertiesWrapper
// Il2CppName: OnDidReadPropertiesWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::OnDidReadPropertiesWrapper)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "OnDidReadPropertiesWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::UpdateBackingFields
// Il2CppName: UpdateBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)()>(&Normal::Realtime::RealtimeTransformModel::UpdateBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "UpdateBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::OnParentReplaced
// Il2CppName: OnParentReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::RealtimeModel*, ::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::RealtimeTransformModel::OnParentReplaced)> {
  static const MethodInfo* get() {
    static auto* previousParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    static auto* currentParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "OnParentReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousParent, currentParent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeTransformModel::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeTransformModel::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformModel::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeTransformModel::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformModel*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
