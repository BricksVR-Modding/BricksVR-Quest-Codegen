// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Serialization.StreamContext
#include "Normal/Realtime/Serialization/StreamContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: IProperty`1<T>
  template<typename T>
  class IProperty_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::IProperty_1, "Normal.Realtime", "IProperty`1");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.IProperty`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IProperty_1 {
    public:
    // public T get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::IProperty_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::IProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::IProperty_1::WriteLength");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::IProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, context);
    }
    // public System.Boolean Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::IProperty_1::Write");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::IProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stream, context);
    }
    // public System.Boolean Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::IProperty_1::Read");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::IProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stream, context);
    }
  }; // Normal.Realtime.IProperty`1
  // Could not write size check! Type: Normal.Realtime.IProperty`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
