// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Steamworks.Data.SteamInventoryResult_t
#include "Steamworks/Data/SteamInventoryResult_t.hpp"
// Including type: Steamworks.InventoryItem
#include "Steamworks/InventoryItem.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: InventoryResult
  struct InventoryResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::InventoryResult, "Steamworks", "InventoryResult");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x5
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Steamworks.InventoryResult
  // [TokenAttribute] Offset: FFFFFFFF
  struct InventoryResult/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // Steamworks.Data.SteamInventoryResult_t _id
    // Size: 0x4
    // Offset: 0x0
    ::Steamworks::Data::SteamInventoryResult_t id;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::SteamInventoryResult_t) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0xBBA20
    // private System.Boolean <Expired>k__BackingField
    // Size: 0x1
    // Offset: 0x4
    bool Expired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: InventoryResult
    constexpr InventoryResult(::Steamworks::Data::SteamInventoryResult_t id_ = {}, bool Expired_ = {}) noexcept : id{id_}, Expired{Expired_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: Steamworks.Data.SteamInventoryResult_t _id
    [[deprecated("Use field access instead!")]] ::Steamworks::Data::SteamInventoryResult_t& dyn__id();
    // Get instance field reference: private System.Boolean <Expired>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Expired$k__BackingField();
    // System.Void set_Expired(System.Boolean value)
    // Offset: 0x2F8160
    void set_Expired(bool value);
    // public System.Int32 get_ItemCount()
    // Offset: 0x5C02B0
    int get_ItemCount();
    // System.Void .ctor(Steamworks.Data.SteamInventoryResult_t id, System.Boolean expired)
    // Offset: 0x5C02A0
    // ABORTED: conflicts with another method.  InventoryResult(::Steamworks::Data::SteamInventoryResult_t id, bool expired);
    // public Steamworks.InventoryItem[] GetItems(System.Boolean includeProperties)
    // Offset: 0x5C0010
    ::ArrayW<::Steamworks::InventoryItem> GetItems(bool includeProperties);
    // public System.Void Dispose()
    // Offset: 0x5BFF60
    void Dispose();
  }; // Steamworks.InventoryResult
  #pragma pack(pop)
  static check_size<sizeof(InventoryResult), 4 + sizeof(bool)> __Steamworks_InventoryResultSizeCheck;
  static_assert(sizeof(InventoryResult) == 0x5);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::InventoryResult::set_Expired
// Il2CppName: set_Expired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::InventoryResult::*)(bool)>(&Steamworks::InventoryResult::set_Expired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::InventoryResult), "set_Expired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Steamworks::InventoryResult::get_ItemCount
// Il2CppName: get_ItemCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Steamworks::InventoryResult::*)()>(&Steamworks::InventoryResult::get_ItemCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::InventoryResult), "get_ItemCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::InventoryResult::InventoryResult
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::InventoryResult::GetItems
// Il2CppName: GetItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Steamworks::InventoryItem> (Steamworks::InventoryResult::*)(bool)>(&Steamworks::InventoryResult::GetItems)> {
  static const MethodInfo* get() {
    static auto* includeProperties = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::InventoryResult), "GetItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{includeProperties});
  }
};
// Writing MetadataGetter for method: Steamworks::InventoryResult::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::InventoryResult::*)()>(&Steamworks::InventoryResult::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::InventoryResult), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
