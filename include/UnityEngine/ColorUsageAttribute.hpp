// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ColorUsageAttribute
  class ColorUsageAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ColorUsageAttribute);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ColorUsageAttribute*, "UnityEngine", "ColorUsageAttribute");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ColorUsageAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 6D8A2C
  class ColorUsageAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public readonly System.Boolean showAlpha
    // Size: 0x1
    // Offset: 0x10
    bool showAlpha;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean hdr
    // Size: 0x1
    // Offset: 0x11
    bool hdr;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hdr and: minBrightness
    char __padding1[0x2] = {};
    // [ObsoleteAttribute] Offset: 0x6DC28C
    // public readonly System.Single minBrightness
    // Size: 0x4
    // Offset: 0x14
    float minBrightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [ObsoleteAttribute] Offset: 0x6DC2C4
    // public readonly System.Single maxBrightness
    // Size: 0x4
    // Offset: 0x18
    float maxBrightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [ObsoleteAttribute] Offset: 0x6DC2FC
    // public readonly System.Single minExposureValue
    // Size: 0x4
    // Offset: 0x1C
    float minExposureValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [ObsoleteAttribute] Offset: 0x6DC334
    // public readonly System.Single maxExposureValue
    // Size: 0x4
    // Offset: 0x20
    float maxExposureValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public readonly System.Boolean showAlpha
    bool& dyn_showAlpha();
    // Get instance field reference: public readonly System.Boolean hdr
    bool& dyn_hdr();
    // Get instance field reference: public readonly System.Single minBrightness
    float& dyn_minBrightness();
    // Get instance field reference: public readonly System.Single maxBrightness
    float& dyn_maxBrightness();
    // Get instance field reference: public readonly System.Single minExposureValue
    float& dyn_minExposureValue();
    // Get instance field reference: public readonly System.Single maxExposureValue
    float& dyn_maxExposureValue();
    // public System.Void .ctor(System.Boolean showAlpha)
    // Offset: 0xC9AABC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorUsageAttribute* New_ctor(bool showAlpha) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ColorUsageAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorUsageAttribute*, creationType>(showAlpha)));
    }
  }; // UnityEngine.ColorUsageAttribute
  #pragma pack(pop)
  static check_size<sizeof(ColorUsageAttribute), 32 + sizeof(float)> __UnityEngine_ColorUsageAttributeSizeCheck;
  static_assert(sizeof(ColorUsageAttribute) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ColorUsageAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
