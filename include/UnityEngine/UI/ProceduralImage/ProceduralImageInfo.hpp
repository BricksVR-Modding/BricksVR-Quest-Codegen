// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Type namespace: UnityEngine.UI.ProceduralImage
namespace UnityEngine::UI::ProceduralImage {
  // Forward declaring type: ProceduralImageInfo
  struct ProceduralImageInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::ProceduralImage::ProceduralImageInfo, "UnityEngine.UI.ProceduralImage", "ProceduralImageInfo");
// Type namespace: UnityEngine.UI.ProceduralImage
namespace UnityEngine::UI::ProceduralImage {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UI.ProceduralImage.ProceduralImageInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct ProceduralImageInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single width
    // Size: 0x4
    // Offset: 0x0
    float width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x4
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fallOffDistance
    // Size: 0x4
    // Offset: 0x8
    float fallOffDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector4 radius
    // Size: 0x10
    // Offset: 0xC
    ::UnityEngine::Vector4 radius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public System.Single borderWidth
    // Size: 0x4
    // Offset: 0x1C
    float borderWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pixelSize
    // Size: 0x4
    // Offset: 0x20
    float pixelSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: ProceduralImageInfo
    constexpr ProceduralImageInfo(float width_ = {}, float height_ = {}, float fallOffDistance_ = {}, ::UnityEngine::Vector4 radius_ = {}, float borderWidth_ = {}, float pixelSize_ = {}) noexcept : width{width_}, height{height_}, fallOffDistance{fallOffDistance_}, radius{radius_}, borderWidth{borderWidth_}, pixelSize{pixelSize_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single width
    [[deprecated("Use field access instead!")]] float& dyn_width();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public System.Single fallOffDistance
    [[deprecated("Use field access instead!")]] float& dyn_fallOffDistance();
    // Get instance field reference: public UnityEngine.Vector4 radius
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_radius();
    // Get instance field reference: public System.Single borderWidth
    [[deprecated("Use field access instead!")]] float& dyn_borderWidth();
    // Get instance field reference: public System.Single pixelSize
    [[deprecated("Use field access instead!")]] float& dyn_pixelSize();
    // public System.Void .ctor(System.Single width, System.Single height, System.Single fallOffDistance, System.Single pixelSize, UnityEngine.Vector4 radius, System.Single borderWidth)
    // Offset: 0x920BA0
    ProceduralImageInfo(float width, float height, float fallOffDistance, float pixelSize, ::UnityEngine::Vector4 radius, float borderWidth);
  }; // UnityEngine.UI.ProceduralImage.ProceduralImageInfo
  #pragma pack(pop)
  static check_size<sizeof(ProceduralImageInfo), 32 + sizeof(float)> __UnityEngine_UI_ProceduralImage_ProceduralImageInfoSizeCheck;
  static_assert(sizeof(ProceduralImageInfo) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UI::ProceduralImage::ProceduralImageInfo::ProceduralImageInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
