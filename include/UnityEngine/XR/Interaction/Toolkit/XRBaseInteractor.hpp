// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractable_MovementType.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder
#include "UnityEngine/XR/Interaction/Toolkit/XRInteractionUpdateOrder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRInteractionManager
  class XRInteractionManager;
  // Skipping declaration: XRBaseInteractable because it is already included!
  // Forward declaring type: XRInteractorEvent
  class XRInteractorEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseInteractor
  class XRBaseInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  // [SelectionBaseAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 724554
  class XRBaseInteractor : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // [TooltipAttribute] Offset: 0x725878
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_InteractionManager
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* m_InteractionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    // [TooltipAttribute] Offset: 0x7258C4
    // private UnityEngine.LayerMask m_InteractionLayerMask
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::LayerMask m_InteractionLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: m_InteractionLayerMask and: m_AttachTransform
    char __padding1[0x4] = {};
    // [TooltipAttribute] Offset: 0x725910
    // private UnityEngine.Transform m_AttachTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* m_AttachTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x72595C
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_StartingSelectedInteractable
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* m_StartingSelectedInteractable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_SelectTarget
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* m_SelectTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*) == 0x8);
    // protected System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_HoverTargets
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* m_HoverTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_RegisteredInteractionManager
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* m_RegisteredInteractionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    // [TooltipAttribute] Offset: 0x7259A8
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnHoverEnter
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* m_OnHoverEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0x7259F4
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnHoverExit
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* m_OnHoverExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0x725A40
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnSelectEnter
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* m_OnSelectEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0x725A8C
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnSelectExit
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* m_OnSelectExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*) == 0x8);
    // private System.Boolean m_AllowHover
    // Size: 0x1
    // Offset: 0x70
    bool m_AllowHover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AllowSelect
    // Size: 0x1
    // Offset: 0x71
    bool m_AllowSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableInteractions
    // Size: 0x1
    // Offset: 0x72
    bool m_EnableInteractions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RequiresRegistration
    // Size: 0x1
    // Offset: 0x73
    bool m_RequiresRegistration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_InteractionManager
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_m_InteractionManager();
    // Get instance field reference: private UnityEngine.LayerMask m_InteractionLayerMask
    ::UnityEngine::LayerMask& dyn_m_InteractionLayerMask();
    // Get instance field reference: private UnityEngine.Transform m_AttachTransform
    ::UnityEngine::Transform*& dyn_m_AttachTransform();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_StartingSelectedInteractable
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*& dyn_m_StartingSelectedInteractable();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_SelectTarget
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*& dyn_m_SelectTarget();
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_HoverTargets
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*& dyn_m_HoverTargets();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_RegisteredInteractionManager
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_m_RegisteredInteractionManager();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnHoverEnter
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*& dyn_m_OnHoverEnter();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnHoverExit
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*& dyn_m_OnHoverExit();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnSelectEnter
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*& dyn_m_OnSelectEnter();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent m_OnSelectExit
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*& dyn_m_OnSelectExit();
    // Get instance field reference: private System.Boolean m_AllowHover
    bool& dyn_m_AllowHover();
    // Get instance field reference: private System.Boolean m_AllowSelect
    bool& dyn_m_AllowSelect();
    // Get instance field reference: private System.Boolean m_EnableInteractions
    bool& dyn_m_EnableInteractions();
    // Get instance field reference: private System.Boolean m_RequiresRegistration
    bool& dyn_m_RequiresRegistration();
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractionManager get_interactionManager()
    // Offset: 0x8CD52C
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* get_interactionManager();
    // public System.Void set_interactionManager(UnityEngine.XR.Interaction.Toolkit.XRInteractionManager value)
    // Offset: 0x8CD534
    void set_interactionManager(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* value);
    // public UnityEngine.LayerMask get_InteractionLayerMask()
    // Offset: 0x8CD6BC
    ::UnityEngine::LayerMask get_InteractionLayerMask();
    // public System.Void set_InteractionLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x8CD6C4
    void set_InteractionLayerMask(::UnityEngine::LayerMask value);
    // public UnityEngine.Transform get_attachTransform()
    // Offset: 0x8CD6CC
    ::UnityEngine::Transform* get_attachTransform();
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable get_selectTarget()
    // Offset: 0x8CD6D4
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* get_selectTarget();
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable get_startingSelectedInteractable()
    // Offset: 0x8CD6DC
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* get_startingSelectedInteractable();
    // public UnityEngine.LayerMask get_interactionLayerMask()
    // Offset: 0x8CD6E4
    ::UnityEngine::LayerMask get_interactionLayerMask();
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent get_onHoverEnter()
    // Offset: 0x8CD6EC
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* get_onHoverEnter();
    // public System.Void set_onHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent value)
    // Offset: 0x8CD6F4
    void set_onHoverEnter(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent get_onHoverExit()
    // Offset: 0x8CD6FC
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* get_onHoverExit();
    // public System.Void set_onHoverExit(UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent value)
    // Offset: 0x8CD704
    void set_onHoverExit(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent get_onSelectEnter()
    // Offset: 0x8CD70C
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* get_onSelectEnter();
    // public System.Void set_onSelectEnter(UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent value)
    // Offset: 0x8CD714
    void set_onSelectEnter(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent get_onSelectExit()
    // Offset: 0x8CD71C
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* get_onSelectExit();
    // public System.Void set_onSelectExit(UnityEngine.XR.Interaction.Toolkit.XRInteractorEvent value)
    // Offset: 0x8CD724
    void set_onSelectExit(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* value);
    // public System.Boolean get_allowHover()
    // Offset: 0x8CD72C
    bool get_allowHover();
    // public System.Void set_allowHover(System.Boolean value)
    // Offset: 0x8CD734
    void set_allowHover(bool value);
    // public System.Boolean get_allowSelect()
    // Offset: 0x8CD740
    bool get_allowSelect();
    // public System.Void set_allowSelect(System.Boolean value)
    // Offset: 0x8CD748
    void set_allowSelect(bool value);
    // public System.Boolean get_enableInteractions()
    // Offset: 0x8CD754
    bool get_enableInteractions();
    // public System.Void set_enableInteractions(System.Boolean value)
    // Offset: 0x8CD75C
    void set_enableInteractions(bool value);
    // public System.Boolean get_isHoverActive()
    // Offset: 0x8CDDB0
    bool get_isHoverActive();
    // public System.Boolean get_isSelectActive()
    // Offset: 0x8CDDB8
    bool get_isSelectActive();
    // public System.Boolean get_isSelectExclusive()
    // Offset: 0x8CDDE8
    bool get_isSelectExclusive();
    // public System.Boolean get_overrideSelectedInteractableMovement()
    // Offset: 0x8CDDF0
    bool get_overrideSelectedInteractableMovement();
    // public System.Nullable`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType> get_selectedInteractableMovementTypeOverride()
    // Offset: 0x8CDDF8
    ::System::Nullable_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType> get_selectedInteractableMovementTypeOverride();
    // private System.Void EnableInteractions(System.Boolean enable)
    // Offset: 0x8CD770
    void EnableInteractions(bool enable);
    // protected System.Void Reset()
    // Offset: 0x8CD780
    void Reset();
    // protected System.Void Awake()
    // Offset: 0x8CB6E8
    void Awake();
    // protected System.Void Start()
    // Offset: 0x8CD94C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x8CDA24
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x8CDACC
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x8CDB60
    void OnDestroy();
    // public System.Void GetHoverTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> hoverTargets)
    // Offset: 0x8CDBF4
    void GetHoverTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* hoverTargets);
    // private System.Void FindCreateInteractionManager()
    // Offset: 0x8CD784
    void FindCreateInteractionManager();
    // private System.Void RegisterWithInteractionMananger()
    // Offset: 0x8CD53C
    void RegisterWithInteractionMananger();
    // System.Void ClearHoverTargets()
    // Offset: 0x8CDD10
    void ClearHoverTargets();
    // private System.Boolean IsOnValidLayerMask(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CDD68
    bool IsOnValidLayerMask(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> validTargets)
    // Offset: 0xFFFFFFFF
    void GetValidTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* validTargets);
    // public System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CDDC0
    bool CanHover(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CDDD4
    bool CanSelect(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal System.Void OnHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CC310
    void OnHoverEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal System.Void OnHoverExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CC4E0
    void OnHoverExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal System.Void OnSelectEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CBE90
    void OnSelectEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal System.Void OnSelectExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CC124
    void OnSelectExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0x8CDE00
    void ProcessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // protected System.Void .ctor()
    // Offset: 0x8CC618
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRBaseInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRBaseInteractor*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRBaseInteractor), 115 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRBaseInteractorSizeCheck;
  static_assert(sizeof(XRBaseInteractor) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_interactionManager
// Il2CppName: get_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_interactionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_interactionManager
// Il2CppName: set_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_interactionManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_InteractionLayerMask
// Il2CppName: get_InteractionLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_InteractionLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_InteractionLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_InteractionLayerMask
// Il2CppName: set_InteractionLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::LayerMask)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_InteractionLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_InteractionLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_attachTransform
// Il2CppName: get_attachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_attachTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_attachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_selectTarget
// Il2CppName: get_selectTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_selectTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_selectTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_startingSelectedInteractable
// Il2CppName: get_startingSelectedInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_startingSelectedInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_startingSelectedInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_interactionLayerMask
// Il2CppName: get_interactionLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_interactionLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_interactionLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onHoverEnter
// Il2CppName: get_onHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_onHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onHoverEnter
// Il2CppName: set_onHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onHoverEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractorEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_onHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onHoverExit
// Il2CppName: get_onHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_onHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onHoverExit
// Il2CppName: set_onHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onHoverExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractorEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_onHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onSelectEnter
// Il2CppName: get_onSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_onSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onSelectEnter
// Il2CppName: set_onSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onSelectEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractorEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_onSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onSelectExit
// Il2CppName: get_onSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_onSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_onSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onSelectExit
// Il2CppName: set_onSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractorEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_onSelectExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractorEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_onSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_allowHover
// Il2CppName: get_allowHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_allowHover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_allowHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_allowHover
// Il2CppName: set_allowHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_allowHover)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_allowHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_allowSelect
// Il2CppName: get_allowSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_allowSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_allowSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_allowSelect
// Il2CppName: set_allowSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_allowSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_allowSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_enableInteractions
// Il2CppName: get_enableInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_enableInteractions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_enableInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_enableInteractions
// Il2CppName: set_enableInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::set_enableInteractions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "set_enableInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_isHoverActive
// Il2CppName: get_isHoverActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_isHoverActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_isHoverActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_isSelectActive
// Il2CppName: get_isSelectActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_isSelectActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_isSelectActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_isSelectExclusive
// Il2CppName: get_isSelectExclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_isSelectExclusive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_isSelectExclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_overrideSelectedInteractableMovement
// Il2CppName: get_overrideSelectedInteractableMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_overrideSelectedInteractableMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_overrideSelectedInteractableMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_selectedInteractableMovementTypeOverride
// Il2CppName: get_selectedInteractableMovementTypeOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType> (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::get_selectedInteractableMovementTypeOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "get_selectedInteractableMovementTypeOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::EnableInteractions
// Il2CppName: EnableInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::EnableInteractions)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "EnableInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::GetHoverTargets
// Il2CppName: GetHoverTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::GetHoverTargets)> {
  static const MethodInfo* get() {
    static auto* hoverTargets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "GetHoverTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoverTargets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::FindCreateInteractionManager
// Il2CppName: FindCreateInteractionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::FindCreateInteractionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "FindCreateInteractionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::RegisterWithInteractionMananger
// Il2CppName: RegisterWithInteractionMananger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::RegisterWithInteractionMananger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "RegisterWithInteractionMananger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::ClearHoverTargets
// Il2CppName: ClearHoverTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::ClearHoverTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "ClearHoverTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::IsOnValidLayerMask
// Il2CppName: IsOnValidLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::IsOnValidLayerMask)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "IsOnValidLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::GetValidTargets
// Il2CppName: GetValidTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::GetValidTargets)> {
  static const MethodInfo* get() {
    static auto* validTargets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "GetValidTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{validTargets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::CanHover
// Il2CppName: CanHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::CanHover)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "CanHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::CanSelect
// Il2CppName: CanSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::CanSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "CanSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnHoverEnter
// Il2CppName: OnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnHoverEnter)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "OnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnHoverExit
// Il2CppName: OnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnHoverExit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "OnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnSelectEnter
// Il2CppName: OnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnSelectEnter)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "OnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnSelectExit
// Il2CppName: OnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::OnSelectExit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "OnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::ProcessInteractor
// Il2CppName: ProcessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::ProcessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*), "ProcessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
