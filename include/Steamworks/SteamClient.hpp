// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.AppId
#include "Steamworks/AppId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SteamClass
  class SteamClass;
  // Forward declaring type: SteamId
  struct SteamId;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SteamClient
  class SteamClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::SteamClient);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::SteamClient*, "Steamworks", "SteamClient");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.SteamClient
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamClient : public ::Il2CppObject {
    public:
    // Get static field: static private System.Boolean initialized
    static bool _get_initialized();
    // Set static field: static private System.Boolean initialized
    static void _set_initialized(bool value);
    // Get static field: static private readonly System.Collections.Generic.List`1<Steamworks.SteamClass> openInterfaces
    static ::System::Collections::Generic::List_1<::Steamworks::SteamClass*>* _get_openInterfaces();
    // Set static field: static private readonly System.Collections.Generic.List`1<Steamworks.SteamClass> openInterfaces
    static void _set_openInterfaces(::System::Collections::Generic::List_1<::Steamworks::SteamClass*>* value);
    // [DebuggerBrowsableAttribute] Offset: 0x71E260
    // Get static field: static private Steamworks.AppId <AppId>k__BackingField
    static ::Steamworks::AppId _get_$AppId$k__BackingField();
    // Set static field: static private Steamworks.AppId <AppId>k__BackingField
    static void _set_$AppId$k__BackingField(::Steamworks::AppId value);
    // static public Steamworks.SteamId get_SteamId()
    // Offset: 0xE39C24
    static ::Steamworks::SteamId get_SteamId();
    // static System.Void set_AppId(Steamworks.AppId value)
    // Offset: 0xE39D20
    static void set_AppId(::Steamworks::AppId value);
    // static private System.Void .cctor()
    // Offset: 0xE39D90
    static void _cctor();
    // static public System.Void Init(System.UInt32 appid, System.Boolean asyncCallbacks)
    // Offset: 0xE396A8
    static void Init(uint appid, bool asyncCallbacks);
    // static System.Void AddInterface()
    // Offset: 0xFFFFFFFF
    template<class T>
    static void AddInterface() {
      static_assert(std::is_convertible_v<T, ::Steamworks::SteamClass*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::SteamClient::AddInterface");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Steamworks", "SteamClient", "AddInterface", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static System.Void ShutdownInterfaces()
    // Offset: 0xE39A38
    static void ShutdownInterfaces();
    // static System.Void Cleanup()
    // Offset: 0xE39B94
    static void Cleanup();
    // static public System.Boolean RestartAppIfNecessary(System.UInt32 appid)
    // Offset: 0xE39D8C
    static bool RestartAppIfNecessary(uint appid);
  }; // Steamworks.SteamClient
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::SteamClient::get_SteamId
// Il2CppName: get_SteamId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::SteamId (*)()>(&Steamworks::SteamClient::get_SteamId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamClient*), "get_SteamId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamClient::set_AppId
// Il2CppName: set_AppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Steamworks::AppId)>(&Steamworks::SteamClient::set_AppId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Steamworks", "AppId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamClient*), "set_AppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamClient::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::SteamClient::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamClient*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamClient::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, bool)>(&Steamworks::SteamClient::Init)> {
  static const MethodInfo* get() {
    static auto* appid = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* asyncCallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamClient*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appid, asyncCallbacks});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamClient::AddInterface
// Il2CppName: AddInterface
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Steamworks::SteamClient::ShutdownInterfaces
// Il2CppName: ShutdownInterfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::SteamClient::ShutdownInterfaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamClient*), "ShutdownInterfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamClient::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::SteamClient::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamClient*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamClient::RestartAppIfNecessary
// Il2CppName: RestartAppIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint)>(&Steamworks::SteamClient::RestartAppIfNecessary)> {
  static const MethodInfo* get() {
    static auto* appid = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamClient*), "RestartAppIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appid});
  }
};
