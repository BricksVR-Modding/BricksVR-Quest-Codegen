// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OculusEntitlementCheck
#include "GlobalNamespace/OculusEntitlementCheck.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: User
  class User;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0*, "", "OculusEntitlementCheck/<>c__DisplayClass2_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: OculusEntitlementCheck/<>c__DisplayClass2_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class OculusEntitlementCheck::$$c__DisplayClass2_0 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public OculusEntitlementCheck <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::OculusEntitlementCheck* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OculusEntitlementCheck*) == 0x8);
    // public Oculus.Platform.Message msg
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Platform::Message* msg;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::Message*) == 0x8);
    public:
    // Get instance field reference: public OculusEntitlementCheck <>4__this
    ::GlobalNamespace::OculusEntitlementCheck*& dyn_$$4__this();
    // Get instance field reference: public Oculus.Platform.Message msg
    ::Oculus::Platform::Message*& dyn_msg();
    // System.Void <EntitlementCallback>b__0(Oculus.Platform.Message`1<Oculus.Platform.Models.User> message)
    // Offset: 0x111A864
    void $EntitlementCallback$b__0(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>* message);
    // public System.Void .ctor()
    // Offset: 0x111A854
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusEntitlementCheck::$$c__DisplayClass2_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusEntitlementCheck::$$c__DisplayClass2_0*, creationType>()));
    }
  }; // OculusEntitlementCheck/<>c__DisplayClass2_0
  #pragma pack(pop)
  static check_size<sizeof(OculusEntitlementCheck::$$c__DisplayClass2_0), 24 + sizeof(::Oculus::Platform::Message*)> __GlobalNamespace_OculusEntitlementCheck_$$c__DisplayClass2_0SizeCheck;
  static_assert(sizeof(OculusEntitlementCheck::$$c__DisplayClass2_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0::$EntitlementCallback$b__0
// Il2CppName: <EntitlementCallback>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::User*>*)>(&GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0::$EntitlementCallback$b__0)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "User")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0*), "<EntitlementCallback>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusEntitlementCheck::$$c__DisplayClass2_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
