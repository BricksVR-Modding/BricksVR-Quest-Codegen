// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IInitializePotentialDragHandler
#include "UnityEngine/EventSystems/IInitializePotentialDragHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.DrivenRectTransformTracker
#include "UnityEngine/DrivenRectTransformTracker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: AxisEventData
  class AxisEventData;
}
// Completed forward declares
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Forward declaring type: Slider2D
  class Slider2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AdvancedColorPicker::Slider2D);
DEFINE_IL2CPP_ARG_TYPE(::AdvancedColorPicker::Slider2D*, "AdvancedColorPicker", "Slider2D");
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // WARNING Size may be invalid!
  // Autogenerated type: AdvancedColorPicker.Slider2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: EB8C0
  class Slider2D : public ::UnityEngine::UI::Selectable/*, public ::UnityEngine::EventSystems::IDragHandler, public ::UnityEngine::EventSystems::IInitializePotentialDragHandler, public ::UnityEngine::UI::ICanvasElement*/ {
    public:
    // Nested type: ::AdvancedColorPicker::Slider2D::Slider2DEvent
    class Slider2DEvent;
    public:
    // private UnityEngine.RectTransform m_HandleRect
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::RectTransform* m_HandleRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Vector2 m_MinValue
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Vector2 m_MinValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_MaxValue
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Vector2 m_MaxValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean m_WholeNumbers
    // Size: 0x1
    // Offset: 0x110
    bool m_WholeNumbers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Single m_ValueX
    // Size: 0x4
    // Offset: 0x114
    float m_ValueX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_ValueY
    // Size: 0x4
    // Offset: 0x118
    float m_ValueY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean inverseX
    // Size: 0x1
    // Offset: 0x11C
    bool inverseX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean inverseY
    // Size: 0x1
    // Offset: 0x11D
    bool inverseY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private AdvancedColorPicker.Slider2D/AdvancedColorPicker.Slider2DEvent m_OnValueChanged
    // Size: 0x8
    // Offset: 0x120
    ::AdvancedColorPicker::Slider2D::Slider2DEvent* m_OnValueChanged;
    // Field size check
    static_assert(sizeof(::AdvancedColorPicker::Slider2D::Slider2DEvent*) == 0x8);
    // private UnityEngine.Transform m_HandleTransform
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Transform* m_HandleTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.RectTransform m_HandleContainerRect
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::RectTransform* m_HandleContainerRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Vector2 m_Offset
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::Vector2 m_Offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.DrivenRectTransformTracker m_Tracker
    // Size: 0x1
    // Offset: 0x140
    ::UnityEngine::DrivenRectTransformTracker m_Tracker;
    // Field size check
    static_assert(sizeof(::UnityEngine::DrivenRectTransformTracker) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IDragHandler
    operator ::UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IInitializePotentialDragHandler
    operator ::UnityEngine::EventSystems::IInitializePotentialDragHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IInitializePotentialDragHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UI::ICanvasElement
    operator ::UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<::UnityEngine::UI::ICanvasElement*>(this);
    }
    // Get instance field reference: private UnityEngine.RectTransform m_HandleRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_HandleRect();
    // Get instance field reference: private UnityEngine.Vector2 m_MinValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_MinValue();
    // Get instance field reference: private UnityEngine.Vector2 m_MaxValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_MaxValue();
    // Get instance field reference: private System.Boolean m_WholeNumbers
    [[deprecated("Use field access instead!")]] bool& dyn_m_WholeNumbers();
    // Get instance field reference: protected System.Single m_ValueX
    [[deprecated("Use field access instead!")]] float& dyn_m_ValueX();
    // Get instance field reference: protected System.Single m_ValueY
    [[deprecated("Use field access instead!")]] float& dyn_m_ValueY();
    // Get instance field reference: protected System.Boolean inverseX
    [[deprecated("Use field access instead!")]] bool& dyn_inverseX();
    // Get instance field reference: protected System.Boolean inverseY
    [[deprecated("Use field access instead!")]] bool& dyn_inverseY();
    // Get instance field reference: private AdvancedColorPicker.Slider2D/AdvancedColorPicker.Slider2DEvent m_OnValueChanged
    [[deprecated("Use field access instead!")]] ::AdvancedColorPicker::Slider2D::Slider2DEvent*& dyn_m_OnValueChanged();
    // Get instance field reference: private UnityEngine.Transform m_HandleTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_HandleTransform();
    // Get instance field reference: protected UnityEngine.RectTransform m_HandleContainerRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_HandleContainerRect();
    // Get instance field reference: private UnityEngine.Vector2 m_Offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Offset();
    // Get instance field reference: private UnityEngine.DrivenRectTransformTracker m_Tracker
    [[deprecated("Use field access instead!")]] ::UnityEngine::DrivenRectTransformTracker& dyn_m_Tracker();
    // public UnityEngine.RectTransform get_handleRect()
    // Offset: 0x30BCD0
    ::UnityEngine::RectTransform* get_handleRect();
    // public System.Void set_handleRect(UnityEngine.RectTransform value)
    // Offset: 0x5BABF0
    void set_handleRect(::UnityEngine::RectTransform* value);
    // public UnityEngine.Vector2 get_minValue()
    // Offset: 0x5BA7B0
    ::UnityEngine::Vector2 get_minValue();
    // public System.Void set_minValue(UnityEngine.Vector2 value)
    // Offset: 0x5BAD50
    void set_minValue(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_maxValue()
    // Offset: 0x5BA790
    ::UnityEngine::Vector2 get_maxValue();
    // public System.Void set_maxValue(UnityEngine.Vector2 value)
    // Offset: 0x5BAC80
    void set_maxValue(::UnityEngine::Vector2 value);
    // public System.Boolean get_wholeNumbers()
    // Offset: 0x5BAAC0
    bool get_wholeNumbers();
    // public System.Void set_wholeNumbers(System.Boolean value)
    // Offset: 0x5BAF80
    void set_wholeNumbers(bool value);
    // public System.Single get_valueX()
    // Offset: 0x5BA9C0
    float get_valueX();
    // public System.Void set_valueX(System.Single value)
    // Offset: 0x5B9DB0
    void set_valueX(float value);
    // public System.Single get_normalizedValueX()
    // Offset: 0x5BA7D0
    float get_normalizedValueX();
    // public System.Void set_normalizedValueX(System.Single value)
    // Offset: 0x5BAE20
    void set_normalizedValueX(float value);
    // public System.Single get_valueY()
    // Offset: 0x5BAA40
    float get_valueY();
    // public System.Void set_valueY(System.Single value)
    // Offset: 0x5B9E80
    void set_valueY(float value);
    // public System.Single get_normalizedValueY()
    // Offset: 0x5BA8D0
    float get_normalizedValueY();
    // public System.Void set_normalizedValueY(System.Single value)
    // Offset: 0x5BAED0
    void set_normalizedValueY(float value);
    // public System.Boolean get_InverseX()
    // Offset: 0x5BA770
    bool get_InverseX();
    // public System.Void set_InverseX(System.Boolean value)
    // Offset: 0x5BAAD0
    void set_InverseX(bool value);
    // public System.Boolean get_InverseY()
    // Offset: 0x5BA780
    bool get_InverseY();
    // public System.Void set_InverseY(System.Boolean value)
    // Offset: 0x5BAB60
    void set_InverseY(bool value);
    // public AdvancedColorPicker.Slider2D/AdvancedColorPicker.Slider2DEvent get_onValueChanged()
    // Offset: 0x4E2F80
    ::AdvancedColorPicker::Slider2D::Slider2DEvent* get_onValueChanged();
    // public System.Void set_onValueChanged(AdvancedColorPicker.Slider2D/AdvancedColorPicker.Slider2DEvent value)
    // Offset: 0x4E3360
    void set_onValueChanged(::AdvancedColorPicker::Slider2D::Slider2DEvent* value);
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x276FE0
    ::UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // protected System.Void .ctor()
    // Offset: 0x5BA630
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Slider2D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AdvancedColorPicker::Slider2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Slider2D*, creationType>()));
    }
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)
    // Offset: 0x1DDF00
    void Rebuild(::UnityEngine::UI::CanvasUpdate executing);
    // private System.Void UpdateCachedReferences()
    // Offset: 0x5B9EA0
    void UpdateCachedReferences();
    // protected System.Single ClampValue(System.Single input, System.Int32 index)
    // Offset: 0x5B92A0
    float ClampValue(float input, int index);
    // private System.Void SetX(System.Single input)
    // Offset: 0x5B9DB0
    void SetX(float input);
    // protected System.Void SetX(System.Single input, System.Boolean sendCallback)
    // Offset: 0x5B9D00
    void SetX(float input, bool sendCallback);
    // private System.Void SetY(System.Single input)
    // Offset: 0x5B9E80
    void SetY(float input);
    // protected System.Void SetY(System.Single input, System.Boolean sendCallback)
    // Offset: 0x5B9DD0
    void SetY(float input, bool sendCallback);
    // private System.Void UpdateVisuals()
    // Offset: 0x5BA460
    void UpdateVisuals();
    // protected System.Void UpdateDrag(UnityEngine.EventSystems.PointerEventData eventData, UnityEngine.Camera cam)
    // Offset: 0x5B9FF0
    void UpdateDrag(::UnityEngine::EventSystems::PointerEventData* eventData, ::UnityEngine::Camera* cam);
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x4DC860
    bool MayDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x5B9670
    void OnDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Single GetStepSize(System.Int32 index)
    // Offset: 0x5B93A0
    float GetStepSize(int index);
    // public System.Void OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x4DCDD0
    void OnInitializePotentialDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x1DDF00
    void GraphicUpdateComplete();
    // public System.Void LayoutComplete()
    // Offset: 0x1DDF00
    void LayoutComplete();
    // protected override System.Void OnEnable()
    // Offset: 0x5B96F0
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x5B9640
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x5B9430
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x5B9CC0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnRectTransformDimensionsChange()
    void OnRectTransformDimensionsChange();
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x5B9A70
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    // Offset: 0x5B9760
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    void OnMove(::UnityEngine::EventSystems::AxisEventData* eventData);
  }; // AdvancedColorPicker.Slider2D
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_handleRect
// Il2CppName: get_handleRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_handleRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_handleRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_handleRect
// Il2CppName: set_handleRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::RectTransform*)>(&AdvancedColorPicker::Slider2D::set_handleRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_handleRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_minValue
// Il2CppName: get_minValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_minValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_minValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_minValue
// Il2CppName: set_minValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::Vector2)>(&AdvancedColorPicker::Slider2D::set_minValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_minValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_maxValue
// Il2CppName: get_maxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_maxValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_maxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_maxValue
// Il2CppName: set_maxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::Vector2)>(&AdvancedColorPicker::Slider2D::set_maxValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_maxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_wholeNumbers
// Il2CppName: get_wholeNumbers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_wholeNumbers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_wholeNumbers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_wholeNumbers
// Il2CppName: set_wholeNumbers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(bool)>(&AdvancedColorPicker::Slider2D::set_wholeNumbers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_wholeNumbers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_valueX
// Il2CppName: get_valueX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_valueX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_valueX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_valueX
// Il2CppName: set_valueX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float)>(&AdvancedColorPicker::Slider2D::set_valueX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_valueX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_normalizedValueX
// Il2CppName: get_normalizedValueX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_normalizedValueX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_normalizedValueX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_normalizedValueX
// Il2CppName: set_normalizedValueX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float)>(&AdvancedColorPicker::Slider2D::set_normalizedValueX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_normalizedValueX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_valueY
// Il2CppName: get_valueY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_valueY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_valueY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_valueY
// Il2CppName: set_valueY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float)>(&AdvancedColorPicker::Slider2D::set_valueY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_valueY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_normalizedValueY
// Il2CppName: get_normalizedValueY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_normalizedValueY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_normalizedValueY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_normalizedValueY
// Il2CppName: set_normalizedValueY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float)>(&AdvancedColorPicker::Slider2D::set_normalizedValueY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_normalizedValueY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_InverseX
// Il2CppName: get_InverseX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_InverseX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_InverseX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_InverseX
// Il2CppName: set_InverseX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(bool)>(&AdvancedColorPicker::Slider2D::set_InverseX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_InverseX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_InverseY
// Il2CppName: get_InverseY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_InverseY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_InverseY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_InverseY
// Il2CppName: set_InverseY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(bool)>(&AdvancedColorPicker::Slider2D::set_InverseY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_InverseY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::get_onValueChanged
// Il2CppName: get_onValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AdvancedColorPicker::Slider2D::Slider2DEvent* (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::get_onValueChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "get_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::set_onValueChanged
// Il2CppName: set_onValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::AdvancedColorPicker::Slider2D::Slider2DEvent*)>(&AdvancedColorPicker::Slider2D::set_onValueChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AdvancedColorPicker", "Slider2D/Slider2DEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "set_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::UnityEngine_UI_ICanvasElement_get_transform
// Il2CppName: UnityEngine.UI.ICanvasElement.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::UnityEngine_UI_ICanvasElement_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::UI::CanvasUpdate)>(&AdvancedColorPicker::Slider2D::Rebuild)> {
  static const MethodInfo* get() {
    static auto* executing = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "CanvasUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{executing});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::UpdateCachedReferences
// Il2CppName: UpdateCachedReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::UpdateCachedReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "UpdateCachedReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::ClampValue
// Il2CppName: ClampValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::Slider2D::*)(float, int)>(&AdvancedColorPicker::Slider2D::ClampValue)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "ClampValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, index});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::SetX
// Il2CppName: SetX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float)>(&AdvancedColorPicker::Slider2D::SetX)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "SetX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::SetX
// Il2CppName: SetX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float, bool)>(&AdvancedColorPicker::Slider2D::SetX)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sendCallback = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "SetX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, sendCallback});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::SetY
// Il2CppName: SetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float)>(&AdvancedColorPicker::Slider2D::SetY)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "SetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::SetY
// Il2CppName: SetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(float, bool)>(&AdvancedColorPicker::Slider2D::SetY)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sendCallback = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "SetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, sendCallback});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::UpdateVisuals
// Il2CppName: UpdateVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::UpdateVisuals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::UpdateDrag
// Il2CppName: UpdateDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::EventSystems::PointerEventData*, ::UnityEngine::Camera*)>(&AdvancedColorPicker::Slider2D::UpdateDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    static auto* cam = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "UpdateDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, cam});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::MayDrag
// Il2CppName: MayDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AdvancedColorPicker::Slider2D::*)(::UnityEngine::EventSystems::PointerEventData*)>(&AdvancedColorPicker::Slider2D::MayDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "MayDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnDrag
// Il2CppName: OnDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::EventSystems::PointerEventData*)>(&AdvancedColorPicker::Slider2D::OnDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::GetStepSize
// Il2CppName: GetStepSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::Slider2D::*)(int)>(&AdvancedColorPicker::Slider2D::GetStepSize)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "GetStepSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnInitializePotentialDrag
// Il2CppName: OnInitializePotentialDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::EventSystems::PointerEventData*)>(&AdvancedColorPicker::Slider2D::OnInitializePotentialDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnInitializePotentialDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::GraphicUpdateComplete
// Il2CppName: GraphicUpdateComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::GraphicUpdateComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "GraphicUpdateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::LayoutComplete
// Il2CppName: LayoutComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::LayoutComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "LayoutComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::OnDidApplyAnimationProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnRectTransformDimensionsChange
// Il2CppName: OnRectTransformDimensionsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)()>(&AdvancedColorPicker::Slider2D::OnRectTransformDimensionsChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnPointerDown
// Il2CppName: OnPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::EventSystems::PointerEventData*)>(&AdvancedColorPicker::Slider2D::OnPointerDown)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::Slider2D::OnMove
// Il2CppName: OnMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::Slider2D::*)(::UnityEngine::EventSystems::AxisEventData*)>(&AdvancedColorPicker::Slider2D::OnMove)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "AxisEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::Slider2D*), "OnMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
