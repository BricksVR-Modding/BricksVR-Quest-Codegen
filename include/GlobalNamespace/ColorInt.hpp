// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ColorInt
  class ColorInt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColorInt);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColorInt*, "", "ColorInt");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: ColorInt
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorInt : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Int32 _colorInt
    // Size: 0x4
    // Offset: 0x10
    int colorInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color _cachedColor
    // Size: 0x10
    // Offset: 0x14
    ::UnityEngine::Color cachedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _cachedColorSet
    // Size: 0x1
    // Offset: 0x24
    bool cachedColorSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly System.Int32 _colorInt
    [[deprecated]] int& dyn__colorInt();
    // Get instance field reference: private UnityEngine.Color _cachedColor
    [[deprecated]] ::UnityEngine::Color& dyn__cachedColor();
    // Get instance field reference: private System.Boolean _cachedColorSet
    [[deprecated]] bool& dyn__cachedColorSet();
    // public System.Void .ctor(System.Int32 colorInt)
    // Offset: 0x206110
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorInt* New_ctor(int colorInt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorInt::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorInt*, creationType>(colorInt)));
    }
    // public System.Void .ctor(System.Int32 r, System.Int32 g, System.Int32 b, System.Int32 a)
    // Offset: 0x6B1CE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorInt* New_ctor(int r, int g, int b, int a) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorInt::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorInt*, creationType>(r, g, b, a)));
    }
    // public System.Void .ctor(System.Int32 r, System.Int32 g, System.Int32 b)
    // Offset: 0x6B1D90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorInt* New_ctor(int r, int g, int b) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorInt::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorInt*, creationType>(r, g, b)));
    }
    // public System.Void .ctor(UnityEngine.Color32 color)
    // Offset: 0x6B1D40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorInt* New_ctor(::UnityEngine::Color32 color) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorInt::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorInt*, creationType>(color)));
    }
    // public System.Int32 GetInt()
    // Offset: 0x1DD410
    int GetInt();
    // public UnityEngine.Color32 GetColor32()
    // Offset: 0x6B1BD0
    ::UnityEngine::Color32 GetColor32();
    // public UnityEngine.Color GetColor()
    // Offset: 0x6B1C20
    ::UnityEngine::Color GetColor();
    // static public UnityEngine.Color32 IntToColor32(System.Int32 color)
    // Offset: 0x6B1CA0
    static ::UnityEngine::Color32 IntToColor32(int color);
    // static public System.Int32 ColorToInt(UnityEngine.Color color)
    // Offset: 0x6B1B70
    static int ColorToInt(::UnityEngine::Color color);
    // static public System.Int32 Color32ToInt(UnityEngine.Color32 color)
    // Offset: 0x6B1B40
    static int Color32ToInt(::UnityEngine::Color32 color);
  }; // ColorInt
  #pragma pack(pop)
  static check_size<sizeof(ColorInt), 36 + sizeof(bool)> __GlobalNamespace_ColorIntSizeCheck;
  static_assert(sizeof(ColorInt) == 0x25);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::GetInt
// Il2CppName: GetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ColorInt::*)()>(&GlobalNamespace::ColorInt::GetInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorInt*), "GetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::GetColor32
// Il2CppName: GetColor32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (GlobalNamespace::ColorInt::*)()>(&GlobalNamespace::ColorInt::GetColor32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorInt*), "GetColor32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::ColorInt::*)()>(&GlobalNamespace::ColorInt::GetColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorInt*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::IntToColor32
// Il2CppName: IntToColor32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (*)(int)>(&GlobalNamespace::ColorInt::IntToColor32)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorInt*), "IntToColor32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::ColorToInt
// Il2CppName: ColorToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Color)>(&GlobalNamespace::ColorInt::ColorToInt)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorInt*), "ColorToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorInt::Color32ToInt
// Il2CppName: Color32ToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Color32)>(&GlobalNamespace::ColorInt::Color32ToInt)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorInt*), "Color32ToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
