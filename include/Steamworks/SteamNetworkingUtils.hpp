// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.SteamSharedClass`1
#include "Steamworks/SteamSharedClass_1.hpp"
// Including type: Steamworks.NetDebugOutput
#include "Steamworks/NetDebugOutput.hpp"
// Including type: Steamworks.SteamNetworkingAvailability
#include "Steamworks/SteamNetworkingAvailability.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: ISteamNetworkingUtils
  class ISteamNetworkingUtils;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentQueue`1<T>
  template<typename T>
  class ConcurrentQueue_1;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SteamNetworkingUtils
  class SteamNetworkingUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::SteamNetworkingUtils);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::SteamNetworkingUtils*, "Steamworks", "SteamNetworkingUtils");
// Type namespace: Steamworks
namespace Steamworks {
  // WARNING Size may be invalid!
  // Autogenerated type: Steamworks.SteamNetworkingUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamNetworkingUtils : public ::Steamworks::SteamSharedClass_1<::Steamworks::SteamNetworkingUtils*> {
    public:
    // Nested type: ::Steamworks::SteamNetworkingUtils::DebugMessage
    struct DebugMessage;
    // Nested type: ::Steamworks::SteamNetworkingUtils::$$c
    class $$c;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Steamworks.SteamNetworkingUtils/Steamworks.DebugMessage
    // [TokenAttribute] Offset: FFFFFFFF
    struct DebugMessage/*, public ::System::ValueType*/ {
      public:
      public:
      // public Steamworks.NetDebugOutput Type
      // Size: 0x4
      // Offset: 0x0
      ::Steamworks::NetDebugOutput Type;
      // Field size check
      static_assert(sizeof(::Steamworks::NetDebugOutput) == 0x4);
      // Padding between fields: Type and: Msg
      char __padding0[0x4] = {};
      // public System.String Msg
      // Size: 0x8
      // Offset: 0x8
      ::StringW Msg;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: DebugMessage
      constexpr DebugMessage(::Steamworks::NetDebugOutput Type_ = {}, ::StringW Msg_ = {}) noexcept : Type{Type_}, Msg{Msg_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Steamworks.NetDebugOutput Type
      ::Steamworks::NetDebugOutput& dyn_Type();
      // Get instance field reference: public System.String Msg
      ::StringW& dyn_Msg();
    }; // Steamworks.SteamNetworkingUtils/Steamworks.DebugMessage
    #pragma pack(pop)
    static check_size<sizeof(SteamNetworkingUtils::DebugMessage), 8 + sizeof(::StringW)> __Steamworks_SteamNetworkingUtils_DebugMessageSizeCheck;
    static_assert(sizeof(SteamNetworkingUtils::DebugMessage) == 0x10);
    // [DebuggerBrowsableAttribute] Offset: 0x71E8B4
    // Get static field: static private System.Action`2<Steamworks.NetDebugOutput,System.String> OnDebugOutput
    static ::System::Action_2<::Steamworks::NetDebugOutput, ::StringW>* _get_OnDebugOutput();
    // Set static field: static private System.Action`2<Steamworks.NetDebugOutput,System.String> OnDebugOutput
    static void _set_OnDebugOutput(::System::Action_2<::Steamworks::NetDebugOutput, ::StringW>* value);
    // [DebuggerBrowsableAttribute] Offset: 0x71E8F0
    // Get static field: static private Steamworks.SteamNetworkingAvailability <Status>k__BackingField
    static ::Steamworks::SteamNetworkingAvailability _get_$Status$k__BackingField();
    // Set static field: static private Steamworks.SteamNetworkingAvailability <Status>k__BackingField
    static void _set_$Status$k__BackingField(::Steamworks::SteamNetworkingAvailability value);
    // Get static field: static private System.Collections.Concurrent.ConcurrentQueue`1<Steamworks.SteamNetworkingUtils/Steamworks.DebugMessage> debugMessages
    static ::System::Collections::Concurrent::ConcurrentQueue_1<::Steamworks::SteamNetworkingUtils::DebugMessage>* _get_debugMessages();
    // Set static field: static private System.Collections.Concurrent.ConcurrentQueue`1<Steamworks.SteamNetworkingUtils/Steamworks.DebugMessage> debugMessages
    static void _set_debugMessages(::System::Collections::Concurrent::ConcurrentQueue_1<::Steamworks::SteamNetworkingUtils::DebugMessage>* value);
    // static Steamworks.ISteamNetworkingUtils get_Internal()
    // Offset: 0xE3CFFC
    static ::Steamworks::ISteamNetworkingUtils* get_Internal();
    // static private System.Void set_Status(Steamworks.SteamNetworkingAvailability value)
    // Offset: 0xE3D248
    static void set_Status(::Steamworks::SteamNetworkingAvailability value);
    // static private System.Void .cctor()
    // Offset: 0xE3D434
    static void _cctor();
    // static private System.Void InstallCallbacks(System.Boolean server)
    // Offset: 0xE3D13C
    static void InstallCallbacks(bool server);
    // static System.Void OutputDebugMessages()
    // Offset: 0xE3D2B4
    static void OutputDebugMessages();
    // public System.Void .ctor()
    // Offset: 0xE3D3E4
    // Implemented from: Steamworks.SteamSharedClass`1
    // Base method: System.Void SteamSharedClass_1::.ctor()
    // Base method: System.Void SteamClass::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamNetworkingUtils* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::SteamNetworkingUtils::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamNetworkingUtils*, creationType>()));
    }
    // override System.Void InitializeInterface(System.Boolean server)
    // Offset: 0xE3D088
    // Implemented from: Steamworks.SteamSharedClass`1
    // Base method: System.Void SteamSharedClass_1::InitializeInterface(System.Boolean server)
    void InitializeInterface(bool server);
  }; // Steamworks.SteamNetworkingUtils
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::SteamNetworkingUtils::DebugMessage, "Steamworks", "SteamNetworkingUtils/DebugMessage");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::SteamNetworkingUtils::get_Internal
// Il2CppName: get_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::ISteamNetworkingUtils* (*)()>(&Steamworks::SteamNetworkingUtils::get_Internal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingUtils*), "get_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingUtils::set_Status
// Il2CppName: set_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Steamworks::SteamNetworkingAvailability)>(&Steamworks::SteamNetworkingUtils::set_Status)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Steamworks", "SteamNetworkingAvailability")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingUtils*), "set_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::SteamNetworkingUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingUtils::InstallCallbacks
// Il2CppName: InstallCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Steamworks::SteamNetworkingUtils::InstallCallbacks)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingUtils*), "InstallCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingUtils::OutputDebugMessages
// Il2CppName: OutputDebugMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::SteamNetworkingUtils::OutputDebugMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingUtils*), "OutputDebugMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingUtils::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::SteamNetworkingUtils::InitializeInterface
// Il2CppName: InitializeInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SteamNetworkingUtils::*)(bool)>(&Steamworks::SteamNetworkingUtils::InitializeInterface)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingUtils*), "InitializeInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server});
  }
};
