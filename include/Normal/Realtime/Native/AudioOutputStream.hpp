// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Normal.Realtime.Native
namespace Normal::Realtime::Native {
  // Forward declaring type: AudioOutputStream
  class AudioOutputStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Native::AudioOutputStream);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Native::AudioOutputStream*, "Normal.Realtime.Native", "AudioOutputStream");
// Type namespace: Normal.Realtime.Native
namespace Normal::Realtime::Native {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Native.AudioOutputStream
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioOutputStream : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.IntPtr _nativeAudioOutputStream
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr nativeAudioOutputStream;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.IntPtr _nativeAudioOutputStreamIdentifier
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr nativeAudioOutputStreamIdentifier;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.IntPtr _nativeAudioOutputStream
    ::System::IntPtr& dyn__nativeAudioOutputStream();
    // Get instance field reference: private System.IntPtr _nativeAudioOutputStreamIdentifier
    ::System::IntPtr& dyn__nativeAudioOutputStreamIdentifier();
    // public System.Boolean get_nativePointerIsNull()
    // Offset: 0xAEA548
    bool get_nativePointerIsNull();
    // public System.Void .ctor(System.IntPtr nativeAudioOutputStream, System.IntPtr nativeAudioOutputStreamIdentifier)
    // Offset: 0xAEA300
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioOutputStream* New_ctor(::System::IntPtr nativeAudioOutputStream, ::System::IntPtr nativeAudioOutputStreamIdentifier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Native::AudioOutputStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioOutputStream*, creationType>(nativeAudioOutputStream, nativeAudioOutputStreamIdentifier)));
    }
    // public System.Boolean AudioOutputStreamMatchesIdentifier(System.IntPtr nativeAudioOutputStreamIdentifier)
    // Offset: 0xAEA280
    bool AudioOutputStreamMatchesIdentifier(::System::IntPtr nativeAudioOutputStreamIdentifier);
    // public System.Void Dispose()
    // Offset: 0xAEA454
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0xAEA3D0
    void Dispose(bool disposing);
    // public System.Int32 ClientID()
    // Offset: 0xAEA594
    int ClientID();
    // public System.Int32 StreamID()
    // Offset: 0xAEA6B0
    int StreamID();
    // public System.Int32 SampleRate()
    // Offset: 0xAEA7CC
    int SampleRate();
    // public System.Void SetSampleRate(System.Int32 sampleRate)
    // Offset: 0xAEA8E8
    void SetSampleRate(int sampleRate);
    // public System.Int32 Channels()
    // Offset: 0xAEAA24
    int Channels();
    // public System.Boolean IsOpen()
    // Offset: 0xAEAB40
    bool IsOpen();
    // public System.Boolean GetAudioData(System.Single[] audioData)
    // Offset: 0xAEAC50
    bool GetAudioData(::ArrayW<float> audioData);
    // protected override System.Void Finalize()
    // Offset: 0xAEA364
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Normal.Realtime.Native.AudioOutputStream
  #pragma pack(pop)
  static check_size<sizeof(AudioOutputStream), 24 + sizeof(::System::IntPtr)> __Normal_Realtime_Native_AudioOutputStreamSizeCheck;
  static_assert(sizeof(AudioOutputStream) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::get_nativePointerIsNull
// Il2CppName: get_nativePointerIsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::get_nativePointerIsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "get_nativePointerIsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::AudioOutputStreamMatchesIdentifier
// Il2CppName: AudioOutputStreamMatchesIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Native::AudioOutputStream::*)(::System::IntPtr)>(&Normal::Realtime::Native::AudioOutputStream::AudioOutputStreamMatchesIdentifier)> {
  static const MethodInfo* get() {
    static auto* nativeAudioOutputStreamIdentifier = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "AudioOutputStreamMatchesIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nativeAudioOutputStreamIdentifier});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Native::AudioOutputStream::*)(bool)>(&Normal::Realtime::Native::AudioOutputStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::ClientID
// Il2CppName: ClientID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::ClientID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "ClientID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::StreamID
// Il2CppName: StreamID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::StreamID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "StreamID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::SampleRate
// Il2CppName: SampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::SampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "SampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::SetSampleRate
// Il2CppName: SetSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Native::AudioOutputStream::*)(int)>(&Normal::Realtime::Native::AudioOutputStream::SetSampleRate)> {
  static const MethodInfo* get() {
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "SetSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleRate});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::Channels
// Il2CppName: Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::IsOpen
// Il2CppName: IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::IsOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::GetAudioData
// Il2CppName: GetAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Native::AudioOutputStream::*)(::ArrayW<float>)>(&Normal::Realtime::Native::AudioOutputStream::GetAudioData)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "GetAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioOutputStream::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Native::AudioOutputStream::*)()>(&Normal::Realtime::Native::AudioOutputStream::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioOutputStream*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
