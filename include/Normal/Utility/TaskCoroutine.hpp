// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Utility
namespace Normal::Utility {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Forward declaring type: TaskCoroutine
  class TaskCoroutine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Utility::TaskCoroutine);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Utility::TaskCoroutine*, "Normal.Utility", "TaskCoroutine");
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Utility.TaskCoroutine
  // [TokenAttribute] Offset: FFFFFFFF
  class TaskCoroutine : public ::Il2CppObject {
    public:
    // Nested type: ::Normal::Utility::TaskCoroutine::$Wait$d__0
    class $Wait$d__0;
    // static public System.Collections.IEnumerator Wait(System.Threading.Tasks.Task task)
    // Offset: 0x8A0B90
    static ::System::Collections::IEnumerator* Wait(::System::Threading::Tasks::Task* task);
  }; // Normal.Utility.TaskCoroutine
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Utility::TaskCoroutine::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(::System::Threading::Tasks::Task*)>(&Normal::Utility::TaskCoroutine::Wait)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::TaskCoroutine*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
