// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: String
  class String;
  // Forward declaring type: UIntPtr
  struct UIntPtr;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: OculusMicrophoneDevice
  class OculusMicrophoneDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::OculusMicrophoneDevice);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::OculusMicrophoneDevice*, "Normal.Realtime", "OculusMicrophoneDevice");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.OculusMicrophoneDevice
  // [TokenAttribute] Offset: FFFFFFFF
  class OculusMicrophoneDevice : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.IntPtr _microphone
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr microphone;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return microphone;
    }
    // Get static field: static private System.Type __oculusPlatformCore
    static ::System::Type* _get___oculusPlatformCore();
    // Set static field: static private System.Type __oculusPlatformCore
    static void _set___oculusPlatformCore(::System::Type* value);
    // Get static field: static private System.Reflection.MethodInfo __IsInitializedMethod
    static ::System::Reflection::MethodInfo* _get___IsInitializedMethod();
    // Set static field: static private System.Reflection.MethodInfo __IsInitializedMethod
    static void _set___IsInitializedMethod(::System::Reflection::MethodInfo* value);
    // static field const value: static public System.String OVR_DLL_NAME
    static constexpr const char* OVR_DLL_NAME = "ovrplatformloader";
    // Get static field: static public System.String OVR_DLL_NAME
    static ::StringW _get_OVR_DLL_NAME();
    // Set static field: static public System.String OVR_DLL_NAME
    static void _set_OVR_DLL_NAME(::StringW value);
    // Get instance field reference: private System.IntPtr _microphone
    ::System::IntPtr& dyn__microphone();
    // static private System.Void .cctor()
    // Offset: 0xFEE9E0
    static void _cctor();
    // static public System.Boolean IsOculusPlatformAvailable()
    // Offset: 0xFEEB70
    static bool IsOculusPlatformAvailable();
    // static public System.Boolean IsOculusPlatformInitialized()
    // Offset: 0xFEEC08
    static bool IsOculusPlatformInitialized();
    // static public System.IntPtr ovr_Microphone_Create()
    // Offset: 0xFEED30
    static ::System::IntPtr ovr_Microphone_Create();
    // static public System.Void ovr_Microphone_Destroy(System.IntPtr obj)
    // Offset: 0xFEEDA4
    static void ovr_Microphone_Destroy(::System::IntPtr obj);
    // static public System.Void ovr_Microphone_Start(System.IntPtr obj)
    // Offset: 0xFEEE24
    static void ovr_Microphone_Start(::System::IntPtr obj);
    // static public System.Void ovr_Microphone_Stop(System.IntPtr obj)
    // Offset: 0xFEEEA4
    static void ovr_Microphone_Stop(::System::IntPtr obj);
    // static public System.UIntPtr ovr_Microphone_GetPCMFloat(System.IntPtr obj, System.Single[] outputBuffer, System.UIntPtr outputBufferNumElements)
    // Offset: 0xFEEF24
    static ::System::UIntPtr ovr_Microphone_GetPCMFloat(::System::IntPtr obj, ::ArrayW<float> outputBuffer, ::System::UIntPtr outputBufferNumElements);
    // public System.Void Dispose()
    // Offset: 0xFEF284
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0xFEF200
    void Dispose(bool disposing);
    // public System.Void Start()
    // Offset: 0xFEF2F8
    void Start();
    // public System.Void Stop()
    // Offset: 0xFEF468
    void Stop();
    // public System.Boolean GetAudioData(System.Single[] audioData)
    // Offset: 0xFEF59C
    bool GetAudioData(::ArrayW<float> audioData);
    // public System.Void .ctor()
    // Offset: 0xFEEFC4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusMicrophoneDevice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::OculusMicrophoneDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusMicrophoneDevice*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0xFEF194
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Normal.Realtime.OculusMicrophoneDevice
  #pragma pack(pop)
  static check_size<sizeof(OculusMicrophoneDevice), 16 + sizeof(::System::IntPtr)> __Normal_Realtime_OculusMicrophoneDeviceSizeCheck;
  static_assert(sizeof(OculusMicrophoneDevice) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Normal::Realtime::OculusMicrophoneDevice::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::IsOculusPlatformAvailable
// Il2CppName: IsOculusPlatformAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Normal::Realtime::OculusMicrophoneDevice::IsOculusPlatformAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "IsOculusPlatformAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::IsOculusPlatformInitialized
// Il2CppName: IsOculusPlatformInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Normal::Realtime::OculusMicrophoneDevice::IsOculusPlatformInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "IsOculusPlatformInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Create
// Il2CppName: ovr_Microphone_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "ovr_Microphone_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Destroy
// Il2CppName: ovr_Microphone_Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Destroy)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "ovr_Microphone_Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Start
// Il2CppName: ovr_Microphone_Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Start)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "ovr_Microphone_Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Stop
// Il2CppName: ovr_Microphone_Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_Stop)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "ovr_Microphone_Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_GetPCMFloat
// Il2CppName: ovr_Microphone_GetPCMFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::UIntPtr (*)(::System::IntPtr, ::ArrayW<float>, ::System::UIntPtr)>(&Normal::Realtime::OculusMicrophoneDevice::ovr_Microphone_GetPCMFloat)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* outputBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outputBufferNumElements = &::il2cpp_utils::GetClassFromName("System", "UIntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "ovr_Microphone_GetPCMFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, outputBuffer, outputBufferNumElements});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::OculusMicrophoneDevice::*)()>(&Normal::Realtime::OculusMicrophoneDevice::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::OculusMicrophoneDevice::*)(bool)>(&Normal::Realtime::OculusMicrophoneDevice::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::OculusMicrophoneDevice::*)()>(&Normal::Realtime::OculusMicrophoneDevice::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::OculusMicrophoneDevice::*)()>(&Normal::Realtime::OculusMicrophoneDevice::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::GetAudioData
// Il2CppName: GetAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::OculusMicrophoneDevice::*)(::ArrayW<float>)>(&Normal::Realtime::OculusMicrophoneDevice::GetAudioData)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "GetAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::OculusMicrophoneDevice::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::OculusMicrophoneDevice::*)()>(&Normal::Realtime::OculusMicrophoneDevice::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::OculusMicrophoneDevice*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
