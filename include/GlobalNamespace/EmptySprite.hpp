// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EmptySprite
  class EmptySprite;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EmptySprite);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EmptySprite*, "", "EmptySprite");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: EmptySprite
  // [TokenAttribute] Offset: FFFFFFFF
  class EmptySprite : public ::Il2CppObject {
    public:
    // Get static field: static private UnityEngine.Sprite instance
    static ::UnityEngine::Sprite* _get_instance();
    // Set static field: static private UnityEngine.Sprite instance
    static void _set_instance(::UnityEngine::Sprite* value);
    // static public UnityEngine.Sprite Get()
    // Offset: 0x10A42EC
    static ::UnityEngine::Sprite* Get();
    // static public System.Boolean IsEmptySprite(UnityEngine.Sprite s)
    // Offset: 0x10A43A4
    static bool IsEmptySprite(::UnityEngine::Sprite* s);
  }; // EmptySprite
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EmptySprite::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (*)()>(&GlobalNamespace::EmptySprite::Get)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EmptySprite*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EmptySprite::IsEmptySprite
// Il2CppName: IsEmptySprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Sprite*)>(&GlobalNamespace::EmptySprite::IsEmptySprite)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EmptySprite*), "IsEmptySprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
