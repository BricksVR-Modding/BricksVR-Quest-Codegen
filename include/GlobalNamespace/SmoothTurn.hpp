// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRRig
  class XRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SmoothTurn
  class SmoothTurn;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SmoothTurn);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SmoothTurn*, "", "SmoothTurn");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: SmoothTurn
  // [TokenAttribute] Offset: FFFFFFFF
  class SmoothTurn : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single turnSpeed
    // Size: 0x4
    // Offset: 0x18
    float turnSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single deadZone
    // Size: 0x4
    // Offset: 0x1C
    float deadZone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single debugRotate
    // Size: 0x4
    // Offset: 0x20
    float debugRotate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: debugRotate and: rig
    char __padding2[0x4] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRRig rig
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::XR::Interaction::Toolkit::XRRig* rig;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRig*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single turnSpeed
    [[deprecated]] float& dyn_turnSpeed();
    // Get instance field reference: public System.Single deadZone
    [[deprecated]] float& dyn_deadZone();
    // Get instance field reference: public System.Single debugRotate
    [[deprecated]] float& dyn_debugRotate();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRig rig
    [[deprecated]] ::UnityEngine::XR::Interaction::Toolkit::XRRig*& dyn_rig();
    // private System.Void Start()
    // Offset: 0x6CFA60
    void Start();
    // private System.Void Update()
    // Offset: 0x6CFAB0
    void Update();
    // private System.Void Rotate(System.Single amount)
    // Offset: 0x6CFA00
    void Rotate(float amount);
    // public System.Void .ctor()
    // Offset: 0x6CFBA0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SmoothTurn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothTurn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SmoothTurn*, creationType>()));
    }
  }; // SmoothTurn
  #pragma pack(pop)
  static check_size<sizeof(SmoothTurn), 40 + sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRig*)> __GlobalNamespace_SmoothTurnSizeCheck;
  static_assert(sizeof(SmoothTurn) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SmoothTurn::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothTurn::*)()>(&GlobalNamespace::SmoothTurn::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothTurn*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothTurn::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothTurn::*)()>(&GlobalNamespace::SmoothTurn::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothTurn*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothTurn::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothTurn::*)(float)>(&GlobalNamespace::SmoothTurn::Rotate)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothTurn*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothTurn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
