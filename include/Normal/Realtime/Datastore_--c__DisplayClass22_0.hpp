// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Datastore
#include "Normal/Realtime/Datastore.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeViewModel
  class RealtimeViewModel;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Datastore::$$c__DisplayClass22_0);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Datastore::$$c__DisplayClass22_0*, "Normal.Realtime", "Datastore/<>c__DisplayClass22_0");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Datastore/Normal.Realtime.<>c__DisplayClass22_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class Datastore::$$c__DisplayClass22_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Action`2<System.Boolean,Normal.Realtime.RealtimeViewModel> completionHandler
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_2<bool, ::Normal::Realtime::RealtimeViewModel*>* completionHandler;
    // Field size check
    static_assert(sizeof(::System::Action_2<bool, ::Normal::Realtime::RealtimeViewModel*>*) == 0x8);
    // public Normal.Realtime.RealtimeViewModel sceneViewViewModel
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::RealtimeViewModel* sceneViewViewModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeViewModel*) == 0x8);
    // public Normal.Realtime.Datastore <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::Datastore* $$4__this;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Datastore*) == 0x8);
    // public System.String sceneViewUUID
    // Size: 0x8
    // Offset: 0x28
    ::StringW sceneViewUUID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 previousAttempts
    // Size: 0x4
    // Offset: 0x30
    int previousAttempts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Action`2<System.Boolean,Normal.Realtime.RealtimeViewModel> completionHandler
    [[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::Normal::Realtime::RealtimeViewModel*>*& dyn_completionHandler();
    // Get instance field reference: public Normal.Realtime.RealtimeViewModel sceneViewViewModel
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::RealtimeViewModel*& dyn_sceneViewViewModel();
    // Get instance field reference: public Normal.Realtime.Datastore <>4__this
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Datastore*& dyn_$$4__this();
    // Get instance field reference: public System.String sceneViewUUID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sceneViewUUID();
    // Get instance field reference: public System.Int32 previousAttempts
    [[deprecated("Use field access instead!")]] int& dyn_previousAttempts();
    // public System.Void .ctor()
    // Offset: 0x1DD400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Datastore::$$c__DisplayClass22_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Datastore::$$c__DisplayClass22_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Datastore::$$c__DisplayClass22_0*, creationType>()));
    }
    // System.Void <TryInsertSceneViewModelIntoDatastore>b__0(System.Boolean success)
    // Offset: 0x8CDC00
    void $TryInsertSceneViewModelIntoDatastore$b__0(bool success);
  }; // Normal.Realtime.Datastore/Normal.Realtime.<>c__DisplayClass22_0
  #pragma pack(pop)
  static check_size<sizeof(Datastore::$$c__DisplayClass22_0), 48 + sizeof(int)> __Normal_Realtime_Datastore_$$c__DisplayClass22_0SizeCheck;
  static_assert(sizeof(Datastore::$$c__DisplayClass22_0) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Datastore::$$c__DisplayClass22_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Datastore::$$c__DisplayClass22_0::$TryInsertSceneViewModelIntoDatastore$b__0
// Il2CppName: <TryInsertSceneViewModelIntoDatastore>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::$$c__DisplayClass22_0::*)(bool)>(&Normal::Realtime::Datastore::$$c__DisplayClass22_0::$TryInsertSceneViewModelIntoDatastore$b__0)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore::$$c__DisplayClass22_0*), "<TryInsertSceneViewModelIntoDatastore>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success});
  }
};
