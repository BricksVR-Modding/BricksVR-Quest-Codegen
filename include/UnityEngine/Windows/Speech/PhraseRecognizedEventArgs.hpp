// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Windows.Speech.ConfidenceLevel
#include "UnityEngine/Windows/Speech/ConfidenceLevel.hpp"
// Including type: UnityEngine.Windows.Speech.SemanticMeaning
#include "UnityEngine/Windows/Speech/SemanticMeaning.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Windows.Speech
namespace UnityEngine::Windows::Speech {
  // Forward declaring type: PhraseRecognizedEventArgs
  struct PhraseRecognizedEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Windows::Speech::PhraseRecognizedEventArgs, "UnityEngine.Windows.Speech", "PhraseRecognizedEventArgs");
// Type namespace: UnityEngine.Windows.Speech
namespace UnityEngine::Windows::Speech {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Windows.Speech.PhraseRecognizedEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  struct PhraseRecognizedEventArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly UnityEngine.Windows.Speech.ConfidenceLevel confidence
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::Windows::Speech::ConfidenceLevel confidence;
    // Field size check
    static_assert(sizeof(::UnityEngine::Windows::Speech::ConfidenceLevel) == 0x4);
    // Padding between fields: confidence and: semanticMeanings
    char __padding0[0x4] = {};
    // public readonly UnityEngine.Windows.Speech.SemanticMeaning[] semanticMeanings
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::UnityEngine::Windows::Speech::SemanticMeaning> semanticMeanings;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Windows::Speech::SemanticMeaning>) == 0x8);
    // public readonly System.String text
    // Size: 0x8
    // Offset: 0x10
    ::StringW text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.DateTime phraseStartTime
    // Size: 0x8
    // Offset: 0x18
    ::System::DateTime phraseStartTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public readonly System.TimeSpan phraseDuration
    // Size: 0x8
    // Offset: 0x20
    ::System::TimeSpan phraseDuration;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    public:
    // Creating value type constructor for type: PhraseRecognizedEventArgs
    constexpr PhraseRecognizedEventArgs(::UnityEngine::Windows::Speech::ConfidenceLevel confidence_ = {}, ::ArrayW<::UnityEngine::Windows::Speech::SemanticMeaning> semanticMeanings_ = ::ArrayW<::UnityEngine::Windows::Speech::SemanticMeaning>(static_cast<void*>(nullptr)), ::StringW text_ = {}, ::System::DateTime phraseStartTime_ = {}, ::System::TimeSpan phraseDuration_ = {}) noexcept : confidence{confidence_}, semanticMeanings{semanticMeanings_}, text{text_}, phraseStartTime{phraseStartTime_}, phraseDuration{phraseDuration_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly UnityEngine.Windows.Speech.ConfidenceLevel confidence
    [[deprecated]] ::UnityEngine::Windows::Speech::ConfidenceLevel& dyn_confidence();
    // Get instance field reference: public readonly UnityEngine.Windows.Speech.SemanticMeaning[] semanticMeanings
    [[deprecated]] ::ArrayW<::UnityEngine::Windows::Speech::SemanticMeaning>& dyn_semanticMeanings();
    // Get instance field reference: public readonly System.String text
    [[deprecated]] ::StringW& dyn_text();
    // Get instance field reference: public readonly System.DateTime phraseStartTime
    [[deprecated]] ::System::DateTime& dyn_phraseStartTime();
    // Get instance field reference: public readonly System.TimeSpan phraseDuration
    [[deprecated]] ::System::TimeSpan& dyn_phraseDuration();
    // System.Void .ctor(System.String text, UnityEngine.Windows.Speech.ConfidenceLevel confidence, UnityEngine.Windows.Speech.SemanticMeaning[] semanticMeanings, System.DateTime phraseStartTime, System.TimeSpan phraseDuration)
    // Offset: 0xA3A8B0
    PhraseRecognizedEventArgs(::StringW text, ::UnityEngine::Windows::Speech::ConfidenceLevel confidence, ::ArrayW<::UnityEngine::Windows::Speech::SemanticMeaning> semanticMeanings, ::System::DateTime phraseStartTime, ::System::TimeSpan phraseDuration);
  }; // UnityEngine.Windows.Speech.PhraseRecognizedEventArgs
  #pragma pack(pop)
  static check_size<sizeof(PhraseRecognizedEventArgs), 32 + sizeof(::System::TimeSpan)> __UnityEngine_Windows_Speech_PhraseRecognizedEventArgsSizeCheck;
  static_assert(sizeof(PhraseRecognizedEventArgs) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Windows::Speech::PhraseRecognizedEventArgs::PhraseRecognizedEventArgs
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
