// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HapticsManager
  class HapticsManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HapticsManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HapticsManager*, "", "HapticsManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: HapticsManager
  // [TokenAttribute] Offset: FFFFFFFF
  class HapticsManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::HapticsManager::$PlayHapticsIEnum$d__5
    class $PlayHapticsIEnum$d__5;
    // Get static field: static private HapticsManager _instance
    static ::GlobalNamespace::HapticsManager* _get__instance();
    // Set static field: static private HapticsManager _instance
    static void _set__instance(::GlobalNamespace::HapticsManager* value);
    // static public HapticsManager GetInstance()
    // Offset: 0x6B9430
    static ::GlobalNamespace::HapticsManager* GetInstance();
    // public System.Void PlayHaptics(System.Single frequency, System.Single amplitude, System.Single duration, System.Boolean rightHand, System.Boolean leftHand)
    // Offset: 0x6B9590
    void PlayHaptics(float frequency, float amplitude, float duration, bool rightHand, bool leftHand);
    // public System.Void StartHaptics(System.Single frequency, System.Single amplitude, System.Boolean rightHand, System.Boolean leftHand)
    // Offset: 0x6B95E0
    void StartHaptics(float frequency, float amplitude, bool rightHand, bool leftHand);
    // public System.Void EndHaptics(System.Boolean rightHand, System.Boolean leftHand)
    // Offset: 0x6B9360
    void EndHaptics(bool rightHand, bool leftHand);
    // static public System.Collections.IEnumerator PlayHapticsIEnum(System.Single frequency, System.Single amplitude, System.Single duration, System.Boolean rightHand, System.Boolean leftHand)
    // Offset: 0x6B94F0
    static ::System::Collections::IEnumerator* PlayHapticsIEnum(float frequency, float amplitude, float duration, bool rightHand, bool leftHand);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HapticsManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HapticsManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HapticsManager*, creationType>()));
    }
  }; // HapticsManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HapticsManager::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::HapticsManager* (*)()>(&GlobalNamespace::HapticsManager::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HapticsManager*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HapticsManager::PlayHaptics
// Il2CppName: PlayHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HapticsManager::*)(float, float, float, bool, bool)>(&GlobalNamespace::HapticsManager::PlayHaptics)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HapticsManager*), "PlayHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, amplitude, duration, rightHand, leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HapticsManager::StartHaptics
// Il2CppName: StartHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HapticsManager::*)(float, float, bool, bool)>(&GlobalNamespace::HapticsManager::StartHaptics)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HapticsManager*), "StartHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, amplitude, rightHand, leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HapticsManager::EndHaptics
// Il2CppName: EndHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HapticsManager::*)(bool, bool)>(&GlobalNamespace::HapticsManager::EndHaptics)> {
  static const MethodInfo* get() {
    static auto* rightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HapticsManager*), "EndHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rightHand, leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HapticsManager::PlayHapticsIEnum
// Il2CppName: PlayHapticsIEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(float, float, float, bool, bool)>(&GlobalNamespace::HapticsManager::PlayHapticsIEnum)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HapticsManager*), "PlayHapticsIEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, amplitude, duration, rightHand, leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HapticsManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
