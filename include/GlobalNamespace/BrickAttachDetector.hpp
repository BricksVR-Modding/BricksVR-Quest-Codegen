// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.ValueTuple`4
#include "System/ValueTuple_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RoomOwnershipSync
  class RoomOwnershipSync;
  // Forward declaring type: HapticsManager
  class HapticsManager;
  // Forward declaring type: OwnedPhysicsBricksStore
  class OwnedPhysicsBricksStore;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRGrabInteractable
  class XRGrabInteractable;
  // Forward declaring type: XRBaseInteractor
  class XRBaseInteractor;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickAttachDetector
  class BrickAttachDetector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickAttachDetector);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickAttachDetector*, "", "BrickAttachDetector");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: BrickAttachDetector
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickAttachDetector : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BrickAttachDetector::$$c__DisplayClass26_0
    class $$c__DisplayClass26_0;
    // Nested type: ::GlobalNamespace::BrickAttachDetector::$$c
    class $$c;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // [FormerlySerializedAsAttribute] Offset: 0x729DB8
    // public System.Boolean isBeingHeld
    // Size: 0x1
    // Offset: 0x18
    bool isBeingHeld;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [FormerlySerializedAsAttribute] Offset: 0x729DF0
    // public System.Boolean isAttached
    // Size: 0x1
    // Offset: 0x19
    bool isAttached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.GameObject maleConnectorParent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* maleConnectorParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject femaleConnectorParent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* femaleConnectorParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private RoomOwnershipSync _roomOwnershipSync
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::RoomOwnershipSync* roomOwnershipSync;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomOwnershipSync*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> _maleConnectors
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* maleConnectors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> _femaleConnectors
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* femaleConnectors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public UnityEngine.GameObject model
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* model;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector3 _collisionExtents
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 collisionExtents;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _colliderOffset
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 colliderOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private HapticsManager _hapticsManager
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::HapticsManager* hapticsManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HapticsManager*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable _xrGrabInteractable
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* xrGrabInteractable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*) == 0x8);
    // private OwnedPhysicsBricksStore _ownedPhysicsBricksStore
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::OwnedPhysicsBricksStore* ownedPhysicsBricksStore;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OwnedPhysicsBricksStore*) == 0x8);
    // public System.Boolean skipGrabCallbacks
    // Size: 0x1
    // Offset: 0x88
    bool skipGrabCallbacks;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean tile
    // Size: 0x1
    // Offset: 0x89
    bool tile;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean window
    // Size: 0x1
    // Offset: 0x8A
    bool window;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.BoxCollider[] colliders
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::BoxCollider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoxCollider*>) == 0x8);
    // private System.Boolean _usingBuiltInColliders
    // Size: 0x1
    // Offset: 0x98
    bool usingBuiltInColliders;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single heightOverride
    // Size: 0x4
    // Offset: 0x9C
    float heightOverride;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.ValueTuple`4<System.Boolean,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3> _nullResponse
    // Size: 0xFFFFFFFF
    // Offset: 0xA0
    ::System::ValueTuple_4<bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3> nullResponse;
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> testObjects
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* testObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean isBeingHeld
    bool& dyn_isBeingHeld();
    // Get instance field reference: public System.Boolean isAttached
    bool& dyn_isAttached();
    // Get instance field reference: public UnityEngine.GameObject maleConnectorParent
    ::UnityEngine::GameObject*& dyn_maleConnectorParent();
    // Get instance field reference: public UnityEngine.GameObject femaleConnectorParent
    ::UnityEngine::GameObject*& dyn_femaleConnectorParent();
    // Get instance field reference: private RoomOwnershipSync _roomOwnershipSync
    ::GlobalNamespace::RoomOwnershipSync*& dyn__roomOwnershipSync();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> _maleConnectors
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn__maleConnectors();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> _femaleConnectors
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn__femaleConnectors();
    // Get instance field reference: public UnityEngine.GameObject model
    ::UnityEngine::GameObject*& dyn_model();
    // Get instance field reference: private UnityEngine.Vector3 _collisionExtents
    ::UnityEngine::Vector3& dyn__collisionExtents();
    // Get instance field reference: private UnityEngine.Vector3 _colliderOffset
    ::UnityEngine::Vector3& dyn__colliderOffset();
    // Get instance field reference: private UnityEngine.Transform _transform
    ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private HapticsManager _hapticsManager
    ::GlobalNamespace::HapticsManager*& dyn__hapticsManager();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable _xrGrabInteractable
    ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*& dyn__xrGrabInteractable();
    // Get instance field reference: private OwnedPhysicsBricksStore _ownedPhysicsBricksStore
    ::GlobalNamespace::OwnedPhysicsBricksStore*& dyn__ownedPhysicsBricksStore();
    // Get instance field reference: public System.Boolean skipGrabCallbacks
    bool& dyn_skipGrabCallbacks();
    // Get instance field reference: public System.Boolean tile
    bool& dyn_tile();
    // Get instance field reference: public System.Boolean window
    bool& dyn_window();
    // Get instance field reference: public UnityEngine.BoxCollider[] colliders
    ::ArrayW<::UnityEngine::BoxCollider*>& dyn_colliders();
    // Get instance field reference: private System.Boolean _usingBuiltInColliders
    bool& dyn__usingBuiltInColliders();
    // Get instance field reference: public System.Single heightOverride
    float& dyn_heightOverride();
    // Get instance field reference: private readonly System.ValueTuple`4<System.Boolean,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3> _nullResponse
    ::System::ValueTuple_4<bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3>& dyn__nullResponse();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> testObjects
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_testObjects();
    // private System.Void Awake()
    // Offset: 0x10CF070
    void Awake();
    // private System.Void Start()
    // Offset: 0x10CF298
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x10CF2CC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x10CF3DC
    void OnDisable();
    // private System.Void BrickGrabbed(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x10CF4F4
    void BrickGrabbed(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void BrickReleased(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x10CF66C
    void BrickReleased(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void EnableGravityIfUnowned()
    // Offset: 0x10CFF0C
    void EnableGravityIfUnowned();
    // public System.ValueTuple`4<System.Boolean,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3> CheckIfCanConnect()
    // Offset: 0x10CF9B0
    ::System::ValueTuple_4<bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3> CheckIfCanConnect();
    // private System.Void OnDrawGizmos()
    // Offset: 0x10D1088
    void OnDrawGizmos();
    // public System.Boolean CollidesWithBricks(UnityEngine.Quaternion rot, UnityEngine.Vector3 pos)
    // Offset: 0x10D0D98
    bool CollidesWithBricks(::UnityEngine::Quaternion rot, ::UnityEngine::Vector3 pos);
    // private UnityEngine.GameObject[] GetFemaleConnectorsWithConnections()
    // Offset: 0x10D01F8
    ::ArrayW<::UnityEngine::GameObject*> GetFemaleConnectorsWithConnections();
    // private UnityEngine.GameObject[] GetMaleConnectorsWithConnections()
    // Offset: 0x10D02F8
    ::ArrayW<::UnityEngine::GameObject*> GetMaleConnectorsWithConnections();
    // private UnityEngine.GameObject[] ValidConnections(UnityEngine.GameObject[] connectors)
    // Offset: 0x10D03F8
    ::ArrayW<::UnityEngine::GameObject*> ValidConnections(::ArrayW<::UnityEngine::GameObject*> connectors);
    // private UnityEngine.Quaternion GetNewRot(UnityEngine.GameObject otherBrick)
    // Offset: 0x10D0710
    ::UnityEngine::Quaternion GetNewRot(::UnityEngine::GameObject* otherBrick);
    // private UnityEngine.Vector3 GetNewPosWithRot(UnityEngine.Quaternion rot, UnityEngine.GameObject otherBrick, UnityEngine.GameObject[] femaleConnectors, System.Boolean connectingDownwards)
    // Offset: 0x10D0AE0
    ::UnityEngine::Vector3 GetNewPosWithRot(::UnityEngine::Quaternion rot, ::UnityEngine::GameObject* otherBrick, ::ArrayW<::UnityEngine::GameObject*> femaleConnectors, bool connectingDownwards);
    // static private UnityEngine.GameObject ClosestConnectorFromConnector(UnityEngine.GameObject connector)
    // Offset: 0x10D0658
    static ::UnityEngine::GameObject* ClosestConnectorFromConnector(::UnityEngine::GameObject* connector);
    // static private System.Single DistanceBetweenConnectors(UnityEngine.GameObject a, UnityEngine.GameObject b)
    // Offset: 0x10D1290
    static float DistanceBetweenConnectors(::UnityEngine::GameObject* a, ::UnityEngine::GameObject* b);
    // static private System.Boolean AngleApproximatelyZero(System.Single a)
    // Offset: 0x10D13C4
    static bool AngleApproximatelyZero(float a);
    // private System.Single Height()
    // Offset: 0x10D1384
    float Height();
    // private System.Boolean IsVectorApproximatelyOne(UnityEngine.Vector3 vec)
    // Offset: 0x10D06BC
    bool IsVectorApproximatelyOne(::UnityEngine::Vector3 vec);
    // private System.Boolean ApproximatelyEqual(System.Single value, System.Single target)
    // Offset: 0x10D1490
    bool ApproximatelyEqual(float value, float target);
    // private System.Void OnValidate()
    // Offset: 0x10D1510
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x10D1A64
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrickAttachDetector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrickAttachDetector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrickAttachDetector*, creationType>()));
    }
  }; // BrickAttachDetector
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::BrickGrabbed
// Il2CppName: BrickGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&GlobalNamespace::BrickAttachDetector::BrickGrabbed)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "BrickGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::BrickReleased
// Il2CppName: BrickReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&GlobalNamespace::BrickAttachDetector::BrickReleased)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "BrickReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::EnableGravityIfUnowned
// Il2CppName: EnableGravityIfUnowned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::EnableGravityIfUnowned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "EnableGravityIfUnowned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::CheckIfCanConnect
// Il2CppName: CheckIfCanConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_4<bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3> (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::CheckIfCanConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "CheckIfCanConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::CollidesWithBricks
// Il2CppName: CollidesWithBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BrickAttachDetector::*)(::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&GlobalNamespace::BrickAttachDetector::CollidesWithBricks)> {
  static const MethodInfo* get() {
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "CollidesWithBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rot, pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::GetFemaleConnectorsWithConnections
// Il2CppName: GetFemaleConnectorsWithConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::GetFemaleConnectorsWithConnections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "GetFemaleConnectorsWithConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::GetMaleConnectorsWithConnections
// Il2CppName: GetMaleConnectorsWithConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::GetMaleConnectorsWithConnections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "GetMaleConnectorsWithConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::ValidConnections
// Il2CppName: ValidConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::BrickAttachDetector::*)(::ArrayW<::UnityEngine::GameObject*>)>(&GlobalNamespace::BrickAttachDetector::ValidConnections)> {
  static const MethodInfo* get() {
    static auto* connectors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "ValidConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectors});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::GetNewRot
// Il2CppName: GetNewRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::BrickAttachDetector::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickAttachDetector::GetNewRot)> {
  static const MethodInfo* get() {
    static auto* otherBrick = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "GetNewRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherBrick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::GetNewPosWithRot
// Il2CppName: GetNewPosWithRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BrickAttachDetector::*)(::UnityEngine::Quaternion, ::UnityEngine::GameObject*, ::ArrayW<::UnityEngine::GameObject*>, bool)>(&GlobalNamespace::BrickAttachDetector::GetNewPosWithRot)> {
  static const MethodInfo* get() {
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* otherBrick = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* femaleConnectors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* connectingDownwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "GetNewPosWithRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rot, otherBrick, femaleConnectors, connectingDownwards});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::ClosestConnectorFromConnector
// Il2CppName: ClosestConnectorFromConnector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickAttachDetector::ClosestConnectorFromConnector)> {
  static const MethodInfo* get() {
    static auto* connector = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "ClosestConnectorFromConnector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connector});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::DistanceBetweenConnectors
// Il2CppName: DistanceBetweenConnectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::GameObject*, ::UnityEngine::GameObject*)>(&GlobalNamespace::BrickAttachDetector::DistanceBetweenConnectors)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "DistanceBetweenConnectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::AngleApproximatelyZero
// Il2CppName: AngleApproximatelyZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float)>(&GlobalNamespace::BrickAttachDetector::AngleApproximatelyZero)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "AngleApproximatelyZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::Height
// Il2CppName: Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::IsVectorApproximatelyOne
// Il2CppName: IsVectorApproximatelyOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BrickAttachDetector::*)(::UnityEngine::Vector3)>(&GlobalNamespace::BrickAttachDetector::IsVectorApproximatelyOne)> {
  static const MethodInfo* get() {
    static auto* vec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "IsVectorApproximatelyOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vec});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::ApproximatelyEqual
// Il2CppName: ApproximatelyEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BrickAttachDetector::*)(float, float)>(&GlobalNamespace::BrickAttachDetector::ApproximatelyEqual)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "ApproximatelyEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, target});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickAttachDetector::*)()>(&GlobalNamespace::BrickAttachDetector::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickAttachDetector*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickAttachDetector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
