// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SliderControl
  class SliderControl;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CustomSliderLabels
  class CustomSliderLabels;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CustomSliderLabels);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CustomSliderLabels*, "", "CustomSliderLabels");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: CustomSliderLabels
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomSliderLabels : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.String[] labels
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> labels;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean refreshLabels
    // Size: 0x1
    // Offset: 0x20
    bool refreshLabels;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: refreshLabels and: sliderControl
    char __padding1[0x7] = {};
    // private SliderControl _sliderControl
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::SliderControl* sliderControl;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderControl*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String[] labels
    ::ArrayW<::StringW>& dyn_labels();
    // Get instance field reference: public System.Boolean refreshLabels
    bool& dyn_refreshLabels();
    // Get instance field reference: private SliderControl _sliderControl
    ::GlobalNamespace::SliderControl*& dyn__sliderControl();
    // private System.Void Awake()
    // Offset: 0x10A2E4C
    void Awake();
    // private System.Void OnValidate()
    // Offset: 0x10A2EA4
    void OnValidate();
    // public System.String LabelFor(System.Int32 value)
    // Offset: 0x10A3004
    ::StringW LabelFor(int value);
    // public System.Void .ctor()
    // Offset: 0x10A3050
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomSliderLabels* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomSliderLabels::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomSliderLabels*, creationType>()));
    }
  }; // CustomSliderLabels
  #pragma pack(pop)
  static check_size<sizeof(CustomSliderLabels), 40 + sizeof(::GlobalNamespace::SliderControl*)> __GlobalNamespace_CustomSliderLabelsSizeCheck;
  static_assert(sizeof(CustomSliderLabels) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CustomSliderLabels::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CustomSliderLabels::*)()>(&GlobalNamespace::CustomSliderLabels::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomSliderLabels*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomSliderLabels::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CustomSliderLabels::*)()>(&GlobalNamespace::CustomSliderLabels::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomSliderLabels*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomSliderLabels::LabelFor
// Il2CppName: LabelFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CustomSliderLabels::*)(int)>(&GlobalNamespace::CustomSliderLabels::LabelFor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomSliderLabels*), "LabelFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomSliderLabels::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
