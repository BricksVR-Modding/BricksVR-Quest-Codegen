// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.UriIdnScope
#include "System/UriIdnScope.hpp"
// Including type: System.UriKind
#include "System/UriKind.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Flags because it is already included!
  // Forward declaring type: UriParser
  class UriParser;
  // Forward declaring type: ParsingError
  struct ParsingError;
  // Forward declaring type: UriFormatException
  class UriFormatException;
  // Forward declaring type: UriComponents
  struct UriComponents;
  // Forward declaring type: UriFormat
  struct UriFormat;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Uri);
DEFINE_IL2CPP_ARG_TYPE(::System::Uri*, "System", "Uri");
// Type namespace: System
namespace System {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: System.Uri
  // [TokenAttribute] Offset: FFFFFFFF
  // [TypeConverterAttribute] Offset: CBA00
  class Uri : public ::Il2CppObject/*, public ::System::Runtime::Serialization::ISerializable*/ {
    public:
    // Nested type: ::System::Uri::Flags
    struct Flags;
    // Nested type: ::System::Uri::UriInfo
    class UriInfo;
    // Nested type: ::System::Uri::Offset
    struct Offset;
    // Nested type: ::System::Uri::MoreInfo
    class MoreInfo;
    // Nested type: ::System::Uri::Check
    struct Check;
    // Size: 0x8
    #pragma pack(push, 1)
    // Autogenerated type: System.Uri/System.Flags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Flags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.UInt64 value__
      // Size: 0x8
      // Offset: 0x0
      uint64_t value;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      public:
      // Creating value type constructor for type: Flags
      constexpr Flags(uint64_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint64_t
      constexpr operator uint64_t() const noexcept {
        return value;
      }
      // static field const value: static public System.Uri/System.Flags Zero
      static constexpr const uint64_t Zero = 0u;
      // Get static field: static public System.Uri/System.Flags Zero
      static ::System::Uri::Flags _get_Zero();
      // Set static field: static public System.Uri/System.Flags Zero
      static void _set_Zero(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags SchemeNotCanonical
      static constexpr const uint64_t SchemeNotCanonical = 1u;
      // Get static field: static public System.Uri/System.Flags SchemeNotCanonical
      static ::System::Uri::Flags _get_SchemeNotCanonical();
      // Set static field: static public System.Uri/System.Flags SchemeNotCanonical
      static void _set_SchemeNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UserNotCanonical
      static constexpr const uint64_t UserNotCanonical = 2u;
      // Get static field: static public System.Uri/System.Flags UserNotCanonical
      static ::System::Uri::Flags _get_UserNotCanonical();
      // Set static field: static public System.Uri/System.Flags UserNotCanonical
      static void _set_UserNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags HostNotCanonical
      static constexpr const uint64_t HostNotCanonical = 4u;
      // Get static field: static public System.Uri/System.Flags HostNotCanonical
      static ::System::Uri::Flags _get_HostNotCanonical();
      // Set static field: static public System.Uri/System.Flags HostNotCanonical
      static void _set_HostNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags PortNotCanonical
      static constexpr const uint64_t PortNotCanonical = 8u;
      // Get static field: static public System.Uri/System.Flags PortNotCanonical
      static ::System::Uri::Flags _get_PortNotCanonical();
      // Set static field: static public System.Uri/System.Flags PortNotCanonical
      static void _set_PortNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags PathNotCanonical
      static constexpr const uint64_t PathNotCanonical = 16u;
      // Get static field: static public System.Uri/System.Flags PathNotCanonical
      static ::System::Uri::Flags _get_PathNotCanonical();
      // Set static field: static public System.Uri/System.Flags PathNotCanonical
      static void _set_PathNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags QueryNotCanonical
      static constexpr const uint64_t QueryNotCanonical = 32u;
      // Get static field: static public System.Uri/System.Flags QueryNotCanonical
      static ::System::Uri::Flags _get_QueryNotCanonical();
      // Set static field: static public System.Uri/System.Flags QueryNotCanonical
      static void _set_QueryNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags FragmentNotCanonical
      static constexpr const uint64_t FragmentNotCanonical = 64u;
      // Get static field: static public System.Uri/System.Flags FragmentNotCanonical
      static ::System::Uri::Flags _get_FragmentNotCanonical();
      // Set static field: static public System.Uri/System.Flags FragmentNotCanonical
      static void _set_FragmentNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags CannotDisplayCanonical
      static constexpr const uint64_t CannotDisplayCanonical = 127u;
      // Get static field: static public System.Uri/System.Flags CannotDisplayCanonical
      static ::System::Uri::Flags _get_CannotDisplayCanonical();
      // Set static field: static public System.Uri/System.Flags CannotDisplayCanonical
      static void _set_CannotDisplayCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags E_UserNotCanonical
      static constexpr const uint64_t E_UserNotCanonical = 128u;
      // Get static field: static public System.Uri/System.Flags E_UserNotCanonical
      static ::System::Uri::Flags _get_E_UserNotCanonical();
      // Set static field: static public System.Uri/System.Flags E_UserNotCanonical
      static void _set_E_UserNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags E_HostNotCanonical
      static constexpr const uint64_t E_HostNotCanonical = 256u;
      // Get static field: static public System.Uri/System.Flags E_HostNotCanonical
      static ::System::Uri::Flags _get_E_HostNotCanonical();
      // Set static field: static public System.Uri/System.Flags E_HostNotCanonical
      static void _set_E_HostNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags E_PortNotCanonical
      static constexpr const uint64_t E_PortNotCanonical = 512u;
      // Get static field: static public System.Uri/System.Flags E_PortNotCanonical
      static ::System::Uri::Flags _get_E_PortNotCanonical();
      // Set static field: static public System.Uri/System.Flags E_PortNotCanonical
      static void _set_E_PortNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags E_PathNotCanonical
      static constexpr const uint64_t E_PathNotCanonical = 1024u;
      // Get static field: static public System.Uri/System.Flags E_PathNotCanonical
      static ::System::Uri::Flags _get_E_PathNotCanonical();
      // Set static field: static public System.Uri/System.Flags E_PathNotCanonical
      static void _set_E_PathNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags E_QueryNotCanonical
      static constexpr const uint64_t E_QueryNotCanonical = 2048u;
      // Get static field: static public System.Uri/System.Flags E_QueryNotCanonical
      static ::System::Uri::Flags _get_E_QueryNotCanonical();
      // Set static field: static public System.Uri/System.Flags E_QueryNotCanonical
      static void _set_E_QueryNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags E_FragmentNotCanonical
      static constexpr const uint64_t E_FragmentNotCanonical = 4096u;
      // Get static field: static public System.Uri/System.Flags E_FragmentNotCanonical
      static ::System::Uri::Flags _get_E_FragmentNotCanonical();
      // Set static field: static public System.Uri/System.Flags E_FragmentNotCanonical
      static void _set_E_FragmentNotCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags E_CannotDisplayCanonical
      static constexpr const uint64_t E_CannotDisplayCanonical = 8064u;
      // Get static field: static public System.Uri/System.Flags E_CannotDisplayCanonical
      static ::System::Uri::Flags _get_E_CannotDisplayCanonical();
      // Set static field: static public System.Uri/System.Flags E_CannotDisplayCanonical
      static void _set_E_CannotDisplayCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags ShouldBeCompressed
      static constexpr const uint64_t ShouldBeCompressed = 8192u;
      // Get static field: static public System.Uri/System.Flags ShouldBeCompressed
      static ::System::Uri::Flags _get_ShouldBeCompressed();
      // Set static field: static public System.Uri/System.Flags ShouldBeCompressed
      static void _set_ShouldBeCompressed(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags FirstSlashAbsent
      static constexpr const uint64_t FirstSlashAbsent = 16384u;
      // Get static field: static public System.Uri/System.Flags FirstSlashAbsent
      static ::System::Uri::Flags _get_FirstSlashAbsent();
      // Set static field: static public System.Uri/System.Flags FirstSlashAbsent
      static void _set_FirstSlashAbsent(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags BackslashInPath
      static constexpr const uint64_t BackslashInPath = 32768u;
      // Get static field: static public System.Uri/System.Flags BackslashInPath
      static ::System::Uri::Flags _get_BackslashInPath();
      // Set static field: static public System.Uri/System.Flags BackslashInPath
      static void _set_BackslashInPath(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags IndexMask
      static constexpr const uint64_t IndexMask = 65535u;
      // Get static field: static public System.Uri/System.Flags IndexMask
      static ::System::Uri::Flags _get_IndexMask();
      // Set static field: static public System.Uri/System.Flags IndexMask
      static void _set_IndexMask(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags HostTypeMask
      static constexpr const uint64_t HostTypeMask = 458752u;
      // Get static field: static public System.Uri/System.Flags HostTypeMask
      static ::System::Uri::Flags _get_HostTypeMask();
      // Set static field: static public System.Uri/System.Flags HostTypeMask
      static void _set_HostTypeMask(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags HostNotParsed
      static constexpr const uint64_t HostNotParsed = 0u;
      // Get static field: static public System.Uri/System.Flags HostNotParsed
      static ::System::Uri::Flags _get_HostNotParsed();
      // Set static field: static public System.Uri/System.Flags HostNotParsed
      static void _set_HostNotParsed(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags IPv6HostType
      static constexpr const uint64_t IPv6HostType = 65536u;
      // Get static field: static public System.Uri/System.Flags IPv6HostType
      static ::System::Uri::Flags _get_IPv6HostType();
      // Set static field: static public System.Uri/System.Flags IPv6HostType
      static void _set_IPv6HostType(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags IPv4HostType
      static constexpr const uint64_t IPv4HostType = 131072u;
      // Get static field: static public System.Uri/System.Flags IPv4HostType
      static ::System::Uri::Flags _get_IPv4HostType();
      // Set static field: static public System.Uri/System.Flags IPv4HostType
      static void _set_IPv4HostType(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags DnsHostType
      static constexpr const uint64_t DnsHostType = 196608u;
      // Get static field: static public System.Uri/System.Flags DnsHostType
      static ::System::Uri::Flags _get_DnsHostType();
      // Set static field: static public System.Uri/System.Flags DnsHostType
      static void _set_DnsHostType(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UncHostType
      static constexpr const uint64_t UncHostType = 262144u;
      // Get static field: static public System.Uri/System.Flags UncHostType
      static ::System::Uri::Flags _get_UncHostType();
      // Set static field: static public System.Uri/System.Flags UncHostType
      static void _set_UncHostType(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags BasicHostType
      static constexpr const uint64_t BasicHostType = 327680u;
      // Get static field: static public System.Uri/System.Flags BasicHostType
      static ::System::Uri::Flags _get_BasicHostType();
      // Set static field: static public System.Uri/System.Flags BasicHostType
      static void _set_BasicHostType(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UnusedHostType
      static constexpr const uint64_t UnusedHostType = 393216u;
      // Get static field: static public System.Uri/System.Flags UnusedHostType
      static ::System::Uri::Flags _get_UnusedHostType();
      // Set static field: static public System.Uri/System.Flags UnusedHostType
      static void _set_UnusedHostType(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UnknownHostType
      static constexpr const uint64_t UnknownHostType = 458752u;
      // Get static field: static public System.Uri/System.Flags UnknownHostType
      static ::System::Uri::Flags _get_UnknownHostType();
      // Set static field: static public System.Uri/System.Flags UnknownHostType
      static void _set_UnknownHostType(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UserEscaped
      static constexpr const uint64_t UserEscaped = 524288u;
      // Get static field: static public System.Uri/System.Flags UserEscaped
      static ::System::Uri::Flags _get_UserEscaped();
      // Set static field: static public System.Uri/System.Flags UserEscaped
      static void _set_UserEscaped(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags AuthorityFound
      static constexpr const uint64_t AuthorityFound = 1048576u;
      // Get static field: static public System.Uri/System.Flags AuthorityFound
      static ::System::Uri::Flags _get_AuthorityFound();
      // Set static field: static public System.Uri/System.Flags AuthorityFound
      static void _set_AuthorityFound(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags HasUserInfo
      static constexpr const uint64_t HasUserInfo = 2097152u;
      // Get static field: static public System.Uri/System.Flags HasUserInfo
      static ::System::Uri::Flags _get_HasUserInfo();
      // Set static field: static public System.Uri/System.Flags HasUserInfo
      static void _set_HasUserInfo(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags LoopbackHost
      static constexpr const uint64_t LoopbackHost = 4194304u;
      // Get static field: static public System.Uri/System.Flags LoopbackHost
      static ::System::Uri::Flags _get_LoopbackHost();
      // Set static field: static public System.Uri/System.Flags LoopbackHost
      static void _set_LoopbackHost(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags NotDefaultPort
      static constexpr const uint64_t NotDefaultPort = 8388608u;
      // Get static field: static public System.Uri/System.Flags NotDefaultPort
      static ::System::Uri::Flags _get_NotDefaultPort();
      // Set static field: static public System.Uri/System.Flags NotDefaultPort
      static void _set_NotDefaultPort(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UserDrivenParsing
      static constexpr const uint64_t UserDrivenParsing = 16777216u;
      // Get static field: static public System.Uri/System.Flags UserDrivenParsing
      static ::System::Uri::Flags _get_UserDrivenParsing();
      // Set static field: static public System.Uri/System.Flags UserDrivenParsing
      static void _set_UserDrivenParsing(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags CanonicalDnsHost
      static constexpr const uint64_t CanonicalDnsHost = 33554432u;
      // Get static field: static public System.Uri/System.Flags CanonicalDnsHost
      static ::System::Uri::Flags _get_CanonicalDnsHost();
      // Set static field: static public System.Uri/System.Flags CanonicalDnsHost
      static void _set_CanonicalDnsHost(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags ErrorOrParsingRecursion
      static constexpr const uint64_t ErrorOrParsingRecursion = 67108864u;
      // Get static field: static public System.Uri/System.Flags ErrorOrParsingRecursion
      static ::System::Uri::Flags _get_ErrorOrParsingRecursion();
      // Set static field: static public System.Uri/System.Flags ErrorOrParsingRecursion
      static void _set_ErrorOrParsingRecursion(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags DosPath
      static constexpr const uint64_t DosPath = 134217728u;
      // Get static field: static public System.Uri/System.Flags DosPath
      static ::System::Uri::Flags _get_DosPath();
      // Set static field: static public System.Uri/System.Flags DosPath
      static void _set_DosPath(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UncPath
      static constexpr const uint64_t UncPath = 268435456u;
      // Get static field: static public System.Uri/System.Flags UncPath
      static ::System::Uri::Flags _get_UncPath();
      // Set static field: static public System.Uri/System.Flags UncPath
      static void _set_UncPath(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags ImplicitFile
      static constexpr const uint64_t ImplicitFile = 536870912u;
      // Get static field: static public System.Uri/System.Flags ImplicitFile
      static ::System::Uri::Flags _get_ImplicitFile();
      // Set static field: static public System.Uri/System.Flags ImplicitFile
      static void _set_ImplicitFile(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags MinimalUriInfoSet
      static constexpr const uint64_t MinimalUriInfoSet = 1073741824u;
      // Get static field: static public System.Uri/System.Flags MinimalUriInfoSet
      static ::System::Uri::Flags _get_MinimalUriInfoSet();
      // Set static field: static public System.Uri/System.Flags MinimalUriInfoSet
      static void _set_MinimalUriInfoSet(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags AllUriInfoSet
      static constexpr const uint64_t AllUriInfoSet = 2147483648u;
      // Get static field: static public System.Uri/System.Flags AllUriInfoSet
      static ::System::Uri::Flags _get_AllUriInfoSet();
      // Set static field: static public System.Uri/System.Flags AllUriInfoSet
      static void _set_AllUriInfoSet(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags IdnHost
      static constexpr const uint64_t IdnHost = 4294967296u;
      // Get static field: static public System.Uri/System.Flags IdnHost
      static ::System::Uri::Flags _get_IdnHost();
      // Set static field: static public System.Uri/System.Flags IdnHost
      static void _set_IdnHost(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags HasUnicode
      static constexpr const uint64_t HasUnicode = 8589934592u;
      // Get static field: static public System.Uri/System.Flags HasUnicode
      static ::System::Uri::Flags _get_HasUnicode();
      // Set static field: static public System.Uri/System.Flags HasUnicode
      static void _set_HasUnicode(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags HostUnicodeNormalized
      static constexpr const uint64_t HostUnicodeNormalized = 17179869184u;
      // Get static field: static public System.Uri/System.Flags HostUnicodeNormalized
      static ::System::Uri::Flags _get_HostUnicodeNormalized();
      // Set static field: static public System.Uri/System.Flags HostUnicodeNormalized
      static void _set_HostUnicodeNormalized(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags RestUnicodeNormalized
      static constexpr const uint64_t RestUnicodeNormalized = 34359738368u;
      // Get static field: static public System.Uri/System.Flags RestUnicodeNormalized
      static ::System::Uri::Flags _get_RestUnicodeNormalized();
      // Set static field: static public System.Uri/System.Flags RestUnicodeNormalized
      static void _set_RestUnicodeNormalized(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UnicodeHost
      static constexpr const uint64_t UnicodeHost = 68719476736u;
      // Get static field: static public System.Uri/System.Flags UnicodeHost
      static ::System::Uri::Flags _get_UnicodeHost();
      // Set static field: static public System.Uri/System.Flags UnicodeHost
      static void _set_UnicodeHost(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags IntranetUri
      static constexpr const uint64_t IntranetUri = 137438953472u;
      // Get static field: static public System.Uri/System.Flags IntranetUri
      static ::System::Uri::Flags _get_IntranetUri();
      // Set static field: static public System.Uri/System.Flags IntranetUri
      static void _set_IntranetUri(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UseOrigUncdStrOffset
      static constexpr const uint64_t UseOrigUncdStrOffset = 274877906944u;
      // Get static field: static public System.Uri/System.Flags UseOrigUncdStrOffset
      static ::System::Uri::Flags _get_UseOrigUncdStrOffset();
      // Set static field: static public System.Uri/System.Flags UseOrigUncdStrOffset
      static void _set_UseOrigUncdStrOffset(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags UserIriCanonical
      static constexpr const uint64_t UserIriCanonical = 549755813888u;
      // Get static field: static public System.Uri/System.Flags UserIriCanonical
      static ::System::Uri::Flags _get_UserIriCanonical();
      // Set static field: static public System.Uri/System.Flags UserIriCanonical
      static void _set_UserIriCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags PathIriCanonical
      static constexpr const uint64_t PathIriCanonical = 1099511627776u;
      // Get static field: static public System.Uri/System.Flags PathIriCanonical
      static ::System::Uri::Flags _get_PathIriCanonical();
      // Set static field: static public System.Uri/System.Flags PathIriCanonical
      static void _set_PathIriCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags QueryIriCanonical
      static constexpr const uint64_t QueryIriCanonical = 2199023255552u;
      // Get static field: static public System.Uri/System.Flags QueryIriCanonical
      static ::System::Uri::Flags _get_QueryIriCanonical();
      // Set static field: static public System.Uri/System.Flags QueryIriCanonical
      static void _set_QueryIriCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags FragmentIriCanonical
      static constexpr const uint64_t FragmentIriCanonical = 4398046511104u;
      // Get static field: static public System.Uri/System.Flags FragmentIriCanonical
      static ::System::Uri::Flags _get_FragmentIriCanonical();
      // Set static field: static public System.Uri/System.Flags FragmentIriCanonical
      static void _set_FragmentIriCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags IriCanonical
      static constexpr const uint64_t IriCanonical = 8246337208320u;
      // Get static field: static public System.Uri/System.Flags IriCanonical
      static ::System::Uri::Flags _get_IriCanonical();
      // Set static field: static public System.Uri/System.Flags IriCanonical
      static void _set_IriCanonical(::System::Uri::Flags value);
      // static field const value: static public System.Uri/System.Flags CompressedSlashes
      static constexpr const uint64_t CompressedSlashes = 17592186044416u;
      // Get static field: static public System.Uri/System.Flags CompressedSlashes
      static ::System::Uri::Flags _get_CompressedSlashes();
      // Set static field: static public System.Uri/System.Flags CompressedSlashes
      static void _set_CompressedSlashes(::System::Uri::Flags value);
      // Get instance field reference: public System.UInt64 value__
      [[deprecated("Use field access instead!")]] uint64_t& dyn_value__();
    }; // System.Uri/System.Flags
    #pragma pack(pop)
    static check_size<sizeof(Uri::Flags), 0 + sizeof(uint64_t)> __System_Uri_FlagsSizeCheck;
    static_assert(sizeof(Uri::Flags) == 0x8);
    public:
    // private System.String m_String
    // Size: 0x8
    // Offset: 0x10
    ::StringW m_String;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_originalUnicodeString
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_originalUnicodeString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.UriParser m_Syntax
    // Size: 0x8
    // Offset: 0x20
    ::System::UriParser* m_Syntax;
    // Field size check
    static_assert(sizeof(::System::UriParser*) == 0x8);
    // private System.String m_DnsSafeHost
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_DnsSafeHost;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Uri/System.Flags m_Flags
    // Size: 0x8
    // Offset: 0x30
    ::System::Uri::Flags m_Flags;
    // Field size check
    static_assert(sizeof(::System::Uri::Flags) == 0x8);
    // private System.Uri/System.UriInfo m_Info
    // Size: 0x8
    // Offset: 0x38
    ::System::Uri::UriInfo* m_Info;
    // Field size check
    static_assert(sizeof(::System::Uri::UriInfo*) == 0x8);
    // private System.Boolean m_iriParsing
    // Size: 0x1
    // Offset: 0x40
    bool m_iriParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Get static field: static public readonly System.String UriSchemeFile
    static ::StringW _get_UriSchemeFile();
    // Set static field: static public readonly System.String UriSchemeFile
    static void _set_UriSchemeFile(::StringW value);
    // Get static field: static public readonly System.String UriSchemeFtp
    static ::StringW _get_UriSchemeFtp();
    // Set static field: static public readonly System.String UriSchemeFtp
    static void _set_UriSchemeFtp(::StringW value);
    // Get static field: static public readonly System.String UriSchemeGopher
    static ::StringW _get_UriSchemeGopher();
    // Set static field: static public readonly System.String UriSchemeGopher
    static void _set_UriSchemeGopher(::StringW value);
    // Get static field: static public readonly System.String UriSchemeHttp
    static ::StringW _get_UriSchemeHttp();
    // Set static field: static public readonly System.String UriSchemeHttp
    static void _set_UriSchemeHttp(::StringW value);
    // Get static field: static public readonly System.String UriSchemeHttps
    static ::StringW _get_UriSchemeHttps();
    // Set static field: static public readonly System.String UriSchemeHttps
    static void _set_UriSchemeHttps(::StringW value);
    // Get static field: static readonly System.String UriSchemeWs
    static ::StringW _get_UriSchemeWs();
    // Set static field: static readonly System.String UriSchemeWs
    static void _set_UriSchemeWs(::StringW value);
    // Get static field: static readonly System.String UriSchemeWss
    static ::StringW _get_UriSchemeWss();
    // Set static field: static readonly System.String UriSchemeWss
    static void _set_UriSchemeWss(::StringW value);
    // Get static field: static public readonly System.String UriSchemeMailto
    static ::StringW _get_UriSchemeMailto();
    // Set static field: static public readonly System.String UriSchemeMailto
    static void _set_UriSchemeMailto(::StringW value);
    // Get static field: static public readonly System.String UriSchemeNews
    static ::StringW _get_UriSchemeNews();
    // Set static field: static public readonly System.String UriSchemeNews
    static void _set_UriSchemeNews(::StringW value);
    // Get static field: static public readonly System.String UriSchemeNntp
    static ::StringW _get_UriSchemeNntp();
    // Set static field: static public readonly System.String UriSchemeNntp
    static void _set_UriSchemeNntp(::StringW value);
    // Get static field: static public readonly System.String UriSchemeNetTcp
    static ::StringW _get_UriSchemeNetTcp();
    // Set static field: static public readonly System.String UriSchemeNetTcp
    static void _set_UriSchemeNetTcp(::StringW value);
    // Get static field: static public readonly System.String UriSchemeNetPipe
    static ::StringW _get_UriSchemeNetPipe();
    // Set static field: static public readonly System.String UriSchemeNetPipe
    static void _set_UriSchemeNetPipe(::StringW value);
    // Get static field: static public readonly System.String SchemeDelimiter
    static ::StringW _get_SchemeDelimiter();
    // Set static field: static public readonly System.String SchemeDelimiter
    static void _set_SchemeDelimiter(::StringW value);
    // Get static field: static private System.Boolean s_ConfigInitialized
    static bool _get_s_ConfigInitialized();
    // Set static field: static private System.Boolean s_ConfigInitialized
    static void _set_s_ConfigInitialized(bool value);
    // Get static field: static private System.Boolean s_ConfigInitializing
    static bool _get_s_ConfigInitializing();
    // Set static field: static private System.Boolean s_ConfigInitializing
    static void _set_s_ConfigInitializing(bool value);
    // Get static field: static private System.UriIdnScope s_IdnScope
    static ::System::UriIdnScope _get_s_IdnScope();
    // Set static field: static private System.UriIdnScope s_IdnScope
    static void _set_s_IdnScope(::System::UriIdnScope value);
    // Get static field: static private System.Boolean s_IriParsing
    static bool _get_s_IriParsing();
    // Set static field: static private System.Boolean s_IriParsing
    static void _set_s_IriParsing(bool value);
    // Get static field: static private System.Boolean useDotNetRelativeOrAbsolute
    static bool _get_useDotNetRelativeOrAbsolute();
    // Set static field: static private System.Boolean useDotNetRelativeOrAbsolute
    static void _set_useDotNetRelativeOrAbsolute(bool value);
    // Get static field: static readonly System.Boolean IsWindowsFileSystem
    static bool _get_IsWindowsFileSystem();
    // Set static field: static readonly System.Boolean IsWindowsFileSystem
    static void _set_IsWindowsFileSystem(bool value);
    // Get static field: static private System.Object s_initLock
    static ::Il2CppObject* _get_s_initLock();
    // Set static field: static private System.Object s_initLock
    static void _set_s_initLock(::Il2CppObject* value);
    // Get static field: static readonly System.Char[] HexLowerChars
    static ::ArrayW<::Il2CppChar> _get_HexLowerChars();
    // Set static field: static readonly System.Char[] HexLowerChars
    static void _set_HexLowerChars(::ArrayW<::Il2CppChar> value);
    // Get static field: static private readonly System.Char[] _WSchars
    static ::ArrayW<::Il2CppChar> _get__WSchars();
    // Set static field: static private readonly System.Char[] _WSchars
    static void _set__WSchars(::ArrayW<::Il2CppChar> value);
    // Get instance field reference: private System.String m_String
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_String();
    // Get instance field reference: private System.String m_originalUnicodeString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_originalUnicodeString();
    // Get instance field reference: private System.UriParser m_Syntax
    [[deprecated("Use field access instead!")]] ::System::UriParser*& dyn_m_Syntax();
    // Get instance field reference: private System.String m_DnsSafeHost
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_DnsSafeHost();
    // Get instance field reference: private System.Uri/System.Flags m_Flags
    [[deprecated("Use field access instead!")]] ::System::Uri::Flags& dyn_m_Flags();
    // Get instance field reference: private System.Uri/System.UriInfo m_Info
    [[deprecated("Use field access instead!")]] ::System::Uri::UriInfo*& dyn_m_Info();
    // Get instance field reference: private System.Boolean m_iriParsing
    [[deprecated("Use field access instead!")]] bool& dyn_m_iriParsing();
    // private System.Boolean get_IsImplicitFile()
    // Offset: 0x5DF170
    bool get_IsImplicitFile();
    // private System.Boolean get_IsUncOrDosPath()
    // Offset: 0x5DF250
    bool get_IsUncOrDosPath();
    // private System.Boolean get_IsDosPath()
    // Offset: 0x5DF0A0
    bool get_IsDosPath();
    // private System.Boolean get_IsUncPath()
    // Offset: 0x5DF260
    bool get_IsUncPath();
    // private System.Uri/System.Flags get_HostType()
    // Offset: 0x5DEF80
    ::System::Uri::Flags get_HostType();
    // private System.UriParser get_Syntax()
    // Offset: 0x1E1950
    ::System::UriParser* get_Syntax();
    // private System.Boolean get_IsNotAbsoluteUri()
    // Offset: 0x5DF240
    bool get_IsNotAbsoluteUri();
    // private System.Boolean get_AllowIdn()
    // Offset: 0x5DEA10
    bool get_AllowIdn();
    // System.Boolean get_UserDrivenParsing()
    // Offset: 0x5DF760
    bool get_UserDrivenParsing();
    // private System.UInt16 get_SecuredPathIndex()
    // Offset: 0x5DF700
    uint16_t get_SecuredPathIndex();
    // public System.String get_AbsolutePath()
    // Offset: 0x5DE760
    ::StringW get_AbsolutePath();
    // private System.String get_PrivateAbsolutePath()
    // Offset: 0x5DF5A0
    ::StringW get_PrivateAbsolutePath();
    // public System.String get_AbsoluteUri()
    // Offset: 0x5DE8E0
    ::StringW get_AbsoluteUri();
    // public System.Boolean get_IsFile()
    // Offset: 0x5DF0B0
    bool get_IsFile();
    // public System.Boolean get_IsLoopback()
    // Offset: 0x5DF180
    bool get_IsLoopback();
    // public System.String get_PathAndQuery()
    // Offset: 0x5DF3D0
    ::StringW get_PathAndQuery();
    // public System.Boolean get_IsUnc()
    // Offset: 0x5DF270
    bool get_IsUnc();
    // static private System.Object get_InitializeLock()
    // Offset: 0x5DEF90
    static ::Il2CppObject* get_InitializeLock();
    // public System.Int32 get_Port()
    // Offset: 0x5DF4A0
    int get_Port();
    // public System.String get_Fragment()
    // Offset: 0x5DEE50
    ::StringW get_Fragment();
    // public System.String get_Scheme()
    // Offset: 0x5DF680
    ::StringW get_Scheme();
    // private System.Boolean get_OriginalStringSwitched()
    // Offset: 0x5DF300
    bool get_OriginalStringSwitched();
    // public System.String get_OriginalString()
    // Offset: 0x5DF370
    ::StringW get_OriginalString();
    // public System.String get_DnsSafeHost()
    // Offset: 0x5DEB10
    ::StringW get_DnsSafeHost();
    // public System.Boolean get_IsAbsoluteUri()
    // Offset: 0x5DF090
    bool get_IsAbsoluteUri();
    // public System.Boolean get_UserEscaped()
    // Offset: 0x5DF770
    bool get_UserEscaped();
    // public System.Void .ctor(System.String uriString)
    // Offset: 0x5DE620
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::StringW uriString) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(uriString)));
    }
    // public System.Void .ctor(System.String uriString, System.UriKind uriKind)
    // Offset: 0x5DE580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::StringW uriString, ::System::UriKind uriKind) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(uriString, uriKind)));
    }
    // public System.Void .ctor(System.Uri baseUri, System.String relativeUri)
    // Offset: 0x5DE210
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::System::Uri* baseUri, ::StringW relativeUri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(baseUri, relativeUri)));
    }
    // public System.Void .ctor(System.Uri baseUri, System.Uri relativeUri)
    // Offset: 0x5DE2F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::System::Uri* baseUri, ::System::Uri* relativeUri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(baseUri, relativeUri)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x5DDFD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(serializationInfo, streamingContext)));
    }
    // private System.Void .ctor(System.Uri/System.Flags flags, System.UriParser uriParser, System.String uri)
    // Offset: 0x5DE520
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::System::Uri::Flags flags, ::System::UriParser* uriParser, ::StringW uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(flags, uriParser, uri)));
    }
    // static private System.Void .cctor()
    // Offset: 0x5DDB50
    static void _cctor();
    // static System.Boolean IriParsingStatic(System.UriParser syntax)
    // Offset: 0x5D9A90
    static bool IriParsingStatic(::System::UriParser* syntax);
    // private System.Boolean AllowIdnStatic(System.UriParser syntax, System.Uri/System.Flags flags)
    // Offset: 0x5D11E0
    bool AllowIdnStatic(::System::UriParser* syntax, ::System::Uri::Flags flags);
    // private System.Boolean IsIntranet(System.String schemeHost)
    // Offset: 0x28A560
    bool IsIntranet(::StringW schemeHost);
    // private System.Void SetUserDrivenParsing()
    // Offset: 0x5DD380
    void SetUserDrivenParsing();
    // private System.Boolean NotAny(System.Uri/System.Flags flags)
    // Offset: 0x5D9CA0
    bool NotAny(::System::Uri::Flags flags);
    // private System.Boolean InFact(System.Uri/System.Flags flags)
    // Offset: 0x5D8F00
    bool InFact(::System::Uri::Flags flags);
    // static private System.Boolean StaticNotAny(System.Uri/System.Flags allFlags, System.Uri/System.Flags checkFlags)
    // Offset: 0x5DD3D0
    static bool StaticNotAny(::System::Uri::Flags allFlags, ::System::Uri::Flags checkFlags);
    // static private System.Boolean StaticInFact(System.Uri/System.Flags allFlags, System.Uri/System.Flags checkFlags)
    // Offset: 0x5DD3A0
    static bool StaticInFact(::System::Uri::Flags allFlags, ::System::Uri::Flags checkFlags);
    // private System.Uri/System.UriInfo EnsureUriInfo()
    // Offset: 0x5D6110
    ::System::Uri::UriInfo* EnsureUriInfo();
    // private System.Void EnsureParseRemaining()
    // Offset: 0x5D60F0
    void EnsureParseRemaining();
    // private System.Void EnsureHostString(System.Boolean allowDnsOptimization)
    // Offset: 0x5D6090
    void EnsureHostString(bool allowDnsOptimization);
    // private System.Void CreateUri(System.Uri baseUri, System.String relativeUri, System.Boolean dontEscape)
    // Offset: 0x5D5D50
    void CreateUri(::System::Uri* baseUri, ::StringW relativeUri, bool dontEscape);
    // static private System.ParsingError GetCombinedString(System.Uri baseUri, System.String relativeStr, System.Boolean dontEscape, ref System.String result)
    // Offset: 0x5D72C0
    static ::System::ParsingError GetCombinedString(::System::Uri* baseUri, ::StringW relativeStr, bool dontEscape, ByRef<::StringW> result);
    // static private System.UriFormatException GetException(System.ParsingError err)
    // Offset: 0x5D7B60
    static ::System::UriFormatException* GetException(::System::ParsingError err);
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x5D82D0
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // protected System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x5D82D0
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // static private System.Boolean StaticIsFile(System.UriParser syntax)
    // Offset: 0x5DD3B0
    static bool StaticIsFile(::System::UriParser* syntax);
    // static private System.Void InitializeUriConfig()
    // Offset: 0x5D8F10
    static void InitializeUriConfig();
    // static System.Boolean IsGenDelim(System.Char ch)
    // Offset: 0x5D9C10
    static bool IsGenDelim(::Il2CppChar ch);
    // static public System.Boolean IsHexDigit(System.Char character)
    // Offset: 0x5D9C40
    static bool IsHexDigit(::Il2CppChar character);
    // static public System.Int32 FromHex(System.Char digit)
    // Offset: 0x5D6A30
    static int FromHex(::Il2CppChar digit);
    // static private System.ParsingError ParseScheme(System.String uriString, ref System.Uri/System.Flags flags, ref System.UriParser syntax)
    // Offset: 0x5DB040
    static ::System::ParsingError ParseScheme(::StringW uriString, ByRef<::System::Uri::Flags> flags, ByRef<::System::UriParser*> syntax);
    // System.UriFormatException ParseMinimal()
    // Offset: 0x5D9CB0
    ::System::UriFormatException* ParseMinimal();
    // private System.ParsingError PrivateParseMinimal()
    // Offset: 0x5DB250
    ::System::ParsingError PrivateParseMinimal();
    // private System.Void PrivateParseMinimalIri(System.String newHost, System.UInt16 idx)
    // Offset: 0x5DB130
    void PrivateParseMinimalIri(::StringW newHost, uint16_t idx);
    // private System.Void CreateUriInfo(System.Uri/System.Flags cF)
    // Offset: 0x5D5780
    void CreateUriInfo(::System::Uri::Flags cF);
    // private System.Void CreateHostString()
    // Offset: 0x5D4FA0
    void CreateHostString();
    // static private System.String CreateHostStringHelper(System.String str, System.UInt16 idx, System.UInt16 end, ref System.Uri/System.Flags flags, ref System.String scopeId)
    // Offset: 0x5D4DD0
    static ::StringW CreateHostStringHelper(::StringW str, uint16_t idx, uint16_t end, ByRef<::System::Uri::Flags> flags, ByRef<::StringW> scopeId);
    // private System.Void GetHostViaCustomSyntax()
    // Offset: 0x5D7E30
    void GetHostViaCustomSyntax();
    // System.String GetParts(System.UriComponents uriParts, System.UriFormat formatAs)
    // Offset: 0x5D7890
    ::StringW GetParts(::System::UriComponents uriParts, ::System::UriFormat formatAs);
    // private System.String GetEscapedParts(System.UriComponents uriParts)
    // Offset: 0x5D7A40
    ::StringW GetEscapedParts(::System::UriComponents uriParts);
    // private System.String GetUnescapedParts(System.UriComponents uriParts, System.UriFormat formatAs)
    // Offset: 0x5D8620
    ::StringW GetUnescapedParts(::System::UriComponents uriParts, ::System::UriFormat formatAs);
    // private System.String ReCreateParts(System.UriComponents parts, System.UInt16 nonCanonical, System.UriFormat formatAs)
    // Offset: 0x5DB9F0
    ::StringW ReCreateParts(::System::UriComponents parts, uint16_t nonCanonical, ::System::UriFormat formatAs);
    // private System.String GetUriPartsFromUserString(System.UriComponents uriParts)
    // Offset: 0x5D8710
    ::StringW GetUriPartsFromUserString(::System::UriComponents uriParts);
    // private System.Void ParseRemaining()
    // Offset: 0x5D9D30
    void ParseRemaining();
    // static private System.UInt16 ParseSchemeCheckImplicitFile(System.Char* uriString, System.UInt16 length, ref System.ParsingError err, ref System.Uri/System.Flags flags, ref System.UriParser syntax)
    // Offset: 0x5DAB40
    static uint16_t ParseSchemeCheckImplicitFile(::Il2CppChar* uriString, uint16_t length, ByRef<::System::ParsingError> err, ByRef<::System::Uri::Flags> flags, ByRef<::System::UriParser*> syntax);
    // static private System.Boolean CheckKnownSchemes(System.Int64* lptr, System.UInt16 nChars, ref System.UriParser syntax)
    // Offset: 0x5D33C0
    static bool CheckKnownSchemes(int64_t* lptr, uint16_t nChars, ByRef<::System::UriParser*> syntax);
    // static private System.ParsingError CheckSchemeSyntax(System.Char* ptr, System.UInt16 length, ref System.UriParser syntax)
    // Offset: 0x5D3970
    static ::System::ParsingError CheckSchemeSyntax(::Il2CppChar* ptr, uint16_t length, ByRef<::System::UriParser*> syntax);
    // private System.UInt16 CheckAuthorityHelper(System.Char* pString, System.UInt16 idx, System.UInt16 length, ref System.ParsingError err, ref System.Uri/System.Flags flags, System.UriParser syntax, ref System.String newHost)
    // Offset: 0x5D1BF0
    uint16_t CheckAuthorityHelper(::Il2CppChar* pString, uint16_t idx, uint16_t length, ByRef<::System::ParsingError> err, ByRef<::System::Uri::Flags> flags, ::System::UriParser* syntax, ByRef<::StringW> newHost);
    // private System.Void CheckAuthorityHelperHandleDnsIri(System.Char* pString, System.UInt16 start, System.Int32 end, System.Int32 startInput, System.Boolean iriParsing, System.Boolean hasUnicode, System.UriParser syntax, System.String userInfoString, ref System.Uri/System.Flags flags, ref System.Boolean justNormalized, ref System.String newHost, ref System.ParsingError err)
    // Offset: 0x5D1690
    void CheckAuthorityHelperHandleDnsIri(::Il2CppChar* pString, uint16_t start, int end, int startInput, bool iriParsing, bool hasUnicode, ::System::UriParser* syntax, ::StringW userInfoString, ByRef<::System::Uri::Flags> flags, ByRef<bool> justNormalized, ByRef<::StringW> newHost, ByRef<::System::ParsingError> err);
    // private System.Void CheckAuthorityHelperHandleAnyHostIri(System.Char* pString, System.Int32 startInput, System.Int32 end, System.Boolean iriParsing, System.Boolean hasUnicode, System.UriParser syntax, ref System.Uri/System.Flags flags, ref System.String newHost, ref System.ParsingError err)
    // Offset: 0x5D13B0
    void CheckAuthorityHelperHandleAnyHostIri(::Il2CppChar* pString, int startInput, int end, bool iriParsing, bool hasUnicode, ::System::UriParser* syntax, ByRef<::System::Uri::Flags> flags, ByRef<::StringW> newHost, ByRef<::System::ParsingError> err);
    // private System.Void FindEndOfComponent(System.String input, ref System.UInt16 idx, System.UInt16 end, System.Char delim)
    // Offset: 0x5D69A0
    void FindEndOfComponent(::StringW input, ByRef<uint16_t> idx, uint16_t end, ::Il2CppChar delim);
    // private System.Void FindEndOfComponent(System.Char* str, ref System.UInt16 idx, System.UInt16 end, System.Char delim)
    // Offset: 0x5D6930
    void FindEndOfComponent(::Il2CppChar* str, ByRef<uint16_t> idx, uint16_t end, ::Il2CppChar delim);
    // private System.Uri/System.Check CheckCanonical(System.Char* str, ref System.UInt16 idx, System.UInt16 end, System.Char delim)
    // Offset: 0x5D2BB0
    ::System::Uri::Check CheckCanonical(::Il2CppChar* str, ByRef<uint16_t> idx, uint16_t end, ::Il2CppChar delim);
    // private System.Char[] GetCanonicalPath(System.Char[] dest, ref System.Int32 pos, System.UriFormat formatAs)
    // Offset: 0x5D6AD0
    ::ArrayW<::Il2CppChar> GetCanonicalPath(::ArrayW<::Il2CppChar> dest, ByRef<int> pos, ::System::UriFormat formatAs);
    // static private System.Void UnescapeOnly(System.Char* pch, System.Int32 start, ref System.Int32 end, System.Char ch1, System.Char ch2, System.Char ch3)
    // Offset: 0x5DD930
    static void UnescapeOnly(::Il2CppChar* pch, int start, ByRef<int> end, ::Il2CppChar ch1, ::Il2CppChar ch2, ::Il2CppChar ch3);
    // static private System.Char[] Compress(System.Char[] dest, System.UInt16 start, ref System.Int32 destLength, System.UriParser syntax)
    // Offset: 0x5D46A0
    static ::ArrayW<::Il2CppChar> Compress(::ArrayW<::Il2CppChar> dest, uint16_t start, ByRef<int> destLength, ::System::UriParser* syntax);
    // static System.Int32 CalculateCaseInsensitiveHashCode(System.String text)
    // Offset: 0x5D12F0
    static int CalculateCaseInsensitiveHashCode(::StringW text);
    // static private System.String CombineUri(System.Uri basePart, System.String relativePart, System.UriFormat uriFormat)
    // Offset: 0x5D3AA0
    static ::StringW CombineUri(::System::Uri* basePart, ::StringW relativePart, ::System::UriFormat uriFormat);
    // static private System.Boolean IsLWS(System.Char ch)
    // Offset: 0x5D9C70
    static bool IsLWS(::Il2CppChar ch);
    // static private System.Boolean IsAsciiLetter(System.Char character)
    // Offset: 0x5D9BB0
    static bool IsAsciiLetter(::Il2CppChar character);
    // static System.Boolean IsAsciiLetterOrDigit(System.Char character)
    // Offset: 0x5D9B30
    static bool IsAsciiLetterOrDigit(::Il2CppChar character);
    // static System.Boolean IsBidiControlCharacter(System.Char ch)
    // Offset: 0x5D9BD0
    static bool IsBidiControlCharacter(::Il2CppChar ch);
    // static System.String StripBidiControlCharacter(System.Char* strToClean, System.Int32 start, System.Int32 length)
    // Offset: 0x5DD3E0
    static ::StringW StripBidiControlCharacter(::Il2CppChar* strToClean, int start, int length);
    // private System.Void CreateThis(System.String uri, System.Boolean dontEscape, System.UriKind uriKind)
    // Offset: 0x5D55D0
    void CreateThis(::StringW uri, bool dontEscape, ::System::UriKind uriKind);
    // private System.Void InitializeUri(System.ParsingError err, System.UriKind uriKind, out System.UriFormatException e)
    // Offset: 0x5D91A0
    void InitializeUri(::System::ParsingError err, ::System::UriKind uriKind, ByRef<::System::UriFormatException*> e);
    // private System.Boolean CheckForConfigLoad(System.String data)
    // Offset: 0x5D2F60
    bool CheckForConfigLoad(::StringW data);
    // private System.Boolean CheckForUnicode(System.String data)
    // Offset: 0x5D3220
    bool CheckForUnicode(::StringW data);
    // private System.Boolean CheckForEscapedUnreserved(System.String data)
    // Offset: 0x5D3010
    bool CheckForEscapedUnreserved(::StringW data);
    // static public System.Boolean TryCreate(System.String uriString, System.UriKind uriKind, out System.Uri result)
    // Offset: 0x5DD660
    static bool TryCreate(::StringW uriString, ::System::UriKind uriKind, ByRef<::System::Uri*> result);
    // public System.String GetComponents(System.UriComponents components, System.UriFormat format)
    // Offset: 0x5D7890
    ::StringW GetComponents(::System::UriComponents components, ::System::UriFormat format);
    // static public System.String UnescapeDataString(System.String stringToUnescape)
    // Offset: 0x5DD750
    static ::StringW UnescapeDataString(::StringW stringToUnescape);
    // System.String EscapeUnescapeIri(System.String input, System.Int32 start, System.Int32 end, System.UriComponents component)
    // Offset: 0x5D68D0
    ::StringW EscapeUnescapeIri(::StringW input, int start, int end, ::System::UriComponents component);
    // static System.Uri CreateHelper(System.String uriString, System.Boolean dontEscape, System.UriKind uriKind, ref System.UriFormatException e)
    // Offset: 0x5D4B20
    static ::System::Uri* CreateHelper(::StringW uriString, bool dontEscape, ::System::UriKind uriKind, ByRef<::System::UriFormatException*> e);
    // static System.Uri ResolveHelper(System.Uri baseUri, System.Uri relativeUri, ref System.String newUriString, ref System.Boolean userEscaped, out System.UriFormatException e)
    // Offset: 0x5DCE70
    static ::System::Uri* ResolveHelper(::System::Uri* baseUri, ::System::Uri* relativeUri, ByRef<::StringW> newUriString, ByRef<bool> userEscaped, ByRef<::System::UriFormatException*> e);
    // private System.String GetRelativeSerializationString(System.UriFormat format)
    // Offset: 0x5D83A0
    ::StringW GetRelativeSerializationString(::System::UriFormat format);
    // System.String GetComponentsHelper(System.UriComponents uriComponents, System.UriFormat uriFormat)
    // Offset: 0x5D74E0
    ::StringW GetComponentsHelper(::System::UriComponents uriComponents, ::System::UriFormat uriFormat);
    // private System.Void CreateThisFromUri(System.Uri otherUri)
    // Offset: 0x5D5420
    void CreateThisFromUri(::System::Uri* otherUri);
    // public override System.Int32 GetHashCode()
    // Offset: 0x5D7C80
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x5DD550
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object comparand)
    // Offset: 0x5D6140
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object comparand)
    bool Equals(::Il2CppObject* comparand);
  }; // System.Uri
  #pragma pack(pop)
  static check_size<sizeof(Uri), 64 + sizeof(bool)> __System_UriSizeCheck;
  static_assert(sizeof(Uri) == 0x41);
  // static public System.Boolean op_Equality(System.Uri uri1, System.Uri uri2)
  // Offset: 0x5DF780
  bool operator ==(::System::Uri* uri1, ::System::Uri& uri2);
  // static public System.Boolean op_Inequality(System.Uri uri1, System.Uri uri2)
  // Offset: 0x5DF7B0
  bool operator !=(::System::Uri* uri1, ::System::Uri& uri2);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Uri::Flags, "System", "Uri/Flags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Uri::get_IsImplicitFile
// Il2CppName: get_IsImplicitFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsImplicitFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsImplicitFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsUncOrDosPath
// Il2CppName: get_IsUncOrDosPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsUncOrDosPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsUncOrDosPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsDosPath
// Il2CppName: get_IsDosPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsDosPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsDosPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsUncPath
// Il2CppName: get_IsUncPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsUncPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsUncPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_HostType
// Il2CppName: get_HostType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri::Flags (System::Uri::*)()>(&System::Uri::get_HostType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_HostType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_Syntax
// Il2CppName: get_Syntax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::UriParser* (System::Uri::*)()>(&System::Uri::get_Syntax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_Syntax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsNotAbsoluteUri
// Il2CppName: get_IsNotAbsoluteUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsNotAbsoluteUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsNotAbsoluteUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_AllowIdn
// Il2CppName: get_AllowIdn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_AllowIdn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_AllowIdn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_UserDrivenParsing
// Il2CppName: get_UserDrivenParsing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_UserDrivenParsing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_UserDrivenParsing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_SecuredPathIndex
// Il2CppName: get_SecuredPathIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Uri::*)()>(&System::Uri::get_SecuredPathIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_SecuredPathIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_AbsolutePath
// Il2CppName: get_AbsolutePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_AbsolutePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_AbsolutePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_PrivateAbsolutePath
// Il2CppName: get_PrivateAbsolutePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_PrivateAbsolutePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_PrivateAbsolutePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_AbsoluteUri
// Il2CppName: get_AbsoluteUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_AbsoluteUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_AbsoluteUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsFile
// Il2CppName: get_IsFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsLoopback
// Il2CppName: get_IsLoopback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsLoopback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsLoopback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_PathAndQuery
// Il2CppName: get_PathAndQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_PathAndQuery)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_PathAndQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsUnc
// Il2CppName: get_IsUnc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsUnc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsUnc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_InitializeLock
// Il2CppName: get_InitializeLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)()>(&System::Uri::get_InitializeLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_InitializeLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_Port
// Il2CppName: get_Port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Uri::*)()>(&System::Uri::get_Port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_Port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_Fragment
// Il2CppName: get_Fragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_Fragment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_Fragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_Scheme
// Il2CppName: get_Scheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_Scheme)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_Scheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_OriginalStringSwitched
// Il2CppName: get_OriginalStringSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_OriginalStringSwitched)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_OriginalStringSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_OriginalString
// Il2CppName: get_OriginalString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_OriginalString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_OriginalString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_DnsSafeHost
// Il2CppName: get_DnsSafeHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::get_DnsSafeHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_DnsSafeHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_IsAbsoluteUri
// Il2CppName: get_IsAbsoluteUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_IsAbsoluteUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_IsAbsoluteUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::get_UserEscaped
// Il2CppName: get_UserEscaped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)()>(&System::Uri::get_UserEscaped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "get_UserEscaped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Uri::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Uri::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Uri::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Uri::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Uri::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Uri::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Uri::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::IriParsingStatic
// Il2CppName: IriParsingStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::UriParser*)>(&System::Uri::IriParsingStatic)> {
  static const MethodInfo* get() {
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IriParsingStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{syntax});
  }
};
// Writing MetadataGetter for method: System::Uri::AllowIdnStatic
// Il2CppName: AllowIdnStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::System::UriParser*, ::System::Uri::Flags)>(&System::Uri::AllowIdnStatic)> {
  static const MethodInfo* get() {
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "AllowIdnStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{syntax, flags});
  }
};
// Writing MetadataGetter for method: System::Uri::IsIntranet
// Il2CppName: IsIntranet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::StringW)>(&System::Uri::IsIntranet)> {
  static const MethodInfo* get() {
    static auto* schemeHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IsIntranet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemeHost});
  }
};
// Writing MetadataGetter for method: System::Uri::SetUserDrivenParsing
// Il2CppName: SetUserDrivenParsing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)()>(&System::Uri::SetUserDrivenParsing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "SetUserDrivenParsing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::NotAny
// Il2CppName: NotAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::System::Uri::Flags)>(&System::Uri::NotAny)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "NotAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: System::Uri::InFact
// Il2CppName: InFact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::System::Uri::Flags)>(&System::Uri::InFact)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "InFact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: System::Uri::StaticNotAny
// Il2CppName: StaticNotAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Uri::Flags, ::System::Uri::Flags)>(&System::Uri::StaticNotAny)> {
  static const MethodInfo* get() {
    static auto* allFlags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    static auto* checkFlags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "StaticNotAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allFlags, checkFlags});
  }
};
// Writing MetadataGetter for method: System::Uri::StaticInFact
// Il2CppName: StaticInFact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Uri::Flags, ::System::Uri::Flags)>(&System::Uri::StaticInFact)> {
  static const MethodInfo* get() {
    static auto* allFlags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    static auto* checkFlags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "StaticInFact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allFlags, checkFlags});
  }
};
// Writing MetadataGetter for method: System::Uri::EnsureUriInfo
// Il2CppName: EnsureUriInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri::UriInfo* (System::Uri::*)()>(&System::Uri::EnsureUriInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "EnsureUriInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::EnsureParseRemaining
// Il2CppName: EnsureParseRemaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)()>(&System::Uri::EnsureParseRemaining)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "EnsureParseRemaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::EnsureHostString
// Il2CppName: EnsureHostString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(bool)>(&System::Uri::EnsureHostString)> {
  static const MethodInfo* get() {
    static auto* allowDnsOptimization = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "EnsureHostString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allowDnsOptimization});
  }
};
// Writing MetadataGetter for method: System::Uri::CreateUri
// Il2CppName: CreateUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::System::Uri*, ::StringW, bool)>(&System::Uri::CreateUri)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* relativeUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dontEscape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CreateUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, relativeUri, dontEscape});
  }
};
// Writing MetadataGetter for method: System::Uri::GetCombinedString
// Il2CppName: GetCombinedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ParsingError (*)(::System::Uri*, ::StringW, bool, ByRef<::StringW>)>(&System::Uri::GetCombinedString)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* relativeStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dontEscape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetCombinedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, relativeStr, dontEscape, result});
  }
};
// Writing MetadataGetter for method: System::Uri::GetException
// Il2CppName: GetException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::UriFormatException* (*)(::System::ParsingError)>(&System::Uri::GetException)> {
  static const MethodInfo* get() {
    static auto* err = &::il2cpp_utils::GetClassFromName("System", "ParsingError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{err});
  }
};
// Writing MetadataGetter for method: System::Uri::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Uri::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: System::Uri::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Uri::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: System::Uri::StaticIsFile
// Il2CppName: StaticIsFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::UriParser*)>(&System::Uri::StaticIsFile)> {
  static const MethodInfo* get() {
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "StaticIsFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{syntax});
  }
};
// Writing MetadataGetter for method: System::Uri::InitializeUriConfig
// Il2CppName: InitializeUriConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Uri::InitializeUriConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "InitializeUriConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::IsGenDelim
// Il2CppName: IsGenDelim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Uri::IsGenDelim)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IsGenDelim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Uri::IsHexDigit
// Il2CppName: IsHexDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Uri::IsHexDigit)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IsHexDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: System::Uri::FromHex
// Il2CppName: FromHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar)>(&System::Uri::FromHex)> {
  static const MethodInfo* get() {
    static auto* digit = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "FromHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{digit});
  }
};
// Writing MetadataGetter for method: System::Uri::ParseScheme
// Il2CppName: ParseScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ParsingError (*)(::StringW, ByRef<::System::Uri::Flags>, ByRef<::System::UriParser*>)>(&System::Uri::ParseScheme)> {
  static const MethodInfo* get() {
    static auto* uriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->this_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "ParseScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriString, flags, syntax});
  }
};
// Writing MetadataGetter for method: System::Uri::ParseMinimal
// Il2CppName: ParseMinimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::UriFormatException* (System::Uri::*)()>(&System::Uri::ParseMinimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "ParseMinimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::PrivateParseMinimal
// Il2CppName: PrivateParseMinimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ParsingError (System::Uri::*)()>(&System::Uri::PrivateParseMinimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "PrivateParseMinimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::PrivateParseMinimalIri
// Il2CppName: PrivateParseMinimalIri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::StringW, uint16_t)>(&System::Uri::PrivateParseMinimalIri)> {
  static const MethodInfo* get() {
    static auto* newHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "PrivateParseMinimalIri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newHost, idx});
  }
};
// Writing MetadataGetter for method: System::Uri::CreateUriInfo
// Il2CppName: CreateUriInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::System::Uri::Flags)>(&System::Uri::CreateUriInfo)> {
  static const MethodInfo* get() {
    static auto* cF = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CreateUriInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cF});
  }
};
// Writing MetadataGetter for method: System::Uri::CreateHostString
// Il2CppName: CreateHostString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)()>(&System::Uri::CreateHostString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CreateHostString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::CreateHostStringHelper
// Il2CppName: CreateHostStringHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, uint16_t, uint16_t, ByRef<::System::Uri::Flags>, ByRef<::StringW>)>(&System::Uri::CreateHostStringHelper)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->this_arg;
    static auto* scopeId = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CreateHostStringHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, idx, end, flags, scopeId});
  }
};
// Writing MetadataGetter for method: System::Uri::GetHostViaCustomSyntax
// Il2CppName: GetHostViaCustomSyntax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)()>(&System::Uri::GetHostViaCustomSyntax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetHostViaCustomSyntax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::GetParts
// Il2CppName: GetParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriComponents, ::System::UriFormat)>(&System::Uri::GetParts)> {
  static const MethodInfo* get() {
    static auto* uriParts = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    static auto* formatAs = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriParts, formatAs});
  }
};
// Writing MetadataGetter for method: System::Uri::GetEscapedParts
// Il2CppName: GetEscapedParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriComponents)>(&System::Uri::GetEscapedParts)> {
  static const MethodInfo* get() {
    static auto* uriParts = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetEscapedParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriParts});
  }
};
// Writing MetadataGetter for method: System::Uri::GetUnescapedParts
// Il2CppName: GetUnescapedParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriComponents, ::System::UriFormat)>(&System::Uri::GetUnescapedParts)> {
  static const MethodInfo* get() {
    static auto* uriParts = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    static auto* formatAs = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetUnescapedParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriParts, formatAs});
  }
};
// Writing MetadataGetter for method: System::Uri::ReCreateParts
// Il2CppName: ReCreateParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriComponents, uint16_t, ::System::UriFormat)>(&System::Uri::ReCreateParts)> {
  static const MethodInfo* get() {
    static auto* parts = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    static auto* nonCanonical = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* formatAs = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "ReCreateParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parts, nonCanonical, formatAs});
  }
};
// Writing MetadataGetter for method: System::Uri::GetUriPartsFromUserString
// Il2CppName: GetUriPartsFromUserString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriComponents)>(&System::Uri::GetUriPartsFromUserString)> {
  static const MethodInfo* get() {
    static auto* uriParts = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetUriPartsFromUserString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriParts});
  }
};
// Writing MetadataGetter for method: System::Uri::ParseRemaining
// Il2CppName: ParseRemaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)()>(&System::Uri::ParseRemaining)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "ParseRemaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::ParseSchemeCheckImplicitFile
// Il2CppName: ParseSchemeCheckImplicitFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(::Il2CppChar*, uint16_t, ByRef<::System::ParsingError>, ByRef<::System::Uri::Flags>, ByRef<::System::UriParser*>)>(&System::Uri::ParseSchemeCheckImplicitFile)> {
  static const MethodInfo* get() {
    static auto* uriString = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* err = &::il2cpp_utils::GetClassFromName("System", "ParsingError")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->this_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "ParseSchemeCheckImplicitFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriString, length, err, flags, syntax});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckKnownSchemes
// Il2CppName: CheckKnownSchemes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t*, uint16_t, ByRef<::System::UriParser*>)>(&System::Uri::CheckKnownSchemes)> {
  static const MethodInfo* get() {
    static auto* lptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int64"))->byval_arg;
    static auto* nChars = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckKnownSchemes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lptr, nChars, syntax});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckSchemeSyntax
// Il2CppName: CheckSchemeSyntax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ParsingError (*)(::Il2CppChar*, uint16_t, ByRef<::System::UriParser*>)>(&System::Uri::CheckSchemeSyntax)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckSchemeSyntax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, length, syntax});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckAuthorityHelper
// Il2CppName: CheckAuthorityHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Uri::*)(::Il2CppChar*, uint16_t, uint16_t, ByRef<::System::ParsingError>, ByRef<::System::Uri::Flags>, ::System::UriParser*, ByRef<::StringW>)>(&System::Uri::CheckAuthorityHelper)> {
  static const MethodInfo* get() {
    static auto* pString = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* err = &::il2cpp_utils::GetClassFromName("System", "ParsingError")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->this_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->byval_arg;
    static auto* newHost = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckAuthorityHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pString, idx, length, err, flags, syntax, newHost});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckAuthorityHelperHandleDnsIri
// Il2CppName: CheckAuthorityHelperHandleDnsIri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::Il2CppChar*, uint16_t, int, int, bool, bool, ::System::UriParser*, ::StringW, ByRef<::System::Uri::Flags>, ByRef<bool>, ByRef<::StringW>, ByRef<::System::ParsingError>)>(&System::Uri::CheckAuthorityHelperHandleDnsIri)> {
  static const MethodInfo* get() {
    static auto* pString = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startInput = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* iriParsing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasUnicode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->byval_arg;
    static auto* userInfoString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->this_arg;
    static auto* justNormalized = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* newHost = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* err = &::il2cpp_utils::GetClassFromName("System", "ParsingError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckAuthorityHelperHandleDnsIri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pString, start, end, startInput, iriParsing, hasUnicode, syntax, userInfoString, flags, justNormalized, newHost, err});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckAuthorityHelperHandleAnyHostIri
// Il2CppName: CheckAuthorityHelperHandleAnyHostIri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::Il2CppChar*, int, int, bool, bool, ::System::UriParser*, ByRef<::System::Uri::Flags>, ByRef<::StringW>, ByRef<::System::ParsingError>)>(&System::Uri::CheckAuthorityHelperHandleAnyHostIri)> {
  static const MethodInfo* get() {
    static auto* pString = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* startInput = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* iriParsing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasUnicode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Uri/Flags")->this_arg;
    static auto* newHost = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* err = &::il2cpp_utils::GetClassFromName("System", "ParsingError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckAuthorityHelperHandleAnyHostIri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pString, startInput, end, iriParsing, hasUnicode, syntax, flags, newHost, err});
  }
};
// Writing MetadataGetter for method: System::Uri::FindEndOfComponent
// Il2CppName: FindEndOfComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::StringW, ByRef<uint16_t>, uint16_t, ::Il2CppChar)>(&System::Uri::FindEndOfComponent)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* delim = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "FindEndOfComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, idx, end, delim});
  }
};
// Writing MetadataGetter for method: System::Uri::FindEndOfComponent
// Il2CppName: FindEndOfComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::Il2CppChar*, ByRef<uint16_t>, uint16_t, ::Il2CppChar)>(&System::Uri::FindEndOfComponent)> {
  static const MethodInfo* get() {
    static auto* str = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* delim = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "FindEndOfComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, idx, end, delim});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckCanonical
// Il2CppName: CheckCanonical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri::Check (System::Uri::*)(::Il2CppChar*, ByRef<uint16_t>, uint16_t, ::Il2CppChar)>(&System::Uri::CheckCanonical)> {
  static const MethodInfo* get() {
    static auto* str = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* delim = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckCanonical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, idx, end, delim});
  }
};
// Writing MetadataGetter for method: System::Uri::GetCanonicalPath
// Il2CppName: GetCanonicalPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (System::Uri::*)(::ArrayW<::Il2CppChar>, ByRef<int>, ::System::UriFormat)>(&System::Uri::GetCanonicalPath)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* formatAs = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetCanonicalPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, pos, formatAs});
  }
};
// Writing MetadataGetter for method: System::Uri::UnescapeOnly
// Il2CppName: UnescapeOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*, int, ByRef<int>, ::Il2CppChar, ::Il2CppChar, ::Il2CppChar)>(&System::Uri::UnescapeOnly)> {
  static const MethodInfo* get() {
    static auto* pch = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* ch1 = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* ch2 = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* ch3 = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "UnescapeOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pch, start, end, ch1, ch2, ch3});
  }
};
// Writing MetadataGetter for method: System::Uri::Compress
// Il2CppName: Compress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (*)(::ArrayW<::Il2CppChar>, uint16_t, ByRef<int>, ::System::UriParser*)>(&System::Uri::Compress)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* destLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* syntax = &::il2cpp_utils::GetClassFromName("System", "UriParser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "Compress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, start, destLength, syntax});
  }
};
// Writing MetadataGetter for method: System::Uri::CalculateCaseInsensitiveHashCode
// Il2CppName: CalculateCaseInsensitiveHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&System::Uri::CalculateCaseInsensitiveHashCode)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CalculateCaseInsensitiveHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Uri::CombineUri
// Il2CppName: CombineUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Uri*, ::StringW, ::System::UriFormat)>(&System::Uri::CombineUri)> {
  static const MethodInfo* get() {
    static auto* basePart = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* relativePart = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* uriFormat = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CombineUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basePart, relativePart, uriFormat});
  }
};
// Writing MetadataGetter for method: System::Uri::IsLWS
// Il2CppName: IsLWS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Uri::IsLWS)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IsLWS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Uri::IsAsciiLetter
// Il2CppName: IsAsciiLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Uri::IsAsciiLetter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IsAsciiLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: System::Uri::IsAsciiLetterOrDigit
// Il2CppName: IsAsciiLetterOrDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Uri::IsAsciiLetterOrDigit)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IsAsciiLetterOrDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: System::Uri::IsBidiControlCharacter
// Il2CppName: IsBidiControlCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Uri::IsBidiControlCharacter)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "IsBidiControlCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Uri::StripBidiControlCharacter
// Il2CppName: StripBidiControlCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppChar*, int, int)>(&System::Uri::StripBidiControlCharacter)> {
  static const MethodInfo* get() {
    static auto* strToClean = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "StripBidiControlCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strToClean, start, length});
  }
};
// Writing MetadataGetter for method: System::Uri::CreateThis
// Il2CppName: CreateThis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::StringW, bool, ::System::UriKind)>(&System::Uri::CreateThis)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dontEscape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uriKind = &::il2cpp_utils::GetClassFromName("System", "UriKind")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CreateThis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, dontEscape, uriKind});
  }
};
// Writing MetadataGetter for method: System::Uri::InitializeUri
// Il2CppName: InitializeUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::System::ParsingError, ::System::UriKind, ByRef<::System::UriFormatException*>)>(&System::Uri::InitializeUri)> {
  static const MethodInfo* get() {
    static auto* err = &::il2cpp_utils::GetClassFromName("System", "ParsingError")->byval_arg;
    static auto* uriKind = &::il2cpp_utils::GetClassFromName("System", "UriKind")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "UriFormatException")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "InitializeUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{err, uriKind, e});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckForConfigLoad
// Il2CppName: CheckForConfigLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::StringW)>(&System::Uri::CheckForConfigLoad)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckForConfigLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckForUnicode
// Il2CppName: CheckForUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::StringW)>(&System::Uri::CheckForUnicode)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckForUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Uri::CheckForEscapedUnreserved
// Il2CppName: CheckForEscapedUnreserved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::StringW)>(&System::Uri::CheckForEscapedUnreserved)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CheckForEscapedUnreserved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Uri::TryCreate
// Il2CppName: TryCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::System::UriKind, ByRef<::System::Uri*>)>(&System::Uri::TryCreate)> {
  static const MethodInfo* get() {
    static auto* uriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* uriKind = &::il2cpp_utils::GetClassFromName("System", "UriKind")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Uri")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "TryCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriString, uriKind, result});
  }
};
// Writing MetadataGetter for method: System::Uri::GetComponents
// Il2CppName: GetComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriComponents, ::System::UriFormat)>(&System::Uri::GetComponents)> {
  static const MethodInfo* get() {
    static auto* components = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{components, format});
  }
};
// Writing MetadataGetter for method: System::Uri::UnescapeDataString
// Il2CppName: UnescapeDataString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Uri::UnescapeDataString)> {
  static const MethodInfo* get() {
    static auto* stringToUnescape = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "UnescapeDataString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringToUnescape});
  }
};
// Writing MetadataGetter for method: System::Uri::EscapeUnescapeIri
// Il2CppName: EscapeUnescapeIri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::StringW, int, int, ::System::UriComponents)>(&System::Uri::EscapeUnescapeIri)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* component = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "EscapeUnescapeIri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, start, end, component});
  }
};
// Writing MetadataGetter for method: System::Uri::CreateHelper
// Il2CppName: CreateHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (*)(::StringW, bool, ::System::UriKind, ByRef<::System::UriFormatException*>)>(&System::Uri::CreateHelper)> {
  static const MethodInfo* get() {
    static auto* uriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dontEscape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uriKind = &::il2cpp_utils::GetClassFromName("System", "UriKind")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "UriFormatException")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CreateHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriString, dontEscape, uriKind, e});
  }
};
// Writing MetadataGetter for method: System::Uri::ResolveHelper
// Il2CppName: ResolveHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (*)(::System::Uri*, ::System::Uri*, ByRef<::StringW>, ByRef<bool>, ByRef<::System::UriFormatException*>)>(&System::Uri::ResolveHelper)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* relativeUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* newUriString = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* userEscaped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "UriFormatException")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "ResolveHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, relativeUri, newUriString, userEscaped, e});
  }
};
// Writing MetadataGetter for method: System::Uri::GetRelativeSerializationString
// Il2CppName: GetRelativeSerializationString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriFormat)>(&System::Uri::GetRelativeSerializationString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetRelativeSerializationString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: System::Uri::GetComponentsHelper
// Il2CppName: GetComponentsHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)(::System::UriComponents, ::System::UriFormat)>(&System::Uri::GetComponentsHelper)> {
  static const MethodInfo* get() {
    static auto* uriComponents = &::il2cpp_utils::GetClassFromName("System", "UriComponents")->byval_arg;
    static auto* uriFormat = &::il2cpp_utils::GetClassFromName("System", "UriFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetComponentsHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriComponents, uriFormat});
  }
};
// Writing MetadataGetter for method: System::Uri::CreateThisFromUri
// Il2CppName: CreateThisFromUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Uri::*)(::System::Uri*)>(&System::Uri::CreateThisFromUri)> {
  static const MethodInfo* get() {
    static auto* otherUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "CreateThisFromUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherUri});
  }
};
// Writing MetadataGetter for method: System::Uri::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Uri::*)()>(&System::Uri::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Uri::*)()>(&System::Uri::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Uri::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Uri::*)(::Il2CppObject*)>(&System::Uri::Equals)> {
  static const MethodInfo* get() {
    static auto* comparand = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Uri*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparand});
  }
};
// Writing MetadataGetter for method: System::Uri::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Uri::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
