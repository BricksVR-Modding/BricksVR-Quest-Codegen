// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeView
  class RealtimeView;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: SerializableViewIDPair
  struct SerializableViewIDPair;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::SerializableViewIDPair, "Normal.Realtime", "SerializableViewIDPair");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.SerializableViewIDPair
  // [TokenAttribute] Offset: FFFFFFFF
  struct SerializableViewIDPair/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 viewID
    // Size: 0x4
    // Offset: 0x0
    int viewID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: viewID and: view
    char __padding0[0x4] = {};
    // public Normal.Realtime.RealtimeView view
    // Size: 0x8
    // Offset: 0x8
    ::Normal::Realtime::RealtimeView* view;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeView*) == 0x8);
    public:
    // Creating value type constructor for type: SerializableViewIDPair
    constexpr SerializableViewIDPair(int viewID_ = {}, ::Normal::Realtime::RealtimeView* view_ = {}) noexcept : viewID{viewID_}, view{view_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 viewID
    [[deprecated]] int& dyn_viewID();
    // Get instance field reference: public Normal.Realtime.RealtimeView view
    [[deprecated]] ::Normal::Realtime::RealtimeView*& dyn_view();
    // public System.Void .ctor(System.UInt32 viewID, Normal.Realtime.RealtimeView view)
    // Offset: 0x540440
    SerializableViewIDPair(uint viewID, ::Normal::Realtime::RealtimeView* view);
  }; // Normal.Realtime.SerializableViewIDPair
  #pragma pack(pop)
  static check_size<sizeof(SerializableViewIDPair), 8 + sizeof(::Normal::Realtime::RealtimeView*)> __Normal_Realtime_SerializableViewIDPairSizeCheck;
  static_assert(sizeof(SerializableViewIDPair) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::SerializableViewIDPair::SerializableViewIDPair
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
