// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Native.Cluster
#include "Normal/Realtime/Native/Cluster.hpp"
// Including type: Normal.Realtime.Native.Region
#include "Normal/Realtime/Native/Region.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Normal::Realtime::Native
namespace Normal::Realtime::Native {
  // Skipping declaration: LogLevel because it is already included!
  // Forward declaring type: PersistenceMessageEvent
  struct PersistenceMessageEvent;
  // Forward declaring type: RPCMessageEvent
  struct RPCMessageEvent;
  // Forward declaring type: AudioStreamEvent
  struct AudioStreamEvent;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Native
namespace Normal::Realtime::Native {
  // Forward declaring type: Plugin
  class Plugin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Native::Plugin);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Native::Plugin*, "Normal.Realtime.Native", "Plugin");
// Type namespace: Normal.Realtime.Native
namespace Normal::Realtime::Native {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Native.Plugin
  // [TokenAttribute] Offset: FFFFFFFF
  class Plugin : public ::Il2CppObject {
    public:
    // Nested type: ::Normal::Realtime::Native::Plugin::LogLevel
    struct LogLevel;
    // Nested type: ::Normal::Realtime::Native::Plugin::LogDelegate
    class LogDelegate;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel
    // [TokenAttribute] Offset: FFFFFFFF
    struct LogLevel/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LogLevel
      constexpr LogLevel(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelInfo
      static constexpr const int LogLevelInfo = 0;
      // Get static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelInfo
      static ::Normal::Realtime::Native::Plugin::LogLevel _get_LogLevelInfo();
      // Set static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelInfo
      static void _set_LogLevelInfo(::Normal::Realtime::Native::Plugin::LogLevel value);
      // static field const value: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelWarning
      static constexpr const int LogLevelWarning = 1;
      // Get static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelWarning
      static ::Normal::Realtime::Native::Plugin::LogLevel _get_LogLevelWarning();
      // Set static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelWarning
      static void _set_LogLevelWarning(::Normal::Realtime::Native::Plugin::LogLevel value);
      // static field const value: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelError
      static constexpr const int LogLevelError = 2;
      // Get static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelError
      static ::Normal::Realtime::Native::Plugin::LogLevel _get_LogLevelError();
      // Set static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel LogLevelError
      static void _set_LogLevelError(::Normal::Realtime::Native::Plugin::LogLevel value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel
    #pragma pack(pop)
    static check_size<sizeof(Plugin::LogLevel), 0 + sizeof(int)> __Normal_Realtime_Native_Plugin_LogLevelSizeCheck;
    static_assert(sizeof(Plugin::LogLevel) == 0x4);
    // static field const value: static private System.String realtimeDLLName
    static constexpr const char* realtimeDLLName = "RealtimeClient";
    // Get static field: static private System.String realtimeDLLName
    static ::StringW _get_realtimeDLLName();
    // Set static field: static private System.String realtimeDLLName
    static void _set_realtimeDLLName(::StringW value);
    // Get static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel logLevel
    static ::Normal::Realtime::Native::Plugin::LogLevel _get_logLevel();
    // Set static field: static public Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel logLevel
    static void _set_logLevel(::Normal::Realtime::Native::Plugin::LogLevel value);
    // static private System.Void .cctor()
    // Offset: 0x8BE420
    static void _cctor();
    // static private System.Void SetUpLogging()
    // Offset: 0x8BE300
    static void SetUpLogging();
    // static public System.Void SetLogFunction(System.IntPtr logFunction)
    // Offset: 0x8BE280
    static void SetLogFunction(::System::IntPtr logFunction);
    // static private System.Int32 Log(Normal.Realtime.Native.Plugin/Normal.Realtime.Native.LogLevel level, System.String message)
    // Offset: 0x8BD1B0
    static int Log(::Normal::Realtime::Native::Plugin::LogLevel level, ::StringW message);
    // static public System.IntPtr MatcherCreate(System.String matcherURL)
    // Offset: 0x8BD6C0
    static ::System::IntPtr MatcherCreate(::StringW matcherURL);
    // static public System.Void MatcherDelete(System.IntPtr matcher)
    // Offset: 0x8BD760
    static void MatcherDelete(::System::IntPtr matcher);
    // static public System.Void MatcherConnect(System.IntPtr matcher)
    // Offset: 0x8BD640
    static void MatcherConnect(::System::IntPtr matcher);
    // static public System.Void MatcherDisconnect(System.IntPtr matcher)
    // Offset: 0x8BD7E0
    static void MatcherDisconnect(::System::IntPtr matcher);
    // static public System.Void MatcherTick(System.IntPtr matcher)
    // Offset: 0x8BDDF0
    static void MatcherTick(::System::IntPtr matcher);
    // static public System.Int32 MatcherGetRequestState(System.IntPtr matcher, System.String requestGUID)
    // Offset: 0x8BDD40
    static int MatcherGetRequestState(::System::IntPtr matcher, ::StringW requestGUID);
    // static public System.String MatcherGetRequestErrorMessage(System.IntPtr matcher, System.String requestGUID)
    // Offset: 0x8BDBE0
    static ::StringW MatcherGetRequestErrorMessage(::System::IntPtr matcher, ::StringW requestGUID);
    // static public System.String MatcherGetRequestFailMessage(System.IntPtr matcher, System.String requestGUID)
    // Offset: 0x8BDC90
    static ::StringW MatcherGetRequestFailMessage(::System::IntPtr matcher, ::StringW requestGUID);
    // static public System.Void MatcherClearRequest(System.IntPtr matcher, System.String requestGUID)
    // Offset: 0x8BD300
    static void MatcherClearRequest(::System::IntPtr matcher, ::StringW requestGUID);
    // static public System.String MatcherConnectToRoom(System.IntPtr matcher, System.String appKey, System.String roomName, System.String clientOffer, Normal.Realtime.Native.Cluster[] clusterPingResults, System.Int32 clusterPingResultsLength, Normal.Realtime.Native.Region[] preferredRegions, System.Int32 preferredRegionsLength)
    // Offset: 0x8BD3A0
    static ::StringW MatcherConnectToRoom(::System::IntPtr matcher, ::StringW appKey, ::StringW roomName, ::StringW clientOffer, ::ArrayW<::Normal::Realtime::Native::Cluster> clusterPingResults, int clusterPingResultsLength, ::ArrayW<::Normal::Realtime::Native::Region> preferredRegions, int preferredRegionsLength);
    // static public System.String MatcherGetConnectToRoomRequestResponseType(System.IntPtr matcher, System.String requestGUID)
    // Offset: 0x8BDA80
    static ::StringW MatcherGetConnectToRoomRequestResponseType(::System::IntPtr matcher, ::StringW requestGUID);
    // static public System.Int32 MatcherGetConnectToRoomRequestClustersToPingCount(System.IntPtr matcher, System.String requestGUID)
    // Offset: 0x8BD920
    static int MatcherGetConnectToRoomRequestClustersToPingCount(::System::IntPtr matcher, ::StringW requestGUID);
    // static public System.String MatcherGetConnectToRoomRequestClustersToPingNameAtIndex(System.IntPtr matcher, System.String requestGUID, System.Int32 index)
    // Offset: 0x8BD9C0
    static ::StringW MatcherGetConnectToRoomRequestClustersToPingNameAtIndex(::System::IntPtr matcher, ::StringW requestGUID, int index);
    // static public System.String MatcherGetConnectToRoomRequestClustersToPingAddressAtIndex(System.IntPtr matcher, System.String requestGUID, System.Int32 index)
    // Offset: 0x8BD860
    static ::StringW MatcherGetConnectToRoomRequestClustersToPingAddressAtIndex(::System::IntPtr matcher, ::StringW requestGUID, int index);
    // static public System.String MatcherGetConnectToRoomRequestServerAnswer(System.IntPtr matcher, System.String requestGUID)
    // Offset: 0x8BDB30
    static ::StringW MatcherGetConnectToRoomRequestServerAnswer(::System::IntPtr matcher, ::StringW requestGUID);
    // static public System.Boolean ClientSetUpNetworkStack()
    // Offset: 0x8BD040
    static bool ClientSetUpNetworkStack();
    // static public System.Boolean ClientTearDownNetworkStack()
    // Offset: 0x8BD140
    static bool ClientTearDownNetworkStack();
    // static public System.IntPtr ClientCreate()
    // Offset: 0x8BC7C0
    static ::System::IntPtr ClientCreate();
    // static public System.Void ClientDelete(System.IntPtr client)
    // Offset: 0x8BC930
    static void ClientDelete(::System::IntPtr client);
    // static public System.String ClientStartConnection(System.IntPtr client)
    // Offset: 0x8BD0B0
    static ::StringW ClientStartConnection(::System::IntPtr client);
    // static public System.Void ClientConnect(System.IntPtr client, System.String serverAnswer)
    // Offset: 0x8BC670
    static void ClientConnect(::System::IntPtr client, ::StringW serverAnswer);
    // static public System.Void ClientDisconnect(System.IntPtr client)
    // Offset: 0x8BC9B0
    static void ClientDisconnect(::System::IntPtr client);
    // static public System.Void ClientBumpAutoDisconnectTime(System.IntPtr client)
    // Offset: 0x8BC5F0
    static void ClientBumpAutoDisconnectTime(::System::IntPtr client);
    // static public System.Int32 ClientGetState(System.IntPtr client)
    // Offset: 0x8BCB30
    static int ClientGetState(::System::IntPtr client);
    // static public System.Int32 ClientGetClientID(System.IntPtr client)
    // Offset: 0x8BCA30
    static int ClientGetClientID(::System::IntPtr client);
    // static public System.Double ClientGetRoomTime(System.IntPtr client)
    // Offset: 0x8BCAB0
    static double ClientGetRoomTime(::System::IntPtr client);
    // static public System.Boolean ClientSendPersistenceMessage(System.IntPtr client, System.Byte[] data, System.Int32 dataLength, System.Boolean reliable)
    // Offset: 0x8BCEC0
    static bool ClientSendPersistenceMessage(::System::IntPtr client, ::ArrayW<uint8_t> data, int dataLength, bool reliable);
    // static public System.Boolean ClientReceiveIncomingPersistenceMessage(System.IntPtr client, out Normal.Realtime.Native.PersistenceMessageEvent persistenceMessageEvent)
    // Offset: 0x8BCCF0
    static bool ClientReceiveIncomingPersistenceMessage(::System::IntPtr client, ByRef<::Normal::Realtime::Native::PersistenceMessageEvent> persistenceMessageEvent);
    // static public System.Boolean ClientReceiveIncomingPersistenceMessageData(System.IntPtr client, System.Byte[] data, System.Int32 dataLength)
    // Offset: 0x8BCC40
    static bool ClientReceiveIncomingPersistenceMessageData(::System::IntPtr client, ::ArrayW<uint8_t> data, int dataLength);
    // static public System.Boolean ClientSendRPCMessage(System.IntPtr client, System.Byte[] data, System.Int32 dataLength, System.Boolean reliable)
    // Offset: 0x8BCF80
    static bool ClientSendRPCMessage(::System::IntPtr client, ::ArrayW<uint8_t> data, int dataLength, bool reliable);
    // static public System.Boolean ClientReceiveIncomingRPCMessage(System.IntPtr client, out Normal.Realtime.Native.RPCMessageEvent persistenceMessageEvent)
    // Offset: 0x8BCE30
    static bool ClientReceiveIncomingRPCMessage(::System::IntPtr client, ByRef<::Normal::Realtime::Native::RPCMessageEvent> persistenceMessageEvent);
    // static public System.Boolean ClientReceiveIncomingRPCMessageData(System.IntPtr client, System.Byte[] data, System.Int32 dataLength)
    // Offset: 0x8BCD80
    static bool ClientReceiveIncomingRPCMessageData(::System::IntPtr client, ::ArrayW<uint8_t> data, int dataLength);
    // static public System.IntPtr ClientCreateAudioInputStream(System.IntPtr client, System.Boolean voice, System.Int32 sampleRate, System.Int32 channels)
    // Offset: 0x8BC710
    static ::System::IntPtr ClientCreateAudioInputStream(::System::IntPtr client, bool voice, int sampleRate, int channels);
    // static public System.Void ClientDeleteAudioInputStream(System.IntPtr audioInputStream)
    // Offset: 0x8BC830
    static void ClientDeleteAudioInputStream(::System::IntPtr audioInputStream);
    // static public System.Void ClientDeleteAudioOutputStream(System.IntPtr audioOutputStream)
    // Offset: 0x8BC8B0
    static void ClientDeleteAudioOutputStream(::System::IntPtr audioOutputStream);
    // static public System.Boolean ClientReceiveIncomingAudioStreamEvent(System.IntPtr client, out Normal.Realtime.Native.AudioStreamEvent audioStreamEvent)
    // Offset: 0x8BCBB0
    static bool ClientReceiveIncomingAudioStreamEvent(::System::IntPtr client, ByRef<::Normal::Realtime::Native::AudioStreamEvent> audioStreamEvent);
    // static public System.Int32 AudioInputStreamGetClientID(System.IntPtr audioInputStream)
    // Offset: 0x8BBD30
    static int AudioInputStreamGetClientID(::System::IntPtr audioInputStream);
    // static public System.Int32 AudioInputStreamGetStreamID(System.IntPtr audioInputStream)
    // Offset: 0x8BBDB0
    static int AudioInputStreamGetStreamID(::System::IntPtr audioInputStream);
    // static public System.Void AudioInputStreamClose(System.IntPtr audioInputStream)
    // Offset: 0x8BBCB0
    static void AudioInputStreamClose(::System::IntPtr audioInputStream);
    // static public System.Boolean AudioInputStreamSendRawAudioData(System.IntPtr audioInputStream, System.Single[] audioData, System.Int32 audioDataLength)
    // Offset: 0x8BBEB0
    static bool AudioInputStreamSendRawAudioData(::System::IntPtr audioInputStream, ::ArrayW<float> audioData, int audioDataLength);
    // static public System.Void AudioInputStreamSendQueuedMessages(System.IntPtr audioInputStream)
    // Offset: 0x8BBE30
    static void AudioInputStreamSendQueuedMessages(::System::IntPtr audioInputStream);
    // static public System.Int32 AudioOutputStreamGetClientID(System.IntPtr audioOutputStream)
    // Offset: 0x8BC090
    static int AudioOutputStreamGetClientID(::System::IntPtr audioOutputStream);
    // static public System.Int32 AudioOutputStreamGetStreamID(System.IntPtr audioOutputStream)
    // Offset: 0x8BC210
    static int AudioOutputStreamGetStreamID(::System::IntPtr audioOutputStream);
    // static public System.Int32 AudioOutputStreamGetSampleRate(System.IntPtr audioOutputStream)
    // Offset: 0x8BC190
    static int AudioOutputStreamGetSampleRate(::System::IntPtr audioOutputStream);
    // static public System.Void AudioOutputStreamSetSampleRate(System.IntPtr audioOutputStream, System.Int32 sampleRate)
    // Offset: 0x8BC290
    static void AudioOutputStreamSetSampleRate(::System::IntPtr audioOutputStream, int sampleRate);
    // static public System.Int32 AudioOutputStreamGetChannels(System.IntPtr audioOutputStream)
    // Offset: 0x8BC010
    static int AudioOutputStreamGetChannels(::System::IntPtr audioOutputStream);
    // static public System.Int32 AudioOutputStreamGetIsOpen(System.IntPtr audioOutputStream)
    // Offset: 0x8BC110
    static int AudioOutputStreamGetIsOpen(::System::IntPtr audioOutputStream);
    // static public System.Int32 AudioOutputStreamGetAudioData(System.IntPtr audioOutputStream, System.Single[] audioData, System.Int32 audioDataLength)
    // Offset: 0x8BBF60
    static int AudioOutputStreamGetAudioData(::System::IntPtr audioOutputStream, ::ArrayW<float> audioData, int audioDataLength);
    // static public System.IntPtr AudioPreprocessorCreate(System.Int32 recordSampleRate, System.Int32 recordFrameSize, System.Boolean automaticGainControl, System.Boolean noiseSuppression, System.Boolean reverbSuppression, System.Boolean echoCancellation, System.Int32 playbackSampleRate, System.Int32 playbackChannels, System.Single tail)
    // Offset: 0x8BC320
    static ::System::IntPtr AudioPreprocessorCreate(int recordSampleRate, int recordFrameSize, bool automaticGainControl, bool noiseSuppression, bool reverbSuppression, bool echoCancellation, int playbackSampleRate, int playbackChannels, float tail);
    // static public System.Void AudioPreprocessorDelete(System.IntPtr audioPreprocessor)
    // Offset: 0x8BC410
    static void AudioPreprocessorDelete(::System::IntPtr audioPreprocessor);
    // static public System.Boolean AudioPreprocessorProcessRecordFrame(System.IntPtr audioPreprocessor, System.Single[] audioData, System.Int32 audioDataLength)
    // Offset: 0x8BC540
    static bool AudioPreprocessorProcessRecordFrame(::System::IntPtr audioPreprocessor, ::ArrayW<float> audioData, int audioDataLength);
    // static public System.Boolean AudioPreprocessorProcessPlaybackFrame(System.IntPtr audioPreprocessor, System.Single[] audioData, System.Int32 audioDataLength)
    // Offset: 0x8BC490
    static bool AudioPreprocessorProcessPlaybackFrame(::System::IntPtr audioPreprocessor, ::ArrayW<float> audioData, int audioDataLength);
    // static public System.Boolean MicrophonePlatformSupported()
    // Offset: 0x8BE110
    static bool MicrophonePlatformSupported();
    // static public System.IntPtr MicrophoneCreate()
    // Offset: 0x8BDE70
    static ::System::IntPtr MicrophoneCreate();
    // static public System.Void MicrophoneDelete(System.IntPtr microphone)
    // Offset: 0x8BDEE0
    static void MicrophoneDelete(::System::IntPtr microphone);
    // static public System.Boolean MicrophoneStart(System.IntPtr microphone)
    // Offset: 0x8BE180
    static bool MicrophoneStart(::System::IntPtr microphone);
    // static public System.Void MicrophoneStop(System.IntPtr microphone)
    // Offset: 0x8BE200
    static void MicrophoneStop(::System::IntPtr microphone);
    // static public System.Int32 MicrophoneGetSampleRate(System.IntPtr microphone)
    // Offset: 0x8BE090
    static int MicrophoneGetSampleRate(::System::IntPtr microphone);
    // static public System.Int32 MicrophoneGetChannels(System.IntPtr microphone)
    // Offset: 0x8BE010
    static int MicrophoneGetChannels(::System::IntPtr microphone);
    // static public System.Boolean MicrophoneGetAudioData(System.IntPtr microphone, System.Single[] audioData, System.Int32 audioDataLength)
    // Offset: 0x8BDF60
    static bool MicrophoneGetAudioData(::System::IntPtr microphone, ::ArrayW<float> audioData, int audioDataLength);
  }; // Normal.Realtime.Native.Plugin
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Native::Plugin::LogLevel, "Normal.Realtime.Native", "Plugin/LogLevel");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Normal::Realtime::Native::Plugin::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::SetUpLogging
// Il2CppName: SetUpLogging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Normal::Realtime::Native::Plugin::SetUpLogging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "SetUpLogging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::SetLogFunction
// Il2CppName: SetLogFunction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::SetLogFunction)> {
  static const MethodInfo* get() {
    static auto* logFunction = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "SetLogFunction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logFunction});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Normal::Realtime::Native::Plugin::LogLevel, ::StringW)>(&Normal::Realtime::Native::Plugin::Log)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Plugin/LogLevel")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, message});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherCreate
// Il2CppName: MatcherCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::StringW)>(&Normal::Realtime::Native::Plugin::MatcherCreate)> {
  static const MethodInfo* get() {
    static auto* matcherURL = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcherURL});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherDelete
// Il2CppName: MatcherDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MatcherDelete)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherConnect
// Il2CppName: MatcherConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MatcherConnect)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherDisconnect
// Il2CppName: MatcherDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MatcherDisconnect)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherTick
// Il2CppName: MatcherTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MatcherTick)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetRequestState
// Il2CppName: MatcherGetRequestState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::MatcherGetRequestState)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetRequestState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetRequestErrorMessage
// Il2CppName: MatcherGetRequestErrorMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::MatcherGetRequestErrorMessage)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetRequestErrorMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetRequestFailMessage
// Il2CppName: MatcherGetRequestFailMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::MatcherGetRequestFailMessage)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetRequestFailMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherClearRequest
// Il2CppName: MatcherClearRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::MatcherClearRequest)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherClearRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherConnectToRoom
// Il2CppName: MatcherConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr, ::StringW, ::StringW, ::StringW, ::ArrayW<::Normal::Realtime::Native::Cluster>, int, ::ArrayW<::Normal::Realtime::Native::Region>, int)>(&Normal::Realtime::Native::Plugin::MatcherConnectToRoom)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* appKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* clientOffer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* clusterPingResults = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Cluster"), 1)->byval_arg;
    static auto* clusterPingResultsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* preferredRegions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Region"), 1)->byval_arg;
    static auto* preferredRegionsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, appKey, roomName, clientOffer, clusterPingResults, clusterPingResultsLength, preferredRegions, preferredRegionsLength});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestResponseType
// Il2CppName: MatcherGetConnectToRoomRequestResponseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestResponseType)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetConnectToRoomRequestResponseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestClustersToPingCount
// Il2CppName: MatcherGetConnectToRoomRequestClustersToPingCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestClustersToPingCount)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetConnectToRoomRequestClustersToPingCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestClustersToPingNameAtIndex
// Il2CppName: MatcherGetConnectToRoomRequestClustersToPingNameAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr, ::StringW, int)>(&Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestClustersToPingNameAtIndex)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetConnectToRoomRequestClustersToPingNameAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID, index});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestClustersToPingAddressAtIndex
// Il2CppName: MatcherGetConnectToRoomRequestClustersToPingAddressAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr, ::StringW, int)>(&Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestClustersToPingAddressAtIndex)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetConnectToRoomRequestClustersToPingAddressAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID, index});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestServerAnswer
// Il2CppName: MatcherGetConnectToRoomRequestServerAnswer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::MatcherGetConnectToRoomRequestServerAnswer)> {
  static const MethodInfo* get() {
    static auto* matcher = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* requestGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MatcherGetConnectToRoomRequestServerAnswer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matcher, requestGUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientSetUpNetworkStack
// Il2CppName: ClientSetUpNetworkStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Normal::Realtime::Native::Plugin::ClientSetUpNetworkStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientSetUpNetworkStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientTearDownNetworkStack
// Il2CppName: ClientTearDownNetworkStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Normal::Realtime::Native::Plugin::ClientTearDownNetworkStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientTearDownNetworkStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientCreate
// Il2CppName: ClientCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Normal::Realtime::Native::Plugin::ClientCreate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientDelete
// Il2CppName: ClientDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientDelete)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientStartConnection
// Il2CppName: ClientStartConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientStartConnection)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientStartConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientConnect
// Il2CppName: ClientConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::StringW)>(&Normal::Realtime::Native::Plugin::ClientConnect)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* serverAnswer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, serverAnswer});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientDisconnect
// Il2CppName: ClientDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientDisconnect)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientBumpAutoDisconnectTime
// Il2CppName: ClientBumpAutoDisconnectTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientBumpAutoDisconnectTime)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientBumpAutoDisconnectTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientGetState
// Il2CppName: ClientGetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientGetState)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientGetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientGetClientID
// Il2CppName: ClientGetClientID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientGetClientID)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientGetClientID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientGetRoomTime
// Il2CppName: ClientGetRoomTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientGetRoomTime)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientGetRoomTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientSendPersistenceMessage
// Il2CppName: ClientSendPersistenceMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<uint8_t>, int, bool)>(&Normal::Realtime::Native::Plugin::ClientSendPersistenceMessage)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientSendPersistenceMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, data, dataLength, reliable});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientReceiveIncomingPersistenceMessage
// Il2CppName: ClientReceiveIncomingPersistenceMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ByRef<::Normal::Realtime::Native::PersistenceMessageEvent>)>(&Normal::Realtime::Native::Plugin::ClientReceiveIncomingPersistenceMessage)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* persistenceMessageEvent = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "PersistenceMessageEvent")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientReceiveIncomingPersistenceMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, persistenceMessageEvent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientReceiveIncomingPersistenceMessageData
// Il2CppName: ClientReceiveIncomingPersistenceMessageData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<uint8_t>, int)>(&Normal::Realtime::Native::Plugin::ClientReceiveIncomingPersistenceMessageData)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientReceiveIncomingPersistenceMessageData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, data, dataLength});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientSendRPCMessage
// Il2CppName: ClientSendRPCMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<uint8_t>, int, bool)>(&Normal::Realtime::Native::Plugin::ClientSendRPCMessage)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientSendRPCMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, data, dataLength, reliable});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientReceiveIncomingRPCMessage
// Il2CppName: ClientReceiveIncomingRPCMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ByRef<::Normal::Realtime::Native::RPCMessageEvent>)>(&Normal::Realtime::Native::Plugin::ClientReceiveIncomingRPCMessage)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* persistenceMessageEvent = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "RPCMessageEvent")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientReceiveIncomingRPCMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, persistenceMessageEvent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientReceiveIncomingRPCMessageData
// Il2CppName: ClientReceiveIncomingRPCMessageData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<uint8_t>, int)>(&Normal::Realtime::Native::Plugin::ClientReceiveIncomingRPCMessageData)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientReceiveIncomingRPCMessageData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, data, dataLength});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientCreateAudioInputStream
// Il2CppName: ClientCreateAudioInputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::System::IntPtr, bool, int, int)>(&Normal::Realtime::Native::Plugin::ClientCreateAudioInputStream)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* voice = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientCreateAudioInputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, voice, sampleRate, channels});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientDeleteAudioInputStream
// Il2CppName: ClientDeleteAudioInputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientDeleteAudioInputStream)> {
  static const MethodInfo* get() {
    static auto* audioInputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientDeleteAudioInputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioInputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientDeleteAudioOutputStream
// Il2CppName: ClientDeleteAudioOutputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::ClientDeleteAudioOutputStream)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientDeleteAudioOutputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::ClientReceiveIncomingAudioStreamEvent
// Il2CppName: ClientReceiveIncomingAudioStreamEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ByRef<::Normal::Realtime::Native::AudioStreamEvent>)>(&Normal::Realtime::Native::Plugin::ClientReceiveIncomingAudioStreamEvent)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audioStreamEvent = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "AudioStreamEvent")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "ClientReceiveIncomingAudioStreamEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, audioStreamEvent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioInputStreamGetClientID
// Il2CppName: AudioInputStreamGetClientID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioInputStreamGetClientID)> {
  static const MethodInfo* get() {
    static auto* audioInputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioInputStreamGetClientID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioInputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioInputStreamGetStreamID
// Il2CppName: AudioInputStreamGetStreamID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioInputStreamGetStreamID)> {
  static const MethodInfo* get() {
    static auto* audioInputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioInputStreamGetStreamID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioInputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioInputStreamClose
// Il2CppName: AudioInputStreamClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioInputStreamClose)> {
  static const MethodInfo* get() {
    static auto* audioInputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioInputStreamClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioInputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioInputStreamSendRawAudioData
// Il2CppName: AudioInputStreamSendRawAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<float>, int)>(&Normal::Realtime::Native::Plugin::AudioInputStreamSendRawAudioData)> {
  static const MethodInfo* get() {
    static auto* audioInputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* audioDataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioInputStreamSendRawAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioInputStream, audioData, audioDataLength});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioInputStreamSendQueuedMessages
// Il2CppName: AudioInputStreamSendQueuedMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioInputStreamSendQueuedMessages)> {
  static const MethodInfo* get() {
    static auto* audioInputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioInputStreamSendQueuedMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioInputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioOutputStreamGetClientID
// Il2CppName: AudioOutputStreamGetClientID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioOutputStreamGetClientID)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioOutputStreamGetClientID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioOutputStreamGetStreamID
// Il2CppName: AudioOutputStreamGetStreamID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioOutputStreamGetStreamID)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioOutputStreamGetStreamID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioOutputStreamGetSampleRate
// Il2CppName: AudioOutputStreamGetSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioOutputStreamGetSampleRate)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioOutputStreamGetSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioOutputStreamSetSampleRate
// Il2CppName: AudioOutputStreamSetSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int)>(&Normal::Realtime::Native::Plugin::AudioOutputStreamSetSampleRate)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioOutputStreamSetSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream, sampleRate});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioOutputStreamGetChannels
// Il2CppName: AudioOutputStreamGetChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioOutputStreamGetChannels)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioOutputStreamGetChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioOutputStreamGetIsOpen
// Il2CppName: AudioOutputStreamGetIsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioOutputStreamGetIsOpen)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioOutputStreamGetIsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioOutputStreamGetAudioData
// Il2CppName: AudioOutputStreamGetAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<float>, int)>(&Normal::Realtime::Native::Plugin::AudioOutputStreamGetAudioData)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* audioDataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioOutputStreamGetAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream, audioData, audioDataLength});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioPreprocessorCreate
// Il2CppName: AudioPreprocessorCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int, bool, bool, bool, bool, int, int, float)>(&Normal::Realtime::Native::Plugin::AudioPreprocessorCreate)> {
  static const MethodInfo* get() {
    static auto* recordSampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recordFrameSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* automaticGainControl = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* noiseSuppression = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reverbSuppression = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* echoCancellation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* playbackSampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playbackChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tail = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioPreprocessorCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordSampleRate, recordFrameSize, automaticGainControl, noiseSuppression, reverbSuppression, echoCancellation, playbackSampleRate, playbackChannels, tail});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioPreprocessorDelete
// Il2CppName: AudioPreprocessorDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::AudioPreprocessorDelete)> {
  static const MethodInfo* get() {
    static auto* audioPreprocessor = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioPreprocessorDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioPreprocessor});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioPreprocessorProcessRecordFrame
// Il2CppName: AudioPreprocessorProcessRecordFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<float>, int)>(&Normal::Realtime::Native::Plugin::AudioPreprocessorProcessRecordFrame)> {
  static const MethodInfo* get() {
    static auto* audioPreprocessor = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* audioDataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioPreprocessorProcessRecordFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioPreprocessor, audioData, audioDataLength});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::AudioPreprocessorProcessPlaybackFrame
// Il2CppName: AudioPreprocessorProcessPlaybackFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<float>, int)>(&Normal::Realtime::Native::Plugin::AudioPreprocessorProcessPlaybackFrame)> {
  static const MethodInfo* get() {
    static auto* audioPreprocessor = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* audioDataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "AudioPreprocessorProcessPlaybackFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioPreprocessor, audioData, audioDataLength});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophonePlatformSupported
// Il2CppName: MicrophonePlatformSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Normal::Realtime::Native::Plugin::MicrophonePlatformSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophonePlatformSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophoneCreate
// Il2CppName: MicrophoneCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Normal::Realtime::Native::Plugin::MicrophoneCreate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophoneCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophoneDelete
// Il2CppName: MicrophoneDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MicrophoneDelete)> {
  static const MethodInfo* get() {
    static auto* microphone = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophoneDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microphone});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophoneStart
// Il2CppName: MicrophoneStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MicrophoneStart)> {
  static const MethodInfo* get() {
    static auto* microphone = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophoneStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microphone});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophoneStop
// Il2CppName: MicrophoneStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MicrophoneStop)> {
  static const MethodInfo* get() {
    static auto* microphone = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophoneStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microphone});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophoneGetSampleRate
// Il2CppName: MicrophoneGetSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MicrophoneGetSampleRate)> {
  static const MethodInfo* get() {
    static auto* microphone = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophoneGetSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microphone});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophoneGetChannels
// Il2CppName: MicrophoneGetChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Normal::Realtime::Native::Plugin::MicrophoneGetChannels)> {
  static const MethodInfo* get() {
    static auto* microphone = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophoneGetChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microphone});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::Plugin::MicrophoneGetAudioData
// Il2CppName: MicrophoneGetAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::ArrayW<float>, int)>(&Normal::Realtime::Native::Plugin::MicrophoneGetAudioData)> {
  static const MethodInfo* get() {
    static auto* microphone = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* audioDataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::Plugin*), "MicrophoneGetAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microphone, audioData, audioDataLength});
  }
};
