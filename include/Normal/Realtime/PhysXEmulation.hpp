// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: RigidbodyConstraints
  struct RigidbodyConstraints;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: PhysXEmulation
  class PhysXEmulation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::PhysXEmulation);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::PhysXEmulation*, "Normal.Realtime", "PhysXEmulation");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.PhysXEmulation
  // [TokenAttribute] Offset: FFFFFFFF
  class PhysXEmulation : public ::UnityEngine::MonoBehaviour {
    public:
    // static public System.Single SimulatePhysX(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation, ref UnityEngine.Vector3 linearVelocity, ref UnityEngine.Vector3 angularVelocity, System.Boolean useGravity, UnityEngine.Vector3 gravity, System.Single linearDamping, System.Single angularDamping, System.Single maxLinearVelocity, System.Single maxAngularVelocity, UnityEngine.RigidbodyConstraints constraints, System.Single deltaTime, System.Single timeStep)
    // Offset: 0x8BBB30
    static float SimulatePhysX(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> linearVelocity, ByRef<::UnityEngine::Vector3> angularVelocity, bool useGravity, ::UnityEngine::Vector3 gravity, float linearDamping, float angularDamping, float maxLinearVelocity, float maxAngularVelocity, ::UnityEngine::RigidbodyConstraints constraints, float deltaTime, float timeStep);
    // static private System.Void SimulatePhysXTick(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation, ref UnityEngine.Vector3 linearVelocity, ref UnityEngine.Vector3 angularVelocity, System.Boolean useGravity, UnityEngine.Vector3 gravity, System.Single linearDamping, System.Single angularDamping, System.Single maxLinearVelocity, System.Single maxAngularVelocity, UnityEngine.RigidbodyConstraints constraints, System.Single deltaTime)
    // Offset: 0x8BB4B0
    static void SimulatePhysXTick(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> linearVelocity, ByRef<::UnityEngine::Vector3> angularVelocity, bool useGravity, ::UnityEngine::Vector3 gravity, float linearDamping, float angularDamping, float maxLinearVelocity, float maxAngularVelocity, ::UnityEngine::RigidbodyConstraints constraints, float deltaTime);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhysXEmulation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::PhysXEmulation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhysXEmulation*, creationType>()));
    }
  }; // Normal.Realtime.PhysXEmulation
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::PhysXEmulation::SimulatePhysX
// Il2CppName: SimulatePhysX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, bool, ::UnityEngine::Vector3, float, float, float, float, ::UnityEngine::RigidbodyConstraints, float, float)>(&Normal::Realtime::PhysXEmulation::SimulatePhysX)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* useGravity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* gravity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* linearDamping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* angularDamping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxLinearVelocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxAngularVelocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* constraints = &::il2cpp_utils::GetClassFromName("UnityEngine", "RigidbodyConstraints")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeStep = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::PhysXEmulation*), "SimulatePhysX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, linearVelocity, angularVelocity, useGravity, gravity, linearDamping, angularDamping, maxLinearVelocity, maxAngularVelocity, constraints, deltaTime, timeStep});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::PhysXEmulation::SimulatePhysXTick
// Il2CppName: SimulatePhysXTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, bool, ::UnityEngine::Vector3, float, float, float, float, ::UnityEngine::RigidbodyConstraints, float)>(&Normal::Realtime::PhysXEmulation::SimulatePhysXTick)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* useGravity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* gravity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* linearDamping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* angularDamping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxLinearVelocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxAngularVelocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* constraints = &::il2cpp_utils::GetClassFromName("UnityEngine", "RigidbodyConstraints")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::PhysXEmulation*), "SimulatePhysXTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, linearVelocity, angularVelocity, useGravity, gravity, linearDamping, angularDamping, maxLinearVelocity, maxAngularVelocity, constraints, deltaTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::PhysXEmulation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
