// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeComponent`1
#include "Normal/Realtime/RealtimeComponent_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AvatarNicknameModel
  class AvatarNicknameModel;
  // Forward declaring type: SetColorOnPrefabBrick
  class SetColorOnPrefabBrick;
  // Forward declaring type: SetHandColors
  class SetHandColors;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeAvatarVoice
  class RealtimeAvatarVoice;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AvatarNicknameSync
  class AvatarNicknameSync;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AvatarNicknameSync);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AvatarNicknameSync*, "", "AvatarNicknameSync");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: AvatarNicknameSync
  // [TokenAttribute] Offset: FFFFFFFF
  class AvatarNicknameSync : public ::Normal::Realtime::RealtimeComponent_1<::GlobalNamespace::AvatarNicknameModel*> {
    public:
    public:
    // public TMPro.TextMeshProUGUI nameText
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshProUGUI* nameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public UnityEngine.Transform nameTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* nameTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform headTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* headTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xF09C0
    // public Normal.Realtime.RealtimeAvatarVoice realtimeAvatarVoice
    // Size: 0x8
    // Offset: 0x40
    ::Normal::Realtime::RealtimeAvatarVoice* realtimeAvatarVoice;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeAvatarVoice*) == 0x8);
    // public UnityEngine.Transform avatarTransform
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* avatarTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _currentCameraTransform
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* currentCameraTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.GameObject face
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* face;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public SetColorOnPrefabBrick[] primaryHeadBricks
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::GlobalNamespace::SetColorOnPrefabBrick*> primaryHeadBricks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SetColorOnPrefabBrick*>) == 0x8);
    // public SetColorOnPrefabBrick[] secondaryHeadBricks
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::GlobalNamespace::SetColorOnPrefabBrick*> secondaryHeadBricks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SetColorOnPrefabBrick*>) == 0x8);
    // public SetHandColors[] setHandColors
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::GlobalNamespace::SetHandColors*> setHandColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SetHandColors*>) == 0x8);
    // public UnityEngine.UI.Image eyesImage
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UI::Image* eyesImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image mouthImage
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UI::Image* mouthImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private System.Single[] _lastVolumes
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<float> lastVolumes;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 _nextVolumeIndex
    // Size: 0x4
    // Offset: 0x90
    int nextVolumeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isSelf
    // Size: 0x1
    // Offset: 0x94
    bool isSelf;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Sprite[] volumeSprites
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::Sprite*> volumeSprites;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Sprite*>) == 0x8);
    // public UnityEngine.UI.Image volumeUIImage
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::UI::Image* volumeUIImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    public:
    // static field const value: static private System.Int32 NumberOfVolumeMeasurementsToSmooth
    static constexpr const int NumberOfVolumeMeasurementsToSmooth = 25;
    // Get static field: static private System.Int32 NumberOfVolumeMeasurementsToSmooth
    static int _get_NumberOfVolumeMeasurementsToSmooth();
    // Set static field: static private System.Int32 NumberOfVolumeMeasurementsToSmooth
    static void _set_NumberOfVolumeMeasurementsToSmooth(int value);
    // Get static field: static private readonly UnityEngine.Vector3 NameTextOffset
    static ::UnityEngine::Vector3 _get_NameTextOffset();
    // Set static field: static private readonly UnityEngine.Vector3 NameTextOffset
    static void _set_NameTextOffset(::UnityEngine::Vector3 value);
    // Get instance field reference: public TMPro.TextMeshProUGUI nameText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_nameText();
    // Get instance field reference: public UnityEngine.Transform nameTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_nameTransform();
    // Get instance field reference: public UnityEngine.Transform headTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_headTransform();
    // Get instance field reference: public Normal.Realtime.RealtimeAvatarVoice realtimeAvatarVoice
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::RealtimeAvatarVoice*& dyn_realtimeAvatarVoice();
    // Get instance field reference: public UnityEngine.Transform avatarTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_avatarTransform();
    // Get instance field reference: private UnityEngine.Transform _currentCameraTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__currentCameraTransform();
    // Get instance field reference: public UnityEngine.GameObject face
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_face();
    // Get instance field reference: public SetColorOnPrefabBrick[] primaryHeadBricks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SetColorOnPrefabBrick*>& dyn_primaryHeadBricks();
    // Get instance field reference: public SetColorOnPrefabBrick[] secondaryHeadBricks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SetColorOnPrefabBrick*>& dyn_secondaryHeadBricks();
    // Get instance field reference: public SetHandColors[] setHandColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SetHandColors*>& dyn_setHandColors();
    // Get instance field reference: public UnityEngine.UI.Image eyesImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_eyesImage();
    // Get instance field reference: public UnityEngine.UI.Image mouthImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_mouthImage();
    // Get instance field reference: private System.Single[] _lastVolumes
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__lastVolumes();
    // Get instance field reference: private System.Int32 _nextVolumeIndex
    [[deprecated("Use field access instead!")]] int& dyn__nextVolumeIndex();
    // Get instance field reference: private System.Boolean _isSelf
    [[deprecated("Use field access instead!")]] bool& dyn__isSelf();
    // Get instance field reference: public UnityEngine.Sprite[] volumeSprites
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Sprite*>& dyn_volumeSprites();
    // Get instance field reference: public UnityEngine.UI.Image volumeUIImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_volumeUIImage();
    // public System.String get_Nickname()
    // Offset: 0x6E1D70
    ::StringW get_Nickname();
    // public System.String get_ShortId()
    // Offset: 0x6E1EC0
    ::StringW get_ShortId();
    // public System.Int32 get_PrimaryAvatarColor()
    // Offset: 0x6E1DE0
    int get_PrimaryAvatarColor();
    // public System.Int32 get_SecondaryAvatarColor()
    // Offset: 0x6E1E50
    int get_SecondaryAvatarColor();
    // public System.Int32 get_AvatarEyes()
    // Offset: 0x6E1C90
    int get_AvatarEyes();
    // public System.Int32 get_AvatarMouth()
    // Offset: 0x6E1D00
    int get_AvatarMouth();
    // public System.Void .ctor()
    // Offset: 0x6E1C30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarNicknameSync* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AvatarNicknameSync::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarNicknameSync*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x6E1BC0
    static void _cctor();
    // private System.Void Start()
    // Offset: 0x6E12D0
    void Start();
    // public System.Void Update()
    // Offset: 0x6E1850
    void Update();
    // private System.Void NicknameSet()
    // Offset: 0x6E07D0
    void NicknameSet();
    // private System.Void PrimaryAvatarColorSet()
    // Offset: 0x6E0D00
    void PrimaryAvatarColorSet();
    // private System.Void SecondaryAvatarColorSet()
    // Offset: 0x6E0EF0
    void SecondaryAvatarColorSet();
    // private System.Void AvatarEyesSet()
    // Offset: 0x6E0620
    void AvatarEyesSet();
    // private System.Void AvatarMouthSet()
    // Offset: 0x6E06F0
    void AvatarMouthSet();
    // protected System.Void OnRealtimeModelReplaced(AvatarNicknameModel previousModel, AvatarNicknameModel currentModel)
    // Offset: 0x6E0860
    void OnRealtimeModelReplaced(::GlobalNamespace::AvatarNicknameModel* previousModel, ::GlobalNamespace::AvatarNicknameModel* currentModel);
    // private System.Void NicknameDidChange(AvatarNicknameModel model, System.String nickname)
    // Offset: 0x6E07C0
    void NicknameDidChange(::GlobalNamespace::AvatarNicknameModel* model, ::StringW nickname);
    // private System.Void PrimaryAvatarColorDidChange(AvatarNicknameModel model, System.Int32 color)
    // Offset: 0x6E0CF0
    void PrimaryAvatarColorDidChange(::GlobalNamespace::AvatarNicknameModel* model, int color);
    // private System.Void SecondaryAvatarColorDidChange(AvatarNicknameModel model, System.Int32 color)
    // Offset: 0x6E0EE0
    void SecondaryAvatarColorDidChange(::GlobalNamespace::AvatarNicknameModel* model, int color);
    // private System.Void AvatarEyesDidChange(AvatarNicknameModel model, System.Int32 value)
    // Offset: 0x6E0610
    void AvatarEyesDidChange(::GlobalNamespace::AvatarNicknameModel* model, int value);
    // private System.Void AvatarMouthDidChange(AvatarNicknameModel model, System.Int32 value)
    // Offset: 0x6E06E0
    void AvatarMouthDidChange(::GlobalNamespace::AvatarNicknameModel* model, int value);
    // private System.Void SetNickname(System.String nickname)
    // Offset: 0x6E10F0
    void SetNickname(::StringW nickname);
    // private System.Void SetShortId(System.String shortId)
    // Offset: 0x6E1280
    void SetShortId(::StringW shortId);
    // private System.Void SetPrimaryAvatarColor(System.Int32 color)
    // Offset: 0x6E1140
    void SetPrimaryAvatarColor(int color);
    // private System.Void SetSecondaryAvatarColor(System.Int32 color)
    // Offset: 0x6E11E0
    void SetSecondaryAvatarColor(int color);
    // private System.Void SetAvatarEyes(System.Int32 value)
    // Offset: 0x6E1050
    void SetAvatarEyes(int value);
    // private System.Void SetAvatarMouth(System.Int32 value)
    // Offset: 0x6E10A0
    void SetAvatarMouth(int value);
    // private System.Void RecordVolume()
    // Offset: 0x6E0E60
    void RecordVolume();
    // private System.Void UpdateVolumeIndicator()
    // Offset: 0x6E1730
    void UpdateVolumeIndicator();
  }; // AvatarNicknameSync
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::get_Nickname
// Il2CppName: get_Nickname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::get_Nickname)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "get_Nickname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::get_ShortId
// Il2CppName: get_ShortId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::get_ShortId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "get_ShortId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::get_PrimaryAvatarColor
// Il2CppName: get_PrimaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::get_PrimaryAvatarColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "get_PrimaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::get_SecondaryAvatarColor
// Il2CppName: get_SecondaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::get_SecondaryAvatarColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "get_SecondaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::get_AvatarEyes
// Il2CppName: get_AvatarEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::get_AvatarEyes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "get_AvatarEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::get_AvatarMouth
// Il2CppName: get_AvatarMouth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::get_AvatarMouth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "get_AvatarMouth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::AvatarNicknameSync::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::NicknameSet
// Il2CppName: NicknameSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::NicknameSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "NicknameSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::PrimaryAvatarColorSet
// Il2CppName: PrimaryAvatarColorSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::PrimaryAvatarColorSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "PrimaryAvatarColorSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SecondaryAvatarColorSet
// Il2CppName: SecondaryAvatarColorSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::SecondaryAvatarColorSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SecondaryAvatarColorSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::AvatarEyesSet
// Il2CppName: AvatarEyesSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::AvatarEyesSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "AvatarEyesSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::AvatarMouthSet
// Il2CppName: AvatarMouthSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::AvatarMouthSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "AvatarMouthSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::OnRealtimeModelReplaced
// Il2CppName: OnRealtimeModelReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::GlobalNamespace::AvatarNicknameModel*, ::GlobalNamespace::AvatarNicknameModel*)>(&GlobalNamespace::AvatarNicknameSync::OnRealtimeModelReplaced)> {
  static const MethodInfo* get() {
    static auto* previousModel = &::il2cpp_utils::GetClassFromName("", "AvatarNicknameModel")->byval_arg;
    static auto* currentModel = &::il2cpp_utils::GetClassFromName("", "AvatarNicknameModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "OnRealtimeModelReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousModel, currentModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::NicknameDidChange
// Il2CppName: NicknameDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::GlobalNamespace::AvatarNicknameModel*, ::StringW)>(&GlobalNamespace::AvatarNicknameSync::NicknameDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "AvatarNicknameModel")->byval_arg;
    static auto* nickname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "NicknameDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, nickname});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::PrimaryAvatarColorDidChange
// Il2CppName: PrimaryAvatarColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::GlobalNamespace::AvatarNicknameModel*, int)>(&GlobalNamespace::AvatarNicknameSync::PrimaryAvatarColorDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "AvatarNicknameModel")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "PrimaryAvatarColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SecondaryAvatarColorDidChange
// Il2CppName: SecondaryAvatarColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::GlobalNamespace::AvatarNicknameModel*, int)>(&GlobalNamespace::AvatarNicknameSync::SecondaryAvatarColorDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "AvatarNicknameModel")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SecondaryAvatarColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::AvatarEyesDidChange
// Il2CppName: AvatarEyesDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::GlobalNamespace::AvatarNicknameModel*, int)>(&GlobalNamespace::AvatarNicknameSync::AvatarEyesDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "AvatarNicknameModel")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "AvatarEyesDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::AvatarMouthDidChange
// Il2CppName: AvatarMouthDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::GlobalNamespace::AvatarNicknameModel*, int)>(&GlobalNamespace::AvatarNicknameSync::AvatarMouthDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "AvatarNicknameModel")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "AvatarMouthDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SetNickname
// Il2CppName: SetNickname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::StringW)>(&GlobalNamespace::AvatarNicknameSync::SetNickname)> {
  static const MethodInfo* get() {
    static auto* nickname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SetNickname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nickname});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SetShortId
// Il2CppName: SetShortId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(::StringW)>(&GlobalNamespace::AvatarNicknameSync::SetShortId)> {
  static const MethodInfo* get() {
    static auto* shortId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SetShortId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shortId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SetPrimaryAvatarColor
// Il2CppName: SetPrimaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(int)>(&GlobalNamespace::AvatarNicknameSync::SetPrimaryAvatarColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SetPrimaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SetSecondaryAvatarColor
// Il2CppName: SetSecondaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(int)>(&GlobalNamespace::AvatarNicknameSync::SetSecondaryAvatarColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SetSecondaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SetAvatarEyes
// Il2CppName: SetAvatarEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(int)>(&GlobalNamespace::AvatarNicknameSync::SetAvatarEyes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SetAvatarEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::SetAvatarMouth
// Il2CppName: SetAvatarMouth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)(int)>(&GlobalNamespace::AvatarNicknameSync::SetAvatarMouth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "SetAvatarMouth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::RecordVolume
// Il2CppName: RecordVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::RecordVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "RecordVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarNicknameSync::UpdateVolumeIndicator
// Il2CppName: UpdateVolumeIndicator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarNicknameSync::*)()>(&GlobalNamespace::AvatarNicknameSync::UpdateVolumeIndicator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarNicknameSync*), "UpdateVolumeIndicator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
