// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BrickAttach
  class BrickAttach;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseInteractable
  class XRBaseInteractable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickHover
  class BrickHover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickHover);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickHover*, "", "BrickHover");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: BrickHover
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickHover : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> _hoveredObjects
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* hoveredObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.GameObject _hovered
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* hovered;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private BrickAttach _hoveredAttach
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BrickAttach* hoveredAttach;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BrickAttach*) == 0x8);
    // private UnityEngine.Color32 _hoverColor
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::Color32 hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // Padding between fields: hoverColor and: tempHoveredObject
    char __padding3[0x4] = {};
    // private UnityEngine.GameObject _tempHoveredObject
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* tempHoveredObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private BrickAttach _tempAttach
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::BrickAttach* tempAttach;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BrickAttach*) == 0x8);
    // private System.Boolean _holdingSomething
    // Size: 0x1
    // Offset: 0x48
    bool holdingSomething;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: holdingSomething and: interactionLayerMask
    char __padding6[0x3] = {};
    // public UnityEngine.LayerMask interactionLayerMask
    // Size: 0x4
    // Offset: 0x4C
    ::UnityEngine::LayerMask interactionLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Boolean left
    // Size: 0x1
    // Offset: 0x50
    bool left;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> _hoveredObjects
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn__hoveredObjects();
    // Get instance field reference: private UnityEngine.GameObject _hovered
    ::UnityEngine::GameObject*& dyn__hovered();
    // Get instance field reference: private BrickAttach _hoveredAttach
    ::GlobalNamespace::BrickAttach*& dyn__hoveredAttach();
    // Get instance field reference: private UnityEngine.Color32 _hoverColor
    ::UnityEngine::Color32& dyn__hoverColor();
    // Get instance field reference: private UnityEngine.GameObject _tempHoveredObject
    ::UnityEngine::GameObject*& dyn__tempHoveredObject();
    // Get instance field reference: private BrickAttach _tempAttach
    ::GlobalNamespace::BrickAttach*& dyn__tempAttach();
    // Get instance field reference: private System.Boolean _holdingSomething
    bool& dyn__holdingSomething();
    // Get instance field reference: public UnityEngine.LayerMask interactionLayerMask
    ::UnityEngine::LayerMask& dyn_interactionLayerMask();
    // Get instance field reference: public System.Boolean left
    bool& dyn_left();
    // private System.Void Start()
    // Offset: 0x10D5648
    void Start();
    // public UnityEngine.GameObject HoveredBrick()
    // Offset: 0x10D56E0
    ::UnityEngine::GameObject* HoveredBrick();
    // private System.Void Update()
    // Offset: 0x10D56F8
    void Update();
    // private System.Void OnEnable()
    // Offset: 0x10D5A28
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x10D5BD0
    void OnDisable();
    // private System.Void HandSelectEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x10D5D78
    void HandSelectEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // private System.Void HandSelectExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x10D5F2C
    void HandSelectExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // private System.Void HandHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x10D5E54
    void HandHoverEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // private System.Void HandHoverExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x10D6074
    void HandHoverExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public System.Void AddToHoverList(UnityEngine.GameObject obj)
    // Offset: 0x10D61B4
    void AddToHoverList(::UnityEngine::GameObject* obj);
    // public System.Void RemoveFromHoverList(UnityEngine.GameObject obj)
    // Offset: 0x10D62AC
    void RemoveFromHoverList(::UnityEngine::GameObject* obj);
    // private System.Boolean IsObjectInInteractionLayerMask(UnityEngine.GameObject o)
    // Offset: 0x10D5FF4
    bool IsObjectInInteractionLayerMask(::UnityEngine::GameObject* o);
    // private System.Boolean <Update>b__11_0(UnityEngine.GameObject o)
    // Offset: 0x10D63A0
    bool $Update$b__11_0(::UnityEngine::GameObject* o);
    // private System.Single <Update>b__11_1(UnityEngine.GameObject o)
    // Offset: 0x10D64E0
    float $Update$b__11_1(::UnityEngine::GameObject* o);
    // public System.Void .ctor()
    // Offset: 0x10D6398
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrickHover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrickHover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrickHover*, creationType>()));
    }
  }; // BrickHover
  #pragma pack(pop)
  static check_size<sizeof(BrickHover), 80 + sizeof(bool)> __GlobalNamespace_BrickHoverSizeCheck;
  static_assert(sizeof(BrickHover) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)()>(&GlobalNamespace::BrickHover::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::HoveredBrick
// Il2CppName: HoveredBrick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::BrickHover::*)()>(&GlobalNamespace::BrickHover::HoveredBrick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "HoveredBrick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)()>(&GlobalNamespace::BrickHover::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)()>(&GlobalNamespace::BrickHover::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)()>(&GlobalNamespace::BrickHover::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::HandSelectEnter
// Il2CppName: HandSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&GlobalNamespace::BrickHover::HandSelectEnter)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "HandSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::HandSelectExit
// Il2CppName: HandSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&GlobalNamespace::BrickHover::HandSelectExit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "HandSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::HandHoverEnter
// Il2CppName: HandHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&GlobalNamespace::BrickHover::HandHoverEnter)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "HandHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::HandHoverExit
// Il2CppName: HandHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&GlobalNamespace::BrickHover::HandHoverExit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "HandHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::AddToHoverList
// Il2CppName: AddToHoverList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickHover::AddToHoverList)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "AddToHoverList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::RemoveFromHoverList
// Il2CppName: RemoveFromHoverList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickHover::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickHover::RemoveFromHoverList)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "RemoveFromHoverList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::IsObjectInInteractionLayerMask
// Il2CppName: IsObjectInInteractionLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BrickHover::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickHover::IsObjectInInteractionLayerMask)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "IsObjectInInteractionLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::$Update$b__11_0
// Il2CppName: <Update>b__11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BrickHover::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickHover::$Update$b__11_0)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "<Update>b__11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::$Update$b__11_1
// Il2CppName: <Update>b__11_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BrickHover::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickHover::$Update$b__11_1)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickHover*), "<Update>b__11_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickHover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
