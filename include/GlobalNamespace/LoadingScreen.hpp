// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NormalSessionManager
  class NormalSessionManager;
  // Forward declaring type: RoomCodeScreen
  class RoomCodeScreen;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LoadingScreen
  class LoadingScreen;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LoadingScreen);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LoadingScreen*, "", "LoadingScreen");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: LoadingScreen
  // [TokenAttribute] Offset: FFFFFFFF
  class LoadingScreen : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LoadingScreen::$CreateRoomIEnum$d__7
    class $CreateRoomIEnum$d__7;
    public:
    // public NormalSessionManager normalSessionManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::NormalSessionManager* normalSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NormalSessionManager*) == 0x8);
    // public TMPro.TextMeshProUGUI loadingText
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshProUGUI* loadingText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public UnityEngine.GameObject backButton
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* backButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public RoomCodeScreen roomCodeScreen
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::RoomCodeScreen* roomCodeScreen;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomCodeScreen*) == 0x8);
    // private UnityEngine.Coroutine _createRoomCoroutine
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Coroutine* createRoomCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String NetworkErrorText
    static constexpr const char* NetworkErrorText = "Error: Could not connect to the BricksVR server, are you connected to the internet?";
    // Get static field: static public System.String NetworkErrorText
    static ::StringW _get_NetworkErrorText();
    // Set static field: static public System.String NetworkErrorText
    static void _set_NetworkErrorText(::StringW value);
    // Get instance field reference: public NormalSessionManager normalSessionManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NormalSessionManager*& dyn_normalSessionManager();
    // Get instance field reference: public TMPro.TextMeshProUGUI loadingText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_loadingText();
    // Get instance field reference: public UnityEngine.GameObject backButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_backButton();
    // Get instance field reference: public RoomCodeScreen roomCodeScreen
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RoomCodeScreen*& dyn_roomCodeScreen();
    // Get instance field reference: private UnityEngine.Coroutine _createRoomCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__createRoomCoroutine();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoadingScreen* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LoadingScreen::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoadingScreen*, creationType>()));
    }
    // public System.Void CreateRoom(System.String roomName)
    // Offset: 0x6BD400
    void CreateRoom(::StringW roomName);
    // private System.Collections.IEnumerator CreateRoomIEnum(System.String roomName)
    // Offset: 0x6BD370
    ::System::Collections::IEnumerator* CreateRoomIEnum(::StringW roomName);
  }; // LoadingScreen
  #pragma pack(pop)
  static check_size<sizeof(LoadingScreen), 56 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_LoadingScreenSizeCheck;
  static_assert(sizeof(LoadingScreen) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LoadingScreen::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LoadingScreen::CreateRoom
// Il2CppName: CreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LoadingScreen::*)(::StringW)>(&GlobalNamespace::LoadingScreen::CreateRoom)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LoadingScreen*), "CreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LoadingScreen::CreateRoomIEnum
// Il2CppName: CreateRoomIEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LoadingScreen::*)(::StringW)>(&GlobalNamespace::LoadingScreen::CreateRoomIEnum)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LoadingScreen*), "CreateRoomIEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName});
  }
};
