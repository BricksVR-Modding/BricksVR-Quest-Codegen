// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: AdvancedColorPicker.ColorType
#include "AdvancedColorPicker/ColorType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Forward declaring type: HSVColor
  struct HSVColor;
  // Forward declaring type: HSLColor
  struct HSLColor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Color32
  struct Color32;
}
// Completed forward declares
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Forward declaring type: RGBColor
  struct RGBColor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::AdvancedColorPicker::RGBColor, "AdvancedColorPicker", "RGBColor");
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: AdvancedColorPicker.RGBColor
  // [TokenAttribute] Offset: FFFFFFFF
  struct RGBColor/*, public ::System::ValueType, public ::System::IEquatable_1<::AdvancedColorPicker::RGBColor>*/ {
    public:
    public:
    // public System.Double R
    // Size: 0x8
    // Offset: 0x0
    double R;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double G
    // Size: 0x8
    // Offset: 0x8
    double G;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double B
    // Size: 0x8
    // Offset: 0x10
    double B;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: RGBColor
    constexpr RGBColor(double R_ = {}, double G_ = {}, double B_ = {}) noexcept : R{R_}, G{G_}, B{B_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::AdvancedColorPicker::RGBColor>
    operator ::System::IEquatable_1<::AdvancedColorPicker::RGBColor>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::AdvancedColorPicker::RGBColor>*>(this);
    }
    // static field const value: static public AdvancedColorPicker.ColorType Flag
    static constexpr const int Flag = 14;
    // Get static field: static public AdvancedColorPicker.ColorType Flag
    static ::AdvancedColorPicker::ColorType _get_Flag();
    // Set static field: static public AdvancedColorPicker.ColorType Flag
    static void _set_Flag(::AdvancedColorPicker::ColorType value);
    // Get instance field reference: public System.Double R
    [[deprecated("Use field access instead!")]] double& dyn_R();
    // Get instance field reference: public System.Double G
    [[deprecated("Use field access instead!")]] double& dyn_G();
    // Get instance field reference: public System.Double B
    [[deprecated("Use field access instead!")]] double& dyn_B();
    // public System.Byte get_BR()
    // Offset: 0x5B9190
    uint8_t get_BR();
    // public System.Void set_BR(System.Byte value)
    // Offset: 0x5B9240
    void set_BR(uint8_t value);
    // public System.Byte get_BG()
    // Offset: 0x5B9120
    uint8_t get_BG();
    // public System.Void set_BG(System.Byte value)
    // Offset: 0x5B9220
    void set_BG(uint8_t value);
    // public System.Byte get_BB()
    // Offset: 0x5B90B0
    uint8_t get_BB();
    // public System.Void set_BB(System.Byte value)
    // Offset: 0x5B9200
    void set_BB(uint8_t value);
    // public System.Void .ctor(System.Byte r, System.Byte g, System.Byte b)
    // Offset: 0x5B8EB0
    RGBColor(uint8_t r, uint8_t g, uint8_t b);
    // public System.Void .ctor(System.Double r, System.Double g, System.Double b)
    // Offset: 0x5B7170
    // ABORTED: conflicts with another method.  RGBColor(double r, double g, double b);
    // public System.Void .ctor(AdvancedColorPicker.HSVColor hsv)
    // Offset: 0x5B8F00
    RGBColor(::AdvancedColorPicker::HSVColor hsv);
    // public System.Void .ctor(AdvancedColorPicker.HSLColor hsl)
    // Offset: 0x5B8DA0
    RGBColor(::AdvancedColorPicker::HSLColor hsl);
    // public System.Void .ctor(UnityEngine.Color color)
    // Offset: 0x5B9080
    RGBColor(::UnityEngine::Color color);
    // static private System.Double ColorCalc(System.Double c, System.Double t1, System.Double t2)
    // Offset: 0x5B8620
    static double ColorCalc(double c, double t1, double t2);
    // public UnityEngine.Color32 ToColor(System.Byte alpha)
    // Offset: 0x5B88D0
    ::UnityEngine::Color32 ToColor(uint8_t alpha);
    // public System.Boolean Equals(AdvancedColorPicker.RGBColor other)
    // Offset: 0x5B6E10
    bool Equals(::AdvancedColorPicker::RGBColor other);
    // public override System.String ToString()
    // Offset: 0x5B8A30
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x5B86E0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x5B8790
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // AdvancedColorPicker.RGBColor
  #pragma pack(pop)
  static check_size<sizeof(RGBColor), 16 + sizeof(double)> __AdvancedColorPicker_RGBColorSizeCheck;
  static_assert(sizeof(RGBColor) == 0x18);
  // static public System.Boolean op_Equality(AdvancedColorPicker.RGBColor one, AdvancedColorPicker.RGBColor two)
  // Offset: 0x5B7430
  bool operator ==(const ::AdvancedColorPicker::RGBColor& one, const ::AdvancedColorPicker::RGBColor& two);
  // static public System.Boolean op_Inequality(AdvancedColorPicker.RGBColor one, AdvancedColorPicker.RGBColor two)
  // Offset: 0x5B7470
  bool operator !=(const ::AdvancedColorPicker::RGBColor& one, const ::AdvancedColorPicker::RGBColor& two);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::get_BR
// Il2CppName: get_BR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (AdvancedColorPicker::RGBColor::*)()>(&AdvancedColorPicker::RGBColor::get_BR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "get_BR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::set_BR
// Il2CppName: set_BR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::RGBColor::*)(uint8_t)>(&AdvancedColorPicker::RGBColor::set_BR)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "set_BR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::get_BG
// Il2CppName: get_BG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (AdvancedColorPicker::RGBColor::*)()>(&AdvancedColorPicker::RGBColor::get_BG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "get_BG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::set_BG
// Il2CppName: set_BG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::RGBColor::*)(uint8_t)>(&AdvancedColorPicker::RGBColor::set_BG)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "set_BG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::get_BB
// Il2CppName: get_BB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (AdvancedColorPicker::RGBColor::*)()>(&AdvancedColorPicker::RGBColor::get_BB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "get_BB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::set_BB
// Il2CppName: set_BB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::RGBColor::*)(uint8_t)>(&AdvancedColorPicker::RGBColor::set_BB)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "set_BB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::RGBColor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::RGBColor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::RGBColor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::RGBColor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::RGBColor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::ColorCalc
// Il2CppName: ColorCalc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&AdvancedColorPicker::RGBColor::ColorCalc)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* t1 = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* t2 = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "ColorCalc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, t1, t2});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::ToColor
// Il2CppName: ToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (AdvancedColorPicker::RGBColor::*)(uint8_t)>(&AdvancedColorPicker::RGBColor::ToColor)> {
  static const MethodInfo* get() {
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "ToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alpha});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AdvancedColorPicker::RGBColor::*)(::AdvancedColorPicker::RGBColor)>(&AdvancedColorPicker::RGBColor::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("AdvancedColorPicker", "RGBColor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (AdvancedColorPicker::RGBColor::*)()>(&AdvancedColorPicker::RGBColor::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AdvancedColorPicker::RGBColor::*)(::Il2CppObject*)>(&AdvancedColorPicker::RGBColor::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AdvancedColorPicker::RGBColor::*)()>(&AdvancedColorPicker::RGBColor::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::RGBColor), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: AdvancedColorPicker::RGBColor::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
