// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickMeshCache
  class BrickMeshCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickMeshCache);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickMeshCache*, "", "BrickMeshCache");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: BrickMeshCache
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickMeshCache : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Mesh> _meshCache
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Mesh*>* meshCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Mesh*>*) == 0x8);
    // private System.Boolean _perfMode
    // Size: 0x1
    // Offset: 0x20
    bool perfMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private BrickMeshCache _instance
    static ::GlobalNamespace::BrickMeshCache* _get__instance();
    // Set static field: static private BrickMeshCache _instance
    static void _set__instance(::GlobalNamespace::BrickMeshCache* value);
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Mesh> _meshCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Mesh*>*& dyn__meshCache();
    // Get instance field reference: private System.Boolean _perfMode
    [[deprecated("Use field access instead!")]] bool& dyn__perfMode();
    // public System.Void .ctor()
    // Offset: 0x6EF810
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrickMeshCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrickMeshCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrickMeshCache*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x6EF360
    void Awake();
    // public UnityEngine.Mesh Get(System.String key)
    // Offset: 0x6EF720
    ::UnityEngine::Mesh* Get(::StringW key);
    // public System.Void Put(System.String key, UnityEngine.Mesh mesh)
    // Offset: 0x6EF7A0
    void Put(::StringW key, ::UnityEngine::Mesh* mesh);
    // public System.Void Clear()
    // Offset: 0x6EF610
    void Clear();
    // static public BrickMeshCache GetInstance()
    // Offset: 0x6EF660
    static ::GlobalNamespace::BrickMeshCache* GetInstance();
    // public System.Void ClearCacheAndRecalculateMeshes(System.Boolean perfModeEnabled)
    // Offset: 0x6EF3D0
    void ClearCacheAndRecalculateMeshes(bool perfModeEnabled);
  }; // BrickMeshCache
  #pragma pack(pop)
  static check_size<sizeof(BrickMeshCache), 32 + sizeof(bool)> __GlobalNamespace_BrickMeshCacheSizeCheck;
  static_assert(sizeof(BrickMeshCache) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshCache::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshCache::*)()>(&GlobalNamespace::BrickMeshCache::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshCache*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshCache::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (GlobalNamespace::BrickMeshCache::*)(::StringW)>(&GlobalNamespace::BrickMeshCache::Get)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshCache*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshCache::Put
// Il2CppName: Put
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshCache::*)(::StringW, ::UnityEngine::Mesh*)>(&GlobalNamespace::BrickMeshCache::Put)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshCache*), "Put", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, mesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshCache::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshCache::*)()>(&GlobalNamespace::BrickMeshCache::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshCache*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshCache::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BrickMeshCache* (*)()>(&GlobalNamespace::BrickMeshCache::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshCache*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshCache::ClearCacheAndRecalculateMeshes
// Il2CppName: ClearCacheAndRecalculateMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshCache::*)(bool)>(&GlobalNamespace::BrickMeshCache::ClearCacheAndRecalculateMeshes)> {
  static const MethodInfo* get() {
    static auto* perfModeEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshCache*), "ClearCacheAndRecalculateMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perfModeEnabled});
  }
};
