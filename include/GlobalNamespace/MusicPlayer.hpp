// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MusicPlayer
  class MusicPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MusicPlayer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MusicPlayer*, "", "MusicPlayer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: MusicPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class MusicPlayer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.AudioClip[] songs
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::AudioClip*> songs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private UnityEngine.AudioSource _source
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* source;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single _currentClipLen
    // Size: 0x4
    // Offset: 0x28
    float currentClipLen;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _musicDisabled
    // Size: 0x1
    // Offset: 0x2C
    bool musicDisabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.AudioClip[] songs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_songs();
    // Get instance field reference: private UnityEngine.AudioSource _source
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__source();
    // Get instance field reference: private System.Single _currentClipLen
    [[deprecated("Use field access instead!")]] float& dyn__currentClipLen();
    // Get instance field reference: private System.Boolean _musicDisabled
    [[deprecated("Use field access instead!")]] bool& dyn__musicDisabled();
    // public System.Void .ctor()
    // Offset: 0x6BF430
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MusicPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MusicPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MusicPlayer*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x6BF0B0
    void Awake();
    // public System.Void OnMusicVolumeSet(System.Single volume)
    // Offset: 0x6BF160
    void OnMusicVolumeSet(float volume);
    // public System.Void OnMusicToggle(System.Boolean musicSettingEnabled)
    // Offset: 0x6BF100
    void OnMusicToggle(bool musicSettingEnabled);
    // private System.Void Update()
    // Offset: 0x6BF2B0
    void Update();
    // private UnityEngine.AudioClip RandomSong()
    // Offset: 0x6BF1A0
    ::UnityEngine::AudioClip* RandomSong();
    // public System.Void Pause()
    // Offset: 0x6BF180
    void Pause();
    // public System.Void Resume()
    // Offset: 0x6BF280
    void Resume();
  }; // MusicPlayer
  #pragma pack(pop)
  static check_size<sizeof(MusicPlayer), 44 + sizeof(bool)> __GlobalNamespace_MusicPlayerSizeCheck;
  static_assert(sizeof(MusicPlayer) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MusicPlayer::*)()>(&GlobalNamespace::MusicPlayer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MusicPlayer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::OnMusicVolumeSet
// Il2CppName: OnMusicVolumeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MusicPlayer::*)(float)>(&GlobalNamespace::MusicPlayer::OnMusicVolumeSet)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MusicPlayer*), "OnMusicVolumeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::OnMusicToggle
// Il2CppName: OnMusicToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MusicPlayer::*)(bool)>(&GlobalNamespace::MusicPlayer::OnMusicToggle)> {
  static const MethodInfo* get() {
    static auto* musicSettingEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MusicPlayer*), "OnMusicToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{musicSettingEnabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MusicPlayer::*)()>(&GlobalNamespace::MusicPlayer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MusicPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::RandomSong
// Il2CppName: RandomSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (GlobalNamespace::MusicPlayer::*)()>(&GlobalNamespace::MusicPlayer::RandomSong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MusicPlayer*), "RandomSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MusicPlayer::*)()>(&GlobalNamespace::MusicPlayer::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MusicPlayer*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MusicPlayer::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MusicPlayer::*)()>(&GlobalNamespace::MusicPlayer::Resume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MusicPlayer*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
