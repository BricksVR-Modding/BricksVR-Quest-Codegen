// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.ProceduralImage.ProceduralImageModifier
#include "UnityEngine/UI/ProceduralImage/ProceduralImageModifier.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FreeModifier
  class FreeModifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FreeModifier);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FreeModifier*, "", "FreeModifier");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: FreeModifier
  // [TokenAttribute] Offset: FFFFFFFF
  // [ModifierID] Offset: 7283EC
  class FreeModifier : public ::UnityEngine::UI::ProceduralImage::ProceduralImageModifier {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.Vector4 radius
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Vector4 radius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Get instance field reference: private UnityEngine.Vector4 radius
    ::UnityEngine::Vector4& dyn_radius();
    // public UnityEngine.Vector4 get_Radius()
    // Offset: 0x10A6650
    ::UnityEngine::Vector4 get_Radius();
    // public System.Void set_Radius(UnityEngine.Vector4 value)
    // Offset: 0x10A665C
    void set_Radius(::UnityEngine::Vector4 value);
    // protected System.Void OnValidate()
    // Offset: 0x10A669C
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x10A6758
    // Implemented from: UnityEngine.UI.ProceduralImage.ProceduralImageModifier
    // Base method: System.Void ProceduralImageModifier::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FreeModifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FreeModifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FreeModifier*, creationType>()));
    }
    // public override UnityEngine.Vector4 CalculateRadius(UnityEngine.Rect imageRect)
    // Offset: 0x10A6690
    // Implemented from: UnityEngine.UI.ProceduralImage.ProceduralImageModifier
    // Base method: UnityEngine.Vector4 ProceduralImageModifier::CalculateRadius(UnityEngine.Rect imageRect)
    ::UnityEngine::Vector4 CalculateRadius(::UnityEngine::Rect imageRect);
  }; // FreeModifier
  #pragma pack(pop)
  static check_size<sizeof(FreeModifier), 32 + sizeof(::UnityEngine::Vector4)> __GlobalNamespace_FreeModifierSizeCheck;
  static_assert(sizeof(FreeModifier) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FreeModifier::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (GlobalNamespace::FreeModifier::*)()>(&GlobalNamespace::FreeModifier::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FreeModifier*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FreeModifier::set_Radius
// Il2CppName: set_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FreeModifier::*)(::UnityEngine::Vector4)>(&GlobalNamespace::FreeModifier::set_Radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FreeModifier*), "set_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FreeModifier::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FreeModifier::*)()>(&GlobalNamespace::FreeModifier::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FreeModifier*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FreeModifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FreeModifier::CalculateRadius
// Il2CppName: CalculateRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (GlobalNamespace::FreeModifier::*)(::UnityEngine::Rect)>(&GlobalNamespace::FreeModifier::CalculateRadius)> {
  static const MethodInfo* get() {
    static auto* imageRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FreeModifier*), "CalculateRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imageRect});
  }
};
