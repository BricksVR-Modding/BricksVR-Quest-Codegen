// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NormcoreRPC
#include "GlobalNamespace/NormcoreRPC.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NormcoreRPC::Brick);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NormcoreRPC::Brick*, "", "NormcoreRPC/Brick");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: NormcoreRPC/Brick
  // [TokenAttribute] Offset: FFFFFFFF
  class NormcoreRPC::Brick : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.String uuid
    // Size: 0x8
    // Offset: 0x10
    ::StringW uuid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 matId
    // Size: 0x4
    // Offset: 0x18
    int matId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 color
    // Size: 0x4
    // Offset: 0x1C
    int color;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String type
    // Size: 0x8
    // Offset: 0x20
    ::StringW type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Vector3 pos
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 pos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rot
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Quaternion rot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Boolean usingNewColor
    // Size: 0x1
    // Offset: 0x44
    bool usingNewColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usingNewColor and: headClientId
    char __padding6[0x3] = {};
    // public System.Int32 headClientId
    // Size: 0x4
    // Offset: 0x48
    int headClientId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean usingHeadStuff
    // Size: 0x1
    // Offset: 0x4C
    bool usingHeadStuff;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String uuid
    ::StringW& dyn_uuid();
    // Get instance field reference: public System.Int32 matId
    int& dyn_matId();
    // Get instance field reference: public System.Int32 color
    int& dyn_color();
    // Get instance field reference: public System.String type
    ::StringW& dyn_type();
    // Get instance field reference: public UnityEngine.Vector3 pos
    ::UnityEngine::Vector3& dyn_pos();
    // Get instance field reference: public UnityEngine.Quaternion rot
    ::UnityEngine::Quaternion& dyn_rot();
    // Get instance field reference: public System.Boolean usingNewColor
    bool& dyn_usingNewColor();
    // Get instance field reference: public System.Int32 headClientId
    int& dyn_headClientId();
    // Get instance field reference: public System.Boolean usingHeadStuff
    bool& dyn_usingHeadStuff();
    // public System.Void .ctor()
    // Offset: 0x112F79C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NormcoreRPC::Brick* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NormcoreRPC::Brick::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NormcoreRPC::Brick*, creationType>()));
    }
  }; // NormcoreRPC/Brick
  #pragma pack(pop)
  static check_size<sizeof(NormcoreRPC::Brick), 76 + sizeof(bool)> __GlobalNamespace_NormcoreRPC_BrickSizeCheck;
  static_assert(sizeof(NormcoreRPC::Brick) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NormcoreRPC::Brick::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
