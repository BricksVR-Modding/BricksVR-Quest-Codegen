// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Skipping declaration: FromAsyncTrimPromise`1 because it is already included!
  // Forward declaring type: TaskScheduler
  class TaskScheduler;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`5<T1, T2, T3, T4, TResult>
  template<typename T1, typename T2, typename T3, typename T4, typename TResult>
  class Func_5;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Skipping declaration: IAsyncResult because it is already included!
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskFactory`1<TResult>
  template<typename TResult>
  class TaskFactory_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Threading::Tasks::TaskFactory_1, "System.Threading.Tasks", "TaskFactory`1");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Threading.Tasks.TaskFactory`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TResult>
  class TaskFactory_1 : public ::Il2CppObject {
    public:
    // Nested type: ::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1<TResult, TInstance>
    template<typename TInstance>
    class FromAsyncTrimPromise_1;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Threading.Tasks.TaskFactory`1/System.Threading.Tasks.FromAsyncTrimPromise`1
    // [TokenAttribute] Offset: FFFFFFFF
    template<typename TInstance>
    class FromAsyncTrimPromise_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::Threading::Tasks::Task_1<TResult> {
      public:
      using declaring_type = TaskFactory_1<TResult>*;
      static constexpr std::string_view NESTED_NAME = "FromAsyncTrimPromise`1";
      static constexpr bool IS_VALUE_TYPE = false;
      #ifdef USE_CODEGEN_FIELDS
      public:
      #else
      #ifdef CODEGEN_FIELD_ACCESSIBILITY
      CODEGEN_FIELD_ACCESSIBILITY:
      #else
      protected:
      #endif
      #endif
      // private TInstance m_thisRef
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TInstance m_thisRef;
      // private System.Func`3<TInstance,System.IAsyncResult,TResult> m_endMethod
      // Size: 0x8
      // Offset: 0x0
      ::System::Func_3<TInstance, ::System::IAsyncResult*, TResult>* m_endMethod;
      // Field size check
      static_assert(sizeof(::System::Func_3<TInstance, ::System::IAsyncResult*, TResult>*) == 0x8);
      public:
      // Autogenerated static field getter
      // Get static field: static readonly System.AsyncCallback s_completeFromAsyncResult
      static ::System::AsyncCallback* _get_s_completeFromAsyncResult() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::_get_s_completeFromAsyncResult");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::AsyncCallback*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename TaskFactory_1<TResult>::FromAsyncTrimPromise_1<TInstance>*>::get(), "s_completeFromAsyncResult"));
      }
      // Autogenerated static field setter
      // Set static field: static readonly System.AsyncCallback s_completeFromAsyncResult
      static void _set_s_completeFromAsyncResult(::System::AsyncCallback* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::_set_s_completeFromAsyncResult");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename TaskFactory_1<TResult>::FromAsyncTrimPromise_1<TInstance>*>::get(), "s_completeFromAsyncResult", value));
      }
      // Autogenerated instance field getter
      // Get instance field: private TInstance m_thisRef
      TInstance& dyn_m_thisRef() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::dyn_m_thisRef");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_thisRef"))->offset;
        return *reinterpret_cast<TInstance*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Func`3<TInstance,System.IAsyncResult,TResult> m_endMethod
      ::System::Func_3<TInstance, ::System::IAsyncResult*, TResult>*& dyn_m_endMethod() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::dyn_m_endMethod");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_endMethod"))->offset;
        return *reinterpret_cast<::System::Func_3<TInstance, ::System::IAsyncResult*, TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(TInstance thisRef, System.Func`3<TInstance,System.IAsyncResult,TResult> endMethod)
      // Offset: 0xFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename TaskFactory_1<TResult>::FromAsyncTrimPromise_1<TInstance>* New_ctor(TInstance thisRef, ::System::Func_3<TInstance, ::System::IAsyncResult*, TResult>* endMethod) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename TaskFactory_1<TResult>::FromAsyncTrimPromise_1<TInstance>*, creationType>(thisRef, endMethod)));
      }
      // static System.Void CompleteFromAsyncResult(System.IAsyncResult asyncResult)
      // Offset: 0xFFFFFFFF
      static void CompleteFromAsyncResult(::System::IAsyncResult* asyncResult) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::CompleteFromAsyncResult");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename TaskFactory_1<TResult>::FromAsyncTrimPromise_1<TInstance>*>::get(), "CompleteFromAsyncResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asyncResult);
      }
      // System.Void Complete(TInstance thisRef, System.Func`3<TInstance,System.IAsyncResult,TResult> endMethod, System.IAsyncResult asyncResult, System.Boolean requiresSynchronization)
      // Offset: 0xFFFFFFFF
      void Complete(TInstance thisRef, ::System::Func_3<TInstance, ::System::IAsyncResult*, TResult>* endMethod, ::System::IAsyncResult* asyncResult, bool requiresSynchronization) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::Complete");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Complete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thisRef), ::il2cpp_utils::ExtractType(endMethod), ::il2cpp_utils::ExtractType(asyncResult), ::il2cpp_utils::ExtractType(requiresSynchronization)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, thisRef, endMethod, asyncResult, requiresSynchronization);
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Threading.Tasks.Task`1
      // Base method: System.Void Task_1::.cctor()
      // Base method: System.Void Task::.cctor()
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrimPromise_1::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename TaskFactory_1<TResult>::FromAsyncTrimPromise_1<TInstance>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
    }; // System.Threading.Tasks.TaskFactory`1/System.Threading.Tasks.FromAsyncTrimPromise`1
    // Could not write size check! Type: System.Threading.Tasks.TaskFactory`1/System.Threading.Tasks.FromAsyncTrimPromise`1 is generic, or has no fields that are valid for size checks!
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Threading.CancellationToken m_defaultCancellationToken
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::CancellationToken m_defaultCancellationToken;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationToken) == 0x8);
    // private System.Threading.Tasks.TaskScheduler m_defaultScheduler
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::Tasks::TaskScheduler* m_defaultScheduler;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskScheduler*) == 0x8);
    // private System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions
    // Size: 0x4
    // Offset: 0x0
    ::System::Threading::Tasks::TaskCreationOptions m_defaultCreationOptions;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCreationOptions) == 0x4);
    // private System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions
    // Size: 0x4
    // Offset: 0x0
    ::System::Threading::Tasks::TaskContinuationOptions m_defaultContinuationOptions;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskContinuationOptions) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.CancellationToken m_defaultCancellationToken
    ::System::Threading::CancellationToken& dyn_m_defaultCancellationToken() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::dyn_m_defaultCancellationToken");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultCancellationToken"))->offset;
      return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.Tasks.TaskScheduler m_defaultScheduler
    ::System::Threading::Tasks::TaskScheduler*& dyn_m_defaultScheduler() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::dyn_m_defaultScheduler");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultScheduler"))->offset;
      return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions
    ::System::Threading::Tasks::TaskCreationOptions& dyn_m_defaultCreationOptions() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::dyn_m_defaultCreationOptions");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultCreationOptions"))->offset;
      return *reinterpret_cast<::System::Threading::Tasks::TaskCreationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions
    ::System::Threading::Tasks::TaskContinuationOptions& dyn_m_defaultContinuationOptions() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::dyn_m_defaultContinuationOptions");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultContinuationOptions"))->offset;
      return *reinterpret_cast<::System::Threading::Tasks::TaskContinuationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskFactory_1<TResult>* New_ctor(::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskCreationOptions creationOptions, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskFactory_1<TResult>*, creationType>(cancellationToken, creationOptions, continuationOptions, scheduler)));
    }
    // static System.Threading.Tasks.Task`1<TResult> FromAsyncTrim(TInstance thisRef, TArgs args, System.Func`5<TInstance,TArgs,System.AsyncCallback,System.Object,System.IAsyncResult> beginMethod, System.Func`3<TInstance,System.IAsyncResult,TResult> endMethod)
    // Offset: 0xFFFFFFFF
    template<class TInstance, class TArgs>
    static ::System::Threading::Tasks::Task_1<TResult>* FromAsyncTrim(TInstance thisRef, TArgs args, ::System::Func_5<TInstance, TArgs, ::System::AsyncCallback*, ::Il2CppObject*, ::System::IAsyncResult*>* beginMethod, ::System::Func_3<TInstance, ::System::IAsyncResult*, TResult>* endMethod) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::FromAsyncTrim");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TaskFactory_1<TResult>*>::get(), "FromAsyncTrim", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInstance>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArgs>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thisRef), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(beginMethod), ::il2cpp_utils::ExtractType(endMethod)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInstance>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArgs>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, thisRef, args, beginMethod, endMethod);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskFactory_1<TResult>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskFactory_1<TResult>*, creationType>()));
    }
  }; // System.Threading.Tasks.TaskFactory`1
  // Could not write size check! Type: System.Threading.Tasks.TaskFactory`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
