// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BulkGrabFollow
  class BulkGrabFollow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BulkGrabFollow);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BulkGrabFollow*, "", "BulkGrabFollow");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: BulkGrabFollow
  // [TokenAttribute] Offset: FFFFFFFF
  class BulkGrabFollow : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.Vector3 _relativePosition
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 relativePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: relativePosition and: followedTransform
    char __padding0[0x4] = {};
    // private UnityEngine.Transform _followedTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* followedTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Quaternion _initialFollowedRotation
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Quaternion initialFollowedRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion _initialSelfRotation
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Quaternion initialSelfRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion _relativeRot
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Quaternion relativeRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Vector3 _relativePosition
    ::UnityEngine::Vector3& dyn__relativePosition();
    // Get instance field reference: private UnityEngine.Transform _followedTransform
    ::UnityEngine::Transform*& dyn__followedTransform();
    // Get instance field reference: private UnityEngine.Quaternion _initialFollowedRotation
    ::UnityEngine::Quaternion& dyn__initialFollowedRotation();
    // Get instance field reference: private UnityEngine.Quaternion _initialSelfRotation
    ::UnityEngine::Quaternion& dyn__initialSelfRotation();
    // Get instance field reference: private UnityEngine.Quaternion _relativeRot
    ::UnityEngine::Quaternion& dyn__relativeRot();
    // private System.Void Start()
    // Offset: 0x109DC64
    void Start();
    // public System.Void Initialize(UnityEngine.Transform followedTransform)
    // Offset: 0x109DC70
    void Initialize(::UnityEngine::Transform* followedTransform);
    // private System.Void Update()
    // Offset: 0x109DD9C
    void Update();
    // public System.Void .ctor()
    // Offset: 0x109DF94
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BulkGrabFollow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BulkGrabFollow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BulkGrabFollow*, creationType>()));
    }
  }; // BulkGrabFollow
  #pragma pack(pop)
  static check_size<sizeof(BulkGrabFollow), 80 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_BulkGrabFollowSizeCheck;
  static_assert(sizeof(BulkGrabFollow) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BulkGrabFollow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BulkGrabFollow::*)()>(&GlobalNamespace::BulkGrabFollow::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BulkGrabFollow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BulkGrabFollow::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BulkGrabFollow::*)(::UnityEngine::Transform*)>(&GlobalNamespace::BulkGrabFollow::Initialize)> {
  static const MethodInfo* get() {
    static auto* followedTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BulkGrabFollow*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{followedTransform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BulkGrabFollow::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BulkGrabFollow::*)()>(&GlobalNamespace::BulkGrabFollow::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BulkGrabFollow*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BulkGrabFollow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
