// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeComponent`1
#include "Normal/Realtime/RealtimeComponent_1.hpp"
// Including type: Normal.Realtime.RealtimeTransformModel
#include "Normal/Realtime/RealtimeTransformModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: IRealtimeTransformStrategy
  class IRealtimeTransformStrategy;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Collision
  class Collision;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeTransform
  class RealtimeTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeTransform);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeTransform*, "Normal.Realtime", "RealtimeTransform");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.RealtimeTransform
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 715B60
  class RealtimeTransform : public ::Normal::Realtime::RealtimeComponent_1<::Normal::Realtime::RealtimeTransformModel*> {
    public:
    // Nested type: ::Normal::Realtime::RealtimeTransform::$FixedUpdateEnumerator$d__26
    class $FixedUpdateEnumerator$d__26;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Boolean _interpolate
    // Size: 0x1
    // Offset: 0x28
    bool interpolate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _syncPosition
    // Size: 0x1
    // Offset: 0x29
    bool syncPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _syncRotation
    // Size: 0x1
    // Offset: 0x2A
    bool syncRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _syncScale
    // Size: 0x1
    // Offset: 0x2B
    bool syncScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _syncVelocity
    // Size: 0x1
    // Offset: 0x2C
    bool syncVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _maintainOwnershipWhileSleeping
    // Size: 0x1
    // Offset: 0x2D
    bool maintainOwnershipWhileSleeping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Normal.Realtime.IRealtimeTransformStrategy _strategy
    // Size: 0x8
    // Offset: 0x30
    ::Normal::Realtime::IRealtimeTransformStrategy* strategy;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::IRealtimeTransformStrategy*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean _interpolate
    bool& dyn__interpolate();
    // Get instance field reference: private System.Boolean _syncPosition
    bool& dyn__syncPosition();
    // Get instance field reference: private System.Boolean _syncRotation
    bool& dyn__syncRotation();
    // Get instance field reference: private System.Boolean _syncScale
    bool& dyn__syncScale();
    // Get instance field reference: private System.Boolean _syncVelocity
    bool& dyn__syncVelocity();
    // Get instance field reference: private System.Boolean _maintainOwnershipWhileSleeping
    bool& dyn__maintainOwnershipWhileSleeping();
    // Get instance field reference: private Normal.Realtime.IRealtimeTransformStrategy _strategy
    ::Normal::Realtime::IRealtimeTransformStrategy*& dyn__strategy();
    // public System.Boolean get_isSyncingPosition()
    // Offset: 0xAF8014
    bool get_isSyncingPosition();
    // public System.Boolean get_isSyncingRotation()
    // Offset: 0xAF801C
    bool get_isSyncingRotation();
    // public System.Boolean get_isSyncingScale()
    // Offset: 0xAF8024
    bool get_isSyncingScale();
    // public System.Boolean get_isSyncingVelocity()
    // Offset: 0xAF802C
    bool get_isSyncingVelocity();
    // public System.Boolean get_isSyncingAngularVelocity()
    // Offset: 0xAF804C
    bool get_isSyncingAngularVelocity();
    // public System.Boolean get_maintainOwnershipWhileSleeping()
    // Offset: 0xAF806C
    bool get_maintainOwnershipWhileSleeping();
    // public System.Void set_maintainOwnershipWhileSleeping(System.Boolean value)
    // Offset: 0xAF8074
    void set_maintainOwnershipWhileSleeping(bool value);
    // public System.Boolean get_isPhysicsOwnershipAvailable()
    // Offset: 0xAF8080
    bool get_isPhysicsOwnershipAvailable();
    // public System.Boolean get_isInterpolationWarmedUp()
    // Offset: 0xAF8114
    bool get_isInterpolationWarmedUp();
    // private System.Void OnEnable()
    // Offset: 0xAF81F0
    void OnEnable();
    // private System.Void Update()
    // Offset: 0xAF830C
    void Update();
    // private System.Collections.IEnumerator FixedUpdateEnumerator()
    // Offset: 0xAF829C
    ::System::Collections::IEnumerator* FixedUpdateEnumerator();
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0xAF8400
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void OnCollisionStay(UnityEngine.Collision collision)
    // Offset: 0xAF84E0
    void OnCollisionStay(::UnityEngine::Collision* collision);
    // private System.Void OnCollisionExit(UnityEngine.Collision collision)
    // Offset: 0xAF85C0
    void OnCollisionExit(::UnityEngine::Collision* collision);
    // private System.Void OnDestroy()
    // Offset: 0xAF86A0
    void OnDestroy();
    // protected System.Void OnRealtimeModelReplaced(Normal.Realtime.RealtimeTransformModel previousModel, Normal.Realtime.RealtimeTransformModel currentModel)
    // Offset: 0xAF87AC
    void OnRealtimeModelReplaced(::Normal::Realtime::RealtimeTransformModel* previousModel, ::Normal::Realtime::RealtimeTransformModel* currentModel);
    // private System.Void SubscribeStrategyEvents(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF899C
    void SubscribeStrategyEvents(::Normal::Realtime::RealtimeTransformModel* model);
    // private System.Void UnsubscribeStrategyEvents(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF86E8
    void UnsubscribeStrategyEvents(::Normal::Realtime::RealtimeTransformModel* model);
    // private System.Void OnModelWillWrite(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF8D10
    void OnModelWillWrite(::Normal::Realtime::RealtimeTransformModel* model);
    // private System.Void OnModelDidRead(Normal.Realtime.RealtimeTransformModel model, Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyChangeSet changes)
    // Offset: 0xAF8DF4
    void OnModelDidRead(::Normal::Realtime::RealtimeTransformModel* model, ::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet* changes);
    // private Normal.Realtime.IRealtimeTransformStrategy GetOrCreateStrategy()
    // Offset: 0xAF8898
    ::Normal::Realtime::IRealtimeTransformStrategy* GetOrCreateStrategy();
    // System.Void SetTransformValues(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale)
    // Offset: 0xAF9198
    void SetTransformValues(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale);
    // System.Void SetTransformFromModel()
    // Offset: 0xAF92A0
    void SetTransformFromModel();
    // System.Void SetModelValues(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale)
    // Offset: 0xAF9474
    void SetModelValues(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale);
    // System.Void SetModelFromTransform()
    // Offset: 0xAF9860
    void SetModelFromTransform();
    // public System.Void .ctor()
    // Offset: 0xAF9934
    // Implemented from: Normal.Realtime.RealtimeComponent`1
    // Base method: System.Void RealtimeComponent_1::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeTransform*, creationType>()));
    }
  }; // Normal.Realtime.RealtimeTransform
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_isSyncingPosition
// Il2CppName: get_isSyncingPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_isSyncingPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_isSyncingPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_isSyncingRotation
// Il2CppName: get_isSyncingRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_isSyncingRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_isSyncingRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_isSyncingScale
// Il2CppName: get_isSyncingScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_isSyncingScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_isSyncingScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_isSyncingVelocity
// Il2CppName: get_isSyncingVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_isSyncingVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_isSyncingVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_isSyncingAngularVelocity
// Il2CppName: get_isSyncingAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_isSyncingAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_isSyncingAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_maintainOwnershipWhileSleeping
// Il2CppName: get_maintainOwnershipWhileSleeping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_maintainOwnershipWhileSleeping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_maintainOwnershipWhileSleeping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::set_maintainOwnershipWhileSleeping
// Il2CppName: set_maintainOwnershipWhileSleeping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(bool)>(&Normal::Realtime::RealtimeTransform::set_maintainOwnershipWhileSleeping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "set_maintainOwnershipWhileSleeping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_isPhysicsOwnershipAvailable
// Il2CppName: get_isPhysicsOwnershipAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_isPhysicsOwnershipAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_isPhysicsOwnershipAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::get_isInterpolationWarmedUp
// Il2CppName: get_isInterpolationWarmedUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::get_isInterpolationWarmedUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "get_isInterpolationWarmedUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::FixedUpdateEnumerator
// Il2CppName: FixedUpdateEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::FixedUpdateEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "FixedUpdateEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::UnityEngine::Collision*)>(&Normal::Realtime::RealtimeTransform::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnCollisionStay
// Il2CppName: OnCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::UnityEngine::Collision*)>(&Normal::Realtime::RealtimeTransform::OnCollisionStay)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnCollisionExit
// Il2CppName: OnCollisionExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::UnityEngine::Collision*)>(&Normal::Realtime::RealtimeTransform::OnCollisionExit)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnCollisionExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnRealtimeModelReplaced
// Il2CppName: OnRealtimeModelReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::Normal::Realtime::RealtimeTransformModel*, ::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransform::OnRealtimeModelReplaced)> {
  static const MethodInfo* get() {
    static auto* previousModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    static auto* currentModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnRealtimeModelReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousModel, currentModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::SubscribeStrategyEvents
// Il2CppName: SubscribeStrategyEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransform::SubscribeStrategyEvents)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "SubscribeStrategyEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::UnsubscribeStrategyEvents
// Il2CppName: UnsubscribeStrategyEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransform::UnsubscribeStrategyEvents)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "UnsubscribeStrategyEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnModelWillWrite
// Il2CppName: OnModelWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransform::OnModelWillWrite)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnModelWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::OnModelDidRead
// Il2CppName: OnModelDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::Normal::Realtime::RealtimeTransformModel*, ::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet*)>(&Normal::Realtime::RealtimeTransform::OnModelDidRead)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    static auto* changes = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/PropertyChangeSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "OnModelDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, changes});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::GetOrCreateStrategy
// Il2CppName: GetOrCreateStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::IRealtimeTransformStrategy* (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::GetOrCreateStrategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "GetOrCreateStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::SetTransformValues
// Il2CppName: SetTransformValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransform::SetTransformValues)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "SetTransformValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, scale});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::SetTransformFromModel
// Il2CppName: SetTransformFromModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::SetTransformFromModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "SetTransformFromModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::SetModelValues
// Il2CppName: SetModelValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&Normal::Realtime::RealtimeTransform::SetModelValues)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "SetModelValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, scale});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::SetModelFromTransform
// Il2CppName: SetModelFromTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransform::*)()>(&Normal::Realtime::RealtimeTransform::SetModelFromTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransform*), "SetModelFromTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
