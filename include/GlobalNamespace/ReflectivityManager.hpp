// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ReflectivityManager
  class ReflectivityManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ReflectivityManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ReflectivityManager*, "", "ReflectivityManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: ReflectivityManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ReflectivityManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single reflectivityMultiplier
    // Size: 0x4
    // Offset: 0x18
    float reflectivityMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Single[] ReflectivityValues
    static ::ArrayW<float> _get_ReflectivityValues();
    // Set static field: static private readonly System.Single[] ReflectivityValues
    static void _set_ReflectivityValues(::ArrayW<float> value);
    // Get instance field reference: public System.Single reflectivityMultiplier
    [[deprecated]] float& dyn_reflectivityMultiplier();
    // static public System.Single GetReflectivityFromSliderValue(System.Int32 sliderValue)
    // Offset: 0x6C9930
    static float GetReflectivityFromSliderValue(int sliderValue);
    // public System.Void SetReflectivity(System.Int32 sliderValue)
    // Offset: 0x6C99C0
    void SetReflectivity(int sliderValue);
    // public System.Void .ctor()
    // Offset: 0x6C9B00
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectivityManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReflectivityManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectivityManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x6C9A90
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // ReflectivityManager
  #pragma pack(pop)
  static check_size<sizeof(ReflectivityManager), 24 + sizeof(float)> __GlobalNamespace_ReflectivityManagerSizeCheck;
  static_assert(sizeof(ReflectivityManager) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ReflectivityManager::GetReflectivityFromSliderValue
// Il2CppName: GetReflectivityFromSliderValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&GlobalNamespace::ReflectivityManager::GetReflectivityFromSliderValue)> {
  static const MethodInfo* get() {
    static auto* sliderValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ReflectivityManager*), "GetReflectivityFromSliderValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ReflectivityManager::SetReflectivity
// Il2CppName: SetReflectivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ReflectivityManager::*)(int)>(&GlobalNamespace::ReflectivityManager::SetReflectivity)> {
  static const MethodInfo* get() {
    static auto* sliderValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ReflectivityManager*), "SetReflectivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ReflectivityManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ReflectivityManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ReflectivityManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ReflectivityManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
