// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CollapsibleColorPicker
  class CollapsibleColorPicker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CollapsibleColorPicker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CollapsibleColorPicker*, "", "CollapsibleColorPicker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xCC
  #pragma pack(push, 1)
  // Autogenerated type: CollapsibleColorPicker
  // [TokenAttribute] Offset: FFFFFFFF
  class CollapsibleColorPicker : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean isOpen
    // Size: 0x1
    // Offset: 0x18
    bool isOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOpen and: animationTime
    char __padding0[0x3] = {};
    // public System.Single animationTime
    // Size: 0x4
    // Offset: 0x1C
    float animationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeBetweenAnimations
    // Size: 0x4
    // Offset: 0x20
    float timeBetweenAnimations;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isOpening
    // Size: 0x1
    // Offset: 0x24
    bool isOpening;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isClosing
    // Size: 0x1
    // Offset: 0x25
    bool isClosing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isClosing and: panelRightOpen
    char __padding4[0x2] = {};
    // private System.Single _panelRightOpen
    // Size: 0x4
    // Offset: 0x28
    float panelRightOpen;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single panelRightClosed
    // Size: 0x4
    // Offset: 0x2C
    float panelRightClosed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _animationStart
    // Size: 0x4
    // Offset: 0x30
    float animationStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: animationStart and: hueSlider
    char __padding7[0x4] = {};
    // public UnityEngine.Transform hueSlider
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* hueSlider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _hueSliderLocalPosOpen
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 hueSliderLocalPosOpen;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: hueSliderLocalPosOpen and: satSlider
    char __padding9[0x4] = {};
    // public UnityEngine.Transform satSlider
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* satSlider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _satSliderLocalPosOpen
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 satSliderLocalPosOpen;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: satSliderLocalPosOpen and: valSlider
    char __padding11[0x4] = {};
    // public UnityEngine.Transform valSlider
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* valSlider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _valSliderLocalPosOpen
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 valSliderLocalPosOpen;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 sliderClosedPos
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 sliderClosedPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.RectTransform panelBackground
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::RectTransform* panelBackground;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // public UnityEngine.RectTransform panelTitle
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::RectTransform* panelTitle;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // public System.Single panelTitlePosClosed
    // Size: 0x4
    // Offset: 0x98
    float panelTitlePosClosed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _panelTitlePosOpen
    // Size: 0x4
    // Offset: 0x9C
    float panelTitlePosOpen;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _panelTitleOriginalScale
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 panelTitleOriginalScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _sliderOriginalScale
    // Size: 0x4
    // Offset: 0xAC
    float sliderOriginalScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Collider copyBrickColorCollider
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Collider* copyBrickColorCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public UnityEngine.Transform collapseButton
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Transform* collapseButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _collapseButtonOriginalRot
    // Size: 0xC
    // Offset: 0xC0
    ::UnityEngine::Vector3 collapseButtonOriginalRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean isOpen
    [[deprecated("Use field access instead!")]] bool& dyn_isOpen();
    // Get instance field reference: public System.Single animationTime
    [[deprecated("Use field access instead!")]] float& dyn_animationTime();
    // Get instance field reference: public System.Single timeBetweenAnimations
    [[deprecated("Use field access instead!")]] float& dyn_timeBetweenAnimations();
    // Get instance field reference: private System.Boolean _isOpening
    [[deprecated("Use field access instead!")]] bool& dyn__isOpening();
    // Get instance field reference: private System.Boolean _isClosing
    [[deprecated("Use field access instead!")]] bool& dyn__isClosing();
    // Get instance field reference: private System.Single _panelRightOpen
    [[deprecated("Use field access instead!")]] float& dyn__panelRightOpen();
    // Get instance field reference: public System.Single panelRightClosed
    [[deprecated("Use field access instead!")]] float& dyn_panelRightClosed();
    // Get instance field reference: private System.Single _animationStart
    [[deprecated("Use field access instead!")]] float& dyn__animationStart();
    // Get instance field reference: public UnityEngine.Transform hueSlider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_hueSlider();
    // Get instance field reference: private UnityEngine.Vector3 _hueSliderLocalPosOpen
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__hueSliderLocalPosOpen();
    // Get instance field reference: public UnityEngine.Transform satSlider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_satSlider();
    // Get instance field reference: private UnityEngine.Vector3 _satSliderLocalPosOpen
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__satSliderLocalPosOpen();
    // Get instance field reference: public UnityEngine.Transform valSlider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_valSlider();
    // Get instance field reference: private UnityEngine.Vector3 _valSliderLocalPosOpen
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__valSliderLocalPosOpen();
    // Get instance field reference: public UnityEngine.Vector3 sliderClosedPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_sliderClosedPos();
    // Get instance field reference: public UnityEngine.RectTransform panelBackground
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_panelBackground();
    // Get instance field reference: public UnityEngine.RectTransform panelTitle
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_panelTitle();
    // Get instance field reference: public System.Single panelTitlePosClosed
    [[deprecated("Use field access instead!")]] float& dyn_panelTitlePosClosed();
    // Get instance field reference: private System.Single _panelTitlePosOpen
    [[deprecated("Use field access instead!")]] float& dyn__panelTitlePosOpen();
    // Get instance field reference: private UnityEngine.Vector3 _panelTitleOriginalScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__panelTitleOriginalScale();
    // Get instance field reference: private System.Single _sliderOriginalScale
    [[deprecated("Use field access instead!")]] float& dyn__sliderOriginalScale();
    // Get instance field reference: public UnityEngine.Collider copyBrickColorCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_copyBrickColorCollider();
    // Get instance field reference: public UnityEngine.Transform collapseButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_collapseButton();
    // Get instance field reference: private UnityEngine.Vector3 _collapseButtonOriginalRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__collapseButtonOriginalRot();
    // private System.Boolean get_IsAnimating()
    // Offset: 0x6B1250
    bool get_IsAnimating();
    // private System.Single get_AnimationEnd()
    // Offset: 0x6B1240
    float get_AnimationEnd();
    // public System.Void .ctor()
    // Offset: 0x3C9020
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CollapsibleColorPicker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CollapsibleColorPicker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CollapsibleColorPicker*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x6B1070
    void Awake();
    // private System.Void Update()
    // Offset: 0x6B1220
    void Update();
    // private System.Single AnimationProgress()
    // Offset: 0x6B0990
    float AnimationProgress();
    // public System.Void Toggle()
    // Offset: 0x6B11C0
    void Toggle();
    // private System.Void Animation(System.Boolean closing)
    // Offset: 0x6B0A30
    void Animation(bool closing);
  }; // CollapsibleColorPicker
  #pragma pack(pop)
  static check_size<sizeof(CollapsibleColorPicker), 192 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_CollapsibleColorPickerSizeCheck;
  static_assert(sizeof(CollapsibleColorPicker) == 0xCC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::get_IsAnimating
// Il2CppName: get_IsAnimating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CollapsibleColorPicker::*)()>(&GlobalNamespace::CollapsibleColorPicker::get_IsAnimating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollapsibleColorPicker*), "get_IsAnimating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::get_AnimationEnd
// Il2CppName: get_AnimationEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CollapsibleColorPicker::*)()>(&GlobalNamespace::CollapsibleColorPicker::get_AnimationEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollapsibleColorPicker*), "get_AnimationEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CollapsibleColorPicker::*)()>(&GlobalNamespace::CollapsibleColorPicker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollapsibleColorPicker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CollapsibleColorPicker::*)()>(&GlobalNamespace::CollapsibleColorPicker::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollapsibleColorPicker*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::AnimationProgress
// Il2CppName: AnimationProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CollapsibleColorPicker::*)()>(&GlobalNamespace::CollapsibleColorPicker::AnimationProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollapsibleColorPicker*), "AnimationProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CollapsibleColorPicker::*)()>(&GlobalNamespace::CollapsibleColorPicker::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollapsibleColorPicker*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CollapsibleColorPicker::Animation
// Il2CppName: Animation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CollapsibleColorPicker::*)(bool)>(&GlobalNamespace::CollapsibleColorPicker::Animation)> {
  static const MethodInfo* get() {
    static auto* closing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CollapsibleColorPicker*), "Animation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closing});
  }
};
