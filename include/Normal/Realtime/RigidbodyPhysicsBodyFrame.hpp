// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: TimelineEntry`1<T>
  template<typename T>
  class TimelineEntry_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RigidbodyPhysicsBodyFrame
  struct RigidbodyPhysicsBodyFrame;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RigidbodyPhysicsBodyFrame, "Normal.Realtime", "RigidbodyPhysicsBodyFrame");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.RigidbodyPhysicsBodyFrame
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct RigidbodyPhysicsBodyFrame/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public readonly UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0xC
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public readonly UnityEngine.Vector3 scale
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public readonly UnityEngine.Vector3 velocity
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public readonly UnityEngine.Vector3 angularVelocity
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 angularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: RigidbodyPhysicsBodyFrame
    constexpr RigidbodyPhysicsBodyFrame(::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Quaternion rotation_ = {}, ::UnityEngine::Vector3 scale_ = {}, ::UnityEngine::Vector3 velocity_ = {}, ::UnityEngine::Vector3 angularVelocity_ = {}) noexcept : position{position_}, rotation{rotation_}, scale{scale_}, velocity{velocity_}, angularVelocity{angularVelocity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public readonly UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public readonly UnityEngine.Vector3 scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_scale();
    // Get instance field reference: public readonly UnityEngine.Vector3 velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
    // Get instance field reference: public readonly UnityEngine.Vector3 angularVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_angularVelocity();
    // public System.Void .ctor(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity)
    // Offset: 0x896EF0
    // ABORTED: conflicts with another method.  RigidbodyPhysicsBodyFrame(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angularVelocity);
    // static public Normal.Realtime.RigidbodyPhysicsBodyFrame Interpolate(Normal.Realtime.TimelineEntry`1<Normal.Realtime.RigidbodyPhysicsBodyFrame> a, Normal.Realtime.TimelineEntry`1<Normal.Realtime.RigidbodyPhysicsBodyFrame> b, System.Single t)
    // Offset: 0x896C10
    static ::Normal::Realtime::RigidbodyPhysicsBodyFrame Interpolate(::Normal::Realtime::TimelineEntry_1<::Normal::Realtime::RigidbodyPhysicsBodyFrame>* a, ::Normal::Realtime::TimelineEntry_1<::Normal::Realtime::RigidbodyPhysicsBodyFrame>* b, float t);
    // static public Normal.Realtime.RigidbodyPhysicsBodyFrame Extrapolate(Normal.Realtime.TimelineEntry`1<Normal.Realtime.RigidbodyPhysicsBodyFrame> from, System.Double time)
    // Offset: 0x896980
    static ::Normal::Realtime::RigidbodyPhysicsBodyFrame Extrapolate(::Normal::Realtime::TimelineEntry_1<::Normal::Realtime::RigidbodyPhysicsBodyFrame>* from, double time);
  }; // Normal.Realtime.RigidbodyPhysicsBodyFrame
  #pragma pack(pop)
  static check_size<sizeof(RigidbodyPhysicsBodyFrame), 52 + sizeof(::UnityEngine::Vector3)> __Normal_Realtime_RigidbodyPhysicsBodyFrameSizeCheck;
  static_assert(sizeof(RigidbodyPhysicsBodyFrame) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RigidbodyPhysicsBodyFrame::RigidbodyPhysicsBodyFrame
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RigidbodyPhysicsBodyFrame::Interpolate
// Il2CppName: Interpolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RigidbodyPhysicsBodyFrame (*)(::Normal::Realtime::TimelineEntry_1<::Normal::Realtime::RigidbodyPhysicsBodyFrame>*, ::Normal::Realtime::TimelineEntry_1<::Normal::Realtime::RigidbodyPhysicsBodyFrame>*, float)>(&Normal::Realtime::RigidbodyPhysicsBodyFrame::Interpolate)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Normal.Realtime", "TimelineEntry`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RigidbodyPhysicsBodyFrame")})->byval_arg;
    static auto* b = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Normal.Realtime", "TimelineEntry`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RigidbodyPhysicsBodyFrame")})->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RigidbodyPhysicsBodyFrame), "Interpolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RigidbodyPhysicsBodyFrame::Extrapolate
// Il2CppName: Extrapolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RigidbodyPhysicsBodyFrame (*)(::Normal::Realtime::TimelineEntry_1<::Normal::Realtime::RigidbodyPhysicsBodyFrame>*, double)>(&Normal::Realtime::RigidbodyPhysicsBodyFrame::Extrapolate)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Normal.Realtime", "TimelineEntry`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RigidbodyPhysicsBodyFrame")})->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RigidbodyPhysicsBodyFrame), "Extrapolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, time});
  }
};
