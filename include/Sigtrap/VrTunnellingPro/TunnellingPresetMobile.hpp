// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Sigtrap.VrTunnellingPro.TunnellingPresetBase
#include "Sigtrap/VrTunnellingPro/TunnellingPresetBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Forward declaring type: TunnellingPresetMobile
  class TunnellingPresetMobile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Sigtrap::VrTunnellingPro::TunnellingPresetMobile);
DEFINE_IL2CPP_ARG_TYPE(::Sigtrap::VrTunnellingPro::TunnellingPresetMobile*, "Sigtrap.VrTunnellingPro", "TunnellingPresetMobile");
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Size: 0xCD
  #pragma pack(push, 1)
  // Autogenerated type: Sigtrap.VrTunnellingPro.TunnellingPresetMobile
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: BFC80
  class TunnellingPresetMobile : public ::Sigtrap::VrTunnellingPro::TunnellingPresetBase {
    public:
    // Writing base type padding for base size: 0xAD to desired offset: 0xB0
    char ___base_padding[0x3] = {};
    public:
    // private System.Boolean _drawSkybox
    // Size: 0x1
    // Offset: 0xB0
    bool drawSkybox;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideDrawSkybox
    // Size: 0x1
    // Offset: 0xB1
    bool overrideDrawSkybox;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _drawBeforeTransparent
    // Size: 0x1
    // Offset: 0xB2
    bool drawBeforeTransparent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideDrawBeforeTransparent
    // Size: 0x1
    // Offset: 0xB3
    bool overrideDrawBeforeTransparent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _useMask
    // Size: 0x1
    // Offset: 0xB4
    bool useMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _overrideUseMask
    // Size: 0x1
    // Offset: 0xB5
    bool overrideUseMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideUseMask and: stencilReference
    char __padding5[0x2] = {};
    // [RangeAttribute] Offset: 0xC01A0
    // private System.Int32 _stencilReference
    // Size: 0x4
    // Offset: 0xB8
    int stencilReference;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _overrideStencilReference
    // Size: 0x1
    // Offset: 0xBC
    bool overrideStencilReference;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideStencilReference and: stencilMask
    char __padding7[0x3] = {};
    // [RangeAttribute] Offset: 0xC01A0
    // private System.Int32 _stencilMask
    // Size: 0x4
    // Offset: 0xC0
    int stencilMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _overrideStencilMask
    // Size: 0x1
    // Offset: 0xC4
    bool overrideStencilMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideStencilMask and: stencilBias
    char __padding9[0x3] = {};
    // [RangeAttribute] Offset: 0xC0480
    // private System.Int32 _stencilBias
    // Size: 0x4
    // Offset: 0xC8
    int stencilBias;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _overrideStencilBias
    // Size: 0x1
    // Offset: 0xCC
    bool overrideStencilBias;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean _drawSkybox
    [[deprecated("Use field access instead!")]] bool& dyn__drawSkybox();
    // Get instance field reference: private System.Boolean _overrideDrawSkybox
    [[deprecated("Use field access instead!")]] bool& dyn__overrideDrawSkybox();
    // Get instance field reference: private System.Boolean _drawBeforeTransparent
    [[deprecated("Use field access instead!")]] bool& dyn__drawBeforeTransparent();
    // Get instance field reference: private System.Boolean _overrideDrawBeforeTransparent
    [[deprecated("Use field access instead!")]] bool& dyn__overrideDrawBeforeTransparent();
    // Get instance field reference: private System.Boolean _useMask
    [[deprecated("Use field access instead!")]] bool& dyn__useMask();
    // Get instance field reference: private System.Boolean _overrideUseMask
    [[deprecated("Use field access instead!")]] bool& dyn__overrideUseMask();
    // Get instance field reference: private System.Int32 _stencilReference
    [[deprecated("Use field access instead!")]] int& dyn__stencilReference();
    // Get instance field reference: private System.Boolean _overrideStencilReference
    [[deprecated("Use field access instead!")]] bool& dyn__overrideStencilReference();
    // Get instance field reference: private System.Int32 _stencilMask
    [[deprecated("Use field access instead!")]] int& dyn__stencilMask();
    // Get instance field reference: private System.Boolean _overrideStencilMask
    [[deprecated("Use field access instead!")]] bool& dyn__overrideStencilMask();
    // Get instance field reference: private System.Int32 _stencilBias
    [[deprecated("Use field access instead!")]] int& dyn__stencilBias();
    // Get instance field reference: private System.Boolean _overrideStencilBias
    [[deprecated("Use field access instead!")]] bool& dyn__overrideStencilBias();
    // public System.Boolean get_drawSkybox()
    // Offset: 0x321FA0
    bool get_drawSkybox();
    // public System.Boolean get_overrideDrawSkybox()
    // Offset: 0x6D9B00
    bool get_overrideDrawSkybox();
    // public System.Boolean get_drawBeforeTransparent()
    // Offset: 0x6D9AE0
    bool get_drawBeforeTransparent();
    // public System.Boolean get_overrideDrawBeforeTransparent()
    // Offset: 0x6D9AF0
    bool get_overrideDrawBeforeTransparent();
    // public System.Boolean get_useMask()
    // Offset: 0x307C30
    bool get_useMask();
    // public System.Boolean get_overrideUseMask()
    // Offset: 0x307BE0
    bool get_overrideUseMask();
    // public System.Int32 get_stencilReference()
    // Offset: 0x3F2360
    int get_stencilReference();
    // public System.Boolean get_overrideStencilReference()
    // Offset: 0x6D9B20
    bool get_overrideStencilReference();
    // public System.Int32 get_stencilMask()
    // Offset: 0x3F26C0
    int get_stencilMask();
    // public System.Boolean get_overrideStencilMask()
    // Offset: 0x300020
    bool get_overrideStencilMask();
    // public System.Int32 get_stencilBias()
    // Offset: 0x3F2620
    int get_stencilBias();
    // public System.Boolean get_overrideStencilBias()
    // Offset: 0x6D9B10
    bool get_overrideStencilBias();
    // public System.Void .ctor()
    // Offset: 0x6D9A90
    // Implemented from: Sigtrap.VrTunnellingPro.TunnellingPresetBase
    // Base method: System.Void TunnellingPresetBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TunnellingPresetMobile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Sigtrap::VrTunnellingPro::TunnellingPresetMobile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TunnellingPresetMobile*, creationType>()));
    }
  }; // Sigtrap.VrTunnellingPro.TunnellingPresetMobile
  #pragma pack(pop)
  static check_size<sizeof(TunnellingPresetMobile), 204 + sizeof(bool)> __Sigtrap_VrTunnellingPro_TunnellingPresetMobileSizeCheck;
  static_assert(sizeof(TunnellingPresetMobile) == 0xCD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_drawSkybox
// Il2CppName: get_drawSkybox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_drawSkybox)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_drawSkybox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideDrawSkybox
// Il2CppName: get_overrideDrawSkybox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideDrawSkybox)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_overrideDrawSkybox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_drawBeforeTransparent
// Il2CppName: get_drawBeforeTransparent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_drawBeforeTransparent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_drawBeforeTransparent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideDrawBeforeTransparent
// Il2CppName: get_overrideDrawBeforeTransparent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideDrawBeforeTransparent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_overrideDrawBeforeTransparent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_useMask
// Il2CppName: get_useMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_useMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_useMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideUseMask
// Il2CppName: get_overrideUseMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideUseMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_overrideUseMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_stencilReference
// Il2CppName: get_stencilReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_stencilReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_stencilReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideStencilReference
// Il2CppName: get_overrideStencilReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideStencilReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_overrideStencilReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_stencilMask
// Il2CppName: get_stencilMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_stencilMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_stencilMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideStencilMask
// Il2CppName: get_overrideStencilMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideStencilMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_overrideStencilMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_stencilBias
// Il2CppName: get_stencilBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_stencilBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_stencilBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideStencilBias
// Il2CppName: get_overrideStencilBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetMobile::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetMobile::get_overrideStencilBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetMobile*), "get_overrideStencilBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetMobile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
