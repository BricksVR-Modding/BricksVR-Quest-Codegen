// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.ConfigurableComponentMap
#include "Normal/Realtime/ConfigurableComponentMap.hpp"
// Including type: Normal.Realtime.SerializableViewIDPair
#include "Normal/Realtime/SerializableViewIDPair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeViewMap
  class RealtimeViewMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeViewMap);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeViewMap*, "Normal.Realtime", "RealtimeViewMap");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeViewMap
  // [TokenAttribute] Offset: FFFFFFFF
  class RealtimeViewMap : public ::Normal::Realtime::ConfigurableComponentMap {
    public:
    // public Normal.Realtime.SerializableViewIDPair[] Serialize()
    // Offset: 0xA5E1AC
    ::ArrayW<::Normal::Realtime::SerializableViewIDPair> Serialize();
    // static public Normal.Realtime.RealtimeViewMap Deserialize(Normal.Realtime.SerializableViewIDPair[] data)
    // Offset: 0xA5E36C
    static ::Normal::Realtime::RealtimeViewMap* Deserialize(::ArrayW<::Normal::Realtime::SerializableViewIDPair> data);
    // private Normal.Realtime.SerializableViewIDPair <Serialize>b__0_0(System.UInt32 id)
    // Offset: 0xA61F20
    ::Normal::Realtime::SerializableViewIDPair $Serialize$b__0_0(uint id);
    // public System.Void .ctor()
    // Offset: 0xA5E7A8
    // Implemented from: Normal.Realtime.ConfigurableComponentMap
    // Base method: System.Void ConfigurableComponentMap::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeViewMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeViewMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeViewMap*, creationType>()));
    }
  }; // Normal.Realtime.RealtimeViewMap
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewMap::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Normal::Realtime::SerializableViewIDPair> (Normal::Realtime::RealtimeViewMap::*)()>(&Normal::Realtime::RealtimeViewMap::Serialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewMap*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewMap::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeViewMap* (*)(::ArrayW<::Normal::Realtime::SerializableViewIDPair>)>(&Normal::Realtime::RealtimeViewMap::Deserialize)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Normal.Realtime", "SerializableViewIDPair"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewMap*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewMap::$Serialize$b__0_0
// Il2CppName: <Serialize>b__0_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::SerializableViewIDPair (Normal::Realtime::RealtimeViewMap::*)(uint)>(&Normal::Realtime::RealtimeViewMap::$Serialize$b__0_0)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewMap*), "<Serialize>b__0_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
