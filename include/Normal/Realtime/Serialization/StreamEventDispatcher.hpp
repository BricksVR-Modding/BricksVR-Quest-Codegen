// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: StreamEventDispatcher
  class StreamEventDispatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Serialization::StreamEventDispatcher);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::StreamEventDispatcher*, "Normal.Realtime.Serialization", "StreamEventDispatcher");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Serialization.StreamEventDispatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class StreamEventDispatcher : public ::Il2CppObject {
    public:
    // Nested type: ::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback
    class StreamUpdateCallback;
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt32,System.Collections.Generic.HashSet`1<Normal.Realtime.Serialization.StreamEventDispatcher/Normal.Realtime.Serialization.StreamUpdateCallback>> _storage
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<uint, ::System::Collections::Generic::HashSet_1<::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback*>*>* storage;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::System::Collections::Generic::HashSet_1<::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback*>*>*) == 0x8);
    // private System.Boolean _mutationLock
    // Size: 0x1
    // Offset: 0x18
    bool mutationLock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt32,System.Collections.Generic.HashSet`1<Normal.Realtime.Serialization.StreamEventDispatcher/Normal.Realtime.Serialization.StreamUpdateCallback>> _storage
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::System::Collections::Generic::HashSet_1<::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback*>*>*& dyn__storage();
    // Get instance field reference: private System.Boolean _mutationLock
    [[deprecated("Use field access instead!")]] bool& dyn__mutationLock();
    // public System.Void .ctor()
    // Offset: 0x8A0680
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamEventDispatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::StreamEventDispatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamEventDispatcher*, creationType>()));
    }
    // public System.Void AddStreamCallback(System.UInt32 updateID, Normal.Realtime.Serialization.StreamEventDispatcher/Normal.Realtime.Serialization.StreamUpdateCallback callback)
    // Offset: 0x8A0240
    void AddStreamCallback(uint updateID, ::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback* callback);
    // public System.Void RemoveStreamCallback(Normal.Realtime.Serialization.StreamEventDispatcher/Normal.Realtime.Serialization.StreamUpdateCallback callback)
    // Offset: 0x8A04B0
    void RemoveStreamCallback(::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback* callback);
    // public System.Void InvokeCallbacksForUpdateID(System.UInt32 updateID)
    // Offset: 0x8A0370
    void InvokeCallbacksForUpdateID(uint updateID);
    // private System.Void SafeInvoke(Normal.Realtime.Serialization.StreamEventDispatcher/Normal.Realtime.Serialization.StreamUpdateCallback handler, System.UInt32 updateID)
    // Offset: 0x8A05D0
    void SafeInvoke(::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback* handler, uint updateID);
  }; // Normal.Realtime.Serialization.StreamEventDispatcher
  #pragma pack(pop)
  static check_size<sizeof(StreamEventDispatcher), 24 + sizeof(bool)> __Normal_Realtime_Serialization_StreamEventDispatcherSizeCheck;
  static_assert(sizeof(StreamEventDispatcher) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamEventDispatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamEventDispatcher::AddStreamCallback
// Il2CppName: AddStreamCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::StreamEventDispatcher::*)(uint, ::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback*)>(&Normal::Realtime::Serialization::StreamEventDispatcher::AddStreamCallback)> {
  static const MethodInfo* get() {
    static auto* updateID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamEventDispatcher/StreamUpdateCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamEventDispatcher*), "AddStreamCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateID, callback});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamEventDispatcher::RemoveStreamCallback
// Il2CppName: RemoveStreamCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::StreamEventDispatcher::*)(::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback*)>(&Normal::Realtime::Serialization::StreamEventDispatcher::RemoveStreamCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamEventDispatcher/StreamUpdateCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamEventDispatcher*), "RemoveStreamCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamEventDispatcher::InvokeCallbacksForUpdateID
// Il2CppName: InvokeCallbacksForUpdateID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::StreamEventDispatcher::*)(uint)>(&Normal::Realtime::Serialization::StreamEventDispatcher::InvokeCallbacksForUpdateID)> {
  static const MethodInfo* get() {
    static auto* updateID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamEventDispatcher*), "InvokeCallbacksForUpdateID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamEventDispatcher::SafeInvoke
// Il2CppName: SafeInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::StreamEventDispatcher::*)(::Normal::Realtime::Serialization::StreamEventDispatcher::StreamUpdateCallback*, uint)>(&Normal::Realtime::Serialization::StreamEventDispatcher::SafeInvoke)> {
  static const MethodInfo* get() {
    static auto* handler = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamEventDispatcher/StreamUpdateCallback")->byval_arg;
    static auto* updateID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamEventDispatcher*), "SafeInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handler, updateID});
  }
};
