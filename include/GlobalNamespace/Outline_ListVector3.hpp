// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Outline
#include "GlobalNamespace/Outline.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Outline::ListVector3);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Outline::ListVector3*, "", "Outline/ListVector3");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Outline/ListVector3
  // [TokenAttribute] Offset: FFFFFFFF
  class Outline::ListVector3 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> data
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* data;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*
    constexpr operator ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*() const noexcept {
      return data;
    }
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> data
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_data();
    // public System.Void .ctor()
    // Offset: 0x111E5A0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Outline::ListVector3* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Outline::ListVector3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Outline::ListVector3*, creationType>()));
    }
  }; // Outline/ListVector3
  #pragma pack(pop)
  static check_size<sizeof(Outline::ListVector3), 16 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)> __GlobalNamespace_Outline_ListVector3SizeCheck;
  static_assert(sizeof(Outline::ListVector3) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Outline::ListVector3::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
