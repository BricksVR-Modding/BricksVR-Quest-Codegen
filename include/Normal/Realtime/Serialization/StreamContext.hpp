// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: StreamEventDispatcher
  class StreamEventDispatcher;
  // Forward declaring type: InflightUpdateNotifier
  class InflightUpdateNotifier;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: StreamContext
  struct StreamContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::StreamContext, "Normal.Realtime.Serialization", "StreamContext");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.Serialization.StreamContext
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct StreamContext/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly Normal.Realtime.Serialization.StreamEventDispatcher dispatcher
    // Size: 0x8
    // Offset: 0x0
    ::Normal::Realtime::Serialization::StreamEventDispatcher* dispatcher;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::StreamEventDispatcher*) == 0x8);
    // public readonly Normal.Realtime.Serialization.InflightUpdateNotifier inflightUpdateNotifier
    // Size: 0x8
    // Offset: 0x8
    ::Normal::Realtime::Serialization::InflightUpdateNotifier* inflightUpdateNotifier;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::InflightUpdateNotifier*) == 0x8);
    // public readonly System.Boolean fullModel
    // Size: 0x1
    // Offset: 0x10
    bool fullModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean reliableChannel
    // Size: 0x1
    // Offset: 0x11
    bool reliableChannel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reliableChannel and: updateID
    char __padding3[0x2] = {};
    // public readonly System.UInt32 updateID
    // Size: 0x4
    // Offset: 0x14
    uint updateID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public readonly System.Double packetRoomTime
    // Size: 0x8
    // Offset: 0x18
    double packetRoomTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: StreamContext
    constexpr StreamContext(::Normal::Realtime::Serialization::StreamEventDispatcher* dispatcher_ = {}, ::Normal::Realtime::Serialization::InflightUpdateNotifier* inflightUpdateNotifier_ = {}, bool fullModel_ = {}, bool reliableChannel_ = {}, uint updateID_ = {}, double packetRoomTime_ = {}) noexcept : dispatcher{dispatcher_}, inflightUpdateNotifier{inflightUpdateNotifier_}, fullModel{fullModel_}, reliableChannel{reliableChannel_}, updateID{updateID_}, packetRoomTime{packetRoomTime_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly Normal.Realtime.Serialization.StreamEventDispatcher dispatcher
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::StreamEventDispatcher*& dyn_dispatcher();
    // Get instance field reference: public readonly Normal.Realtime.Serialization.InflightUpdateNotifier inflightUpdateNotifier
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::InflightUpdateNotifier*& dyn_inflightUpdateNotifier();
    // Get instance field reference: public readonly System.Boolean fullModel
    [[deprecated("Use field access instead!")]] bool& dyn_fullModel();
    // Get instance field reference: public readonly System.Boolean reliableChannel
    [[deprecated("Use field access instead!")]] bool& dyn_reliableChannel();
    // Get instance field reference: public readonly System.UInt32 updateID
    [[deprecated("Use field access instead!")]] uint& dyn_updateID();
    // Get instance field reference: public readonly System.Double packetRoomTime
    [[deprecated("Use field access instead!")]] double& dyn_packetRoomTime();
    // public System.Boolean get_deltaUpdatesOnly()
    // Offset: 0x8A01D0
    bool get_deltaUpdatesOnly();
    // public System.Boolean get_unreliableChannel()
    // Offset: 0x8A01E0
    bool get_unreliableChannel();
    // public System.Void .ctor(Normal.Realtime.Serialization.StreamEventDispatcher dispatcher, Normal.Realtime.Serialization.InflightUpdateNotifier notifier, System.Boolean fullModel, System.Boolean reliableChannel, System.UInt32 updateID, System.Double packetRoomTime)
    // Offset: 0x8A0170
    // ABORTED: conflicts with another method.  StreamContext(::Normal::Realtime::Serialization::StreamEventDispatcher* dispatcher, ::Normal::Realtime::Serialization::InflightUpdateNotifier* notifier, bool fullModel, bool reliableChannel, uint updateID, double packetRoomTime);
    // public Normal.Realtime.Serialization.StreamContext AsFullModel()
    // Offset: 0x89FFD0
    ::Normal::Realtime::Serialization::StreamContext AsFullModel();
    // private System.Boolean Equals(Normal.Realtime.Serialization.StreamContext ctx)
    // Offset: 0x8A0120
    bool Equals(::Normal::Realtime::Serialization::StreamContext ctx);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x8A0060
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // Normal.Realtime.Serialization.StreamContext
  #pragma pack(pop)
  static check_size<sizeof(StreamContext), 24 + sizeof(double)> __Normal_Realtime_Serialization_StreamContextSizeCheck;
  static_assert(sizeof(StreamContext) == 0x20);
  // static public System.Boolean op_Equality(Normal.Realtime.Serialization.StreamContext lhs, Normal.Realtime.Serialization.StreamContext rhs)
  // Offset: 0x8A0120
  bool operator ==(const ::Normal::Realtime::Serialization::StreamContext& lhs, const ::Normal::Realtime::Serialization::StreamContext& rhs);
  // static public System.Boolean op_Inequality(Normal.Realtime.Serialization.StreamContext lhs, Normal.Realtime.Serialization.StreamContext rhs)
  // Offset: 0x8A01F0
  bool operator !=(const ::Normal::Realtime::Serialization::StreamContext& lhs, const ::Normal::Realtime::Serialization::StreamContext& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::get_deltaUpdatesOnly
// Il2CppName: get_deltaUpdatesOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Serialization::StreamContext::*)()>(&Normal::Realtime::Serialization::StreamContext::get_deltaUpdatesOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContext), "get_deltaUpdatesOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::get_unreliableChannel
// Il2CppName: get_unreliableChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Serialization::StreamContext::*)()>(&Normal::Realtime::Serialization::StreamContext::get_unreliableChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContext), "get_unreliableChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::StreamContext
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::AsFullModel
// Il2CppName: AsFullModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Serialization::StreamContext (Normal::Realtime::Serialization::StreamContext::*)()>(&Normal::Realtime::Serialization::StreamContext::AsFullModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContext), "AsFullModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Serialization::StreamContext::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::StreamContext::Equals)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContext), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Serialization::StreamContext::*)(::Il2CppObject*)>(&Normal::Realtime::Serialization::StreamContext::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContext), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContext::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
