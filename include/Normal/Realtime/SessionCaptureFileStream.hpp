// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileStream
  class FileStream;
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: GZipStream
  class GZipStream;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Skipping declaration: Mode because it is already included!
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: SessionCaptureFileStream
  class SessionCaptureFileStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::SessionCaptureFileStream);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::SessionCaptureFileStream*, "Normal.Realtime", "SessionCaptureFileStream");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.SessionCaptureFileStream
  // [TokenAttribute] Offset: FFFFFFFF
  class SessionCaptureFileStream : public ::Il2CppObject {
    public:
    // Nested type: ::Normal::Realtime::SessionCaptureFileStream::Mode
    struct Mode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode Write
      static constexpr const int Write = 0;
      // Get static field: static public Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode Write
      static ::Normal::Realtime::SessionCaptureFileStream::Mode _get_Write();
      // Set static field: static public Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode Write
      static void _set_Write(::Normal::Realtime::SessionCaptureFileStream::Mode value);
      // static field const value: static public Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode Read
      static constexpr const int Read = 1;
      // Get static field: static public Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode Read
      static ::Normal::Realtime::SessionCaptureFileStream::Mode _get_Read();
      // Set static field: static public Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode Read
      static void _set_Read(::Normal::Realtime::SessionCaptureFileStream::Mode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode
    #pragma pack(pop)
    static check_size<sizeof(SessionCaptureFileStream::Mode), 0 + sizeof(int)> __Normal_Realtime_SessionCaptureFileStream_ModeSizeCheck;
    static_assert(sizeof(SessionCaptureFileStream::Mode) == 0x4);
    public:
    // private System.String _filePath
    // Size: 0x8
    // Offset: 0x10
    ::StringW filePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode _mode
    // Size: 0x4
    // Offset: 0x18
    ::Normal::Realtime::SessionCaptureFileStream::Mode mode;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::SessionCaptureFileStream::Mode) == 0x4);
    // Padding between fields: mode and: fileStream
    char __padding1[0x4] = {};
    // private System.IO.FileStream _fileStream
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::FileStream* fileStream;
    // Field size check
    static_assert(sizeof(::System::IO::FileStream*) == 0x8);
    // private System.IO.Compression.GZipStream _gzipStream
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Compression::GZipStream* gzipStream;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::GZipStream*) == 0x8);
    // private System.Boolean _writing
    // Size: 0x1
    // Offset: 0x30
    bool writing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _reading
    // Size: 0x1
    // Offset: 0x31
    bool reading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reading and: startTimestamp
    char __padding5[0x6] = {};
    // private System.Double _startTimestamp
    // Size: 0x8
    // Offset: 0x38
    double startTimestamp;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int32 _clientID
    // Size: 0x4
    // Offset: 0x40
    int clientID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 _nextUpdateDeltaTimestamp
    // Size: 0x4
    // Offset: 0x44
    uint nextUpdateDeltaTimestamp;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: private System.String _filePath
    [[deprecated]] ::StringW& dyn__filePath();
    // Get instance field reference: private Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode _mode
    [[deprecated]] ::Normal::Realtime::SessionCaptureFileStream::Mode& dyn__mode();
    // Get instance field reference: private System.IO.FileStream _fileStream
    [[deprecated]] ::System::IO::FileStream*& dyn__fileStream();
    // Get instance field reference: private System.IO.Compression.GZipStream _gzipStream
    [[deprecated]] ::System::IO::Compression::GZipStream*& dyn__gzipStream();
    // Get instance field reference: private System.Boolean _writing
    [[deprecated]] bool& dyn__writing();
    // Get instance field reference: private System.Boolean _reading
    [[deprecated]] bool& dyn__reading();
    // Get instance field reference: private System.Double _startTimestamp
    [[deprecated]] double& dyn__startTimestamp();
    // Get instance field reference: private System.Int32 _clientID
    [[deprecated]] int& dyn__clientID();
    // Get instance field reference: private System.UInt32 _nextUpdateDeltaTimestamp
    [[deprecated]] uint& dyn__nextUpdateDeltaTimestamp();
    // public System.String get_filePath()
    // Offset: 0x1E1920
    ::StringW get_filePath();
    // public Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode get_mode()
    // Offset: 0x1E1910
    ::Normal::Realtime::SessionCaptureFileStream::Mode get_mode();
    // public System.Boolean get_writing()
    // Offset: 0x30EB40
    bool get_writing();
    // public System.Boolean get_reading()
    // Offset: 0x4B1050
    bool get_reading();
    // public System.Double get_startTimestamp()
    // Offset: 0x899C20
    double get_startTimestamp();
    // public System.Int32 get_clientID()
    // Offset: 0x417E90
    int get_clientID();
    // public System.Void .ctor(System.String filePath, Normal.Realtime.SessionCaptureFileStream/Normal.Realtime.Mode mode)
    // Offset: 0x89DC40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SessionCaptureFileStream* New_ctor(::StringW filePath, ::Normal::Realtime::SessionCaptureFileStream::Mode mode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::SessionCaptureFileStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SessionCaptureFileStream*, creationType>(filePath, mode)));
    }
    // public System.Void Dispose()
    // Offset: 0x89C570
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x89C650
    void Dispose(bool disposing);
    // public System.Void WriteHeader(System.Int32 clientID, System.Double startTimestamp, System.Byte[] data)
    // Offset: 0x89D8C0
    void WriteHeader(int clientID, double startTimestamp, ::ArrayW<uint8_t> data);
    // public System.Void Flush()
    // Offset: 0x89C7E0
    void Flush();
    // public System.Void WriteDeltaUpdate(System.Double timestamp, System.Int32 sender, System.Byte[] data, System.Int32 dataLength, System.Boolean reliable, System.UInt32 updateID, System.Boolean incoming)
    // Offset: 0x89D450
    void WriteDeltaUpdate(double timestamp, int sender, ::ArrayW<uint8_t> data, int dataLength, bool reliable, uint updateID, bool incoming);
    // public System.Byte[] ReadHeader()
    // Offset: 0x89CBE0
    ::ArrayW<uint8_t> ReadHeader();
    // public System.Boolean PeekNextUpdateDeltaTimestamp(out System.Double deltaTimestamp)
    // Offset: 0x89C830
    bool PeekNextUpdateDeltaTimestamp(ByRef<double> deltaTimestamp);
    // public System.Boolean ReadDeltaUpdate(System.Double playbackTime, ref System.Double timestamp, ref System.Int32 sender, ref System.Byte[] data, ref System.Boolean reliable, ref System.UInt32 updateID, ref System.Boolean incoming)
    // Offset: 0x89C8C0
    bool ReadDeltaUpdate(double playbackTime, ByRef<double> timestamp, ByRef<int> sender, ByRef<::ArrayW<uint8_t>> data, ByRef<bool> reliable, ByRef<uint> updateID, ByRef<bool> incoming);
    // public System.Void SkipToTime(System.Double playbackTime)
    // Offset: 0x89D110
    void SkipToTime(double playbackTime);
    // private System.Void ReadNextUpdateDeltaTimestamp()
    // Offset: 0x89CFA0
    void ReadNextUpdateDeltaTimestamp();
    // private System.Void PrematurelyReachedEndOfStream()
    // Offset: 0x89C860
    void PrematurelyReachedEndOfStream();
    // static private System.Void WriteVarint32ToStream(System.IO.Stream stream, System.UInt32 value)
    // Offset: 0x89DBD0
    static void WriteVarint32ToStream(::System::IO::Stream* stream, uint value);
    // static private System.Boolean ReadVarint32FromStream(System.IO.Stream stream, out System.UInt32 value)
    // Offset: 0x89D010
    static bool ReadVarint32FromStream(::System::IO::Stream* stream, ByRef<uint> value);
    // static private System.Void WriteDoubleToStream(System.IO.Stream stream, System.Double value)
    // Offset: 0x89D780
    static void WriteDoubleToStream(::System::IO::Stream* stream, double value);
    // static private System.Double ReadDoubleFromStream(System.IO.Stream stream)
    // Offset: 0x89CB00
    static double ReadDoubleFromStream(::System::IO::Stream* stream);
    // static private System.UInt32 CombineSenderReliableAndIncoming(System.Int32 sender, System.Boolean reliable, System.Boolean incoming)
    // Offset: 0x89C540
    static uint CombineSenderReliableAndIncoming(int sender, bool reliable, bool incoming);
    // static private System.Void SplitSenderReliableAndIncoming(System.UInt32 value, out System.Int32 sender, out System.Boolean reliable, out System.Boolean incoming)
    // Offset: 0x89D430
    static void SplitSenderReliableAndIncoming(uint value, ByRef<int> sender, ByRef<bool> reliable, ByRef<bool> incoming);
    // protected override System.Void Finalize()
    // Offset: 0x89C700
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Normal.Realtime.SessionCaptureFileStream
  #pragma pack(pop)
  static check_size<sizeof(SessionCaptureFileStream), 68 + sizeof(uint)> __Normal_Realtime_SessionCaptureFileStreamSizeCheck;
  static_assert(sizeof(SessionCaptureFileStream) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::SessionCaptureFileStream::Mode, "Normal.Realtime", "SessionCaptureFileStream/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::get_filePath
// Il2CppName: get_filePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::get_filePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "get_filePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::get_mode
// Il2CppName: get_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::SessionCaptureFileStream::Mode (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::get_mode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "get_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::get_writing
// Il2CppName: get_writing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::get_writing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "get_writing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::get_reading
// Il2CppName: get_reading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::get_reading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "get_reading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::get_startTimestamp
// Il2CppName: get_startTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::get_startTimestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "get_startTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::get_clientID
// Il2CppName: get_clientID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::get_clientID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "get_clientID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)(bool)>(&Normal::Realtime::SessionCaptureFileStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::WriteHeader
// Il2CppName: WriteHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)(int, double, ::ArrayW<uint8_t>)>(&Normal::Realtime::SessionCaptureFileStream::WriteHeader)> {
  static const MethodInfo* get() {
    static auto* clientID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startTimestamp = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "WriteHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientID, startTimestamp, data});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::WriteDeltaUpdate
// Il2CppName: WriteDeltaUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)(double, int, ::ArrayW<uint8_t>, int, bool, uint, bool)>(&Normal::Realtime::SessionCaptureFileStream::WriteDeltaUpdate)> {
  static const MethodInfo* get() {
    static auto* timestamp = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* incoming = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "WriteDeltaUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timestamp, sender, data, dataLength, reliable, updateID, incoming});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::ReadHeader
// Il2CppName: ReadHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::ReadHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "ReadHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::PeekNextUpdateDeltaTimestamp
// Il2CppName: PeekNextUpdateDeltaTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::SessionCaptureFileStream::*)(ByRef<double>)>(&Normal::Realtime::SessionCaptureFileStream::PeekNextUpdateDeltaTimestamp)> {
  static const MethodInfo* get() {
    static auto* deltaTimestamp = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "PeekNextUpdateDeltaTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTimestamp});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::ReadDeltaUpdate
// Il2CppName: ReadDeltaUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::SessionCaptureFileStream::*)(double, ByRef<double>, ByRef<int>, ByRef<::ArrayW<uint8_t>>, ByRef<bool>, ByRef<uint>, ByRef<bool>)>(&Normal::Realtime::SessionCaptureFileStream::ReadDeltaUpdate)> {
  static const MethodInfo* get() {
    static auto* playbackTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* timestamp = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* updateID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* incoming = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "ReadDeltaUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playbackTime, timestamp, sender, data, reliable, updateID, incoming});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::SkipToTime
// Il2CppName: SkipToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)(double)>(&Normal::Realtime::SessionCaptureFileStream::SkipToTime)> {
  static const MethodInfo* get() {
    static auto* playbackTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "SkipToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playbackTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::ReadNextUpdateDeltaTimestamp
// Il2CppName: ReadNextUpdateDeltaTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::ReadNextUpdateDeltaTimestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "ReadNextUpdateDeltaTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::PrematurelyReachedEndOfStream
// Il2CppName: PrematurelyReachedEndOfStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::PrematurelyReachedEndOfStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "PrematurelyReachedEndOfStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::WriteVarint32ToStream
// Il2CppName: WriteVarint32ToStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, uint)>(&Normal::Realtime::SessionCaptureFileStream::WriteVarint32ToStream)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "WriteVarint32ToStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::ReadVarint32FromStream
// Il2CppName: ReadVarint32FromStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IO::Stream*, ByRef<uint>)>(&Normal::Realtime::SessionCaptureFileStream::ReadVarint32FromStream)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "ReadVarint32FromStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::WriteDoubleToStream
// Il2CppName: WriteDoubleToStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, double)>(&Normal::Realtime::SessionCaptureFileStream::WriteDoubleToStream)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "WriteDoubleToStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::ReadDoubleFromStream
// Il2CppName: ReadDoubleFromStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::IO::Stream*)>(&Normal::Realtime::SessionCaptureFileStream::ReadDoubleFromStream)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "ReadDoubleFromStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::CombineSenderReliableAndIncoming
// Il2CppName: CombineSenderReliableAndIncoming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(int, bool, bool)>(&Normal::Realtime::SessionCaptureFileStream::CombineSenderReliableAndIncoming)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* incoming = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "CombineSenderReliableAndIncoming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, reliable, incoming});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::SplitSenderReliableAndIncoming
// Il2CppName: SplitSenderReliableAndIncoming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<int>, ByRef<bool>, ByRef<bool>)>(&Normal::Realtime::SessionCaptureFileStream::SplitSenderReliableAndIncoming)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* incoming = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "SplitSenderReliableAndIncoming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, sender, reliable, incoming});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCaptureFileStream::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCaptureFileStream::*)()>(&Normal::Realtime::SessionCaptureFileStream::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCaptureFileStream*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
