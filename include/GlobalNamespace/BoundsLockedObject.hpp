// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
  // Forward declaring type: GuardianBoundaryEnforcer
  class GuardianBoundaryEnforcer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BoundsLockedObject
  class BoundsLockedObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BoundsLockedObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BoundsLockedObject*, "", "BoundsLockedObject");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: BoundsLockedObject
  // [TokenAttribute] Offset: FFFFFFFF
  class BoundsLockedObject : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Vector3 m_initialOffset
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 m_initialOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public OVRCameraRig m_playerOrigin
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OVRCameraRig* m_playerOrigin;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // public GuardianBoundaryEnforcer m_enforcer
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::GuardianBoundaryEnforcer* m_enforcer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GuardianBoundaryEnforcer*) == 0x8);
    // private System.Nullable`1<UnityEngine.Bounds> m_bounds
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::System::Nullable_1<::UnityEngine::Bounds> m_bounds;
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Vector3 m_initialOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_initialOffset();
    // Get instance field reference: public OVRCameraRig m_playerOrigin
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn_m_playerOrigin();
    // Get instance field reference: public GuardianBoundaryEnforcer m_enforcer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GuardianBoundaryEnforcer*& dyn_m_enforcer();
    // Get instance field reference: private System.Nullable`1<UnityEngine.Bounds> m_bounds
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Bounds>& dyn_m_bounds();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoundsLockedObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsLockedObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoundsLockedObject*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x282F10
    void Start();
    // private System.Void RefreshDisplay()
    // Offset: 0x282910
    void RefreshDisplay();
  }; // BoundsLockedObject
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BoundsLockedObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BoundsLockedObject::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BoundsLockedObject::*)()>(&GlobalNamespace::BoundsLockedObject::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsLockedObject*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BoundsLockedObject::RefreshDisplay
// Il2CppName: RefreshDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BoundsLockedObject::*)()>(&GlobalNamespace::BoundsLockedObject::RefreshDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BoundsLockedObject*), "RefreshDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
