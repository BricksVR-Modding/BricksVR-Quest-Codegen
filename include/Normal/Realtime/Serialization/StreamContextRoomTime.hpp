// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: StreamContextRoomTime
  class StreamContextRoomTime;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Serialization::StreamContextRoomTime);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::StreamContextRoomTime*, "Normal.Realtime.Serialization", "StreamContextRoomTime");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Serialization.StreamContextRoomTime
  // [TokenAttribute] Offset: FFFFFFFF
  class StreamContextRoomTime : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Int32 __integerBits
    static int _get___integerBits();
    // Set static field: static private readonly System.Int32 __integerBits
    static void _set___integerBits(int value);
    // Get static field: static private readonly System.Int32 __fractionalBits
    static int _get___fractionalBits();
    // Set static field: static private readonly System.Int32 __fractionalBits
    static void _set___fractionalBits(int value);
    // Get static field: static private readonly System.Int32 __totalBits
    static int _get___totalBits();
    // Set static field: static private readonly System.Int32 __totalBits
    static void _set___totalBits(int value);
    // Get static field: static private readonly System.Double __clockBufferTime
    static double _get___clockBufferTime();
    // Set static field: static private readonly System.Double __clockBufferTime
    static void _set___clockBufferTime(double value);
    // static private System.Void .cctor()
    // Offset: 0xA6F138
    static void _cctor();
    // static public System.UInt32 EncodeRoomTime(System.Double localRoomTime)
    // Offset: 0xA6EE10
    static uint EncodeRoomTime(double localRoomTime);
    // static public System.Double DecodeRoomTime(System.Double localRoomTime, System.UInt32 packetRoomTime)
    // Offset: 0xA6EFC0
    static double DecodeRoomTime(double localRoomTime, uint packetRoomTime);
    // static private System.UInt64 ConvertFloatToFixed(System.Double floatValue)
    // Offset: 0xA6EE98
    static uint64_t ConvertFloatToFixed(double floatValue);
    // static private System.Double ConvertFixedToFloat(System.UInt64 fixedValue)
    // Offset: 0xA6F0B0
    static double ConvertFixedToFloat(uint64_t fixedValue);
    // public System.Void .ctor()
    // Offset: 0xA6F130
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamContextRoomTime* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::StreamContextRoomTime::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamContextRoomTime*, creationType>()));
    }
  }; // Normal.Realtime.Serialization.StreamContextRoomTime
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContextRoomTime::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Normal::Realtime::Serialization::StreamContextRoomTime::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContextRoomTime*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContextRoomTime::EncodeRoomTime
// Il2CppName: EncodeRoomTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(double)>(&Normal::Realtime::Serialization::StreamContextRoomTime::EncodeRoomTime)> {
  static const MethodInfo* get() {
    static auto* localRoomTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContextRoomTime*), "EncodeRoomTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localRoomTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContextRoomTime::DecodeRoomTime
// Il2CppName: DecodeRoomTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, uint)>(&Normal::Realtime::Serialization::StreamContextRoomTime::DecodeRoomTime)> {
  static const MethodInfo* get() {
    static auto* localRoomTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* packetRoomTime = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContextRoomTime*), "DecodeRoomTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localRoomTime, packetRoomTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContextRoomTime::ConvertFloatToFixed
// Il2CppName: ConvertFloatToFixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(double)>(&Normal::Realtime::Serialization::StreamContextRoomTime::ConvertFloatToFixed)> {
  static const MethodInfo* get() {
    static auto* floatValue = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContextRoomTime*), "ConvertFloatToFixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{floatValue});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContextRoomTime::ConvertFixedToFloat
// Il2CppName: ConvertFixedToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(uint64_t)>(&Normal::Realtime::Serialization::StreamContextRoomTime::ConvertFixedToFloat)> {
  static const MethodInfo* get() {
    static auto* fixedValue = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::StreamContextRoomTime*), "ConvertFixedToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fixedValue});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::StreamContextRoomTime::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
