// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NormalSessionManager
  class NormalSessionManager;
  // Forward declaring type: ChangeCategoryColors
  class ChangeCategoryColors;
  // Forward declaring type: ColorPickerSaveSpot
  class ColorPickerSaveSpot;
  // Forward declaring type: BrickPickerBrick
  class BrickPickerBrick;
  // Forward declaring type: FadeBrickMenu
  class FadeBrickMenu;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
  // Forward declaring type: Slider
  class Slider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRGrabInteractable
  class XRGrabInteractable;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickPickerManager
  class BrickPickerManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickPickerManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickPickerManager*, "", "BrickPickerManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x120
  #pragma pack(push, 1)
  // Autogenerated type: BrickPickerManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickPickerManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BrickPickerManager::MenuTab
    struct MenuTab;
    // Nested type: ::GlobalNamespace::BrickPickerManager::$WarmMenu$d__51
    class $WarmMenu$d__51;
    // Size: 0x11
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BrickPickerManager/MenuTab
    // [TokenAttribute] Offset: FFFFFFFF
    struct MenuTab/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly UnityEngine.UI.Button TabButton
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::UI::Button* TabButton;
      // Field size check
      static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
      // public readonly UnityEngine.GameObject Gameobject
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::GameObject* Gameobject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // public System.Boolean Initialized
      // Size: 0x1
      // Offset: 0x10
      bool Initialized;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: MenuTab
      constexpr MenuTab(::UnityEngine::UI::Button* TabButton_ = {}, ::UnityEngine::GameObject* Gameobject_ = {}, bool Initialized_ = {}) noexcept : TabButton{TabButton_}, Gameobject{Gameobject_}, Initialized{Initialized_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly UnityEngine.UI.Button TabButton
      [[deprecated]] ::UnityEngine::UI::Button*& dyn_TabButton();
      // Get instance field reference: public readonly UnityEngine.GameObject Gameobject
      [[deprecated]] ::UnityEngine::GameObject*& dyn_Gameobject();
      // Get instance field reference: public System.Boolean Initialized
      [[deprecated]] bool& dyn_Initialized();
      // public System.Void .ctor(UnityEngine.UI.Button tabButton, UnityEngine.GameObject gameObject)
      // Offset: 0x6F5670
      MenuTab(::UnityEngine::UI::Button* tabButton, ::UnityEngine::GameObject* gameObject);
    }; // BrickPickerManager/MenuTab
    #pragma pack(pop)
    static check_size<sizeof(BrickPickerManager::MenuTab), 16 + sizeof(bool)> __GlobalNamespace_BrickPickerManager_MenuTabSizeCheck;
    static_assert(sizeof(BrickPickerManager::MenuTab) == 0x11);
    public:
    // public UnityEngine.UI.Button bricksTabButton
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Button* bricksTabButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.UI.Button tilesTabButton
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Button* tilesTabButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.UI.Button platesTabButton
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Button* platesTabButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.UI.Button slopesTabButton
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Button* slopesTabButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.UI.Button sideStudsTabButton
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Button* sideStudsTabButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.UI.Button miscTabButton
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UI::Button* miscTabButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.GameObject bricksTabObject
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* bricksTabObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject tilesTabObject
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* tilesTabObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject platesTabObject
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* platesTabObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject slopesTabObject
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* slopesTabObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject sideStudsTabObject
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* sideStudsTabObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject miscTabObject
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* miscTabObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject menuContentsObject
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* menuContentsObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject tilePrefab
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* tilePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public NormalSessionManager normalSessionManager
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::NormalSessionManager* normalSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NormalSessionManager*) == 0x8);
    // public UnityEngine.GameObject leftHand
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rightHand
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.UI.Slider hueSlider
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::UI::Slider* hueSlider;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Slider*) == 0x8);
    // public UnityEngine.UI.Slider saturationSlider
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::UI::Slider* saturationSlider;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Slider*) == 0x8);
    // public UnityEngine.UI.Slider valueSlider
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::UI::Slider* valueSlider;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Slider*) == 0x8);
    // public ChangeCategoryColors changeCategoryColors
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::ChangeCategoryColors* changeCategoryColors;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ChangeCategoryColors*) == 0x8);
    // public ColorPickerSaveSpot[] colorPickerSaveSpots
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::GlobalNamespace::ColorPickerSaveSpot*> colorPickerSaveSpots;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ColorPickerSaveSpot*>) == 0x8);
    // private ColorPickerSaveSpot _activeColorPickerSaveSpot
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::ColorPickerSaveSpot* activeColorPickerSaveSpot;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorPickerSaveSpot*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,BrickPickerManager/MenuTab> _tabs
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BrickPickerManager::MenuTab>* tabs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BrickPickerManager::MenuTab>*) == 0x8);
    // private System.Collections.Generic.List`1<BrickPickerBrick> _brickPickerBricks
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::List_1<::GlobalNamespace::BrickPickerBrick*>* brickPickerBricks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BrickPickerBrick*>*) == 0x8);
    // private System.String _currentTab
    // Size: 0x8
    // Offset: 0xE0
    ::StringW currentTab;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _holdingMenu
    // Size: 0x1
    // Offset: 0xE8
    bool holdingMenu;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _holdingMenuWithLeftHand
    // Size: 0x1
    // Offset: 0xE9
    bool holdingMenuWithLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: holdingMenuWithLeftHand and: menuRotVel
    char __padding27[0x2] = {};
    // private System.Single _menuRotVel
    // Size: 0x4
    // Offset: 0xEC
    float menuRotVel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _waitingToReleaseLeftButton
    // Size: 0x1
    // Offset: 0xF0
    bool waitingToReleaseLeftButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _waitingToReleaseRightButton
    // Size: 0x1
    // Offset: 0xF1
    bool waitingToReleaseRightButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _menuClosing
    // Size: 0x1
    // Offset: 0xF2
    bool menuClosing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: menuClosing and: openMenuIndex
    char __padding31[0x1] = {};
    // public System.Int32 openMenuIndex
    // Size: 0x4
    // Offset: 0xF4
    int openMenuIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _firstOpen
    // Size: 0x1
    // Offset: 0xF8
    bool firstOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: firstOpen and: sliderInteractbles
    char __padding33[0x7] = {};
    // public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable[] sliderInteractbles
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*> sliderInteractbles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*>) == 0x8);
    // public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable categoryInteractable
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* categoryInteractable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*) == 0x8);
    // private FadeBrickMenu fade
    // Size: 0x8
    // Offset: 0x110
    ::GlobalNamespace::FadeBrickMenu* fade;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FadeBrickMenu*) == 0x8);
    // [TupleElementNamesAttribute] Offset: 0xF3F50
    // private System.Collections.Generic.List`1<System.ValueTuple`2<BrickPickerBrick,System.Single>> hoveredBricksThisFrame
    // Size: 0x8
    // Offset: 0x118
    ::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::BrickPickerBrick*, float>>* hoveredBricksThisFrame;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::BrickPickerBrick*, float>>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.UI.Button bricksTabButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_bricksTabButton();
    // Get instance field reference: public UnityEngine.UI.Button tilesTabButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_tilesTabButton();
    // Get instance field reference: public UnityEngine.UI.Button platesTabButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_platesTabButton();
    // Get instance field reference: public UnityEngine.UI.Button slopesTabButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_slopesTabButton();
    // Get instance field reference: public UnityEngine.UI.Button sideStudsTabButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_sideStudsTabButton();
    // Get instance field reference: public UnityEngine.UI.Button miscTabButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_miscTabButton();
    // Get instance field reference: public UnityEngine.GameObject bricksTabObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_bricksTabObject();
    // Get instance field reference: public UnityEngine.GameObject tilesTabObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_tilesTabObject();
    // Get instance field reference: public UnityEngine.GameObject platesTabObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_platesTabObject();
    // Get instance field reference: public UnityEngine.GameObject slopesTabObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_slopesTabObject();
    // Get instance field reference: public UnityEngine.GameObject sideStudsTabObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_sideStudsTabObject();
    // Get instance field reference: public UnityEngine.GameObject miscTabObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_miscTabObject();
    // Get instance field reference: public UnityEngine.GameObject menuContentsObject
    [[deprecated]] ::UnityEngine::GameObject*& dyn_menuContentsObject();
    // Get instance field reference: public UnityEngine.GameObject tilePrefab
    [[deprecated]] ::UnityEngine::GameObject*& dyn_tilePrefab();
    // Get instance field reference: public NormalSessionManager normalSessionManager
    [[deprecated]] ::GlobalNamespace::NormalSessionManager*& dyn_normalSessionManager();
    // Get instance field reference: public UnityEngine.GameObject leftHand
    [[deprecated]] ::UnityEngine::GameObject*& dyn_leftHand();
    // Get instance field reference: public UnityEngine.GameObject rightHand
    [[deprecated]] ::UnityEngine::GameObject*& dyn_rightHand();
    // Get instance field reference: public UnityEngine.UI.Slider hueSlider
    [[deprecated]] ::UnityEngine::UI::Slider*& dyn_hueSlider();
    // Get instance field reference: public UnityEngine.UI.Slider saturationSlider
    [[deprecated]] ::UnityEngine::UI::Slider*& dyn_saturationSlider();
    // Get instance field reference: public UnityEngine.UI.Slider valueSlider
    [[deprecated]] ::UnityEngine::UI::Slider*& dyn_valueSlider();
    // Get instance field reference: public ChangeCategoryColors changeCategoryColors
    [[deprecated]] ::GlobalNamespace::ChangeCategoryColors*& dyn_changeCategoryColors();
    // Get instance field reference: public ColorPickerSaveSpot[] colorPickerSaveSpots
    [[deprecated]] ::ArrayW<::GlobalNamespace::ColorPickerSaveSpot*>& dyn_colorPickerSaveSpots();
    // Get instance field reference: private ColorPickerSaveSpot _activeColorPickerSaveSpot
    [[deprecated]] ::GlobalNamespace::ColorPickerSaveSpot*& dyn__activeColorPickerSaveSpot();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,BrickPickerManager/MenuTab> _tabs
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BrickPickerManager::MenuTab>*& dyn__tabs();
    // Get instance field reference: private System.Collections.Generic.List`1<BrickPickerBrick> _brickPickerBricks
    [[deprecated]] ::System::Collections::Generic::List_1<::GlobalNamespace::BrickPickerBrick*>*& dyn__brickPickerBricks();
    // Get instance field reference: private System.String _currentTab
    [[deprecated]] ::StringW& dyn__currentTab();
    // Get instance field reference: private System.Boolean _holdingMenu
    [[deprecated]] bool& dyn__holdingMenu();
    // Get instance field reference: private System.Boolean _holdingMenuWithLeftHand
    [[deprecated]] bool& dyn__holdingMenuWithLeftHand();
    // Get instance field reference: private System.Single _menuRotVel
    [[deprecated]] float& dyn__menuRotVel();
    // Get instance field reference: private System.Boolean _waitingToReleaseLeftButton
    [[deprecated]] bool& dyn__waitingToReleaseLeftButton();
    // Get instance field reference: private System.Boolean _waitingToReleaseRightButton
    [[deprecated]] bool& dyn__waitingToReleaseRightButton();
    // Get instance field reference: private System.Boolean _menuClosing
    [[deprecated]] bool& dyn__menuClosing();
    // Get instance field reference: public System.Int32 openMenuIndex
    [[deprecated]] int& dyn_openMenuIndex();
    // Get instance field reference: private System.Boolean _firstOpen
    [[deprecated]] bool& dyn__firstOpen();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable[] sliderInteractbles
    [[deprecated]] ::ArrayW<::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*>& dyn_sliderInteractbles();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable categoryInteractable
    [[deprecated]] ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*& dyn_categoryInteractable();
    // Get instance field reference: private FadeBrickMenu fade
    [[deprecated]] ::GlobalNamespace::FadeBrickMenu*& dyn_fade();
    // Get instance field reference: private System.Collections.Generic.List`1<System.ValueTuple`2<BrickPickerBrick,System.Single>> hoveredBricksThisFrame
    [[deprecated]] ::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::BrickPickerBrick*, float>>*& dyn_hoveredBricksThisFrame();
    // public System.Boolean get_IsMenuOpen()
    // Offset: 0x6F2480
    bool get_IsMenuOpen();
    // public System.Boolean get_IsMenuFullyOpen()
    // Offset: 0x6F2420
    bool get_IsMenuFullyOpen();
    // private System.Void Start()
    // Offset: 0x6F1C50
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x6F0DA0
    void LateUpdate();
    // private System.Void ProcessHoveredTiles()
    // Offset: 0x6F1060
    void ProcessHoveredTiles();
    // public System.Void AddHoveredTile(BrickPickerBrick brickPickerBrick, System.Single distance)
    // Offset: 0x6F0850
    void AddHoveredTile(::GlobalNamespace::BrickPickerBrick* brickPickerBrick, float distance);
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x6F18F0
    void SetColor(::UnityEngine::Color color);
    // public System.Void SaveSpotSelected(ColorPickerSaveSpot saveSpot)
    // Offset: 0x6F1540
    void SaveSpotSelected(::GlobalNamespace::ColorPickerSaveSpot* saveSpot);
    // public System.Void SetSliders(UnityEngine.Color c)
    // Offset: 0x6F1B90
    void SetSliders(::UnityEngine::Color c);
    // private System.Void SetCategorySliderInteractableActive(System.Boolean active)
    // Offset: 0x6F1830
    void SetCategorySliderInteractableActive(bool active);
    // private System.Void SetColorSlidersInteractableActive(System.Boolean active)
    // Offset: 0x6F1860
    void SetColorSlidersInteractableActive(bool active);
    // public System.Collections.IEnumerator WarmMenu()
    // Offset: 0x6F2320
    ::System::Collections::IEnumerator* WarmMenu();
    // private System.Void ToggleMenu(System.Boolean usingLeftHand)
    // Offset: 0x6F20F0
    void ToggleMenu(bool usingLeftHand);
    // private System.Void SetInteractablesActive(System.Boolean value)
    // Offset: 0x6F1AF0
    void SetInteractablesActive(bool value);
    // private System.Void RepositionMenu(System.Boolean usingLeftHand)
    // Offset: 0x6F1250
    void RepositionMenu(bool usingLeftHand);
    // public System.Void TabClicked(System.String tabName)
    // Offset: 0x6F2080
    void TabClicked(::StringW tabName);
    // private System.Void EnableTab(System.String tabName)
    // Offset: 0x6F0960
    void EnableTab(::StringW tabName);
    // private System.Void DisableTab(System.String tabName)
    // Offset: 0x6F08F0
    void DisableTab(::StringW tabName);
    // private System.Void InitializeTab(System.String tabName)
    // Offset: 0x6F09D0
    void InitializeTab(::StringW tabName);
    // public System.Void .ctor()
    // Offset: 0x6F2390
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrickPickerManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrickPickerManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrickPickerManager*, creationType>()));
    }
  }; // BrickPickerManager
  #pragma pack(pop)
  static check_size<sizeof(BrickPickerManager), 280 + sizeof(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::BrickPickerBrick*, float>>*)> __GlobalNamespace_BrickPickerManagerSizeCheck;
  static_assert(sizeof(BrickPickerManager) == 0x120);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickPickerManager::MenuTab, "", "BrickPickerManager/MenuTab");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::get_IsMenuOpen
// Il2CppName: get_IsMenuOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BrickPickerManager::*)()>(&GlobalNamespace::BrickPickerManager::get_IsMenuOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "get_IsMenuOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::get_IsMenuFullyOpen
// Il2CppName: get_IsMenuFullyOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BrickPickerManager::*)()>(&GlobalNamespace::BrickPickerManager::get_IsMenuFullyOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "get_IsMenuFullyOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)()>(&GlobalNamespace::BrickPickerManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)()>(&GlobalNamespace::BrickPickerManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::ProcessHoveredTiles
// Il2CppName: ProcessHoveredTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)()>(&GlobalNamespace::BrickPickerManager::ProcessHoveredTiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "ProcessHoveredTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::AddHoveredTile
// Il2CppName: AddHoveredTile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::GlobalNamespace::BrickPickerBrick*, float)>(&GlobalNamespace::BrickPickerManager::AddHoveredTile)> {
  static const MethodInfo* get() {
    static auto* brickPickerBrick = &::il2cpp_utils::GetClassFromName("", "BrickPickerBrick")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "AddHoveredTile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brickPickerBrick, distance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::UnityEngine::Color)>(&GlobalNamespace::BrickPickerManager::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::SaveSpotSelected
// Il2CppName: SaveSpotSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::GlobalNamespace::ColorPickerSaveSpot*)>(&GlobalNamespace::BrickPickerManager::SaveSpotSelected)> {
  static const MethodInfo* get() {
    static auto* saveSpot = &::il2cpp_utils::GetClassFromName("", "ColorPickerSaveSpot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "SaveSpotSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saveSpot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::SetSliders
// Il2CppName: SetSliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::UnityEngine::Color)>(&GlobalNamespace::BrickPickerManager::SetSliders)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "SetSliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::SetCategorySliderInteractableActive
// Il2CppName: SetCategorySliderInteractableActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(bool)>(&GlobalNamespace::BrickPickerManager::SetCategorySliderInteractableActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "SetCategorySliderInteractableActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::SetColorSlidersInteractableActive
// Il2CppName: SetColorSlidersInteractableActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(bool)>(&GlobalNamespace::BrickPickerManager::SetColorSlidersInteractableActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "SetColorSlidersInteractableActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::WarmMenu
// Il2CppName: WarmMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BrickPickerManager::*)()>(&GlobalNamespace::BrickPickerManager::WarmMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "WarmMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::ToggleMenu
// Il2CppName: ToggleMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(bool)>(&GlobalNamespace::BrickPickerManager::ToggleMenu)> {
  static const MethodInfo* get() {
    static auto* usingLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "ToggleMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usingLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::SetInteractablesActive
// Il2CppName: SetInteractablesActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(bool)>(&GlobalNamespace::BrickPickerManager::SetInteractablesActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "SetInteractablesActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::RepositionMenu
// Il2CppName: RepositionMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(bool)>(&GlobalNamespace::BrickPickerManager::RepositionMenu)> {
  static const MethodInfo* get() {
    static auto* usingLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "RepositionMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usingLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::TabClicked
// Il2CppName: TabClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::StringW)>(&GlobalNamespace::BrickPickerManager::TabClicked)> {
  static const MethodInfo* get() {
    static auto* tabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "TabClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tabName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::EnableTab
// Il2CppName: EnableTab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::StringW)>(&GlobalNamespace::BrickPickerManager::EnableTab)> {
  static const MethodInfo* get() {
    static auto* tabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "EnableTab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tabName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::DisableTab
// Il2CppName: DisableTab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::StringW)>(&GlobalNamespace::BrickPickerManager::DisableTab)> {
  static const MethodInfo* get() {
    static auto* tabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "DisableTab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tabName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::InitializeTab
// Il2CppName: InitializeTab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPickerManager::*)(::StringW)>(&GlobalNamespace::BrickPickerManager::InitializeTab)> {
  static const MethodInfo* get() {
    static auto* tabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPickerManager*), "InitializeTab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tabName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPickerManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
