// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CameraScreenshotTest
  class CameraScreenshotTest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CameraScreenshotTest);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CameraScreenshotTest*, "", "CameraScreenshotTest");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x72
  #pragma pack(push, 1)
  // Autogenerated type: CameraScreenshotTest
  // [TokenAttribute] Offset: FFFFFFFF
  class CameraScreenshotTest : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::CameraScreenshotTest::Format
    struct Format;
    // Nested type: ::GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: CameraScreenshotTest/Format
    // [TokenAttribute] Offset: FFFFFFFF
    struct Format/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Format
      constexpr Format(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public CameraScreenshotTest/Format RAW
      static constexpr const int RAW = 0;
      // Get static field: static public CameraScreenshotTest/Format RAW
      static ::GlobalNamespace::CameraScreenshotTest::Format _get_RAW();
      // Set static field: static public CameraScreenshotTest/Format RAW
      static void _set_RAW(::GlobalNamespace::CameraScreenshotTest::Format value);
      // static field const value: static public CameraScreenshotTest/Format JPG
      static constexpr const int JPG = 1;
      // Get static field: static public CameraScreenshotTest/Format JPG
      static ::GlobalNamespace::CameraScreenshotTest::Format _get_JPG();
      // Set static field: static public CameraScreenshotTest/Format JPG
      static void _set_JPG(::GlobalNamespace::CameraScreenshotTest::Format value);
      // static field const value: static public CameraScreenshotTest/Format PNG
      static constexpr const int PNG = 2;
      // Get static field: static public CameraScreenshotTest/Format PNG
      static ::GlobalNamespace::CameraScreenshotTest::Format _get_PNG();
      // Set static field: static public CameraScreenshotTest/Format PNG
      static void _set_PNG(::GlobalNamespace::CameraScreenshotTest::Format value);
      // static field const value: static public CameraScreenshotTest/Format PPM
      static constexpr const int PPM = 3;
      // Get static field: static public CameraScreenshotTest/Format PPM
      static ::GlobalNamespace::CameraScreenshotTest::Format _get_PPM();
      // Set static field: static public CameraScreenshotTest/Format PPM
      static void _set_PPM(::GlobalNamespace::CameraScreenshotTest::Format value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // CameraScreenshotTest/Format
    #pragma pack(pop)
    static check_size<sizeof(CameraScreenshotTest::Format), 0 + sizeof(int)> __GlobalNamespace_CameraScreenshotTest_FormatSizeCheck;
    static_assert(sizeof(CameraScreenshotTest::Format) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Int32 captureWidth
    // Size: 0x4
    // Offset: 0x18
    int captureWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 captureHeight
    // Size: 0x4
    // Offset: 0x1C
    int captureHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.GameObject mainEnv
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* mainEnv;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Camera _camera
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public CameraScreenshotTest/Format format
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::CameraScreenshotTest::Format format;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CameraScreenshotTest::Format) == 0x4);
    // Padding between fields: format and: folder
    char __padding4[0x4] = {};
    // public System.String folder
    // Size: 0x8
    // Offset: 0x38
    ::StringW folder;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Rect _rect
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Rect rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.RenderTexture _renderTexture
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::RenderTexture* renderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Texture2D _screenShot
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Texture2D* screenShot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Boolean takeScreenshot
    // Size: 0x1
    // Offset: 0x70
    bool takeScreenshot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean skipSaving
    // Size: 0x1
    // Offset: 0x71
    bool skipSaving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Int32 Color
    static int _get_Color();
    // Set static field: static private readonly System.Int32 Color
    static void _set_Color(int value);
    // Get instance field reference: public System.Int32 captureWidth
    int& dyn_captureWidth();
    // Get instance field reference: public System.Int32 captureHeight
    int& dyn_captureHeight();
    // Get instance field reference: public UnityEngine.GameObject mainEnv
    ::UnityEngine::GameObject*& dyn_mainEnv();
    // Get instance field reference: private UnityEngine.Camera _camera
    ::UnityEngine::Camera*& dyn__camera();
    // Get instance field reference: public CameraScreenshotTest/Format format
    ::GlobalNamespace::CameraScreenshotTest::Format& dyn_format();
    // Get instance field reference: public System.String folder
    ::StringW& dyn_folder();
    // Get instance field reference: public UnityEngine.Color color
    ::UnityEngine::Color& dyn_color();
    // Get instance field reference: private UnityEngine.Rect _rect
    ::UnityEngine::Rect& dyn__rect();
    // Get instance field reference: private UnityEngine.RenderTexture _renderTexture
    ::UnityEngine::RenderTexture*& dyn__renderTexture();
    // Get instance field reference: private UnityEngine.Texture2D _screenShot
    ::UnityEngine::Texture2D*& dyn__screenShot();
    // Get instance field reference: public System.Boolean takeScreenshot
    bool& dyn_takeScreenshot();
    // Get instance field reference: public System.Boolean skipSaving
    bool& dyn_skipSaving();
    // private System.String UniqueFilename(System.Int32 width, System.Int32 height)
    // Offset: 0x109DF9C
    ::StringW UniqueFilename(int width, int height);
    // private System.Void Update()
    // Offset: 0x109E044
    void Update();
    // private System.Void TakeScreenshot()
    // Offset: 0x109E054
    void TakeScreenshot();
    // private System.Void OnValidate()
    // Offset: 0x109E3BC
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x109E4E4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CameraScreenshotTest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CameraScreenshotTest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CameraScreenshotTest*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x109E500
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // CameraScreenshotTest
  #pragma pack(pop)
  static check_size<sizeof(CameraScreenshotTest), 113 + sizeof(bool)> __GlobalNamespace_CameraScreenshotTestSizeCheck;
  static_assert(sizeof(CameraScreenshotTest) == 0x72);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CameraScreenshotTest::Format, "", "CameraScreenshotTest/Format");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::UniqueFilename
// Il2CppName: UniqueFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CameraScreenshotTest::*)(int, int)>(&GlobalNamespace::CameraScreenshotTest::UniqueFilename)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CameraScreenshotTest*), "UniqueFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CameraScreenshotTest::*)()>(&GlobalNamespace::CameraScreenshotTest::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CameraScreenshotTest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::TakeScreenshot
// Il2CppName: TakeScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CameraScreenshotTest::*)()>(&GlobalNamespace::CameraScreenshotTest::TakeScreenshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CameraScreenshotTest*), "TakeScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CameraScreenshotTest::*)()>(&GlobalNamespace::CameraScreenshotTest::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CameraScreenshotTest*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::CameraScreenshotTest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CameraScreenshotTest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
