// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Skipping declaration: UpdateType because it is already included!
  // Skipping declaration: InputAxes because it is already included!
  // Skipping declaration: InteractionState because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRController
  class XRController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRController*, "UnityEngine.XR.Interaction.Toolkit", "XRController");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRController
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: CB9C0
  class XRController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes
    struct InputAxes;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType
    struct UpdateType;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState
    struct InteractionState;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionTypes
    struct InteractionTypes;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputAxes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputAxes
      constexpr InputAxes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static constexpr const int Primary2DAxis = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes _get_Primary2DAxis();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static void _set_Primary2DAxis(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes DPad
      static constexpr const int DPad = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes DPad
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes _get_DPad();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes DPad
      static void _set_DPad(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Trigger
      static constexpr const int Trigger = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Trigger
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes _get_Trigger();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Trigger
      static void _set_Trigger(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Grip
      static constexpr const int Grip = 3;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Grip
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes _get_Grip();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Grip
      static void _set_Grip(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes IndexTouch
      static constexpr const int IndexTouch = 4;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes IndexTouch
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes _get_IndexTouch();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes IndexTouch
      static void _set_IndexTouch(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes ThumbTouch
      static constexpr const int ThumbTouch = 5;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes ThumbTouch
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes _get_ThumbTouch();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes ThumbTouch
      static void _set_ThumbTouch(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static constexpr const int Secondary2DAxis = 6;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes _get_Secondary2DAxis();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static void _set_Secondary2DAxis(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes
    #pragma pack(pop)
    static check_size<sizeof(XRController::InputAxes), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRController_InputAxesSizeCheck;
    static_assert(sizeof(XRController::InputAxes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateType
      constexpr UpdateType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType UpdateAndBeforeRender
      static constexpr const int UpdateAndBeforeRender = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType UpdateAndBeforeRender
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType _get_UpdateAndBeforeRender();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType UpdateAndBeforeRender
      static void _set_UpdateAndBeforeRender(::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType Update
      static constexpr const int Update = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType Update
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType _get_Update();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType Update
      static void _set_Update(::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType BeforeRender
      static constexpr const int BeforeRender = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType BeforeRender
      static ::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType _get_BeforeRender();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType BeforeRender
      static void _set_BeforeRender(::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType
    #pragma pack(pop)
    static check_size<sizeof(XRController::UpdateType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRController_UpdateTypeSizeCheck;
    static_assert(sizeof(XRController::UpdateType) == 0x4);
    // Size: 0x3
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState
    // [TokenAttribute] Offset: FFFFFFFF
    struct InteractionState/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Boolean active
      // Size: 0x1
      // Offset: 0x0
      bool active;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean activatedThisFrame
      // Size: 0x1
      // Offset: 0x1
      bool activatedThisFrame;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean deActivatedThisFrame
      // Size: 0x1
      // Offset: 0x2
      bool deActivatedThisFrame;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: InteractionState
      constexpr InteractionState(bool active_ = {}, bool activatedThisFrame_ = {}, bool deActivatedThisFrame_ = {}) noexcept : active{active_}, activatedThisFrame{activatedThisFrame_}, deActivatedThisFrame{deActivatedThisFrame_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Boolean active
      [[deprecated("Use field access instead!")]] bool& dyn_active();
      // Get instance field reference: public System.Boolean activatedThisFrame
      [[deprecated("Use field access instead!")]] bool& dyn_activatedThisFrame();
      // Get instance field reference: public System.Boolean deActivatedThisFrame
      [[deprecated("Use field access instead!")]] bool& dyn_deActivatedThisFrame();
    }; // UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState
    #pragma pack(pop)
    static check_size<sizeof(XRController::InteractionState), 2 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRController_InteractionStateSizeCheck;
    static_assert(sizeof(XRController::InteractionState) == 0x3);
    public:
    // [HeaderAttribute] Offset: 0xCBA80
    // [TooltipAttribute] Offset: 0xCBA80
    // private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType m_UpdateTrackingType
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType m_UpdateTrackingType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType) == 0x4);
    // private System.Boolean m_EnableInputTracking
    // Size: 0x1
    // Offset: 0x1C
    bool m_EnableInputTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HeaderAttribute] Offset: 0xCBB90
    // [TooltipAttribute] Offset: 0xCBB90
    // private System.Boolean m_EnableInputActions
    // Size: 0x1
    // Offset: 0x1D
    bool m_EnableInputActions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableInputActions and: m_ControllerNode
    char __padding2[0x2] = {};
    // [TooltipAttribute] Offset: 0xCBC30
    // private UnityEngine.XR.XRNode m_ControllerNode
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::XR::XRNode m_ControllerNode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::XRNode) == 0x4);
    // [TooltipAttribute] Offset: 0xCBCA0
    // private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes m_SelectUsage
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes m_SelectUsage;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes) == 0x4);
    // [TooltipAttribute] Offset: 0xCBDA0
    // private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes m_ActivateUsage
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes m_ActivateUsage;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes) == 0x4);
    // [TooltipAttribute] Offset: 0xCBEC0
    // private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes m_UIPressUsage
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes m_UIPressUsage;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes) == 0x4);
    // [TooltipAttribute] Offset: 0xCBF80
    // private System.Single m_AxisToPressThreshold
    // Size: 0x4
    // Offset: 0x30
    float m_AxisToPressThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_AxisToPressThreshold and: m_ModelPrefab
    char __padding7[0x4] = {};
    // [HeaderAttribute] Offset: 0xCC090
    // [TooltipAttribute] Offset: 0xCC090
    // private UnityEngine.Transform m_ModelPrefab
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* m_ModelPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xCC2A0
    // private UnityEngine.Transform m_ModelTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* m_ModelTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xCC370
    // private System.Boolean m_AnimateModel
    // Size: 0x1
    // Offset: 0x48
    bool m_AnimateModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AnimateModel and: m_ModelSelectTransition
    char __padding10[0x7] = {};
    // [TooltipAttribute] Offset: 0xCC490
    // private System.String m_ModelSelectTransition
    // Size: 0x8
    // Offset: 0x50
    ::StringW m_ModelSelectTransition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0xCC540
    // private System.String m_ModelDeSelectTransition
    // Size: 0x8
    // Offset: 0x58
    ::StringW m_ModelDeSelectTransition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState m_SelectInteractionState
    // Size: 0x3
    // Offset: 0x60
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState m_SelectInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState) == 0x3);
    // private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState m_ActivateInteractionState
    // Size: 0x3
    // Offset: 0x63
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState m_ActivateInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState) == 0x3);
    // private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState m_UIPressInteractionState
    // Size: 0x3
    // Offset: 0x66
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState m_UIPressInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState) == 0x3);
    // Padding between fields: m_UIPressInteractionState and: m_InputDevice
    char __padding15[0x7] = {};
    // private UnityEngine.XR.InputDevice m_InputDevice
    // Size: 0x9
    // Offset: 0x70
    ::UnityEngine::XR::InputDevice m_InputDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: m_InputDevice and: m_PerformSetup
    char __padding16[0x7] = {};
    // private System.Boolean m_PerformSetup
    // Size: 0x1
    // Offset: 0x80
    bool m_PerformSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PerformSetup and: m_ModelGO
    char __padding17[0x7] = {};
    // private UnityEngine.GameObject m_ModelGO
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* m_ModelGO;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean m_HideControllerModel
    // Size: 0x1
    // Offset: 0x90
    bool m_HideControllerModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.String[] s_InputAxisNames
    static ::ArrayW<::StringW> _get_s_InputAxisNames();
    // Set static field: static private System.String[] s_InputAxisNames
    static void _set_s_InputAxisNames(::ArrayW<::StringW> value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType m_UpdateTrackingType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType& dyn_m_UpdateTrackingType();
    // Get instance field reference: private System.Boolean m_EnableInputTracking
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableInputTracking();
    // Get instance field reference: private System.Boolean m_EnableInputActions
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableInputActions();
    // Get instance field reference: private UnityEngine.XR.XRNode m_ControllerNode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& dyn_m_ControllerNode();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes m_SelectUsage
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes& dyn_m_SelectUsage();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes m_ActivateUsage
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes& dyn_m_ActivateUsage();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes m_UIPressUsage
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes& dyn_m_UIPressUsage();
    // Get instance field reference: private System.Single m_AxisToPressThreshold
    [[deprecated("Use field access instead!")]] float& dyn_m_AxisToPressThreshold();
    // Get instance field reference: private UnityEngine.Transform m_ModelPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ModelPrefab();
    // Get instance field reference: private UnityEngine.Transform m_ModelTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ModelTransform();
    // Get instance field reference: private System.Boolean m_AnimateModel
    [[deprecated("Use field access instead!")]] bool& dyn_m_AnimateModel();
    // Get instance field reference: private System.String m_ModelSelectTransition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ModelSelectTransition();
    // Get instance field reference: private System.String m_ModelDeSelectTransition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ModelDeSelectTransition();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState m_SelectInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState& dyn_m_SelectInteractionState();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState m_ActivateInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState& dyn_m_ActivateInteractionState();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState m_UIPressInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState& dyn_m_UIPressInteractionState();
    // Get instance field reference: private UnityEngine.XR.InputDevice m_InputDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_m_InputDevice();
    // Get instance field reference: private System.Boolean m_PerformSetup
    [[deprecated("Use field access instead!")]] bool& dyn_m_PerformSetup();
    // Get instance field reference: private UnityEngine.GameObject m_ModelGO
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_ModelGO();
    // Get instance field reference: private System.Boolean m_HideControllerModel
    [[deprecated("Use field access instead!")]] bool& dyn_m_HideControllerModel();
    // public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType get_updateTrackingType()
    // Offset: 0x1E1910
    ::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType get_updateTrackingType();
    // public System.Void set_updateTrackingType(UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.UpdateType value)
    // Offset: 0x29F770
    void set_updateTrackingType(::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType value);
    // public System.Boolean get_enableInputTracking()
    // Offset: 0x2F6E50
    bool get_enableInputTracking();
    // public System.Void set_enableInputTracking(System.Boolean value)
    // Offset: 0x3042E0
    void set_enableInputTracking(bool value);
    // public System.Boolean get_enableInputActions()
    // Offset: 0x2F6E20
    bool get_enableInputActions();
    // public System.Void set_enableInputActions(System.Boolean value)
    // Offset: 0x3042D0
    void set_enableInputActions(bool value);
    // public UnityEngine.XR.XRNode get_controllerNode()
    // Offset: 0x217240
    ::UnityEngine::XR::XRNode get_controllerNode();
    // public System.Void set_controllerNode(UnityEngine.XR.XRNode value)
    // Offset: 0x2172B0
    void set_controllerNode(::UnityEngine::XR::XRNode value);
    // public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes get_selectUsage()
    // Offset: 0x2512C0
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes get_selectUsage();
    // public System.Void set_selectUsage(UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes value)
    // Offset: 0x2F3080
    void set_selectUsage(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
    // public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes get_activateUsage()
    // Offset: 0x217390
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes get_activateUsage();
    // public System.Void set_activateUsage(UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes value)
    // Offset: 0x245FF0
    void set_activateUsage(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
    // public UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes get_uiPressUsage()
    // Offset: 0x3042B0
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes get_uiPressUsage();
    // public System.Void set_uiPressUsage(UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InputAxes value)
    // Offset: 0x304390
    void set_uiPressUsage(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes value);
    // public System.Single get_axisToPressThreshold()
    // Offset: 0x3041F0
    float get_axisToPressThreshold();
    // public System.Void set_axisToPressThreshold(System.Single value)
    // Offset: 0x3042C0
    void set_axisToPressThreshold(float value);
    // public UnityEngine.Transform get_modelPrefab()
    // Offset: 0x1E1940
    ::UnityEngine::Transform* get_modelPrefab();
    // public System.Void set_modelPrefab(UnityEngine.Transform value)
    // Offset: 0x2322B0
    void set_modelPrefab(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_modelTransform()
    // Offset: 0x1E0CA0
    ::UnityEngine::Transform* get_modelTransform();
    // public System.Boolean get_animateModel()
    // Offset: 0x1E4450
    bool get_animateModel();
    // public System.Void set_animateModel(System.Boolean value)
    // Offset: 0x1E4920
    void set_animateModel(bool value);
    // public System.String get_modelSelectTransition()
    // Offset: 0x2321C0
    ::StringW get_modelSelectTransition();
    // public System.Void set_modelSelectTransition(System.String value)
    // Offset: 0x2322C0
    void set_modelSelectTransition(::StringW value);
    // public System.String get_modelDeSelectTransition()
    // Offset: 0x2321F0
    ::StringW get_modelDeSelectTransition();
    // public System.Void set_modelDeSelectTransition(System.String value)
    // Offset: 0x2322E0
    void set_modelDeSelectTransition(::StringW value);
    // UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState get_selectInteractionState()
    // Offset: 0x304270
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState get_selectInteractionState();
    // UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState get_activateInteractionState()
    // Offset: 0x3041D0
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState get_activateInteractionState();
    // UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState get_uiPressInteractionState()
    // Offset: 0x304290
    ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState get_uiPressInteractionState();
    // public UnityEngine.XR.InputDevice get_inputDevice()
    // Offset: 0x304210
    ::UnityEngine::XR::InputDevice get_inputDevice();
    // public System.Boolean get_hideControllerModel()
    // Offset: 0x304200
    bool get_hideControllerModel();
    // public System.Void set_hideControllerModel(System.Boolean value)
    // Offset: 0x3042F0
    void set_hideControllerModel(bool value);
    // public System.Void .ctor()
    // Offset: 0x3041A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRController*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x303E80
    static void _cctor();
    // protected System.Void OnEnable()
    // Offset: 0x3032A0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x303230
    void OnDisable();
    // protected System.Void OnBeforeRender()
    // Offset: 0x303210
    void OnBeforeRender();
    // protected System.Void Awake()
    // Offset: 0x302DE0
    void Awake();
    // private System.Void PerformSetup()
    // Offset: 0x303310
    void PerformSetup();
    // private System.Void SetupModel()
    // Offset: 0x303420
    void SetupModel();
    // private System.Boolean ShouldUpdateTrackingInput()
    // Offset: 0x3036E0
    bool ShouldUpdateTrackingInput();
    // private System.Void Update()
    // Offset: 0x303E20
    void Update();
    // private System.Void UpdateTrackingInput()
    // Offset: 0x303C70
    void UpdateTrackingInput();
    // private System.Void UpdateInput()
    // Offset: 0x303890
    void UpdateInput();
    // private System.Boolean GetSimulator(UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionTypes interactionStateType)
    // Offset: 0x302FF0
    bool GetSimulator(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionTypes interactionStateType);
    // private System.Void HandleInteractionAction(UnityEngine.XR.XRNode node, System.String usage, ref UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState interactionState, UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionTypes interactionStateType)
    // Offset: 0x303080
    void HandleInteractionAction(::UnityEngine::XR::XRNode node, ::StringW usage, ByRef<::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState> interactionState, ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionTypes interactionStateType);
    // System.Void UpdateInteractionType(UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionTypes interactionStateType, System.Boolean isInteractionStateOn)
    // Offset: 0x303B00
    void UpdateInteractionType(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionTypes interactionStateType, bool isInteractionStateOn);
    // static private System.Void UpdateInteractionState(ref UnityEngine.XR.Interaction.Toolkit.XRController/UnityEngine.XR.Interaction.Toolkit.InteractionState interactionState, System.Boolean isInteractionStateOn)
    // Offset: 0x303AE0
    static void UpdateInteractionState(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState> interactionState, bool isInteractionStateOn);
    // System.Void UpdateControllerModelAnimation()
    // Offset: 0x303700
    void UpdateControllerModelAnimation();
    // System.Void UpdateControllerPose(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x303800
    void UpdateControllerPose(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public System.Boolean SendHapticImpulse(System.Single amplitude, System.Single duration)
    // Offset: 0x303320
    bool SendHapticImpulse(float amplitude, float duration);
  }; // UnityEngine.XR.Interaction.Toolkit.XRController
  #pragma pack(pop)
  static check_size<sizeof(XRController), 144 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRControllerSizeCheck;
  static_assert(sizeof(XRController) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState, "UnityEngine.XR.Interaction.Toolkit", "XRController/InteractionState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType, "UnityEngine.XR.Interaction.Toolkit", "XRController/UpdateType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes, "UnityEngine.XR.Interaction.Toolkit", "XRController/InputAxes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_updateTrackingType
// Il2CppName: get_updateTrackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_updateTrackingType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_updateTrackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_updateTrackingType
// Il2CppName: set_updateTrackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::Interaction::Toolkit::XRController::UpdateType)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_updateTrackingType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/UpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_updateTrackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_enableInputTracking
// Il2CppName: get_enableInputTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_enableInputTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_enableInputTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_enableInputTracking
// Il2CppName: set_enableInputTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_enableInputTracking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_enableInputTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_enableInputActions
// Il2CppName: get_enableInputActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_enableInputActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_enableInputActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_enableInputActions
// Il2CppName: set_enableInputActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_enableInputActions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_enableInputActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_controllerNode
// Il2CppName: get_controllerNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRNode (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_controllerNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_controllerNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_controllerNode
// Il2CppName: set_controllerNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::XRNode)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_controllerNode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_controllerNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_selectUsage
// Il2CppName: get_selectUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_selectUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_selectUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_selectUsage
// Il2CppName: set_selectUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_selectUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InputAxes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_selectUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_activateUsage
// Il2CppName: get_activateUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_activateUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_activateUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_activateUsage
// Il2CppName: set_activateUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_activateUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InputAxes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_activateUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_uiPressUsage
// Il2CppName: get_uiPressUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_uiPressUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_uiPressUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_uiPressUsage
// Il2CppName: set_uiPressUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::Interaction::Toolkit::XRController::InputAxes)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_uiPressUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InputAxes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_uiPressUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_axisToPressThreshold
// Il2CppName: get_axisToPressThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_axisToPressThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_axisToPressThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_axisToPressThreshold
// Il2CppName: set_axisToPressThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_axisToPressThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_axisToPressThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_modelPrefab
// Il2CppName: get_modelPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_modelPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_modelPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_modelPrefab
// Il2CppName: set_modelPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_modelPrefab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_modelPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_modelTransform
// Il2CppName: get_modelTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_modelTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_modelTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_animateModel
// Il2CppName: get_animateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_animateModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_animateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_animateModel
// Il2CppName: set_animateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_animateModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_animateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_modelSelectTransition
// Il2CppName: get_modelSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_modelSelectTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_modelSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_modelSelectTransition
// Il2CppName: set_modelSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::StringW)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_modelSelectTransition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_modelSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_modelDeSelectTransition
// Il2CppName: get_modelDeSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_modelDeSelectTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_modelDeSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_modelDeSelectTransition
// Il2CppName: set_modelDeSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::StringW)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_modelDeSelectTransition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_modelDeSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_selectInteractionState
// Il2CppName: get_selectInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_selectInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_selectInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_activateInteractionState
// Il2CppName: get_activateInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_activateInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_activateInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_uiPressInteractionState
// Il2CppName: get_uiPressInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_uiPressInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_uiPressInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_inputDevice
// Il2CppName: get_inputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::InputDevice (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_inputDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_inputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::get_hideControllerModel
// Il2CppName: get_hideControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::get_hideControllerModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "get_hideControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::set_hideControllerModel
// Il2CppName: set_hideControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRController::set_hideControllerModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "set_hideControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::OnBeforeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::PerformSetup
// Il2CppName: PerformSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::PerformSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "PerformSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::SetupModel
// Il2CppName: SetupModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::SetupModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "SetupModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::ShouldUpdateTrackingInput
// Il2CppName: ShouldUpdateTrackingInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::ShouldUpdateTrackingInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "ShouldUpdateTrackingInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::UpdateTrackingInput
// Il2CppName: UpdateTrackingInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::UpdateTrackingInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "UpdateTrackingInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::UpdateInput
// Il2CppName: UpdateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::UpdateInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "UpdateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::GetSimulator
// Il2CppName: GetSimulator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionTypes)>(&UnityEngine::XR::Interaction::Toolkit::XRController::GetSimulator)> {
  static const MethodInfo* get() {
    static auto* interactionStateType = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InteractionTypes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "GetSimulator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionStateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::HandleInteractionAction
// Il2CppName: HandleInteractionAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::XRNode, ::StringW, ByRef<::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState>, ::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionTypes)>(&UnityEngine::XR::Interaction::Toolkit::XRController::HandleInteractionAction)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* interactionState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InteractionState")->this_arg;
    static auto* interactionStateType = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InteractionTypes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "HandleInteractionAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, usage, interactionState, interactionStateType});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::UpdateInteractionType
// Il2CppName: UpdateInteractionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionTypes, bool)>(&UnityEngine::XR::Interaction::Toolkit::XRController::UpdateInteractionType)> {
  static const MethodInfo* get() {
    static auto* interactionStateType = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InteractionTypes")->byval_arg;
    static auto* isInteractionStateOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "UpdateInteractionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionStateType, isInteractionStateOn});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::UpdateInteractionState
// Il2CppName: UpdateInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRController::InteractionState>, bool)>(&UnityEngine::XR::Interaction::Toolkit::XRController::UpdateInteractionState)> {
  static const MethodInfo* get() {
    static auto* interactionState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController/InteractionState")->this_arg;
    static auto* isInteractionStateOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "UpdateInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionState, isInteractionStateOn});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::UpdateControllerModelAnimation
// Il2CppName: UpdateControllerModelAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRController::UpdateControllerModelAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "UpdateControllerModelAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::UpdateControllerPose
// Il2CppName: UpdateControllerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRController::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&UnityEngine::XR::Interaction::Toolkit::XRController::UpdateControllerPose)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "UpdateControllerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRController::SendHapticImpulse
// Il2CppName: SendHapticImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRController::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::XRController::SendHapticImpulse)> {
  static const MethodInfo* get() {
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRController*), "SendHapticImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amplitude, duration});
  }
};
