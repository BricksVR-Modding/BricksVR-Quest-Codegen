// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRBoundary/BoundaryType
#include "GlobalNamespace/OVRBoundary_BoundaryType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GuardianBoundaryEnforcer
  class GuardianBoundaryEnforcer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GuardianBoundaryDisplay
  class GuardianBoundaryDisplay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GuardianBoundaryDisplay);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GuardianBoundaryDisplay*, "", "GuardianBoundaryDisplay");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: GuardianBoundaryDisplay
  // [TokenAttribute] Offset: FFFFFFFF
  class GuardianBoundaryDisplay : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public GuardianBoundaryEnforcer m_enforcer
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::GuardianBoundaryEnforcer* m_enforcer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GuardianBoundaryEnforcer*) == 0x8);
    // public OVRBoundary/BoundaryType m_boundaryType
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRBoundary::BoundaryType m_boundaryType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRBoundary::BoundaryType) == 0x4);
    // Padding between fields: m_boundaryType and: m_errorDisplay
    char __padding1[0x4] = {};
    // public UnityEngine.GameObject m_errorDisplay
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* m_errorDisplay;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public GuardianBoundaryEnforcer m_enforcer
    ::GlobalNamespace::GuardianBoundaryEnforcer*& dyn_m_enforcer();
    // Get instance field reference: public OVRBoundary/BoundaryType m_boundaryType
    ::GlobalNamespace::OVRBoundary::BoundaryType& dyn_m_boundaryType();
    // Get instance field reference: public UnityEngine.GameObject m_errorDisplay
    ::UnityEngine::GameObject*& dyn_m_errorDisplay();
    // private System.Void Start()
    // Offset: 0x84A03C
    void Start();
    // private System.Void RefreshDisplay()
    // Offset: 0x84A0CC
    void RefreshDisplay();
    // public System.Void .ctor()
    // Offset: 0x84A31C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GuardianBoundaryDisplay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GuardianBoundaryDisplay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GuardianBoundaryDisplay*, creationType>()));
    }
  }; // GuardianBoundaryDisplay
  #pragma pack(pop)
  static check_size<sizeof(GuardianBoundaryDisplay), 40 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_GuardianBoundaryDisplaySizeCheck;
  static_assert(sizeof(GuardianBoundaryDisplay) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GuardianBoundaryDisplay::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GuardianBoundaryDisplay::*)()>(&GlobalNamespace::GuardianBoundaryDisplay::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GuardianBoundaryDisplay*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GuardianBoundaryDisplay::RefreshDisplay
// Il2CppName: RefreshDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GuardianBoundaryDisplay::*)()>(&GlobalNamespace::GuardianBoundaryDisplay::RefreshDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GuardianBoundaryDisplay*), "RefreshDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GuardianBoundaryDisplay::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
