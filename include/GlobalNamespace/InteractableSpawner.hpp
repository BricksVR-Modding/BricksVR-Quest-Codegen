// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: QuickInteractable
#include "GlobalNamespace/QuickInteractable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRInteractionManager
  class XRInteractionManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: QuickInteractor
  class QuickInteractor;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: InteractableSpawner
  class InteractableSpawner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::InteractableSpawner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::InteractableSpawner*, "", "InteractableSpawner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: InteractableSpawner
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableSpawner : public ::GlobalNamespace::QuickInteractable {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractionManager interactionManager
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* interactionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    // public System.String brickPrefabName
    // Size: 0x8
    // Offset: 0x20
    ::StringW brickPrefabName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 materialId
    // Size: 0x4
    // Offset: 0x28
    int materialId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: materialId and: inGameMaterial
    char __padding2[0x4] = {};
    // public UnityEngine.Material inGameMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* inGameMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.GameObject model
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* model;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector3 _brickRotation
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 brickRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Int32 Color
    static int _get_Color();
    // Set static field: static private readonly System.Int32 Color
    static void _set_Color(int value);
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRInteractionManager interactionManager
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_interactionManager();
    // Get instance field reference: public System.String brickPrefabName
    ::StringW& dyn_brickPrefabName();
    // Get instance field reference: public System.Int32 materialId
    int& dyn_materialId();
    // Get instance field reference: public UnityEngine.Material inGameMaterial
    ::UnityEngine::Material*& dyn_inGameMaterial();
    // Get instance field reference: public UnityEngine.GameObject model
    ::UnityEngine::GameObject*& dyn_model();
    // Get instance field reference: private UnityEngine.Vector3 _brickRotation
    ::UnityEngine::Vector3& dyn__brickRotation();
    // private System.Void Start()
    // Offset: 0x10AAEA8
    void Start();
    // public UnityEngine.GameObject CreateBrick()
    // Offset: 0x10AB00C
    ::UnityEngine::GameObject* CreateBrick();
    // public System.Void .ctor()
    // Offset: 0x10AB1C8
    // Implemented from: QuickInteractable
    // Base method: System.Void QuickInteractable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractableSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableSpawner*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x10AB1D0
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
    // public override System.Void Interact(QuickInteractor interactor)
    // Offset: 0x10AB008
    // Implemented from: QuickInteractable
    // Base method: System.Void QuickInteractable::Interact(QuickInteractor interactor)
    void Interact(::GlobalNamespace::QuickInteractor* interactor);
  }; // InteractableSpawner
  #pragma pack(pop)
  static check_size<sizeof(InteractableSpawner), 64 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_InteractableSpawnerSizeCheck;
  static_assert(sizeof(InteractableSpawner) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InteractableSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractableSpawner::*)()>(&GlobalNamespace::InteractableSpawner::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractableSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractableSpawner::CreateBrick
// Il2CppName: CreateBrick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::InteractableSpawner::*)()>(&GlobalNamespace::InteractableSpawner::CreateBrick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractableSpawner*), "CreateBrick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractableSpawner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::InteractableSpawner::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::InteractableSpawner::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractableSpawner*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InteractableSpawner::Interact
// Il2CppName: Interact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InteractableSpawner::*)(::GlobalNamespace::QuickInteractor*)>(&GlobalNamespace::InteractableSpawner::Interact)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("", "QuickInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InteractableSpawner*), "Interact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
