// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Steamworks.Data.DurationControl_t
#include "Steamworks/Data/DurationControl_t.hpp"
// Completed includes
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: DurationControl
  struct DurationControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::DurationControl, "Steamworks.Data", "DurationControl");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.DurationControl
  // [TokenAttribute] Offset: FFFFFFFF
  struct DurationControl/*, public ::System::ValueType*/ {
    public:
    public:
    // Steamworks.Data.DurationControl_t _inner
    // Size: 0x20
    // Offset: 0x0
    ::Steamworks::Data::DurationControl_t inner;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::DurationControl_t) == 0x20);
    public:
    // Creating value type constructor for type: DurationControl
    constexpr DurationControl(::Steamworks::Data::DurationControl_t inner_ = {}) noexcept : inner{inner_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Steamworks::Data::DurationControl_t
    constexpr operator ::Steamworks::Data::DurationControl_t() const noexcept {
      return inner;
    }
    // Get instance field reference: Steamworks.Data.DurationControl_t _inner
    ::Steamworks::Data::DurationControl_t& dyn__inner();
  }; // Steamworks.Data.DurationControl
  #pragma pack(pop)
  static check_size<sizeof(DurationControl), 0 + sizeof(::Steamworks::Data::DurationControl_t)> __Steamworks_Data_DurationControlSizeCheck;
  static_assert(sizeof(DurationControl) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
