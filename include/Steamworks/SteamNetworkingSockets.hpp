// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.SteamSharedClass`1
#include "Steamworks/SteamSharedClass_1.hpp"
// Including type: Steamworks.Data.Connection
#include "Steamworks/Data/Connection.hpp"
// Including type: Steamworks.Data.ConnectionInfo
#include "Steamworks/Data/ConnectionInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SocketManager
  class SocketManager;
  // Forward declaring type: ConnectionManager
  class ConnectionManager;
  // Forward declaring type: ISteamNetworkingSockets
  class ISteamNetworkingSockets;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: Steamworks::Data
namespace Steamworks::Data {
  // Forward declaring type: SteamNetConnectionStatusChangedCallback_t
  struct SteamNetConnectionStatusChangedCallback_t;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SteamNetworkingSockets
  class SteamNetworkingSockets;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::SteamNetworkingSockets);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::SteamNetworkingSockets*, "Steamworks", "SteamNetworkingSockets");
// Type namespace: Steamworks
namespace Steamworks {
  // WARNING Size may be invalid!
  // Autogenerated type: Steamworks.SteamNetworkingSockets
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamNetworkingSockets : public ::Steamworks::SteamSharedClass_1<::Steamworks::SteamNetworkingSockets*> {
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt32,Steamworks.SocketManager> SocketInterfaces
    static ::System::Collections::Generic::Dictionary_2<uint, ::Steamworks::SocketManager*>* _get_SocketInterfaces();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt32,Steamworks.SocketManager> SocketInterfaces
    static void _set_SocketInterfaces(::System::Collections::Generic::Dictionary_2<uint, ::Steamworks::SocketManager*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt32,Steamworks.ConnectionManager> ConnectionInterfaces
    static ::System::Collections::Generic::Dictionary_2<uint, ::Steamworks::ConnectionManager*>* _get_ConnectionInterfaces();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.UInt32,Steamworks.ConnectionManager> ConnectionInterfaces
    static void _set_ConnectionInterfaces(::System::Collections::Generic::Dictionary_2<uint, ::Steamworks::ConnectionManager*>* value);
    // [DebuggerBrowsableAttribute] Offset: 0x71E878
    // Get static field: static private System.Action`2<Steamworks.Data.Connection,Steamworks.Data.ConnectionInfo> OnConnectionStatusChanged
    static ::System::Action_2<::Steamworks::Data::Connection, ::Steamworks::Data::ConnectionInfo>* _get_OnConnectionStatusChanged();
    // Set static field: static private System.Action`2<Steamworks.Data.Connection,Steamworks.Data.ConnectionInfo> OnConnectionStatusChanged
    static void _set_OnConnectionStatusChanged(::System::Action_2<::Steamworks::Data::Connection, ::Steamworks::Data::ConnectionInfo>* value);
    // static Steamworks.ISteamNetworkingSockets get_Internal()
    // Offset: 0xE391F0
    static ::Steamworks::ISteamNetworkingSockets* get_Internal();
    // static private System.Void .cctor()
    // Offset: 0xE3CF58
    static void _cctor();
    // static Steamworks.SocketManager GetSocketManager(System.UInt32 id)
    // Offset: 0xE3CB54
    static ::Steamworks::SocketManager* GetSocketManager(uint id);
    // static Steamworks.ConnectionManager GetConnectionManager(System.UInt32 id)
    // Offset: 0xE3CC68
    static ::Steamworks::ConnectionManager* GetConnectionManager(uint id);
    // System.Void InstallEvents(System.Boolean server)
    // Offset: 0xE3CAAC
    void InstallEvents(bool server);
    // static private System.Void ConnectionStatusChanged(Steamworks.Data.SteamNetConnectionStatusChangedCallback_t data)
    // Offset: 0xE3CD40
    static void ConnectionStatusChanged(::Steamworks::Data::SteamNetConnectionStatusChangedCallback_t data);
    // public System.Void .ctor()
    // Offset: 0xE3CF08
    // Implemented from: Steamworks.SteamSharedClass`1
    // Base method: System.Void SteamSharedClass_1::.ctor()
    // Base method: System.Void SteamClass::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamNetworkingSockets* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::SteamNetworkingSockets::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamNetworkingSockets*, creationType>()));
    }
    // override System.Void InitializeInterface(System.Boolean server)
    // Offset: 0xE3CA18
    // Implemented from: Steamworks.SteamSharedClass`1
    // Base method: System.Void SteamSharedClass_1::InitializeInterface(System.Boolean server)
    void InitializeInterface(bool server);
  }; // Steamworks.SteamNetworkingSockets
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::get_Internal
// Il2CppName: get_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::ISteamNetworkingSockets* (*)()>(&Steamworks::SteamNetworkingSockets::get_Internal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingSockets*), "get_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::SteamNetworkingSockets::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingSockets*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::GetSocketManager
// Il2CppName: GetSocketManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::SocketManager* (*)(uint)>(&Steamworks::SteamNetworkingSockets::GetSocketManager)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingSockets*), "GetSocketManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::GetConnectionManager
// Il2CppName: GetConnectionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::ConnectionManager* (*)(uint)>(&Steamworks::SteamNetworkingSockets::GetConnectionManager)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingSockets*), "GetConnectionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::InstallEvents
// Il2CppName: InstallEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SteamNetworkingSockets::*)(bool)>(&Steamworks::SteamNetworkingSockets::InstallEvents)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingSockets*), "InstallEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::ConnectionStatusChanged
// Il2CppName: ConnectionStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Steamworks::Data::SteamNetConnectionStatusChangedCallback_t)>(&Steamworks::SteamNetworkingSockets::ConnectionStatusChanged)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamNetConnectionStatusChangedCallback_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingSockets*), "ConnectionStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::SteamNetworkingSockets::InitializeInterface
// Il2CppName: InitializeInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SteamNetworkingSockets::*)(bool)>(&Steamworks::SteamNetworkingSockets::InitializeInterface)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamNetworkingSockets*), "InitializeInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server});
  }
};
