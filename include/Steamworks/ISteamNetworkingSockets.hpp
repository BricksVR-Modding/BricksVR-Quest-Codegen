// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.SteamInterface
#include "Steamworks/SteamInterface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: Result
  struct Result;
}
// Forward declaring namespace: Steamworks::Data
namespace Steamworks::Data {
  // Forward declaring type: Connection
  struct Connection;
  // Forward declaring type: HSteamNetPollGroup
  struct HSteamNetPollGroup;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: ISteamNetworkingSockets
  class ISteamNetworkingSockets;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::ISteamNetworkingSockets);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::ISteamNetworkingSockets*, "Steamworks", "ISteamNetworkingSockets");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.ISteamNetworkingSockets
  // [TokenAttribute] Offset: FFFFFFFF
  class ISteamNetworkingSockets : public ::Steamworks::SteamInterface {
    public:
    // System.Void .ctor(System.Boolean IsGameServer)
    // Offset: 0x5BDB50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ISteamNetworkingSockets* New_ctor(bool IsGameServer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::ISteamNetworkingSockets::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ISteamNetworkingSockets*, creationType>(IsGameServer)));
    }
    // static System.IntPtr SteamAPI_SteamNetworkingSockets_v008()
    // Offset: 0x5BEB30
    static ::System::IntPtr SteamAPI_SteamNetworkingSockets_v008();
    // static System.IntPtr SteamAPI_SteamGameServerNetworkingSockets_v008()
    // Offset: 0x5BEAC0
    static ::System::IntPtr SteamAPI_SteamGameServerNetworkingSockets_v008();
    // static private Steamworks.Result _AcceptConnection(System.IntPtr self, Steamworks.Data.Connection hConn)
    // Offset: 0x5BEC40
    static ::Steamworks::Result _AcceptConnection(::System::IntPtr self, ::Steamworks::Data::Connection hConn);
    // Steamworks.Result AcceptConnection(Steamworks.Data.Connection hConn)
    // Offset: 0x5BE960
    ::Steamworks::Result AcceptConnection(::Steamworks::Data::Connection hConn);
    // static private System.Boolean _CloseConnection(System.IntPtr self, Steamworks.Data.Connection hPeer, System.Int32 nReason, System.String pszDebug, System.Boolean bEnableLinger)
    // Offset: 0x5BECD0
    static bool _CloseConnection(::System::IntPtr self, ::Steamworks::Data::Connection hPeer, int nReason, ::StringW pszDebug, bool bEnableLinger);
    // System.Boolean CloseConnection(Steamworks.Data.Connection hPeer, System.Int32 nReason, System.String pszDebug, System.Boolean bEnableLinger)
    // Offset: 0x5BE9F0
    bool CloseConnection(::Steamworks::Data::Connection hPeer, int nReason, ::StringW pszDebug, bool bEnableLinger);
    // static private System.Boolean _SetConnectionPollGroup(System.IntPtr self, Steamworks.Data.Connection hConn, Steamworks.Data.HSteamNetPollGroup hPollGroup)
    // Offset: 0x5BEDA0
    static bool _SetConnectionPollGroup(::System::IntPtr self, ::Steamworks::Data::Connection hConn, ::Steamworks::Data::HSteamNetPollGroup hPollGroup);
    // System.Boolean SetConnectionPollGroup(Steamworks.Data.Connection hConn, Steamworks.Data.HSteamNetPollGroup hPollGroup)
    // Offset: 0x5BEBA0
    bool SetConnectionPollGroup(::Steamworks::Data::Connection hConn, ::Steamworks::Data::HSteamNetPollGroup hPollGroup);
    // public override System.IntPtr GetUserInterfacePointer()
    // Offset: 0x5BEB30
    // Implemented from: Steamworks.SteamInterface
    // Base method: System.IntPtr SteamInterface::GetUserInterfacePointer()
    ::System::IntPtr GetUserInterfacePointer();
    // public override System.IntPtr GetServerInterfacePointer()
    // Offset: 0x5BEAC0
    // Implemented from: Steamworks.SteamInterface
    // Base method: System.IntPtr SteamInterface::GetServerInterfacePointer()
    ::System::IntPtr GetServerInterfacePointer();
  }; // Steamworks.ISteamNetworkingSockets
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::SteamAPI_SteamNetworkingSockets_v008
// Il2CppName: SteamAPI_SteamNetworkingSockets_v008
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Steamworks::ISteamNetworkingSockets::SteamAPI_SteamNetworkingSockets_v008)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "SteamAPI_SteamNetworkingSockets_v008", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::SteamAPI_SteamGameServerNetworkingSockets_v008
// Il2CppName: SteamAPI_SteamGameServerNetworkingSockets_v008
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Steamworks::ISteamNetworkingSockets::SteamAPI_SteamGameServerNetworkingSockets_v008)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "SteamAPI_SteamGameServerNetworkingSockets_v008", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::_AcceptConnection
// Il2CppName: _AcceptConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::Result (*)(::System::IntPtr, ::Steamworks::Data::Connection)>(&Steamworks::ISteamNetworkingSockets::_AcceptConnection)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* hConn = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "_AcceptConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, hConn});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::AcceptConnection
// Il2CppName: AcceptConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::Result (Steamworks::ISteamNetworkingSockets::*)(::Steamworks::Data::Connection)>(&Steamworks::ISteamNetworkingSockets::AcceptConnection)> {
  static const MethodInfo* get() {
    static auto* hConn = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "AcceptConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hConn});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::_CloseConnection
// Il2CppName: _CloseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::Steamworks::Data::Connection, int, ::StringW, bool)>(&Steamworks::ISteamNetworkingSockets::_CloseConnection)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* hPeer = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* nReason = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pszDebug = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bEnableLinger = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "_CloseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, hPeer, nReason, pszDebug, bEnableLinger});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::CloseConnection
// Il2CppName: CloseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Steamworks::ISteamNetworkingSockets::*)(::Steamworks::Data::Connection, int, ::StringW, bool)>(&Steamworks::ISteamNetworkingSockets::CloseConnection)> {
  static const MethodInfo* get() {
    static auto* hPeer = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* nReason = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pszDebug = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bEnableLinger = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "CloseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hPeer, nReason, pszDebug, bEnableLinger});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::_SetConnectionPollGroup
// Il2CppName: _SetConnectionPollGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::Steamworks::Data::Connection, ::Steamworks::Data::HSteamNetPollGroup)>(&Steamworks::ISteamNetworkingSockets::_SetConnectionPollGroup)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* hConn = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* hPollGroup = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "HSteamNetPollGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "_SetConnectionPollGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, hConn, hPollGroup});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::SetConnectionPollGroup
// Il2CppName: SetConnectionPollGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Steamworks::ISteamNetworkingSockets::*)(::Steamworks::Data::Connection, ::Steamworks::Data::HSteamNetPollGroup)>(&Steamworks::ISteamNetworkingSockets::SetConnectionPollGroup)> {
  static const MethodInfo* get() {
    static auto* hConn = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "Connection")->byval_arg;
    static auto* hPollGroup = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "HSteamNetPollGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "SetConnectionPollGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hConn, hPollGroup});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::GetUserInterfacePointer
// Il2CppName: GetUserInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::ISteamNetworkingSockets::*)()>(&Steamworks::ISteamNetworkingSockets::GetUserInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "GetUserInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingSockets::GetServerInterfacePointer
// Il2CppName: GetServerInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::ISteamNetworkingSockets::*)()>(&Steamworks::ISteamNetworkingSockets::GetServerInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingSockets*), "GetServerInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
