// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.ProceduralImage.ProceduralImageModifier
#include "UnityEngine/UI/ProceduralImage/ProceduralImageModifier.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: ProceduralImageEdge because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OnlyOneEdgeModifier
  class OnlyOneEdgeModifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OnlyOneEdgeModifier);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OnlyOneEdgeModifier*, "", "OnlyOneEdgeModifier");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: OnlyOneEdgeModifier
  // [TokenAttribute] Offset: FFFFFFFF
  // [ModifierID] Offset: EFB30
  class OnlyOneEdgeModifier : public ::UnityEngine::UI::ProceduralImage::ProceduralImageModifier {
    public:
    // Nested type: ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge
    struct ProceduralImageEdge;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OnlyOneEdgeModifier/ProceduralImageEdge
    // [TokenAttribute] Offset: FFFFFFFF
    struct ProceduralImageEdge/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ProceduralImageEdge
      constexpr ProceduralImageEdge(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OnlyOneEdgeModifier/ProceduralImageEdge Top
      static constexpr const int Top = 0;
      // Get static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Top
      static ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge _get_Top();
      // Set static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Top
      static void _set_Top(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge value);
      // static field const value: static public OnlyOneEdgeModifier/ProceduralImageEdge Bottom
      static constexpr const int Bottom = 1;
      // Get static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Bottom
      static ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge _get_Bottom();
      // Set static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Bottom
      static void _set_Bottom(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge value);
      // static field const value: static public OnlyOneEdgeModifier/ProceduralImageEdge Left
      static constexpr const int Left = 2;
      // Get static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Left
      static ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge _get_Left();
      // Set static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Left
      static void _set_Left(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge value);
      // static field const value: static public OnlyOneEdgeModifier/ProceduralImageEdge Right
      static constexpr const int Right = 3;
      // Get static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Right
      static ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge _get_Right();
      // Set static field: static public OnlyOneEdgeModifier/ProceduralImageEdge Right
      static void _set_Right(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // OnlyOneEdgeModifier/ProceduralImageEdge
    #pragma pack(pop)
    static check_size<sizeof(OnlyOneEdgeModifier::ProceduralImageEdge), 0 + sizeof(int)> __GlobalNamespace_OnlyOneEdgeModifier_ProceduralImageEdgeSizeCheck;
    static_assert(sizeof(OnlyOneEdgeModifier::ProceduralImageEdge) == 0x4);
    public:
    // private System.Single radius
    // Size: 0x4
    // Offset: 0x20
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OnlyOneEdgeModifier/ProceduralImageEdge side
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge side;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge) == 0x4);
    public:
    // Get instance field reference: private System.Single radius
    [[deprecated]] float& dyn_radius();
    // Get instance field reference: private OnlyOneEdgeModifier/ProceduralImageEdge side
    [[deprecated]] ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge& dyn_side();
    // public System.Single get_Radius()
    // Offset: 0x30C5C0
    float get_Radius();
    // public System.Void set_Radius(System.Single value)
    // Offset: 0x7D3270
    void set_Radius(float value);
    // public OnlyOneEdgeModifier/ProceduralImageEdge get_Side()
    // Offset: 0x2512C0
    ::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge get_Side();
    // public System.Void set_Side(OnlyOneEdgeModifier/ProceduralImageEdge value)
    // Offset: 0x2F3080
    void set_Side(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge value);
    // public System.Void .ctor()
    // Offset: 0x4D3750
    // Implemented from: UnityEngine.UI.ProceduralImage.ProceduralImageModifier
    // Base method: System.Void ProceduralImageModifier::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OnlyOneEdgeModifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnlyOneEdgeModifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OnlyOneEdgeModifier*, creationType>()));
    }
    // public override UnityEngine.Vector4 CalculateRadius(UnityEngine.Rect imageRect)
    // Offset: 0x7D31C0
    // Implemented from: UnityEngine.UI.ProceduralImage.ProceduralImageModifier
    // Base method: UnityEngine.Vector4 ProceduralImageModifier::CalculateRadius(UnityEngine.Rect imageRect)
    ::UnityEngine::Vector4 CalculateRadius(::UnityEngine::Rect imageRect);
  }; // OnlyOneEdgeModifier
  #pragma pack(pop)
  static check_size<sizeof(OnlyOneEdgeModifier), 36 + sizeof(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge)> __GlobalNamespace_OnlyOneEdgeModifierSizeCheck;
  static_assert(sizeof(OnlyOneEdgeModifier) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge, "", "OnlyOneEdgeModifier/ProceduralImageEdge");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OnlyOneEdgeModifier::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OnlyOneEdgeModifier::*)()>(&GlobalNamespace::OnlyOneEdgeModifier::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OnlyOneEdgeModifier*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OnlyOneEdgeModifier::set_Radius
// Il2CppName: set_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OnlyOneEdgeModifier::*)(float)>(&GlobalNamespace::OnlyOneEdgeModifier::set_Radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OnlyOneEdgeModifier*), "set_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OnlyOneEdgeModifier::get_Side
// Il2CppName: get_Side
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge (GlobalNamespace::OnlyOneEdgeModifier::*)()>(&GlobalNamespace::OnlyOneEdgeModifier::get_Side)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OnlyOneEdgeModifier*), "get_Side", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OnlyOneEdgeModifier::set_Side
// Il2CppName: set_Side
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OnlyOneEdgeModifier::*)(::GlobalNamespace::OnlyOneEdgeModifier::ProceduralImageEdge)>(&GlobalNamespace::OnlyOneEdgeModifier::set_Side)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OnlyOneEdgeModifier/ProceduralImageEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OnlyOneEdgeModifier*), "set_Side", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OnlyOneEdgeModifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OnlyOneEdgeModifier::CalculateRadius
// Il2CppName: CalculateRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (GlobalNamespace::OnlyOneEdgeModifier::*)(::UnityEngine::Rect)>(&GlobalNamespace::OnlyOneEdgeModifier::CalculateRadius)> {
  static const MethodInfo* get() {
    static auto* imageRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OnlyOneEdgeModifier*), "CalculateRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imageRect});
  }
};
