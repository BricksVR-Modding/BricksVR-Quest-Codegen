// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: TimelineEntry`1<T>
  template<typename T>
  class TimelineEntry_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::TimelineEntry_1, "Normal.Realtime", "TimelineEntry`1");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.TimelineEntry`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class TimelineEntry_1 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Double time
    // Size: 0x8
    // Offset: 0x0
    double time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public T value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T value;
    // private Normal.Realtime.TimelineEntry`1<T> <prev>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::Normal::Realtime::TimelineEntry_1<T>* prev;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::TimelineEntry_1<T>*) == 0x8);
    // private Normal.Realtime.TimelineEntry`1<T> <next>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::Normal::Realtime::TimelineEntry_1<T>* next;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::TimelineEntry_1<T>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: public System.Double time
    double& dyn_time() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::dyn_time");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
      return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T value
    T& dyn_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::dyn_value");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Normal.Realtime.TimelineEntry`1<T> <prev>k__BackingField
    ::Normal::Realtime::TimelineEntry_1<T>*& dyn_$prev$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::dyn_$prev$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<prev>k__BackingField"))->offset;
      return *reinterpret_cast<::Normal::Realtime::TimelineEntry_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Normal.Realtime.TimelineEntry`1<T> <next>k__BackingField
    ::Normal::Realtime::TimelineEntry_1<T>*& dyn_$next$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::dyn_$next$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<next>k__BackingField"))->offset;
      return *reinterpret_cast<::Normal::Realtime::TimelineEntry_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public Normal.Realtime.TimelineEntry`1<T> get_prev()
    // Offset: 0xFFFFFFFF
    ::Normal::Realtime::TimelineEntry_1<T>* get_prev() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::get_prev");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prev", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Normal::Realtime::TimelineEntry_1<T>*, false>(this, ___internal__method);
    }
    // System.Void set_prev(Normal.Realtime.TimelineEntry`1<T> value)
    // Offset: 0xFFFFFFFF
    void set_prev(::Normal::Realtime::TimelineEntry_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::set_prev");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_prev", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public Normal.Realtime.TimelineEntry`1<T> get_next()
    // Offset: 0xFFFFFFFF
    ::Normal::Realtime::TimelineEntry_1<T>* get_next() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::get_next");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Normal::Realtime::TimelineEntry_1<T>*, false>(this, ___internal__method);
    }
    // System.Void set_next(Normal.Realtime.TimelineEntry`1<T> value)
    // Offset: 0xFFFFFFFF
    void set_next(::Normal::Realtime::TimelineEntry_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::set_next");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Double time, T value)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimelineEntry_1<T>* New_ctor(double time, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimelineEntry_1<T>*, creationType>(time, value)));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimelineEntry_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::TimelineEntry_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimelineEntry_1<T>*, creationType>()));
    }
  }; // Normal.Realtime.TimelineEntry`1
  // Could not write size check! Type: Normal.Realtime.TimelineEntry`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
