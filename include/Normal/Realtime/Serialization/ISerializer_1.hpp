// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Serialization.ISerializer
#include "Normal/Realtime/Serialization/ISerializer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: ISerializer`1<T>
  template<typename T>
  class ISerializer_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::Serialization::ISerializer_1, "Normal.Realtime.Serialization", "ISerializer`1");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.Serialization.ISerializer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ISerializer_1/*, public ::Normal::Realtime::Serialization::ISerializer*/ {
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::ISerializer
    operator ::Normal::Realtime::Serialization::ISerializer() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::ISerializer*>(this);
    }
    // public System.Int32 Length(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Length(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::ISerializer_1::Length");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::Serialization::ISerializer_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
    }
    // public System.Void Write(ref Normal.Realtime.Serialization.WriteStream stream, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Write(ByRef<::Normal::Realtime::Serialization::WriteStream*> stream, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::ISerializer_1::Write");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::Serialization::ISerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(stream), value);
    }
    // public System.Void Read(ref Normal.Realtime.Serialization.ReadStream stream, ref T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Read(ByRef<::Normal::Realtime::Serialization::ReadStream*> stream, ByRef<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::ISerializer_1::Read");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::Serialization::ISerializer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(stream), byref(value));
    }
  }; // Normal.Realtime.Serialization.ISerializer`1
  // Could not write size check! Type: Normal.Realtime.Serialization.ISerializer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
