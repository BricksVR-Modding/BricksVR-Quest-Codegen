// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Brick because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickData
  class BrickData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickData*, "", "BrickData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BrickData
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickData : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::BrickData::Brick
    struct Brick;
    // Nested type: ::GlobalNamespace::BrickData::$$c__DisplayClass2_0
    class $$c__DisplayClass2_0;
    // Nested type: ::GlobalNamespace::BrickData::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    // Nested type: ::GlobalNamespace::BrickData::$$c__DisplayClass4_0
    class $$c__DisplayClass4_0;
    // Size: 0x44
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BrickData/Brick
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct Brick/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.String PrefabName
      // Size: 0x8
      // Offset: 0x0
      ::StringW PrefabName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly System.String DisplayName
      // Size: 0x8
      // Offset: 0x8
      ::StringW DisplayName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly System.String CompleteMeshPath
      // Size: 0x8
      // Offset: 0x10
      ::StringW CompleteMeshPath;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly System.String Category
      // Size: 0x8
      // Offset: 0x18
      ::StringW Category;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly UnityEngine.Mesh Mesh
      // Size: 0x8
      // Offset: 0x20
      ::UnityEngine::Mesh* Mesh;
      // Field size check
      static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
      // public readonly System.Single UIScaleModifier
      // Size: 0x4
      // Offset: 0x28
      float UIScaleModifier;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public readonly UnityEngine.Vector3 Rotation
      // Size: 0xC
      // Offset: 0x2C
      ::UnityEngine::Vector3 Rotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public readonly UnityEngine.Vector3 HandSpawnerPositionOffset
      // Size: 0xC
      // Offset: 0x38
      ::UnityEngine::Vector3 HandSpawnerPositionOffset;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      public:
      // Creating value type constructor for type: Brick
      constexpr Brick(::StringW PrefabName_ = {}, ::StringW DisplayName_ = {}, ::StringW CompleteMeshPath_ = {}, ::StringW Category_ = {}, ::UnityEngine::Mesh* Mesh_ = {}, float UIScaleModifier_ = {}, ::UnityEngine::Vector3 Rotation_ = {}, ::UnityEngine::Vector3 HandSpawnerPositionOffset_ = {}) noexcept : PrefabName{PrefabName_}, DisplayName{DisplayName_}, CompleteMeshPath{CompleteMeshPath_}, Category{Category_}, Mesh{Mesh_}, UIScaleModifier{UIScaleModifier_}, Rotation{Rotation_}, HandSpawnerPositionOffset{HandSpawnerPositionOffset_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.String PrefabName
      [[deprecated]] ::StringW& dyn_PrefabName();
      // Get instance field reference: public readonly System.String DisplayName
      [[deprecated]] ::StringW& dyn_DisplayName();
      // Get instance field reference: public readonly System.String CompleteMeshPath
      [[deprecated]] ::StringW& dyn_CompleteMeshPath();
      // Get instance field reference: public readonly System.String Category
      [[deprecated]] ::StringW& dyn_Category();
      // Get instance field reference: public readonly UnityEngine.Mesh Mesh
      [[deprecated]] ::UnityEngine::Mesh*& dyn_Mesh();
      // Get instance field reference: public readonly System.Single UIScaleModifier
      [[deprecated]] float& dyn_UIScaleModifier();
      // Get instance field reference: public readonly UnityEngine.Vector3 Rotation
      [[deprecated]] ::UnityEngine::Vector3& dyn_Rotation();
      // Get instance field reference: public readonly UnityEngine.Vector3 HandSpawnerPositionOffset
      [[deprecated]] ::UnityEngine::Vector3& dyn_HandSpawnerPositionOffset();
      // public System.Void .ctor(System.String prefabName, System.String displayName, System.String category, System.String completeMeshPath, System.Single uiScaleModifier, System.Nullable`1<UnityEngine.Vector3> rotation, System.Nullable`1<UnityEngine.Vector3> handSpawnerPositionOffset)
      // Offset: 0x6F54F0
      Brick(::StringW prefabName, ::StringW displayName, ::StringW category, ::StringW completeMeshPath, float uiScaleModifier, ::System::Nullable_1<::UnityEngine::Vector3> rotation, ::System::Nullable_1<::UnityEngine::Vector3> handSpawnerPositionOffset);
    }; // BrickData/Brick
    #pragma pack(pop)
    static check_size<sizeof(BrickData::Brick), 56 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_BrickData_BrickSizeCheck;
    static_assert(sizeof(BrickData::Brick) == 0x44);
    // Get static field: static private readonly System.Collections.Generic.List`1<BrickData/Brick> Bricks
    static ::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>* _get_Bricks();
    // Set static field: static private readonly System.Collections.Generic.List`1<BrickData/Brick> Bricks
    static void _set_Bricks(::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>* value);
    // static private System.Void .cctor()
    // Offset: 0x6E9E30
    static void _cctor();
    // static public System.Collections.Generic.List`1<BrickData/Brick> AllBricks()
    // Offset: 0x6E98E0
    static ::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>* AllBricks();
    // static public System.Collections.Generic.List`1<BrickData/Brick> BricksForCategory(System.String category)
    // Offset: 0x6E9CA0
    static ::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>* BricksForCategory(::StringW category);
    // static public BrickData/Brick BrickByPrefabName(System.String prefabName)
    // Offset: 0x6E9B40
    static ::GlobalNamespace::BrickData::Brick BrickByPrefabName(::StringW prefabName);
    // static public BrickData/Brick BrickByCompleteMeshName(System.String meshName)
    // Offset: 0x6E99D0
    static ::GlobalNamespace::BrickData::Brick BrickByCompleteMeshName(::StringW meshName);
    // static private System.Void SortResults(System.Collections.Generic.List`1<BrickData/Brick> bricks)
    // Offset: 0x6E9DB0
    static void SortResults(::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>* bricks);
    // static private System.Int32 BrickCompare(BrickData/Brick a, BrickData/Brick b)
    // Offset: 0x6E9C70
    static int BrickCompare(::GlobalNamespace::BrickData::Brick a, ::GlobalNamespace::BrickData::Brick b);
  }; // BrickData
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickData::Brick, "", "BrickData/Brick");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickData::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BrickData::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickData*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickData::AllBricks
// Il2CppName: AllBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>* (*)()>(&GlobalNamespace::BrickData::AllBricks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickData*), "AllBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickData::BricksForCategory
// Il2CppName: BricksForCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>* (*)(::StringW)>(&GlobalNamespace::BrickData::BricksForCategory)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickData*), "BricksForCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickData::BrickByPrefabName
// Il2CppName: BrickByPrefabName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BrickData::Brick (*)(::StringW)>(&GlobalNamespace::BrickData::BrickByPrefabName)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickData*), "BrickByPrefabName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickData::BrickByCompleteMeshName
// Il2CppName: BrickByCompleteMeshName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BrickData::Brick (*)(::StringW)>(&GlobalNamespace::BrickData::BrickByCompleteMeshName)> {
  static const MethodInfo* get() {
    static auto* meshName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickData*), "BrickByCompleteMeshName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickData::SortResults
// Il2CppName: SortResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::GlobalNamespace::BrickData::Brick>*)>(&GlobalNamespace::BrickData::SortResults)> {
  static const MethodInfo* get() {
    static auto* bricks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BrickData/Brick")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickData*), "SortResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bricks});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickData::BrickCompare
// Il2CppName: BrickCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::GlobalNamespace::BrickData::Brick, ::GlobalNamespace::BrickData::Brick)>(&GlobalNamespace::BrickData::BrickCompare)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("", "BrickData/Brick")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("", "BrickData/Brick")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickData*), "BrickCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
