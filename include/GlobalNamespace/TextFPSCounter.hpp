// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TextFPSCounter
  class TextFPSCounter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TextFPSCounter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TextFPSCounter*, "", "TextFPSCounter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: TextFPSCounter
  // [TokenAttribute] Offset: FFFFFFFF
  class TextFPSCounter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public TMPro.TextMeshProUGUI textDisplay
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshProUGUI* textDisplay;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.String> _fpsToUIStringMap
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<int, ::StringW>* fpsToUIStringMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> _last10Times
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<int>* last10Times;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public TMPro.TextMeshProUGUI textDisplay
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_textDisplay();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.String> _fpsToUIStringMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::StringW>*& dyn__fpsToUIStringMap();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> _last10Times
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__last10Times();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextFPSCounter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextFPSCounter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextFPSCounter*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x6D05A0
    void Start();
    // private System.Void Update()
    // Offset: 0x6D0630
    void Update();
  }; // TextFPSCounter
  #pragma pack(pop)
  static check_size<sizeof(TextFPSCounter), 40 + sizeof(::System::Collections::Generic::List_1<int>*)> __GlobalNamespace_TextFPSCounterSizeCheck;
  static_assert(sizeof(TextFPSCounter) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TextFPSCounter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TextFPSCounter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TextFPSCounter::*)()>(&GlobalNamespace::TextFPSCounter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextFPSCounter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextFPSCounter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TextFPSCounter::*)()>(&GlobalNamespace::TextFPSCounter::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextFPSCounter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
