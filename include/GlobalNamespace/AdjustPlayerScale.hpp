// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: Realtime
  class Realtime;
  // Forward declaring type: RealtimeAvatarManager
  class RealtimeAvatarManager;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: JoystickLocomotion
  class JoystickLocomotion;
  // Forward declaring type: ChunkedRenderer
  class ChunkedRenderer;
  // Forward declaring type: MovementVignette
  class MovementVignette;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRRig
  class XRRig;
  // Forward declaring type: XRInteractorLineVisual
  class XRInteractorLineVisual;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AdjustPlayerScale
  class AdjustPlayerScale;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AdjustPlayerScale);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AdjustPlayerScale*, "", "AdjustPlayerScale");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: AdjustPlayerScale
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjustPlayerScale : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public Normal.Realtime.Realtime realtime
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Realtime* realtime;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Realtime*) == 0x8);
    // public Normal.Realtime.RealtimeAvatarManager realtimeAvatarManager
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::RealtimeAvatarManager* realtimeAvatarManager;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeAvatarManager*) == 0x8);
    // public JoystickLocomotion joystickLocomotion
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::JoystickLocomotion* joystickLocomotion;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::JoystickLocomotion*) == 0x8);
    // public UnityEngine.Camera headCamera
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Camera* headCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.XR.Interaction.Toolkit.XRRig xrRig
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::XR::Interaction::Toolkit::XRRig* xrRig;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRig*) == 0x8);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractorLineVisual leftMenuLaser
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual* leftMenuLaser;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*) == 0x8);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractorLineVisual rightMenuLaser
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual* rightMenuLaser;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*) == 0x8);
    // public UnityEngine.Transform brickPickerMenuTransform
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* brickPickerMenuTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rigTransformToScale
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* rigTransformToScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public ChunkedRenderer chunkedRenderer
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::ChunkedRenderer* chunkedRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ChunkedRenderer*) == 0x8);
    // public MovementVignette movementVignette
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::MovementVignette* movementVignette;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MovementVignette*) == 0x8);
    // private System.Single _scale
    // Size: 0x4
    // Offset: 0x70
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _defaultMenuLaserWidth
    // Size: 0x4
    // Offset: 0x74
    float defaultMenuLaserWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _defaultNearClipPlane
    // Size: 0x4
    // Offset: 0x78
    float defaultNearClipPlane;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _defaultMenuScale
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 defaultMenuScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Single[] SliderValueToScalePercentages
    static ::ArrayW<float> _get_SliderValueToScalePercentages();
    // Set static field: static private readonly System.Single[] SliderValueToScalePercentages
    static void _set_SliderValueToScalePercentages(::ArrayW<float> value);
    // Get instance field reference: public Normal.Realtime.Realtime realtime
    ::Normal::Realtime::Realtime*& dyn_realtime();
    // Get instance field reference: public Normal.Realtime.RealtimeAvatarManager realtimeAvatarManager
    ::Normal::Realtime::RealtimeAvatarManager*& dyn_realtimeAvatarManager();
    // Get instance field reference: public JoystickLocomotion joystickLocomotion
    ::GlobalNamespace::JoystickLocomotion*& dyn_joystickLocomotion();
    // Get instance field reference: public UnityEngine.Camera headCamera
    ::UnityEngine::Camera*& dyn_headCamera();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRRig xrRig
    ::UnityEngine::XR::Interaction::Toolkit::XRRig*& dyn_xrRig();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRInteractorLineVisual leftMenuLaser
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*& dyn_leftMenuLaser();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRInteractorLineVisual rightMenuLaser
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*& dyn_rightMenuLaser();
    // Get instance field reference: public UnityEngine.Transform brickPickerMenuTransform
    ::UnityEngine::Transform*& dyn_brickPickerMenuTransform();
    // Get instance field reference: public UnityEngine.Transform rigTransformToScale
    ::UnityEngine::Transform*& dyn_rigTransformToScale();
    // Get instance field reference: public ChunkedRenderer chunkedRenderer
    ::GlobalNamespace::ChunkedRenderer*& dyn_chunkedRenderer();
    // Get instance field reference: public MovementVignette movementVignette
    ::GlobalNamespace::MovementVignette*& dyn_movementVignette();
    // Get instance field reference: private System.Single _scale
    float& dyn__scale();
    // Get instance field reference: private System.Single _defaultMenuLaserWidth
    float& dyn__defaultMenuLaserWidth();
    // Get instance field reference: private System.Single _defaultNearClipPlane
    float& dyn__defaultNearClipPlane();
    // Get instance field reference: private UnityEngine.Vector3 _defaultMenuScale
    ::UnityEngine::Vector3& dyn__defaultMenuScale();
    // private System.Void Awake()
    // Offset: 0x10C6C78
    void Awake();
    // public System.Void Start()
    // Offset: 0x10C6CD4
    void Start();
    // public System.Single GetScale()
    // Offset: 0x10C6D60
    float GetScale();
    // static public System.Single GetScaleFromSliderValue(System.Int32 sliderValue)
    // Offset: 0x10C6D68
    static float GetScaleFromSliderValue(int sliderValue);
    // public System.Void SetScale(System.Int32 sliderValue)
    // Offset: 0x10C6E00
    void SetScale(int sliderValue);
    // public System.Void ChangePlayerScale()
    // Offset: 0x10C6E78
    void ChangePlayerScale();
    // private System.Void FixHeadPosition(UnityEngine.Vector3 headPositionBefore, UnityEngine.Vector3 headPositionAfter)
    // Offset: 0x10C6FB0
    void FixHeadPosition(::UnityEngine::Vector3 headPositionBefore, ::UnityEngine::Vector3 headPositionAfter);
    // private System.Void SetLaserSize()
    // Offset: 0x10C716C
    void SetLaserSize();
    // private System.Void SetCameraNearClipDistance()
    // Offset: 0x10C71B8
    void SetCameraNearClipDistance();
    // private System.Void SetBrickPickerMenuScale()
    // Offset: 0x10C70C4
    void SetBrickPickerMenuScale();
    // private System.Void SetChunkedRendererPlayerScale()
    // Offset: 0x10C71E4
    void SetChunkedRendererPlayerScale();
    // private System.Void SetVignetteSensitivity()
    // Offset: 0x10C7204
    void SetVignetteSensitivity();
    // private System.Void DidConnectToRoom(Normal.Realtime.Realtime _)
    // Offset: 0x10C7228
    void DidConnectToRoom(::Normal::Realtime::Realtime* _);
    // public System.Void .ctor()
    // Offset: 0x10C722C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustPlayerScale* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdjustPlayerScale::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustPlayerScale*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x10C7234
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // AdjustPlayerScale
  #pragma pack(pop)
  static check_size<sizeof(AdjustPlayerScale), 124 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_AdjustPlayerScaleSizeCheck;
  static_assert(sizeof(AdjustPlayerScale) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::GetScale
// Il2CppName: GetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::GetScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "GetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::GetScaleFromSliderValue
// Il2CppName: GetScaleFromSliderValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&GlobalNamespace::AdjustPlayerScale::GetScaleFromSliderValue)> {
  static const MethodInfo* get() {
    static auto* sliderValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "GetScaleFromSliderValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)(int)>(&GlobalNamespace::AdjustPlayerScale::SetScale)> {
  static const MethodInfo* get() {
    static auto* sliderValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::ChangePlayerScale
// Il2CppName: ChangePlayerScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::ChangePlayerScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "ChangePlayerScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::FixHeadPosition
// Il2CppName: FixHeadPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::AdjustPlayerScale::FixHeadPosition)> {
  static const MethodInfo* get() {
    static auto* headPositionBefore = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* headPositionAfter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "FixHeadPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headPositionBefore, headPositionAfter});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::SetLaserSize
// Il2CppName: SetLaserSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::SetLaserSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "SetLaserSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::SetCameraNearClipDistance
// Il2CppName: SetCameraNearClipDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::SetCameraNearClipDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "SetCameraNearClipDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::SetBrickPickerMenuScale
// Il2CppName: SetBrickPickerMenuScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::SetBrickPickerMenuScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "SetBrickPickerMenuScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::SetChunkedRendererPlayerScale
// Il2CppName: SetChunkedRendererPlayerScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::SetChunkedRendererPlayerScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "SetChunkedRendererPlayerScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::SetVignetteSensitivity
// Il2CppName: SetVignetteSensitivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)()>(&GlobalNamespace::AdjustPlayerScale::SetVignetteSensitivity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "SetVignetteSensitivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::DidConnectToRoom
// Il2CppName: DidConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustPlayerScale::*)(::Normal::Realtime::Realtime*)>(&GlobalNamespace::AdjustPlayerScale::DidConnectToRoom)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), "DidConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AdjustPlayerScale::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::AdjustPlayerScale::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustPlayerScale*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
