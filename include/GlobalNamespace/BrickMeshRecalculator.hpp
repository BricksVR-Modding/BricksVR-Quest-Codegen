// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BrickAttach
  class BrickAttach;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickMeshRecalculator
  class BrickMeshRecalculator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickMeshRecalculator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickMeshRecalculator*, "", "BrickMeshRecalculator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BrickMeshRecalculator
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickMeshRecalculator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.List`1<BrickAttach> _attachesToRecalculate
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::GlobalNamespace::BrickAttach*>* attachesToRecalculate;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BrickAttach*>*) == 0x8);
    // private UnityEngine.Collider[] _overlapColliders
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Collider*> overlapColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private BrickMeshRecalculator _instance
    static ::GlobalNamespace::BrickMeshRecalculator* _get__instance();
    // Set static field: static private BrickMeshRecalculator _instance
    static void _set__instance(::GlobalNamespace::BrickMeshRecalculator* value);
    // Get instance field reference: private System.Collections.Generic.List`1<BrickAttach> _attachesToRecalculate
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BrickAttach*>*& dyn__attachesToRecalculate();
    // Get instance field reference: private UnityEngine.Collider[] _overlapColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__overlapColliders();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrickMeshRecalculator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrickMeshRecalculator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrickMeshRecalculator*, creationType>()));
    }
    // static public BrickMeshRecalculator GetInstance()
    // Offset: 0x6EF980
    static ::GlobalNamespace::BrickMeshRecalculator* GetInstance();
    // private System.Void Awake()
    // Offset: 0x6EF8E0
    void Awake();
    // public System.Void AddAttach(BrickAttach attach)
    // Offset: 0x6EF880
    void AddAttach(::GlobalNamespace::BrickAttach* attach);
    // public System.Void RecalculateNearbyBricks(UnityEngine.Vector3 pos, System.Single radius)
    // Offset: 0x6EFA40
    void RecalculateNearbyBricks(::UnityEngine::Vector3 pos, float radius);
    // private System.Void Update()
    // Offset: 0x6EFBE0
    void Update();
  }; // BrickMeshRecalculator
  #pragma pack(pop)
  static check_size<sizeof(BrickMeshRecalculator), 32 + sizeof(::ArrayW<::UnityEngine::Collider*>)> __GlobalNamespace_BrickMeshRecalculatorSizeCheck;
  static_assert(sizeof(BrickMeshRecalculator) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshRecalculator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshRecalculator::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BrickMeshRecalculator* (*)()>(&GlobalNamespace::BrickMeshRecalculator::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshRecalculator*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshRecalculator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshRecalculator::*)()>(&GlobalNamespace::BrickMeshRecalculator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshRecalculator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshRecalculator::AddAttach
// Il2CppName: AddAttach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshRecalculator::*)(::GlobalNamespace::BrickAttach*)>(&GlobalNamespace::BrickMeshRecalculator::AddAttach)> {
  static const MethodInfo* get() {
    static auto* attach = &::il2cpp_utils::GetClassFromName("", "BrickAttach")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshRecalculator*), "AddAttach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attach});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshRecalculator::RecalculateNearbyBricks
// Il2CppName: RecalculateNearbyBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshRecalculator::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::BrickMeshRecalculator::RecalculateNearbyBricks)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshRecalculator*), "RecalculateNearbyBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickMeshRecalculator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickMeshRecalculator::*)()>(&GlobalNamespace::BrickMeshRecalculator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickMeshRecalculator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
