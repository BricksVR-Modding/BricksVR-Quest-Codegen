// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: InterpolationDelay
  class InterpolationDelay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::InterpolationDelay);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::InterpolationDelay*, "Normal.Realtime", "InterpolationDelay");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.InterpolationDelay
  // [TokenAttribute] Offset: FFFFFFFF
  class InterpolationDelay : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Single <delay>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: delay and: basis
    char __padding0[0x4] = {};
    // private System.Double <basis>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    double basis;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x20
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: delayIncrement
    char __padding2[0x3] = {};
    // private readonly System.Single _delayIncrement
    // Size: 0x4
    // Offset: 0x24
    float delayIncrement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single _delayDecrement
    // Size: 0x4
    // Offset: 0x28
    float delayDecrement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _penaltyCounter
    // Size: 0x4
    // Offset: 0x2C
    int penaltyCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _correctCounter
    // Size: 0x4
    // Offset: 0x30
    int correctCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.Single DEFAULT_DELAY
    static constexpr const float DEFAULT_DELAY = 0.1;
    // Get static field: static private System.Single DEFAULT_DELAY
    static float _get_DEFAULT_DELAY();
    // Set static field: static private System.Single DEFAULT_DELAY
    static void _set_DEFAULT_DELAY(float value);
    // static field const value: static private System.Single MAXIMUM_DELAY
    static constexpr const float MAXIMUM_DELAY = 0.3;
    // Get static field: static private System.Single MAXIMUM_DELAY
    static float _get_MAXIMUM_DELAY();
    // Set static field: static private System.Single MAXIMUM_DELAY
    static void _set_MAXIMUM_DELAY(float value);
    // Get instance field reference: private System.Single <delay>k__BackingField
    float& dyn_$delay$k__BackingField();
    // Get instance field reference: private System.Double <basis>k__BackingField
    double& dyn_$basis$k__BackingField();
    // Get instance field reference: private System.Boolean _initialized
    bool& dyn__initialized();
    // Get instance field reference: private readonly System.Single _delayIncrement
    float& dyn__delayIncrement();
    // Get instance field reference: private readonly System.Single _delayDecrement
    float& dyn__delayDecrement();
    // Get instance field reference: private System.Int32 _penaltyCounter
    int& dyn__penaltyCounter();
    // Get instance field reference: private System.Int32 _correctCounter
    int& dyn__correctCounter();
    // public System.Single get_delay()
    // Offset: 0xAE985C
    float get_delay();
    // private System.Void set_delay(System.Single value)
    // Offset: 0xAE9864
    void set_delay(float value);
    // public System.Double get_basis()
    // Offset: 0xAE986C
    double get_basis();
    // private System.Void set_basis(System.Double value)
    // Offset: 0xAE9874
    void set_basis(double value);
    // public System.Void .ctor(System.Single increment, System.Single decrement)
    // Offset: 0xAE987C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InterpolationDelay* New_ctor(float increment, float decrement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::InterpolationDelay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InterpolationDelay*, creationType>(increment, decrement)));
    }
    // public System.Void Reset()
    // Offset: 0xAE98C0
    void Reset();
    // public System.Void Adjust(System.Double sent, System.Double arrived, System.Double sendrate)
    // Offset: 0xAE98DC
    void Adjust(double sent, double arrived, double sendrate);
  }; // Normal.Realtime.InterpolationDelay
  #pragma pack(pop)
  static check_size<sizeof(InterpolationDelay), 48 + sizeof(int)> __Normal_Realtime_InterpolationDelaySizeCheck;
  static_assert(sizeof(InterpolationDelay) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::InterpolationDelay::get_delay
// Il2CppName: get_delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Normal::Realtime::InterpolationDelay::*)()>(&Normal::Realtime::InterpolationDelay::get_delay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::InterpolationDelay*), "get_delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::InterpolationDelay::set_delay
// Il2CppName: set_delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::InterpolationDelay::*)(float)>(&Normal::Realtime::InterpolationDelay::set_delay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::InterpolationDelay*), "set_delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::InterpolationDelay::get_basis
// Il2CppName: get_basis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Normal::Realtime::InterpolationDelay::*)()>(&Normal::Realtime::InterpolationDelay::get_basis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::InterpolationDelay*), "get_basis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::InterpolationDelay::set_basis
// Il2CppName: set_basis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::InterpolationDelay::*)(double)>(&Normal::Realtime::InterpolationDelay::set_basis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::InterpolationDelay*), "set_basis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::InterpolationDelay::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::InterpolationDelay::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::InterpolationDelay::*)()>(&Normal::Realtime::InterpolationDelay::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::InterpolationDelay*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::InterpolationDelay::Adjust
// Il2CppName: Adjust
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::InterpolationDelay::*)(double, double, double)>(&Normal::Realtime::InterpolationDelay::Adjust)> {
  static const MethodInfo* get() {
    static auto* sent = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* arrived = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* sendrate = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::InterpolationDelay*), "Adjust", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sent, arrived, sendrate});
  }
};
