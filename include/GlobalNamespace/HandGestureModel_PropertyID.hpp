// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HandGestureModel
#include "GlobalNamespace/HandGestureModel.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandGestureModel::PropertyID, "", "HandGestureModel/PropertyID");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: HandGestureModel/PropertyID
  // [TokenAttribute] Offset: FFFFFFFF
  struct HandGestureModel::PropertyID/*, public ::System::Enum*/ {
    public:
    public:
    // public System.UInt32 value__
    // Size: 0x4
    // Offset: 0x0
    uint value;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: PropertyID
    constexpr PropertyID(uint value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return value;
    }
    // static field const value: static public HandGestureModel/PropertyID HandPoseId
    static constexpr const uint HandPoseId = 1u;
    // Get static field: static public HandGestureModel/PropertyID HandPoseId
    static ::GlobalNamespace::HandGestureModel::PropertyID _get_HandPoseId();
    // Set static field: static public HandGestureModel/PropertyID HandPoseId
    static void _set_HandPoseId(::GlobalNamespace::HandGestureModel::PropertyID value);
    // static field const value: static public HandGestureModel/PropertyID Flex
    static constexpr const uint Flex = 2u;
    // Get static field: static public HandGestureModel/PropertyID Flex
    static ::GlobalNamespace::HandGestureModel::PropertyID _get_Flex();
    // Set static field: static public HandGestureModel/PropertyID Flex
    static void _set_Flex(::GlobalNamespace::HandGestureModel::PropertyID value);
    // static field const value: static public HandGestureModel/PropertyID Point
    static constexpr const uint Point = 3u;
    // Get static field: static public HandGestureModel/PropertyID Point
    static ::GlobalNamespace::HandGestureModel::PropertyID _get_Point();
    // Set static field: static public HandGestureModel/PropertyID Point
    static void _set_Point(::GlobalNamespace::HandGestureModel::PropertyID value);
    // static field const value: static public HandGestureModel/PropertyID ThumbsUp
    static constexpr const uint ThumbsUp = 4u;
    // Get static field: static public HandGestureModel/PropertyID ThumbsUp
    static ::GlobalNamespace::HandGestureModel::PropertyID _get_ThumbsUp();
    // Set static field: static public HandGestureModel/PropertyID ThumbsUp
    static void _set_ThumbsUp(::GlobalNamespace::HandGestureModel::PropertyID value);
    // static field const value: static public HandGestureModel/PropertyID Pinch
    static constexpr const uint Pinch = 5u;
    // Get static field: static public HandGestureModel/PropertyID Pinch
    static ::GlobalNamespace::HandGestureModel::PropertyID _get_Pinch();
    // Set static field: static public HandGestureModel/PropertyID Pinch
    static void _set_Pinch(::GlobalNamespace::HandGestureModel::PropertyID value);
    // Get instance field reference: public System.UInt32 value__
    [[deprecated("Use field access instead!")]] uint& dyn_value__();
  }; // HandGestureModel/PropertyID
  #pragma pack(pop)
  static check_size<sizeof(HandGestureModel::PropertyID), 0 + sizeof(uint)> __GlobalNamespace_HandGestureModel_PropertyIDSizeCheck;
  static_assert(sizeof(HandGestureModel::PropertyID) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
