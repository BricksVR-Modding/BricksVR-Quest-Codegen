// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: ProfanityFilter.Interfaces
namespace ProfanityFilter::Interfaces {
  // Forward declaring type: IAllowList
  class IAllowList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ProfanityFilter::Interfaces::IAllowList);
DEFINE_IL2CPP_ARG_TYPE(::ProfanityFilter::Interfaces::IAllowList*, "ProfanityFilter.Interfaces", "IAllowList");
// Type namespace: ProfanityFilter.Interfaces
namespace ProfanityFilter::Interfaces {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ProfanityFilter.Interfaces.IAllowList
  // [TokenAttribute] Offset: FFFFFFFF
  class IAllowList {
    public:
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    int get_Count();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.String> get_ToList()
    // Offset: 0xFFFFFFFF
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* get_ToList();
    // public System.Void Add(System.String wordToAllowlist)
    // Offset: 0xFFFFFFFF
    void Add(::StringW wordToAllowlist);
    // public System.Boolean Contains(System.String wordToCheck)
    // Offset: 0xFFFFFFFF
    bool Contains(::StringW wordToCheck);
    // public System.Boolean Remove(System.String wordToRemove)
    // Offset: 0xFFFFFFFF
    bool Remove(::StringW wordToRemove);
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear();
  }; // ProfanityFilter.Interfaces.IAllowList
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IAllowList::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ProfanityFilter::Interfaces::IAllowList::*)()>(&ProfanityFilter::Interfaces::IAllowList::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IAllowList*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IAllowList::get_ToList
// Il2CppName: get_ToList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* (ProfanityFilter::Interfaces::IAllowList::*)()>(&ProfanityFilter::Interfaces::IAllowList::get_ToList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IAllowList*), "get_ToList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IAllowList::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::Interfaces::IAllowList::*)(::StringW)>(&ProfanityFilter::Interfaces::IAllowList::Add)> {
  static const MethodInfo* get() {
    static auto* wordToAllowlist = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IAllowList*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wordToAllowlist});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IAllowList::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::Interfaces::IAllowList::*)(::StringW)>(&ProfanityFilter::Interfaces::IAllowList::Contains)> {
  static const MethodInfo* get() {
    static auto* wordToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IAllowList*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wordToCheck});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IAllowList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::Interfaces::IAllowList::*)(::StringW)>(&ProfanityFilter::Interfaces::IAllowList::Remove)> {
  static const MethodInfo* get() {
    static auto* wordToRemove = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IAllowList*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wordToRemove});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IAllowList::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::Interfaces::IAllowList::*)()>(&ProfanityFilter::Interfaces::IAllowList::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IAllowList*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
