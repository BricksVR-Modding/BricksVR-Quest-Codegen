// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickPrefabCache
  class BrickPrefabCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickPrefabCache);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickPrefabCache*, "", "BrickPrefabCache");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BrickPrefabCache
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickPrefabCache : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> _brickPrefabCache
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>* brickPrefabCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private BrickPrefabCache _instance
    static ::GlobalNamespace::BrickPrefabCache* _get__instance();
    // Set static field: static private BrickPrefabCache _instance
    static void _set__instance(::GlobalNamespace::BrickPrefabCache* value);
    // Get static field: static private System.Boolean _instanceSet
    static bool _get__instanceSet();
    // Set static field: static private System.Boolean _instanceSet
    static void _set__instanceSet(bool value);
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> _brickPrefabCache
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*& dyn__brickPrefabCache();
    // static public BrickPrefabCache GetInstance()
    // Offset: 0x6F2860
    static ::GlobalNamespace::BrickPrefabCache* GetInstance();
    // private System.Void Awake()
    // Offset: 0x6F24E0
    void Awake();
    // public UnityEngine.GameObject Get(System.String brickName)
    // Offset: 0x6F2900
    ::UnityEngine::GameObject* Get(::StringW brickName);
    // private System.Void GenerateCache()
    // Offset: 0x6F2540
    void GenerateCache();
    // private System.Void WarmGeometryAndOutlines(UnityEngine.GameObject placedBrickPrefab)
    // Offset: 0x6F2960
    void WarmGeometryAndOutlines(::UnityEngine::GameObject* placedBrickPrefab);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrickPrefabCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrickPrefabCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrickPrefabCache*, creationType>()));
    }
  }; // BrickPrefabCache
  #pragma pack(pop)
  static check_size<sizeof(BrickPrefabCache), 24 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*)> __GlobalNamespace_BrickPrefabCacheSizeCheck;
  static_assert(sizeof(BrickPrefabCache) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickPrefabCache::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BrickPrefabCache* (*)()>(&GlobalNamespace::BrickPrefabCache::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPrefabCache*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPrefabCache::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPrefabCache::*)()>(&GlobalNamespace::BrickPrefabCache::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPrefabCache*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPrefabCache::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::BrickPrefabCache::*)(::StringW)>(&GlobalNamespace::BrickPrefabCache::Get)> {
  static const MethodInfo* get() {
    static auto* brickName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPrefabCache*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brickName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPrefabCache::GenerateCache
// Il2CppName: GenerateCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPrefabCache::*)()>(&GlobalNamespace::BrickPrefabCache::GenerateCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPrefabCache*), "GenerateCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPrefabCache::WarmGeometryAndOutlines
// Il2CppName: WarmGeometryAndOutlines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickPrefabCache::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::BrickPrefabCache::WarmGeometryAndOutlines)> {
  static const MethodInfo* get() {
    static auto* placedBrickPrefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickPrefabCache*), "WarmGeometryAndOutlines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{placedBrickPrefab});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickPrefabCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
