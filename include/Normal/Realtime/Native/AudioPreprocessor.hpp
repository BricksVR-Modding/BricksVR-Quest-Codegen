// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Normal.Realtime.Native
namespace Normal::Realtime::Native {
  // Forward declaring type: AudioPreprocessor
  class AudioPreprocessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Native::AudioPreprocessor);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Native::AudioPreprocessor*, "Normal.Realtime.Native", "AudioPreprocessor");
// Type namespace: Normal.Realtime.Native
namespace Normal::Realtime::Native {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Native.AudioPreprocessor
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioPreprocessor : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.IntPtr _nativeAudioPreprocessor
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr nativeAudioPreprocessor;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return nativeAudioPreprocessor;
    }
    // Get instance field reference: private System.IntPtr _nativeAudioPreprocessor
    ::System::IntPtr& dyn__nativeAudioPreprocessor();
    // public System.Void .ctor(System.Int32 recordSampleRate, System.Int32 recordFrameSize, System.Boolean automaticGainControl, System.Boolean noiseSuppression, System.Boolean reverbSuppression, System.Boolean echoCancellation, System.Int32 playbackSampleRate, System.Int32 playbackChannels, System.Single tail)
    // Offset: 0xAEADB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioPreprocessor* New_ctor(int recordSampleRate, int recordFrameSize, bool automaticGainControl, bool noiseSuppression, bool reverbSuppression, bool echoCancellation, int playbackSampleRate, int playbackChannels, float tail) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Native::AudioPreprocessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioPreprocessor*, creationType>(recordSampleRate, recordFrameSize, automaticGainControl, noiseSuppression, reverbSuppression, echoCancellation, playbackSampleRate, playbackChannels, tail)));
    }
    // public System.Void Dispose()
    // Offset: 0xAEB07C
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0xAEAFF8
    void Dispose(bool disposing);
    // public System.Boolean ProcessRecordSamples(System.Single[] audioData)
    // Offset: 0xAEB170
    bool ProcessRecordSamples(::ArrayW<float> audioData);
    // public System.Boolean ProcessPlaybackFrame(System.Single[] audioData)
    // Offset: 0xAEB2D0
    bool ProcessPlaybackFrame(::ArrayW<float> audioData);
    // protected override System.Void Finalize()
    // Offset: 0xAEAF8C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Normal.Realtime.Native.AudioPreprocessor
  #pragma pack(pop)
  static check_size<sizeof(AudioPreprocessor), 16 + sizeof(::System::IntPtr)> __Normal_Realtime_Native_AudioPreprocessorSizeCheck;
  static_assert(sizeof(AudioPreprocessor) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioPreprocessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioPreprocessor::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Native::AudioPreprocessor::*)()>(&Normal::Realtime::Native::AudioPreprocessor::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioPreprocessor*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioPreprocessor::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Native::AudioPreprocessor::*)(bool)>(&Normal::Realtime::Native::AudioPreprocessor::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioPreprocessor*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioPreprocessor::ProcessRecordSamples
// Il2CppName: ProcessRecordSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Native::AudioPreprocessor::*)(::ArrayW<float>)>(&Normal::Realtime::Native::AudioPreprocessor::ProcessRecordSamples)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioPreprocessor*), "ProcessRecordSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioPreprocessor::ProcessPlaybackFrame
// Il2CppName: ProcessPlaybackFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Native::AudioPreprocessor::*)(::ArrayW<float>)>(&Normal::Realtime::Native::AudioPreprocessor::ProcessPlaybackFrame)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioPreprocessor*), "ProcessPlaybackFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Native::AudioPreprocessor::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Native::AudioPreprocessor::*)()>(&Normal::Realtime::Native::AudioPreprocessor::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Native::AudioPreprocessor*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
