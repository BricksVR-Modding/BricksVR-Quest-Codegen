// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: Normal::Utility
namespace Normal::Utility {
  // Forward declaring type: RingBuffer`1<T>
  template<typename T>
  class RingBuffer_1;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: TimelineEntry`1<T>
  template<typename T>
  class TimelineEntry_1;
  // Forward declaring type: TimelineInterpolator`1<T>
  template<typename T>
  class TimelineInterpolator_1;
  // Forward declaring type: TimelineExtrapolator`1<T>
  template<typename T>
  class TimelineExtrapolator_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: Timeline`1<T>
  template<typename T>
  class Timeline_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::Timeline_1, "Normal.Realtime", "Timeline`1");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.Timeline`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class Timeline_1 : public ::Il2CppObject {
    public:
    public:
    // private readonly Normal.Utility.RingBuffer`1<Normal.Realtime.TimelineEntry`1<T>> _buffer
    // Size: 0x8
    // Offset: 0x0
    ::Normal::Utility::RingBuffer_1<::Normal::Realtime::TimelineEntry_1<T>*>* buffer;
    // Field size check
    static_assert(sizeof(::Normal::Utility::RingBuffer_1<::Normal::Realtime::TimelineEntry_1<T>*>*) == 0x8);
    // private readonly Normal.Realtime.TimelineInterpolator`1<T> _interpolator
    // Size: 0x8
    // Offset: 0x0
    ::Normal::Realtime::TimelineInterpolator_1<T>* interpolator;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::TimelineInterpolator_1<T>*) == 0x8);
    // private readonly Normal.Realtime.TimelineExtrapolator`1<T> _extrapolator
    // Size: 0x8
    // Offset: 0x0
    ::Normal::Realtime::TimelineExtrapolator_1<T>* extrapolator;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::TimelineExtrapolator_1<T>*) == 0x8);
    // private System.Double _newestTime
    // Size: 0x8
    // Offset: 0x0
    double newestTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _oldestTime
    // Size: 0x8
    // Offset: 0x0
    double oldestTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Autogenerated static field getter
    // Get static field: static private System.Int32 BUFFER_SIZE
    static int _get_BUFFER_SIZE() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::_get_BUFFER_SIZE");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Timeline_1<T>*>::get(), "BUFFER_SIZE"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 BUFFER_SIZE
    static void _set_BUFFER_SIZE(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::_set_BUFFER_SIZE");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Timeline_1<T>*>::get(), "BUFFER_SIZE", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Normal.Utility.RingBuffer`1<Normal.Realtime.TimelineEntry`1<T>> _buffer
    [[deprecated]] ::Normal::Utility::RingBuffer_1<::Normal::Realtime::TimelineEntry_1<T>*>*& dyn__buffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::dyn__buffer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buffer"))->offset;
      return *reinterpret_cast<::Normal::Utility::RingBuffer_1<::Normal::Realtime::TimelineEntry_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Normal.Realtime.TimelineInterpolator`1<T> _interpolator
    [[deprecated]] ::Normal::Realtime::TimelineInterpolator_1<T>*& dyn__interpolator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::dyn__interpolator");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_interpolator"))->offset;
      return *reinterpret_cast<::Normal::Realtime::TimelineInterpolator_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Normal.Realtime.TimelineExtrapolator`1<T> _extrapolator
    [[deprecated]] ::Normal::Realtime::TimelineExtrapolator_1<T>*& dyn__extrapolator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::dyn__extrapolator");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extrapolator"))->offset;
      return *reinterpret_cast<::Normal::Realtime::TimelineExtrapolator_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Double _newestTime
    [[deprecated]] double& dyn__newestTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::dyn__newestTime");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_newestTime"))->offset;
      return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Double _oldestTime
    [[deprecated]] double& dyn__oldestTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::dyn__oldestTime");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_oldestTime"))->offset;
      return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Boolean get_isEmpty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isEmpty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::get_isEmpty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_isNotEmpty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isNotEmpty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::get_isNotEmpty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isNotEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor(Normal.Realtime.TimelineInterpolator`1<T> interpolator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Timeline_1<T>* New_ctor(::Normal::Realtime::TimelineInterpolator_1<T>* interpolator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Timeline_1<T>*, creationType>(interpolator)));
    }
    // public System.Void .ctor(Normal.Realtime.TimelineInterpolator`1<T> interpolator, Normal.Realtime.TimelineExtrapolator`1<T> extrapolator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Timeline_1<T>* New_ctor(::Normal::Realtime::TimelineInterpolator_1<T>* interpolator, ::Normal::Realtime::TimelineExtrapolator_1<T>* extrapolator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Timeline_1<T>*, creationType>(interpolator, extrapolator)));
    }
    // static private T __defaultInterpolator(Normal.Realtime.TimelineEntry`1<T> a, Normal.Realtime.TimelineEntry`1<T> b, System.Single t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T __defaultInterpolator(::Normal::Realtime::TimelineEntry_1<T>* a, ::Normal::Realtime::TimelineEntry_1<T>* b, float t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::__defaultInterpolator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Timeline_1<T>*>::get(), "__defaultInterpolator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, t);
    }
    // static private T __defaultExtrapolator(Normal.Realtime.TimelineEntry`1<T> frame, System.Double time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T __defaultExtrapolator(::Normal::Realtime::TimelineEntry_1<T>* frame, double time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::__defaultExtrapolator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Timeline_1<T>*>::get(), "__defaultExtrapolator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frame), ::il2cpp_utils::ExtractType(time)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, frame, time);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void ThrowIfEmpty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ThrowIfEmpty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::ThrowIfEmpty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean IsTimeInsideTimeline(System.Double time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsTimeInsideTimeline(double time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::IsTimeInsideTimeline");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTimeInsideTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time);
    }
    // public System.Boolean IsTimeAheadTimeline(System.Double time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsTimeAheadTimeline(double time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::IsTimeAheadTimeline");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTimeAheadTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time);
    }
    // public System.Boolean IsTimeBehindTimeline(System.Double time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsTimeBehindTimeline(double time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::IsTimeBehindTimeline");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTimeBehindTimeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time);
    }
    // public System.Double GetNewestTime()
    // Offset: 0xFFFFFFFFFFFFFFFF
    double GetNewestTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::GetNewestTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewestTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
    }
    // public T GetNewestValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetNewestValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::GetNewestValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewestValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public T GetValueAtIndex(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetValueAtIndex(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::GetValueAtIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValueAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Double GetOldestTime()
    // Offset: 0xFFFFFFFFFFFFFFFF
    double GetOldestTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::GetOldestTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOldestTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
    }
    // public T GetOldestValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetOldestValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::GetOldestValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOldestValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Add(System.Double time, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(double time, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, value);
    }
    // public T Get(System.Double time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Get(double time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, time);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Timeline_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Timeline_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Timeline_1<T>*, creationType>()));
    }
  }; // Normal.Realtime.Timeline`1
  // Could not write size check! Type: Normal.Realtime.Timeline`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
