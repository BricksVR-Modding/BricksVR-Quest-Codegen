// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: Utility
  class Utility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::Utility);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Utility*, "Steamworks", "Utility");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.Utility
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Utility : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Byte[] readBuffer
    static ::ArrayW<uint8_t> _get_readBuffer();
    // Set static field: static private readonly System.Byte[] readBuffer
    static void _set_readBuffer(::ArrayW<uint8_t> value);
    // static private System.Void .cctor()
    // Offset: 0x5CA170
    static void _cctor();
    // static T ToType(System.IntPtr ptr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T ToType(::System::IntPtr ptr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::Utility::ToType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Steamworks", "Utility", "ToType", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, ptr);
    }
    // static System.Object ToType(System.IntPtr ptr, System.Type t)
    // Offset: 0x5CA0F0
    static ::Il2CppObject* ToType(::System::IntPtr ptr, ::System::Type* t);
  }; // Steamworks.Utility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Utility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::Utility::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Utility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::Utility::ToType
// Il2CppName: ToType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Steamworks::Utility::ToType
// Il2CppName: ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::IntPtr, ::System::Type*)>(&Steamworks::Utility::ToType)> {
  static const MethodInfo* get() {
    static auto* ptr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Utility*), "ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, t});
  }
};
