// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SteamInterface
  class SteamInterface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::SteamInterface);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::SteamInterface*, "Steamworks", "SteamInterface");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.SteamInterface
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamInterface : public ::Il2CppObject {
    public:
    public:
    // public System.IntPtr Self
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr Self;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr SelfGlobal
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr SelfGlobal;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr SelfServer
    // Size: 0x8
    // Offset: 0x20
    ::System::IntPtr SelfServer;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr SelfClient
    // Size: 0x8
    // Offset: 0x28
    ::System::IntPtr SelfClient;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0xBBA20
    // private System.Boolean <IsServer>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool IsServer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.IntPtr Self
    [[deprecated]] ::System::IntPtr& dyn_Self();
    // Get instance field reference: public System.IntPtr SelfGlobal
    [[deprecated]] ::System::IntPtr& dyn_SelfGlobal();
    // Get instance field reference: public System.IntPtr SelfServer
    [[deprecated]] ::System::IntPtr& dyn_SelfServer();
    // Get instance field reference: public System.IntPtr SelfClient
    [[deprecated]] ::System::IntPtr& dyn_SelfClient();
    // Get instance field reference: private System.Boolean <IsServer>k__BackingField
    [[deprecated]] bool& dyn_$IsServer$k__BackingField();
    // private System.Void set_IsServer(System.Boolean value)
    // Offset: 0x30EC70
    void set_IsServer(bool value);
    // public System.IntPtr GetUserInterfacePointer()
    // Offset: 0x5C2000
    ::System::IntPtr GetUserInterfacePointer();
    // public System.IntPtr GetServerInterfacePointer()
    // Offset: 0x5C1FD0
    ::System::IntPtr GetServerInterfacePointer();
    // public System.IntPtr GetGlobalInterfacePointer()
    // Offset: 0x5C1FA0
    ::System::IntPtr GetGlobalInterfacePointer();
    // System.Void SetupInterface(System.Boolean gameServer)
    // Offset: 0x5C2030
    void SetupInterface(bool gameServer);
    // protected System.Void .ctor()
    // Offset: 0x1DD400
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamInterface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::SteamInterface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamInterface*, creationType>()));
    }
  }; // Steamworks.SteamInterface
  #pragma pack(pop)
  static check_size<sizeof(SteamInterface), 48 + sizeof(bool)> __Steamworks_SteamInterfaceSizeCheck;
  static_assert(sizeof(SteamInterface) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::SteamInterface::set_IsServer
// Il2CppName: set_IsServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SteamInterface::*)(bool)>(&Steamworks::SteamInterface::set_IsServer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamInterface*), "set_IsServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamInterface::GetUserInterfacePointer
// Il2CppName: GetUserInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::SteamInterface::*)()>(&Steamworks::SteamInterface::GetUserInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamInterface*), "GetUserInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamInterface::GetServerInterfacePointer
// Il2CppName: GetServerInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::SteamInterface::*)()>(&Steamworks::SteamInterface::GetServerInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamInterface*), "GetServerInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamInterface::GetGlobalInterfacePointer
// Il2CppName: GetGlobalInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::SteamInterface::*)()>(&Steamworks::SteamInterface::GetGlobalInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamInterface*), "GetGlobalInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamInterface::SetupInterface
// Il2CppName: SetupInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::SteamInterface::*)(bool)>(&Steamworks::SteamInterface::SetupInterface)> {
  static const MethodInfo* get() {
    static auto* gameServer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamInterface*), "SetupInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameServer});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamInterface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
