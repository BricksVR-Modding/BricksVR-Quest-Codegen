// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Forward declaring type: SceneDebug
  class SceneDebug;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Utility::SceneDebug);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Utility::SceneDebug*, "Normal.Utility", "SceneDebug");
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Utility.SceneDebug
  // [TokenAttribute] Offset: FFFFFFFF
  class SceneDebug : public ::Il2CppObject {
    public:
    // static public System.Void DrawPoint(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, System.Single size, UnityEngine.Color color, System.Single duration, System.Boolean depth)
    // Offset: 0x89AAA0
    static void DrawPoint(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot, float size, ::UnityEngine::Color color, float duration, bool depth);
    // static public System.Void DrawPoint(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, System.Single size)
    // Offset: 0x89AEA0
    static void DrawPoint(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot, float size);
    // static public System.Void DrawCube(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, System.Single size, UnityEngine.Color color, System.Single duration, System.Boolean depth)
    // Offset: 0x89A130
    static void DrawCube(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot, float size, ::UnityEngine::Color color, float duration, bool depth);
    // static public System.Void DrawCube(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, System.Single size)
    // Offset: 0x89AA10
    static void DrawCube(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot, float size);
  }; // Normal.Utility.SceneDebug
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Utility::SceneDebug::DrawPoint
// Il2CppName: DrawPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, ::UnityEngine::Color, float, bool)>(&Normal::Utility::SceneDebug::DrawPoint)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::SceneDebug*), "DrawPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot, size, color, duration, depth});
  }
};
// Writing MetadataGetter for method: Normal::Utility::SceneDebug::DrawPoint
// Il2CppName: DrawPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float)>(&Normal::Utility::SceneDebug::DrawPoint)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::SceneDebug*), "DrawPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot, size});
  }
};
// Writing MetadataGetter for method: Normal::Utility::SceneDebug::DrawCube
// Il2CppName: DrawCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, ::UnityEngine::Color, float, bool)>(&Normal::Utility::SceneDebug::DrawCube)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::SceneDebug*), "DrawCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot, size, color, duration, depth});
  }
};
// Writing MetadataGetter for method: Normal::Utility::SceneDebug::DrawCube
// Il2CppName: DrawCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float)>(&Normal::Utility::SceneDebug::DrawCube)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::SceneDebug*), "DrawCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot, size});
  }
};
