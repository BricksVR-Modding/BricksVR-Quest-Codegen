// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlacedBrickRendererManagerTwo
#include "GlobalNamespace/PlacedBrickRendererManagerTwo.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  struct ValueTuple_3;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup*, "", "PlacedBrickRendererManagerTwo/RenderQueueGroup");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: PlacedBrickRendererManagerTwo/RenderQueueGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class PlacedBrickRendererManagerTwo::RenderQueueGroup : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.Matrix4x4[] TransformationMatrices
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Matrix4x4> TransformationMatrices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // public UnityEngine.Vector4[] Colors
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Vector4> Colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // public System.Int32[] ObjectHashCodes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> ObjectHashCodes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32 Length
    // Size: 0x4
    // Offset: 0x28
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Matrix4x4[] TransformationMatrices
    ::ArrayW<::UnityEngine::Matrix4x4>& dyn_TransformationMatrices();
    // Get instance field reference: public UnityEngine.Vector4[] Colors
    ::ArrayW<::UnityEngine::Vector4>& dyn_Colors();
    // Get instance field reference: public System.Int32[] ObjectHashCodes
    ::ArrayW<int>& dyn_ObjectHashCodes();
    // Get instance field reference: public System.Int32 Length
    int& dyn_Length();
    // public System.Boolean AddObjectToRender(UnityEngine.Matrix4x4 transformationMatrix, UnityEngine.Vector4 color, System.Int32 objectHashCode)
    // Offset: 0x105A298
    bool AddObjectToRender(::UnityEngine::Matrix4x4 transformationMatrix, ::UnityEngine::Vector4 color, int objectHashCode);
    // public System.Boolean HasMoreCapacity()
    // Offset: 0x105A288
    bool HasMoreCapacity();
    // public System.ValueTuple`3<UnityEngine.Matrix4x4,UnityEngine.Vector4,System.Int32> Pop()
    // Offset: 0x105A788
    ::System::ValueTuple_3<::UnityEngine::Matrix4x4, ::UnityEngine::Vector4, int> Pop();
    // static public PlacedBrickRendererManagerTwo/RenderQueueGroup CreateNewRenderQueueGroup()
    // Offset: 0x105A1D8
    static ::GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup* CreateNewRenderQueueGroup();
    // public System.Void .ctor()
    // Offset: 0x105A934
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlacedBrickRendererManagerTwo::RenderQueueGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlacedBrickRendererManagerTwo::RenderQueueGroup*, creationType>()));
    }
  }; // PlacedBrickRendererManagerTwo/RenderQueueGroup
  #pragma pack(pop)
  static check_size<sizeof(PlacedBrickRendererManagerTwo::RenderQueueGroup), 40 + sizeof(int)> __GlobalNamespace_PlacedBrickRendererManagerTwo_RenderQueueGroupSizeCheck;
  static_assert(sizeof(PlacedBrickRendererManagerTwo::RenderQueueGroup) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::AddObjectToRender
// Il2CppName: AddObjectToRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::*)(::UnityEngine::Matrix4x4, ::UnityEngine::Vector4, int)>(&GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::AddObjectToRender)> {
  static const MethodInfo* get() {
    static auto* transformationMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* objectHashCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup*), "AddObjectToRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformationMatrix, color, objectHashCode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::HasMoreCapacity
// Il2CppName: HasMoreCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::*)()>(&GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::HasMoreCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup*), "HasMoreCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_3<::UnityEngine::Matrix4x4, ::UnityEngine::Vector4, int> (GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::*)()>(&GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::CreateNewRenderQueueGroup
// Il2CppName: CreateNewRenderQueueGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup* (*)()>(&GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::CreateNewRenderQueueGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup*), "CreateNewRenderQueueGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlacedBrickRendererManagerTwo::RenderQueueGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
