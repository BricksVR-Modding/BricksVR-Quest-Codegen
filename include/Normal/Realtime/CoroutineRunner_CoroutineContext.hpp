// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.CoroutineRunner
#include "Normal/Realtime/CoroutineRunner.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Skipping declaration: State because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::CoroutineRunner::CoroutineContext);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::CoroutineRunner::CoroutineContext*, "Normal.Realtime", "CoroutineRunner/CoroutineContext");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext
  // [TokenAttribute] Offset: FFFFFFFF
  class CoroutineRunner::CoroutineContext : public ::Il2CppObject {
    public:
    // Nested type: ::Normal::Realtime::CoroutineRunner::CoroutineContext::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Created
      static constexpr const int Created = 0;
      // Get static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Created
      static ::Normal::Realtime::CoroutineRunner::CoroutineContext::State _get_Created();
      // Set static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Created
      static void _set_Created(::Normal::Realtime::CoroutineRunner::CoroutineContext::State value);
      // static field const value: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Bound
      static constexpr const int Bound = 1;
      // Get static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Bound
      static ::Normal::Realtime::CoroutineRunner::CoroutineContext::State _get_Bound();
      // Set static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Bound
      static void _set_Bound(::Normal::Realtime::CoroutineRunner::CoroutineContext::State value);
      // static field const value: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Running
      static constexpr const int Running = 2;
      // Get static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Running
      static ::Normal::Realtime::CoroutineRunner::CoroutineContext::State _get_Running();
      // Set static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Running
      static void _set_Running(::Normal::Realtime::CoroutineRunner::CoroutineContext::State value);
      // static field const value: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Completed
      static constexpr const int Completed = 3;
      // Get static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Completed
      static ::Normal::Realtime::CoroutineRunner::CoroutineContext::State _get_Completed();
      // Set static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Completed
      static void _set_Completed(::Normal::Realtime::CoroutineRunner::CoroutineContext::State value);
      // static field const value: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Cancelled
      static constexpr const int Cancelled = 4;
      // Get static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Cancelled
      static ::Normal::Realtime::CoroutineRunner::CoroutineContext::State _get_Cancelled();
      // Set static field: static public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State Cancelled
      static void _set_Cancelled(::Normal::Realtime::CoroutineRunner::CoroutineContext::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State
    #pragma pack(pop)
    static check_size<sizeof(CoroutineRunner::CoroutineContext::State), 0 + sizeof(int)> __Normal_Realtime_CoroutineRunner_CoroutineContext_StateSizeCheck;
    static_assert(sizeof(CoroutineRunner::CoroutineContext::State) == 0x4);
    public:
    // private Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State _state
    // Size: 0x4
    // Offset: 0x10
    ::Normal::Realtime::CoroutineRunner::CoroutineContext::State state;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::CoroutineRunner::CoroutineContext::State) == 0x4);
    // Padding between fields: state and: coroutineEnumerator
    char __padding0[0x4] = {};
    // private System.Collections.IEnumerator _coroutineEnumerator
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::IEnumerator* coroutineEnumerator;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    // private UnityEngine.Coroutine _coroutine
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Coroutine* coroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private Normal.Realtime.CoroutineRunner _coroutineRunner
    // Size: 0x8
    // Offset: 0x28
    ::Normal::Realtime::CoroutineRunner* coroutineRunner;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::CoroutineRunner*) == 0x8);
    // private System.Action <cleanupAction>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* cleanupAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State _state
    [[deprecated]] ::Normal::Realtime::CoroutineRunner::CoroutineContext::State& dyn__state();
    // Get instance field reference: private System.Collections.IEnumerator _coroutineEnumerator
    [[deprecated]] ::System::Collections::IEnumerator*& dyn__coroutineEnumerator();
    // Get instance field reference: private UnityEngine.Coroutine _coroutine
    [[deprecated]] ::UnityEngine::Coroutine*& dyn__coroutine();
    // Get instance field reference: private Normal.Realtime.CoroutineRunner _coroutineRunner
    [[deprecated]] ::Normal::Realtime::CoroutineRunner*& dyn__coroutineRunner();
    // Get instance field reference: private System.Action <cleanupAction>k__BackingField
    [[deprecated]] ::System::Action*& dyn_$cleanupAction$k__BackingField();
    // public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext/Normal.Realtime.State get_state()
    // Offset: 0x1DD410
    ::Normal::Realtime::CoroutineRunner::CoroutineContext::State get_state();
    // private System.Action get_cleanupAction()
    // Offset: 0x1E0EB0
    ::System::Action* get_cleanupAction();
    // public System.Void set_cleanupAction(System.Action value)
    // Offset: 0x2322D0
    void set_cleanupAction(::System::Action* value);
    // public System.Void Bind(System.Collections.IEnumerator coroutineEnumerator)
    // Offset: 0x8B6F10
    void Bind(::System::Collections::IEnumerator* coroutineEnumerator);
    // public System.Void CompleteAndCleanUp()
    // Offset: 0x8B7090
    void CompleteAndCleanUp();
    // public System.Void CancelAndCleanUp()
    // Offset: 0x8B6FA0
    void CancelAndCleanUp();
    // private System.Void _Cancel()
    // Offset: 0x8B7160
    void _Cancel();
    // public System.Void _StartWithCoroutineRunner(Normal.Realtime.CoroutineRunner coroutineRunner)
    // Offset: 0x8B71B0
    void _StartWithCoroutineRunner(::Normal::Realtime::CoroutineRunner* coroutineRunner);
    // public System.Void _OnDestroy()
    // Offset: 0x8B7160
    void _OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x8B7270
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CoroutineRunner::CoroutineContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::CoroutineRunner::CoroutineContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CoroutineRunner::CoroutineContext*, creationType>()));
    }
  }; // Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext
  #pragma pack(pop)
  static check_size<sizeof(CoroutineRunner::CoroutineContext), 48 + sizeof(::System::Action*)> __Normal_Realtime_CoroutineRunner_CoroutineContextSizeCheck;
  static_assert(sizeof(CoroutineRunner::CoroutineContext) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::CoroutineRunner::CoroutineContext::State, "Normal.Realtime", "CoroutineRunner/CoroutineContext/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::CoroutineRunner::CoroutineContext::State (Normal::Realtime::CoroutineRunner::CoroutineContext::*)()>(&Normal::Realtime::CoroutineRunner::CoroutineContext::get_state)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::get_cleanupAction
// Il2CppName: get_cleanupAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (Normal::Realtime::CoroutineRunner::CoroutineContext::*)()>(&Normal::Realtime::CoroutineRunner::CoroutineContext::get_cleanupAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "get_cleanupAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::set_cleanupAction
// Il2CppName: set_cleanupAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::CoroutineContext::*)(::System::Action*)>(&Normal::Realtime::CoroutineRunner::CoroutineContext::set_cleanupAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "set_cleanupAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::CoroutineContext::*)(::System::Collections::IEnumerator*)>(&Normal::Realtime::CoroutineRunner::CoroutineContext::Bind)> {
  static const MethodInfo* get() {
    static auto* coroutineEnumerator = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coroutineEnumerator});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::CompleteAndCleanUp
// Il2CppName: CompleteAndCleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::CoroutineContext::*)()>(&Normal::Realtime::CoroutineRunner::CoroutineContext::CompleteAndCleanUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "CompleteAndCleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::CancelAndCleanUp
// Il2CppName: CancelAndCleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::CoroutineContext::*)()>(&Normal::Realtime::CoroutineRunner::CoroutineContext::CancelAndCleanUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "CancelAndCleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::_Cancel
// Il2CppName: _Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::CoroutineContext::*)()>(&Normal::Realtime::CoroutineRunner::CoroutineContext::_Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "_Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::_StartWithCoroutineRunner
// Il2CppName: _StartWithCoroutineRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::CoroutineContext::*)(::Normal::Realtime::CoroutineRunner*)>(&Normal::Realtime::CoroutineRunner::CoroutineContext::_StartWithCoroutineRunner)> {
  static const MethodInfo* get() {
    static auto* coroutineRunner = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "CoroutineRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "_StartWithCoroutineRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coroutineRunner});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::_OnDestroy
// Il2CppName: _OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::CoroutineContext::*)()>(&Normal::Realtime::CoroutineRunner::CoroutineContext::_OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner::CoroutineContext*), "_OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
