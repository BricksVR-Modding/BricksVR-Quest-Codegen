// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RoomInfoResponse
  class RoomInfoResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RoomInfoResponse);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RoomInfoResponse*, "", "RoomInfoResponse");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: RoomInfoResponse
  // [TokenAttribute] Offset: FFFFFFFF
  class RoomInfoResponse : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.String ownerIdPrefix
    // Size: 0x8
    // Offset: 0x10
    ::StringW ownerIdPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String brickCount
    // Size: 0x8
    // Offset: 0x18
    ::StringW brickCount;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String locked
    // Size: 0x8
    // Offset: 0x20
    ::StringW locked;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String name
    // Size: 0x8
    // Offset: 0x28
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean error
    // Size: 0x1
    // Offset: 0x30
    bool error;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String ownerIdPrefix
    ::StringW& dyn_ownerIdPrefix();
    // Get instance field reference: public System.String brickCount
    ::StringW& dyn_brickCount();
    // Get instance field reference: public System.String locked
    ::StringW& dyn_locked();
    // Get instance field reference: public System.String name
    ::StringW& dyn_name();
    // Get instance field reference: public System.Boolean error
    bool& dyn_error();
    // public System.Boolean get_Exists()
    // Offset: 0x10B5EE4
    bool get_Exists();
    // public System.Void .ctor()
    // Offset: 0x10B5EF4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomInfoResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RoomInfoResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomInfoResponse*, creationType>()));
    }
  }; // RoomInfoResponse
  #pragma pack(pop)
  static check_size<sizeof(RoomInfoResponse), 48 + sizeof(bool)> __GlobalNamespace_RoomInfoResponseSizeCheck;
  static_assert(sizeof(RoomInfoResponse) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RoomInfoResponse::get_Exists
// Il2CppName: get_Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RoomInfoResponse::*)()>(&GlobalNamespace::RoomInfoResponse::get_Exists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RoomInfoResponse*), "get_Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RoomInfoResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
