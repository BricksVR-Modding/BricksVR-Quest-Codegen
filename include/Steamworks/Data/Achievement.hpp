// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: Achievement
  struct Achievement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::Achievement, "Steamworks.Data", "Achievement");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.Achievement
  // [TokenAttribute] Offset: FFFFFFFF
  struct Achievement/*, public ::System::ValueType*/ {
    public:
    public:
    // System.String Value
    // Size: 0x8
    // Offset: 0x0
    ::StringW Value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: Achievement
    constexpr Achievement(::StringW Value_ = {}) noexcept : Value{Value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Value;
    }
    // Get instance field reference: System.String Value
    [[deprecated]] ::StringW& dyn_Value();
    // public System.Void .ctor(System.String name)
    // Offset: 0x2F6BE0
    // ABORTED: conflicts with another method.  Achievement(::StringW name);
    // public override System.String ToString()
    // Offset: 0x2BAE20
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Steamworks.Data.Achievement
  #pragma pack(pop)
  static check_size<sizeof(Achievement), 0 + sizeof(::StringW)> __Steamworks_Data_AchievementSizeCheck;
  static_assert(sizeof(Achievement) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Data::Achievement::Achievement
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::Data::Achievement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Steamworks::Data::Achievement::*)()>(&Steamworks::Data::Achievement::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::Achievement), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
