// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UserSettings
  class UserSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UserSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UserSettings*, "", "UserSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: UserSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class UserSettings : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::UserSettings::SerializableBoolEvent
    class SerializableBoolEvent;
    // Nested type: ::GlobalNamespace::UserSettings::SerializableFloatEvent
    class SerializableFloatEvent;
    // Nested type: ::GlobalNamespace::UserSettings::SerializableStringEvent
    class SerializableStringEvent;
    // Nested type: ::GlobalNamespace::UserSettings::SerializableIntEvent
    class SerializableIntEvent;
    public:
    // public UserSettings/SerializableBoolEvent TeleportTriggerEnabledUpdated
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* TeleportTriggerEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableBoolEvent MicrophoneEnabledUpdated
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* MicrophoneEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableBoolEvent OtherPlayersMicrophonesEnabledUpdated
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* OtherPlayersMicrophonesEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableBoolEvent PerformanceModeEnabledUpdated
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* PerformanceModeEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableBoolEvent PlayMusicEnabledUpdated
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* PlayMusicEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableBoolEvent SmoothRotationEnabledUpdated
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* SmoothRotationEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableBoolEvent BrickClickSoundsEnabledUpdated
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* BrickClickSoundsEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableBoolEvent PushToTalkEnabledUpdated
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::UserSettings::SerializableBoolEvent* PushToTalkEnabledUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableBoolEvent*) == 0x8);
    // public UserSettings/SerializableFloatEvent MusicVolumeUpdated
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::UserSettings::SerializableFloatEvent* MusicVolumeUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableFloatEvent*) == 0x8);
    // public UserSettings/SerializableFloatEvent MovementSpeedUpdated
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::UserSettings::SerializableFloatEvent* MovementSpeedUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableFloatEvent*) == 0x8);
    // public UserSettings/SerializableFloatEvent RotationSpeedUpdated
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::UserSettings::SerializableFloatEvent* RotationSpeedUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableFloatEvent*) == 0x8);
    // public UserSettings/SerializableFloatEvent VignetteStrengthUpdated
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::UserSettings::SerializableFloatEvent* VignetteStrengthUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableFloatEvent*) == 0x8);
    // public UserSettings/SerializableIntEvent RenderDistanceUpdated
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::UserSettings::SerializableIntEvent* RenderDistanceUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableIntEvent*) == 0x8);
    // public UserSettings/SerializableIntEvent PlayerScaleUpdated
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::UserSettings::SerializableIntEvent* PlayerScaleUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableIntEvent*) == 0x8);
    // public UserSettings/SerializableIntEvent PrimaryAvatarColorUpdated
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::UserSettings::SerializableIntEvent* PrimaryAvatarColorUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableIntEvent*) == 0x8);
    // public UserSettings/SerializableIntEvent SecondaryAvatarColorUpdated
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::UserSettings::SerializableIntEvent* SecondaryAvatarColorUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableIntEvent*) == 0x8);
    // public UserSettings/SerializableIntEvent AvatarMouthUpdated
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::UserSettings::SerializableIntEvent* AvatarMouthUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableIntEvent*) == 0x8);
    // public UserSettings/SerializableIntEvent AvatarEyesUpdated
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::UserSettings::SerializableIntEvent* AvatarEyesUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableIntEvent*) == 0x8);
    // public UserSettings/SerializableIntEvent BrickShininessUpdated
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::UserSettings::SerializableIntEvent* BrickShininessUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableIntEvent*) == 0x8);
    // public UserSettings/SerializableStringEvent NicknameUpdated
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::UserSettings::SerializableStringEvent* NicknameUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings::SerializableStringEvent*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private UserSettings _instance
    static ::GlobalNamespace::UserSettings* _get__instance();
    // Set static field: static private UserSettings _instance
    static void _set__instance(::GlobalNamespace::UserSettings* value);
    // static field const value: static private System.String TeleportTriggersKey
    static constexpr const char* TeleportTriggersKey = "teleport_triggers";
    // Get static field: static private System.String TeleportTriggersKey
    static ::StringW _get_TeleportTriggersKey();
    // Set static field: static private System.String TeleportTriggersKey
    static void _set_TeleportTriggersKey(::StringW value);
    // static field const value: static private System.String MicrophoneEnabledKey
    static constexpr const char* MicrophoneEnabledKey = "microphone_enabled";
    // Get static field: static private System.String MicrophoneEnabledKey
    static ::StringW _get_MicrophoneEnabledKey();
    // Set static field: static private System.String MicrophoneEnabledKey
    static void _set_MicrophoneEnabledKey(::StringW value);
    // static field const value: static private System.String OtherPlayersMicrophonesEnabledKey
    static constexpr const char* OtherPlayersMicrophonesEnabledKey = "other_player_mics_enabled";
    // Get static field: static private System.String OtherPlayersMicrophonesEnabledKey
    static ::StringW _get_OtherPlayersMicrophonesEnabledKey();
    // Set static field: static private System.String OtherPlayersMicrophonesEnabledKey
    static void _set_OtherPlayersMicrophonesEnabledKey(::StringW value);
    // static field const value: static private System.String PerformanceModeEnabledKey
    static constexpr const char* PerformanceModeEnabledKey = "super_ultra_performance_mode";
    // Get static field: static private System.String PerformanceModeEnabledKey
    static ::StringW _get_PerformanceModeEnabledKey();
    // Set static field: static private System.String PerformanceModeEnabledKey
    static void _set_PerformanceModeEnabledKey(::StringW value);
    // static field const value: static private System.String PlayMusicEnabledKey
    static constexpr const char* PlayMusicEnabledKey = "play_music";
    // Get static field: static private System.String PlayMusicEnabledKey
    static ::StringW _get_PlayMusicEnabledKey();
    // Set static field: static private System.String PlayMusicEnabledKey
    static void _set_PlayMusicEnabledKey(::StringW value);
    // static field const value: static private System.String SmoothRotationEnabledKey
    static constexpr const char* SmoothRotationEnabledKey = "smooth_rotation";
    // Get static field: static private System.String SmoothRotationEnabledKey
    static ::StringW _get_SmoothRotationEnabledKey();
    // Set static field: static private System.String SmoothRotationEnabledKey
    static void _set_SmoothRotationEnabledKey(::StringW value);
    // static field const value: static private System.String MusicVolumeKey
    static constexpr const char* MusicVolumeKey = "music_volume";
    // Get static field: static private System.String MusicVolumeKey
    static ::StringW _get_MusicVolumeKey();
    // Set static field: static private System.String MusicVolumeKey
    static void _set_MusicVolumeKey(::StringW value);
    // static field const value: static private System.String MovementSpeedKey
    static constexpr const char* MovementSpeedKey = "movement_speed";
    // Get static field: static private System.String MovementSpeedKey
    static ::StringW _get_MovementSpeedKey();
    // Set static field: static private System.String MovementSpeedKey
    static void _set_MovementSpeedKey(::StringW value);
    // static field const value: static private System.String RotationSpeedKey
    static constexpr const char* RotationSpeedKey = "rotation_speed";
    // Get static field: static private System.String RotationSpeedKey
    static ::StringW _get_RotationSpeedKey();
    // Set static field: static private System.String RotationSpeedKey
    static void _set_RotationSpeedKey(::StringW value);
    // static field const value: static private System.String VignetteStrengthKey
    static constexpr const char* VignetteStrengthKey = "vignette_strength";
    // Get static field: static private System.String VignetteStrengthKey
    static ::StringW _get_VignetteStrengthKey();
    // Set static field: static private System.String VignetteStrengthKey
    static void _set_VignetteStrengthKey(::StringW value);
    // static field const value: static private System.String NicknameKey
    static constexpr const char* NicknameKey = "nickname";
    // Get static field: static private System.String NicknameKey
    static ::StringW _get_NicknameKey();
    // Set static field: static private System.String NicknameKey
    static void _set_NicknameKey(::StringW value);
    // static field const value: static private System.String BrickClickSoundsKey
    static constexpr const char* BrickClickSoundsKey = "brick_click_sounds";
    // Get static field: static private System.String BrickClickSoundsKey
    static ::StringW _get_BrickClickSoundsKey();
    // Set static field: static private System.String BrickClickSoundsKey
    static void _set_BrickClickSoundsKey(::StringW value);
    // static field const value: static private System.String TutorialPlayedKey
    static constexpr const char* TutorialPlayedKey = "tutorial_played";
    // Get static field: static private System.String TutorialPlayedKey
    static ::StringW _get_TutorialPlayedKey();
    // Set static field: static private System.String TutorialPlayedKey
    static void _set_TutorialPlayedKey(::StringW value);
    // static field const value: static private System.String RecentRoomsKey
    static constexpr const char* RecentRoomsKey = "recent_rooms";
    // Get static field: static private System.String RecentRoomsKey
    static ::StringW _get_RecentRoomsKey();
    // Set static field: static private System.String RecentRoomsKey
    static void _set_RecentRoomsKey(::StringW value);
    // static field const value: static private System.String RenderDistanceKey
    static constexpr const char* RenderDistanceKey = "render_distance";
    // Get static field: static private System.String RenderDistanceKey
    static ::StringW _get_RenderDistanceKey();
    // Set static field: static private System.String RenderDistanceKey
    static void _set_RenderDistanceKey(::StringW value);
    // static field const value: static private System.String PlayerScaleKey
    static constexpr const char* PlayerScaleKey = "player_scale";
    // Get static field: static private System.String PlayerScaleKey
    static ::StringW _get_PlayerScaleKey();
    // Set static field: static private System.String PlayerScaleKey
    static void _set_PlayerScaleKey(::StringW value);
    // static field const value: static private System.String PushToTalkKey
    static constexpr const char* PushToTalkKey = "push_to_talk";
    // Get static field: static private System.String PushToTalkKey
    static ::StringW _get_PushToTalkKey();
    // Set static field: static private System.String PushToTalkKey
    static void _set_PushToTalkKey(::StringW value);
    // static field const value: static private System.String PrimaryAvatarColorKey
    static constexpr const char* PrimaryAvatarColorKey = "primary_avatar_color";
    // Get static field: static private System.String PrimaryAvatarColorKey
    static ::StringW _get_PrimaryAvatarColorKey();
    // Set static field: static private System.String PrimaryAvatarColorKey
    static void _set_PrimaryAvatarColorKey(::StringW value);
    // static field const value: static private System.String SecondaryAvatarColorKey
    static constexpr const char* SecondaryAvatarColorKey = "seconary_avatar_color";
    // Get static field: static private System.String SecondaryAvatarColorKey
    static ::StringW _get_SecondaryAvatarColorKey();
    // Set static field: static private System.String SecondaryAvatarColorKey
    static void _set_SecondaryAvatarColorKey(::StringW value);
    // static field const value: static private System.String AvatarMouthKey
    static constexpr const char* AvatarMouthKey = "avatar_mouth";
    // Get static field: static private System.String AvatarMouthKey
    static ::StringW _get_AvatarMouthKey();
    // Set static field: static private System.String AvatarMouthKey
    static void _set_AvatarMouthKey(::StringW value);
    // static field const value: static private System.String AvatarEyesKey
    static constexpr const char* AvatarEyesKey = "avatar_eyes";
    // Get static field: static private System.String AvatarEyesKey
    static ::StringW _get_AvatarEyesKey();
    // Set static field: static private System.String AvatarEyesKey
    static void _set_AvatarEyesKey(::StringW value);
    // static field const value: static private System.String BrickShininessKey
    static constexpr const char* BrickShininessKey = "brick_shininess";
    // Get static field: static private System.String BrickShininessKey
    static ::StringW _get_BrickShininessKey();
    // Set static field: static private System.String BrickShininessKey
    static void _set_BrickShininessKey(::StringW value);
    // Get instance field reference: public UserSettings/SerializableBoolEvent TeleportTriggerEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_TeleportTriggerEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableBoolEvent MicrophoneEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_MicrophoneEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableBoolEvent OtherPlayersMicrophonesEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_OtherPlayersMicrophonesEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableBoolEvent PerformanceModeEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_PerformanceModeEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableBoolEvent PlayMusicEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_PlayMusicEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableBoolEvent SmoothRotationEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_SmoothRotationEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableBoolEvent BrickClickSoundsEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_BrickClickSoundsEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableBoolEvent PushToTalkEnabledUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableBoolEvent*& dyn_PushToTalkEnabledUpdated();
    // Get instance field reference: public UserSettings/SerializableFloatEvent MusicVolumeUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableFloatEvent*& dyn_MusicVolumeUpdated();
    // Get instance field reference: public UserSettings/SerializableFloatEvent MovementSpeedUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableFloatEvent*& dyn_MovementSpeedUpdated();
    // Get instance field reference: public UserSettings/SerializableFloatEvent RotationSpeedUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableFloatEvent*& dyn_RotationSpeedUpdated();
    // Get instance field reference: public UserSettings/SerializableFloatEvent VignetteStrengthUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableFloatEvent*& dyn_VignetteStrengthUpdated();
    // Get instance field reference: public UserSettings/SerializableIntEvent RenderDistanceUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableIntEvent*& dyn_RenderDistanceUpdated();
    // Get instance field reference: public UserSettings/SerializableIntEvent PlayerScaleUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableIntEvent*& dyn_PlayerScaleUpdated();
    // Get instance field reference: public UserSettings/SerializableIntEvent PrimaryAvatarColorUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableIntEvent*& dyn_PrimaryAvatarColorUpdated();
    // Get instance field reference: public UserSettings/SerializableIntEvent SecondaryAvatarColorUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableIntEvent*& dyn_SecondaryAvatarColorUpdated();
    // Get instance field reference: public UserSettings/SerializableIntEvent AvatarMouthUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableIntEvent*& dyn_AvatarMouthUpdated();
    // Get instance field reference: public UserSettings/SerializableIntEvent AvatarEyesUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableIntEvent*& dyn_AvatarEyesUpdated();
    // Get instance field reference: public UserSettings/SerializableIntEvent BrickShininessUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableIntEvent*& dyn_BrickShininessUpdated();
    // Get instance field reference: public UserSettings/SerializableStringEvent NicknameUpdated
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings::SerializableStringEvent*& dyn_NicknameUpdated();
    // public System.Boolean get_TeleportTriggersEnabled()
    // Offset: 0x925F10
    bool get_TeleportTriggersEnabled();
    // public System.Void set_TeleportTriggersEnabled(System.Boolean value)
    // Offset: 0x9268D0
    void set_TeleportTriggersEnabled(bool value);
    // public System.Boolean get_MicrophoneEnabled()
    // Offset: 0x925B50
    bool get_MicrophoneEnabled();
    // public System.Void set_MicrophoneEnabled(System.Boolean value)
    // Offset: 0x9261C0
    void set_MicrophoneEnabled(bool value);
    // public System.Boolean get_OtherPlayersMicsEnabled()
    // Offset: 0x925C50
    bool get_OtherPlayersMicsEnabled();
    // public System.Void set_OtherPlayersMicsEnabled(System.Boolean value)
    // Offset: 0x9263F0
    void set_OtherPlayersMicsEnabled(bool value);
    // public System.Boolean get_SuperUltraPerformanceMode()
    // Offset: 0x925ED0
    bool get_SuperUltraPerformanceMode();
    // public System.Void set_SuperUltraPerformanceMode(System.Boolean value)
    // Offset: 0x926870
    void set_SuperUltraPerformanceMode(bool value);
    // public System.Boolean get_PlayMusicEnabled()
    // Offset: 0x925C90
    bool get_PlayMusicEnabled();
    // public System.Void set_PlayMusicEnabled(System.Boolean value)
    // Offset: 0x926450
    void set_PlayMusicEnabled(bool value);
    // public System.Boolean get_SmoothRotationEnabled()
    // Offset: 0x925E90
    bool get_SmoothRotationEnabled();
    // public System.Void set_SmoothRotationEnabled(System.Boolean value)
    // Offset: 0x926810
    void set_SmoothRotationEnabled(bool value);
    // public System.Single get_MusicVolume()
    // Offset: 0x925BD0
    float get_MusicVolume();
    // public System.Void set_MusicVolume(System.Single value)
    // Offset: 0x9262C0
    void set_MusicVolume(float value);
    // public System.Single get_MovementSpeed()
    // Offset: 0x925B90
    float get_MovementSpeed();
    // public System.Void set_MovementSpeed(System.Single value)
    // Offset: 0x926220
    void set_MovementSpeed(float value);
    // public System.Single get_RotationSpeed()
    // Offset: 0x925E10
    float get_RotationSpeed();
    // public System.Void set_RotationSpeed(System.Single value)
    // Offset: 0x926710
    void set_RotationSpeed(float value);
    // public System.Single get_VignetteStrength()
    // Offset: 0x925F90
    float get_VignetteStrength();
    // public System.Void set_VignetteStrength(System.Single value)
    // Offset: 0x926970
    void set_VignetteStrength(float value);
    // public System.String get_Nickname()
    // Offset: 0x925C10
    ::StringW get_Nickname();
    // public System.Void set_Nickname(System.String value)
    // Offset: 0x926360
    void set_Nickname(::StringW value);
    // public System.Boolean get_BrickClickSoundsEnabled()
    // Offset: 0x925AD0
    bool get_BrickClickSoundsEnabled();
    // public System.Void set_BrickClickSoundsEnabled(System.Boolean value)
    // Offset: 0x926090
    void set_BrickClickSoundsEnabled(bool value);
    // public System.Boolean get_TutorialPlayed()
    // Offset: 0x925F50
    bool get_TutorialPlayed();
    // public System.Void set_TutorialPlayed(System.Boolean value)
    // Offset: 0x926930
    void set_TutorialPlayed(bool value);
    // public System.String get_RecentRooms()
    // Offset: 0x925D90
    ::StringW get_RecentRooms();
    // public System.Int32 get_RenderDistance()
    // Offset: 0x925DD0
    int get_RenderDistance();
    // public System.Void set_RenderDistance(System.Int32 value)
    // Offset: 0x9266B0
    void set_RenderDistance(int value);
    // public System.Void set_RenderDistanceF(System.Single value)
    // Offset: 0x926650
    void set_RenderDistanceF(float value);
    // public System.Int32 get_PlayerScale()
    // Offset: 0x925CD0
    int get_PlayerScale();
    // public System.Void set_PlayerScale(System.Int32 value)
    // Offset: 0x926520
    void set_PlayerScale(int value);
    // public System.Void set_PlayerScaleF(System.Single value)
    // Offset: 0x9264B0
    void set_PlayerScaleF(float value);
    // public System.Boolean get_PushToTalkEnabled()
    // Offset: 0x925D50
    bool get_PushToTalkEnabled();
    // public System.Void set_PushToTalkEnabled(System.Boolean value)
    // Offset: 0x9265E0
    void set_PushToTalkEnabled(bool value);
    // public System.Int32 get_PrimaryAvatarColor()
    // Offset: 0x925D10
    int get_PrimaryAvatarColor();
    // public System.Void set_PrimaryAvatarColor(System.Int32 value)
    // Offset: 0x926580
    void set_PrimaryAvatarColor(int value);
    // public System.Int32 get_SecondaryAvatarColor()
    // Offset: 0x925E50
    int get_SecondaryAvatarColor();
    // public System.Void set_SecondaryAvatarColor(System.Int32 value)
    // Offset: 0x9267B0
    void set_SecondaryAvatarColor(int value);
    // public System.Int32 get_AvatarMouth()
    // Offset: 0x925A90
    int get_AvatarMouth();
    // public System.Void set_AvatarMouth(System.Int32 value)
    // Offset: 0x926030
    void set_AvatarMouth(int value);
    // public System.Int32 get_AvatarEyes()
    // Offset: 0x925A50
    int get_AvatarEyes();
    // public System.Void set_AvatarEyes(System.Int32 value)
    // Offset: 0x925FD0
    void set_AvatarEyes(int value);
    // public System.Int32 get_BrickShininess()
    // Offset: 0x925B10
    int get_BrickShininess();
    // public System.Void set_BrickShininess(System.Int32 value)
    // Offset: 0x926160
    void set_BrickShininess(int value);
    // public System.Void set_BrickShininessF(System.Single value)
    // Offset: 0x9260F0
    void set_BrickShininessF(float value);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UserSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserSettings*, creationType>()));
    }
    // static public UserSettings GetInstance()
    // Offset: 0x9251B0
    static ::GlobalNamespace::UserSettings* GetInstance();
    // public System.Void Awake()
    // Offset: 0x9251A0
    void Awake();
    // public System.Void Start()
    // Offset: 0x925A40
    void Start();
    // private System.Void InitializeSettings()
    // Offset: 0x925270
    void InitializeSettings();
    // private System.Void SendInitialEvents()
    // Offset: 0x925630
    void SendInitialEvents();
    // private System.Void SendNicknameToServerOnLoad()
    // Offset: 0x9259A0
    void SendNicknameToServerOnLoad();
    // public System.Void AddRecentRoom(System.String room)
    // Offset: 0x925080
    void AddRecentRoom(::StringW room);
  }; // UserSettings
  #pragma pack(pop)
  static check_size<sizeof(UserSettings), 176 + sizeof(::GlobalNamespace::UserSettings::SerializableStringEvent*)> __GlobalNamespace_UserSettingsSizeCheck;
  static_assert(sizeof(UserSettings) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_TeleportTriggersEnabled
// Il2CppName: get_TeleportTriggersEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_TeleportTriggersEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_TeleportTriggersEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_TeleportTriggersEnabled
// Il2CppName: set_TeleportTriggersEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_TeleportTriggersEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_TeleportTriggersEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_MicrophoneEnabled
// Il2CppName: get_MicrophoneEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_MicrophoneEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_MicrophoneEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_MicrophoneEnabled
// Il2CppName: set_MicrophoneEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_MicrophoneEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_MicrophoneEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_OtherPlayersMicsEnabled
// Il2CppName: get_OtherPlayersMicsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_OtherPlayersMicsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_OtherPlayersMicsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_OtherPlayersMicsEnabled
// Il2CppName: set_OtherPlayersMicsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_OtherPlayersMicsEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_OtherPlayersMicsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_SuperUltraPerformanceMode
// Il2CppName: get_SuperUltraPerformanceMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_SuperUltraPerformanceMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_SuperUltraPerformanceMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_SuperUltraPerformanceMode
// Il2CppName: set_SuperUltraPerformanceMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_SuperUltraPerformanceMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_SuperUltraPerformanceMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_PlayMusicEnabled
// Il2CppName: get_PlayMusicEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_PlayMusicEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_PlayMusicEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_PlayMusicEnabled
// Il2CppName: set_PlayMusicEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_PlayMusicEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_PlayMusicEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_SmoothRotationEnabled
// Il2CppName: get_SmoothRotationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_SmoothRotationEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_SmoothRotationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_SmoothRotationEnabled
// Il2CppName: set_SmoothRotationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_SmoothRotationEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_SmoothRotationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_MusicVolume
// Il2CppName: get_MusicVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_MusicVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_MusicVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_MusicVolume
// Il2CppName: set_MusicVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(float)>(&GlobalNamespace::UserSettings::set_MusicVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_MusicVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_MovementSpeed
// Il2CppName: get_MovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_MovementSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_MovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_MovementSpeed
// Il2CppName: set_MovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(float)>(&GlobalNamespace::UserSettings::set_MovementSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_MovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_RotationSpeed
// Il2CppName: get_RotationSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_RotationSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_RotationSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_RotationSpeed
// Il2CppName: set_RotationSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(float)>(&GlobalNamespace::UserSettings::set_RotationSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_RotationSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_VignetteStrength
// Il2CppName: get_VignetteStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_VignetteStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_VignetteStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_VignetteStrength
// Il2CppName: set_VignetteStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(float)>(&GlobalNamespace::UserSettings::set_VignetteStrength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_VignetteStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_Nickname
// Il2CppName: get_Nickname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_Nickname)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_Nickname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_Nickname
// Il2CppName: set_Nickname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(::StringW)>(&GlobalNamespace::UserSettings::set_Nickname)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_Nickname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_BrickClickSoundsEnabled
// Il2CppName: get_BrickClickSoundsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_BrickClickSoundsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_BrickClickSoundsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_BrickClickSoundsEnabled
// Il2CppName: set_BrickClickSoundsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_BrickClickSoundsEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_BrickClickSoundsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_TutorialPlayed
// Il2CppName: get_TutorialPlayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_TutorialPlayed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_TutorialPlayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_TutorialPlayed
// Il2CppName: set_TutorialPlayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_TutorialPlayed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_TutorialPlayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_RecentRooms
// Il2CppName: get_RecentRooms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_RecentRooms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_RecentRooms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_RenderDistance
// Il2CppName: get_RenderDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_RenderDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_RenderDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_RenderDistance
// Il2CppName: set_RenderDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(int)>(&GlobalNamespace::UserSettings::set_RenderDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_RenderDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_RenderDistanceF
// Il2CppName: set_RenderDistanceF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(float)>(&GlobalNamespace::UserSettings::set_RenderDistanceF)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_RenderDistanceF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_PlayerScale
// Il2CppName: get_PlayerScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_PlayerScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_PlayerScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_PlayerScale
// Il2CppName: set_PlayerScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(int)>(&GlobalNamespace::UserSettings::set_PlayerScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_PlayerScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_PlayerScaleF
// Il2CppName: set_PlayerScaleF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(float)>(&GlobalNamespace::UserSettings::set_PlayerScaleF)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_PlayerScaleF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_PushToTalkEnabled
// Il2CppName: get_PushToTalkEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_PushToTalkEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_PushToTalkEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_PushToTalkEnabled
// Il2CppName: set_PushToTalkEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(bool)>(&GlobalNamespace::UserSettings::set_PushToTalkEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_PushToTalkEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_PrimaryAvatarColor
// Il2CppName: get_PrimaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_PrimaryAvatarColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_PrimaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_PrimaryAvatarColor
// Il2CppName: set_PrimaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(int)>(&GlobalNamespace::UserSettings::set_PrimaryAvatarColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_PrimaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_SecondaryAvatarColor
// Il2CppName: get_SecondaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_SecondaryAvatarColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_SecondaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_SecondaryAvatarColor
// Il2CppName: set_SecondaryAvatarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(int)>(&GlobalNamespace::UserSettings::set_SecondaryAvatarColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_SecondaryAvatarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_AvatarMouth
// Il2CppName: get_AvatarMouth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_AvatarMouth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_AvatarMouth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_AvatarMouth
// Il2CppName: set_AvatarMouth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(int)>(&GlobalNamespace::UserSettings::set_AvatarMouth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_AvatarMouth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_AvatarEyes
// Il2CppName: get_AvatarEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_AvatarEyes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_AvatarEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_AvatarEyes
// Il2CppName: set_AvatarEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(int)>(&GlobalNamespace::UserSettings::set_AvatarEyes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_AvatarEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::get_BrickShininess
// Il2CppName: get_BrickShininess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::get_BrickShininess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "get_BrickShininess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_BrickShininess
// Il2CppName: set_BrickShininess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(int)>(&GlobalNamespace::UserSettings::set_BrickShininess)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_BrickShininess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::set_BrickShininessF
// Il2CppName: set_BrickShininessF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(float)>(&GlobalNamespace::UserSettings::set_BrickShininessF)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "set_BrickShininessF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::UserSettings* (*)()>(&GlobalNamespace::UserSettings::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::InitializeSettings
// Il2CppName: InitializeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::InitializeSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "InitializeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::SendInitialEvents
// Il2CppName: SendInitialEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::SendInitialEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "SendInitialEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::SendNicknameToServerOnLoad
// Il2CppName: SendNicknameToServerOnLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)()>(&GlobalNamespace::UserSettings::SendNicknameToServerOnLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "SendNicknameToServerOnLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UserSettings::AddRecentRoom
// Il2CppName: AddRecentRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UserSettings::*)(::StringW)>(&GlobalNamespace::UserSettings::AddRecentRoom)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UserSettings*), "AddRecentRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
