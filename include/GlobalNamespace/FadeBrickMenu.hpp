// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SliderGrabbable
  class SliderGrabbable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FadeBrickMenu
  class FadeBrickMenu;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FadeBrickMenu);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FadeBrickMenu*, "", "FadeBrickMenu");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5A
  #pragma pack(push, 1)
  // Autogenerated type: FadeBrickMenu
  // [TokenAttribute] Offset: FFFFFFFF
  class FadeBrickMenu : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Vector3 _initialScale
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 initialScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: initialScale and: t
    char __padding0[0x4] = {};
    // private UnityEngine.Transform _t
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* t;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _timeStartedFading
    // Size: 0x4
    // Offset: 0x30
    float timeStartedFading;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: timeStartedFading and: objectToScale
    char __padding2[0x4] = {};
    // public UnityEngine.GameObject objectToScale
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* objectToScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public SliderGrabbable hueGrabber
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SliderGrabbable* hueGrabber;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderGrabbable*) == 0x8);
    // public SliderGrabbable satGrabber
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::SliderGrabbable* satGrabber;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderGrabbable*) == 0x8);
    // public SliderGrabbable valueGrabber
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::SliderGrabbable* valueGrabber;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderGrabbable*) == 0x8);
    // private System.Boolean _fadeBackwards
    // Size: 0x1
    // Offset: 0x58
    bool fadeBackwards;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x59
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Single _fadeDuration
    static float _get__fadeDuration();
    // Set static field: static private readonly System.Single _fadeDuration
    static void _set__fadeDuration(float value);
    // Get static field: static private readonly UnityEngine.Vector3 ScaleToStartAt
    static ::UnityEngine::Vector3 _get_ScaleToStartAt();
    // Set static field: static private readonly UnityEngine.Vector3 ScaleToStartAt
    static void _set_ScaleToStartAt(::UnityEngine::Vector3 value);
    // Get instance field reference: private UnityEngine.Vector3 _initialScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__initialScale();
    // Get instance field reference: private UnityEngine.Transform _t
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__t();
    // Get instance field reference: private System.Single _timeStartedFading
    [[deprecated("Use field access instead!")]] float& dyn__timeStartedFading();
    // Get instance field reference: public UnityEngine.GameObject objectToScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_objectToScale();
    // Get instance field reference: public SliderGrabbable hueGrabber
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderGrabbable*& dyn_hueGrabber();
    // Get instance field reference: public SliderGrabbable satGrabber
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderGrabbable*& dyn_satGrabber();
    // Get instance field reference: public SliderGrabbable valueGrabber
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderGrabbable*& dyn_valueGrabber();
    // Get instance field reference: private System.Boolean _fadeBackwards
    [[deprecated("Use field access instead!")]] bool& dyn__fadeBackwards();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated("Use field access instead!")]] bool& dyn__initialized();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FadeBrickMenu* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeBrickMenu::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FadeBrickMenu*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x6B4CC0
    static void _cctor();
    // private System.Void Initialize()
    // Offset: 0x6B4870
    void Initialize();
    // private System.Void OnEnable()
    // Offset: 0x6B4930
    void OnEnable();
    // public System.Void SetBackwardsFade()
    // Offset: 0x6B4AA0
    void SetBackwardsFade();
    // public System.Void BeginGrow()
    // Offset: 0x6B4760
    void BeginGrow();
    // public System.Void BeginShrink()
    // Offset: 0x6B4810
    void BeginShrink();
    // private System.Void Update()
    // Offset: 0x6B4AD0
    void Update();
    // private System.Void FixSliderPositions()
    // Offset: 0x6B4820
    void FixSliderPositions();
  }; // FadeBrickMenu
  #pragma pack(pop)
  static check_size<sizeof(FadeBrickMenu), 89 + sizeof(bool)> __GlobalNamespace_FadeBrickMenuSizeCheck;
  static_assert(sizeof(FadeBrickMenu) == 0x5A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FadeBrickMenu::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeBrickMenu::*)()>(&GlobalNamespace::FadeBrickMenu::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeBrickMenu::*)()>(&GlobalNamespace::FadeBrickMenu::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::SetBackwardsFade
// Il2CppName: SetBackwardsFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeBrickMenu::*)()>(&GlobalNamespace::FadeBrickMenu::SetBackwardsFade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), "SetBackwardsFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::BeginGrow
// Il2CppName: BeginGrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeBrickMenu::*)()>(&GlobalNamespace::FadeBrickMenu::BeginGrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), "BeginGrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::BeginShrink
// Il2CppName: BeginShrink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeBrickMenu::*)()>(&GlobalNamespace::FadeBrickMenu::BeginShrink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), "BeginShrink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeBrickMenu::*)()>(&GlobalNamespace::FadeBrickMenu::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeBrickMenu::FixSliderPositions
// Il2CppName: FixSliderPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeBrickMenu::*)()>(&GlobalNamespace::FadeBrickMenu::FixSliderPositions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeBrickMenu*), "FixSliderPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
