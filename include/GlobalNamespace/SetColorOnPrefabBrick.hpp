// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SetColorOnPrefabBrick
  class SetColorOnPrefabBrick;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SetColorOnPrefabBrick);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SetColorOnPrefabBrick*, "", "SetColorOnPrefabBrick");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: SetColorOnPrefabBrick
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class SetColorOnPrefabBrick : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Int32 Color
    static int _get_Color();
    // Set static field: static private readonly System.Int32 Color
    static void _set_Color(int value);
    // Get static field: static private readonly System.Int32 TexOffset
    static int _get_TexOffset();
    // Set static field: static private readonly System.Int32 TexOffset
    static void _set_TexOffset(int value);
    // Get instance field reference: public UnityEngine.Color color
    ::UnityEngine::Color& dyn_color();
    // private System.Void Start()
    // Offset: 0x10B8D48
    void Start();
    // public System.Void SetColor(UnityEngine.Color newColor)
    // Offset: 0x10B8D54
    void SetColor(::UnityEngine::Color newColor);
    // public System.Void .ctor()
    // Offset: 0x10B8F38
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetColorOnPrefabBrick* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SetColorOnPrefabBrick::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetColorOnPrefabBrick*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x10B8F40
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // SetColorOnPrefabBrick
  #pragma pack(pop)
  static check_size<sizeof(SetColorOnPrefabBrick), 24 + sizeof(::UnityEngine::Color)> __GlobalNamespace_SetColorOnPrefabBrickSizeCheck;
  static_assert(sizeof(SetColorOnPrefabBrick) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SetColorOnPrefabBrick::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SetColorOnPrefabBrick::*)()>(&GlobalNamespace::SetColorOnPrefabBrick::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetColorOnPrefabBrick*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SetColorOnPrefabBrick::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SetColorOnPrefabBrick::*)(::UnityEngine::Color)>(&GlobalNamespace::SetColorOnPrefabBrick::SetColor)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetColorOnPrefabBrick*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SetColorOnPrefabBrick::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SetColorOnPrefabBrick::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SetColorOnPrefabBrick::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetColorOnPrefabBrick*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
