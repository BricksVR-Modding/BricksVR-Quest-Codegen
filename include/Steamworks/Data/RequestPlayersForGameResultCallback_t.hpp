// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Steamworks.ICallbackData
#include "Steamworks/ICallbackData.hpp"
// Including type: Steamworks.Result
#include "Steamworks/Result.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: CallbackType
  struct CallbackType;
}
// Completed forward declares
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: RequestPlayersForGameResultCallback_t
  struct RequestPlayersForGameResultCallback_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::RequestPlayersForGameResultCallback_t, "Steamworks.Data", "RequestPlayersForGameResultCallback_t");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.RequestPlayersForGameResultCallback_t
  // [TokenAttribute] Offset: FFFFFFFF
  struct RequestPlayersForGameResultCallback_t/*, public ::System::ValueType, public ::Steamworks::ICallbackData*/ {
    public:
    // Nested type: ::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t
    struct PlayerAcceptState_t;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t
    // [TokenAttribute] Offset: FFFFFFFF
    struct PlayerAcceptState_t/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PlayerAcceptState_t
      constexpr PlayerAcceptState_t(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t Unknown
      static ::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t _get_Unknown();
      // Set static field: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t Unknown
      static void _set_Unknown(::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t value);
      // static field const value: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerAccepted
      static constexpr const int PlayerAccepted = 1;
      // Get static field: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerAccepted
      static ::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t _get_PlayerAccepted();
      // Set static field: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerAccepted
      static void _set_PlayerAccepted(::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t value);
      // static field const value: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerDeclined
      static constexpr const int PlayerDeclined = 2;
      // Get static field: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerDeclined
      static ::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t _get_PlayerDeclined();
      // Set static field: static public Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerDeclined
      static void _set_PlayerDeclined(::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t
    #pragma pack(pop)
    static check_size<sizeof(RequestPlayersForGameResultCallback_t::PlayerAcceptState_t), 0 + sizeof(int)> __Steamworks_Data_RequestPlayersForGameResultCallback_t_PlayerAcceptState_tSizeCheck;
    static_assert(sizeof(RequestPlayersForGameResultCallback_t::PlayerAcceptState_t) == 0x4);
    public:
    // Steamworks.Result Result
    // Size: 0x4
    // Offset: 0x0
    ::Steamworks::Result Result;
    // Field size check
    static_assert(sizeof(::Steamworks::Result) == 0x4);
    // System.UInt64 LSearchID
    // Size: 0x8
    // Offset: 0x4
    uint64_t LSearchID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.UInt64 SteamIDPlayerFound
    // Size: 0x8
    // Offset: 0xC
    uint64_t SteamIDPlayerFound;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.UInt64 SteamIDLobby
    // Size: 0x8
    // Offset: 0x14
    uint64_t SteamIDLobby;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerAcceptState
    // Size: 0x4
    // Offset: 0x1C
    ::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t PlayerAcceptState;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t) == 0x4);
    // System.Int32 PlayerIndex
    // Size: 0x4
    // Offset: 0x20
    int PlayerIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 TotalPlayersFound
    // Size: 0x4
    // Offset: 0x24
    int TotalPlayersFound;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 TotalPlayersAcceptedGame
    // Size: 0x4
    // Offset: 0x28
    int TotalPlayersAcceptedGame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 SuggestedTeamIndex
    // Size: 0x4
    // Offset: 0x2C
    int SuggestedTeamIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.UInt64 LUniqueGameID
    // Size: 0x8
    // Offset: 0x30
    uint64_t LUniqueGameID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: RequestPlayersForGameResultCallback_t
    constexpr RequestPlayersForGameResultCallback_t(::Steamworks::Result Result_ = {}, uint64_t LSearchID_ = {}, uint64_t SteamIDPlayerFound_ = {}, uint64_t SteamIDLobby_ = {}, ::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t PlayerAcceptState_ = {}, int PlayerIndex_ = {}, int TotalPlayersFound_ = {}, int TotalPlayersAcceptedGame_ = {}, int SuggestedTeamIndex_ = {}, uint64_t LUniqueGameID_ = {}) noexcept : Result{Result_}, LSearchID{LSearchID_}, SteamIDPlayerFound{SteamIDPlayerFound_}, SteamIDLobby{SteamIDLobby_}, PlayerAcceptState{PlayerAcceptState_}, PlayerIndex{PlayerIndex_}, TotalPlayersFound{TotalPlayersFound_}, TotalPlayersAcceptedGame{TotalPlayersAcceptedGame_}, SuggestedTeamIndex{SuggestedTeamIndex_}, LUniqueGameID{LUniqueGameID_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Steamworks::ICallbackData
    operator ::Steamworks::ICallbackData() noexcept {
      return *reinterpret_cast<::Steamworks::ICallbackData*>(this);
    }
    // Get static field: static public System.Int32 _datasize
    static int _get__datasize();
    // Set static field: static public System.Int32 _datasize
    static void _set__datasize(int value);
    // Get instance field reference: Steamworks.Result Result
    ::Steamworks::Result& dyn_Result();
    // Get instance field reference: System.UInt64 LSearchID
    uint64_t& dyn_LSearchID();
    // Get instance field reference: System.UInt64 SteamIDPlayerFound
    uint64_t& dyn_SteamIDPlayerFound();
    // Get instance field reference: System.UInt64 SteamIDLobby
    uint64_t& dyn_SteamIDLobby();
    // Get instance field reference: Steamworks.Data.RequestPlayersForGameResultCallback_t/Steamworks.Data.PlayerAcceptState_t PlayerAcceptState
    ::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t& dyn_PlayerAcceptState();
    // Get instance field reference: System.Int32 PlayerIndex
    int& dyn_PlayerIndex();
    // Get instance field reference: System.Int32 TotalPlayersFound
    int& dyn_TotalPlayersFound();
    // Get instance field reference: System.Int32 TotalPlayersAcceptedGame
    int& dyn_TotalPlayersAcceptedGame();
    // Get instance field reference: System.Int32 SuggestedTeamIndex
    int& dyn_SuggestedTeamIndex();
    // Get instance field reference: System.UInt64 LUniqueGameID
    uint64_t& dyn_LUniqueGameID();
    // public Steamworks.CallbackType get_CallbackType()
    // Offset: 0xA592A4
    ::Steamworks::CallbackType get_CallbackType();
    // static private System.Void .cctor()
    // Offset: 0xA592AC
    static void _cctor();
  }; // Steamworks.Data.RequestPlayersForGameResultCallback_t
  #pragma pack(pop)
  static check_size<sizeof(RequestPlayersForGameResultCallback_t), 48 + sizeof(uint64_t)> __Steamworks_Data_RequestPlayersForGameResultCallback_tSizeCheck;
  static_assert(sizeof(RequestPlayersForGameResultCallback_t) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::RequestPlayersForGameResultCallback_t::PlayerAcceptState_t, "Steamworks.Data", "RequestPlayersForGameResultCallback_t/PlayerAcceptState_t");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Data::RequestPlayersForGameResultCallback_t::get_CallbackType
// Il2CppName: get_CallbackType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::CallbackType (Steamworks::Data::RequestPlayersForGameResultCallback_t::*)()>(&Steamworks::Data::RequestPlayersForGameResultCallback_t::get_CallbackType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::RequestPlayersForGameResultCallback_t), "get_CallbackType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::Data::RequestPlayersForGameResultCallback_t::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::Data::RequestPlayersForGameResultCallback_t::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::RequestPlayersForGameResultCallback_t), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
