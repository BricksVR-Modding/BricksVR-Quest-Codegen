// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Native.Client
#include "Normal/Realtime/Native/Client.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Native::Client::ClientState, "Normal.Realtime.Native", "Client/ClientState");
// Type namespace: Normal.Realtime.Native
namespace Normal::Realtime::Native {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState
  // [TokenAttribute] Offset: FFFFFFFF
  struct Client::ClientState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ClientState
    constexpr ClientState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState New
    static constexpr const int New = 0;
    // Get static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState New
    static ::Normal::Realtime::Native::Client::ClientState _get_New();
    // Set static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState New
    static void _set_New(::Normal::Realtime::Native::Client::ClientState value);
    // static field const value: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Connecting
    static constexpr const int Connecting = 1;
    // Get static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Connecting
    static ::Normal::Realtime::Native::Client::ClientState _get_Connecting();
    // Set static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Connecting
    static void _set_Connecting(::Normal::Realtime::Native::Client::ClientState value);
    // static field const value: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Connected
    static constexpr const int Connected = 2;
    // Get static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Connected
    static ::Normal::Realtime::Native::Client::ClientState _get_Connected();
    // Set static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Connected
    static void _set_Connected(::Normal::Realtime::Native::Client::ClientState value);
    // static field const value: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Disconnected
    static constexpr const int Disconnected = 4;
    // Get static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Disconnected
    static ::Normal::Realtime::Native::Client::ClientState _get_Disconnected();
    // Set static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Disconnected
    static void _set_Disconnected(::Normal::Realtime::Native::Client::ClientState value);
    // static field const value: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Failed
    static constexpr const int Failed = 5;
    // Get static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Failed
    static ::Normal::Realtime::Native::Client::ClientState _get_Failed();
    // Set static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Failed
    static void _set_Failed(::Normal::Realtime::Native::Client::ClientState value);
    // static field const value: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Closed
    static constexpr const int Closed = 6;
    // Get static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Closed
    static ::Normal::Realtime::Native::Client::ClientState _get_Closed();
    // Set static field: static public Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState Closed
    static void _set_Closed(::Normal::Realtime::Native::Client::ClientState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Normal.Realtime.Native.Client/Normal.Realtime.Native.ClientState
  #pragma pack(pop)
  static check_size<sizeof(Client::ClientState), 0 + sizeof(int)> __Normal_Realtime_Native_Client_ClientStateSizeCheck;
  static_assert(sizeof(Client::ClientState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
