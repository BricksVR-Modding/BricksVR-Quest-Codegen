// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRSimulator
  class VRSimulator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRSimulator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRSimulator*, "", "VRSimulator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: VRSimulator
  // [TokenAttribute] Offset: FFFFFFFF
  class VRSimulator : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // [FormerlySerializedAsAttribute] Offset: 0x72A79C
    // private UnityEngine.GameObject leftHand
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x72A7E8
    // private UnityEngine.GameObject rightHand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject leftMenuHand
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* leftMenuHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject rightMenuHand
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* rightMenuHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x72A854
    // private UnityEngine.GameObject head
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* head;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0x72A8A0
    // public System.Single lookSpeed
    // Size: 0x4
    // Offset: 0x40
    float lookSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single moveSpeed
    // Size: 0x4
    // Offset: 0x44
    float moveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single handMoveSpeed
    // Size: 0x4
    // Offset: 0x48
    float handMoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single playerHeight
    // Size: 0x4
    // Offset: 0x4C
    float playerHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,UnityEngine.Vector3> _handPositionOffsets
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::UnityEngine::Vector3>* handPositionOffsets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,UnityEngine.Quaternion> _handRotationOffsets
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::UnityEngine::Quaternion>* handRotationOffsets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::UnityEngine::Quaternion>*) == 0x8);
    // private System.Single _rotX
    // Size: 0x4
    // Offset: 0x60
    float rotX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rotY
    // Size: 0x4
    // Offset: 0x64
    float rotY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.GameObject _currentlyControlledBodypart
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* currentlyControlledBodypart;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject leftHand
    ::UnityEngine::GameObject*& dyn_leftHand();
    // Get instance field reference: private UnityEngine.GameObject rightHand
    ::UnityEngine::GameObject*& dyn_rightHand();
    // Get instance field reference: private UnityEngine.GameObject leftMenuHand
    ::UnityEngine::GameObject*& dyn_leftMenuHand();
    // Get instance field reference: private UnityEngine.GameObject rightMenuHand
    ::UnityEngine::GameObject*& dyn_rightMenuHand();
    // Get instance field reference: private UnityEngine.GameObject head
    ::UnityEngine::GameObject*& dyn_head();
    // Get instance field reference: public System.Single lookSpeed
    float& dyn_lookSpeed();
    // Get instance field reference: public System.Single moveSpeed
    float& dyn_moveSpeed();
    // Get instance field reference: public System.Single handMoveSpeed
    float& dyn_handMoveSpeed();
    // Get instance field reference: public System.Single playerHeight
    float& dyn_playerHeight();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,UnityEngine.Vector3> _handPositionOffsets
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::UnityEngine::Vector3>*& dyn__handPositionOffsets();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,UnityEngine.Quaternion> _handRotationOffsets
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::UnityEngine::Quaternion>*& dyn__handRotationOffsets();
    // Get instance field reference: private System.Single _rotX
    float& dyn__rotX();
    // Get instance field reference: private System.Single _rotY
    float& dyn__rotY();
    // Get instance field reference: private UnityEngine.GameObject _currentlyControlledBodypart
    ::UnityEngine::GameObject*& dyn__currentlyControlledBodypart();
    // private System.Void Start()
    // Offset: 0x114C620
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x114C708
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x114C7BC
    void OnDisable();
    // private System.Void Awake()
    // Offset: 0x114C910
    void Awake();
    // private System.Void ResetHands()
    // Offset: 0x114C9A4
    void ResetHands();
    // private System.Void Update()
    // Offset: 0x114CB00
    void Update();
    // private System.Void FixedUpdate()
    // Offset: 0x114CB84
    void FixedUpdate();
    // private System.Void Look()
    // Offset: 0x114CE40
    void Look();
    // private System.Void Move()
    // Offset: 0x114D540
    void Move();
    // static public System.Single WrapAngle(System.Single angle)
    // Offset: 0x114D764
    static float WrapAngle(float angle);
    // public System.Void .ctor()
    // Offset: 0x114D79C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRSimulator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRSimulator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRSimulator*, creationType>()));
    }
  }; // VRSimulator
  #pragma pack(pop)
  static check_size<sizeof(VRSimulator), 104 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_VRSimulatorSizeCheck;
  static_assert(sizeof(VRSimulator) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::ResetHands
// Il2CppName: ResetHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::ResetHands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "ResetHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::Look
// Il2CppName: Look
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::Look)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "Look", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRSimulator::*)()>(&GlobalNamespace::VRSimulator::Move)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::WrapAngle
// Il2CppName: WrapAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&GlobalNamespace::VRSimulator::WrapAngle)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRSimulator*), "WrapAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRSimulator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
