// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeComponent`1
#include "Normal/Realtime/RealtimeComponent_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeAvatarVoiceModel
  class RealtimeAvatarVoiceModel;
  // Forward declaring type: OculusMicrophoneDevice
  class OculusMicrophoneDevice;
  // Forward declaring type: MicrophoneDevice
  class MicrophoneDevice;
  // Forward declaring type: AudioDeviceDataReader
  class AudioDeviceDataReader;
  // Forward declaring type: AudioPreprocessorPlaybackListener
  class AudioPreprocessorPlaybackListener;
  // Forward declaring type: AudioOutput
  class AudioOutput;
}
// Forward declaring namespace: Normal::Realtime::Native
namespace Normal::Realtime::Native {
  // Forward declaring type: Microphone
  class Microphone;
  // Forward declaring type: AudioInputStream
  class AudioInputStream;
  // Forward declaring type: AudioPreprocessor
  class AudioPreprocessor;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeAvatarVoice
  class RealtimeAvatarVoice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeAvatarVoice);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeAvatarVoice*, "Normal.Realtime", "RealtimeAvatarVoice");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.RealtimeAvatarVoice
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecutionOrder] Offset: F6AF0
  class RealtimeAvatarVoice : public ::Normal::Realtime::RealtimeComponent_1<::Normal::Realtime::RealtimeAvatarVoiceModel*> {
    public:
    public:
    // private System.Single <voiceVolume>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    float voiceVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _mute
    // Size: 0x1
    // Offset: 0x2C
    bool mute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Normal.Realtime.OculusMicrophoneDevice _oculusMicrophoneDevice
    // Size: 0x8
    // Offset: 0x30
    ::Normal::Realtime::OculusMicrophoneDevice* oculusMicrophoneDevice;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::OculusMicrophoneDevice*) == 0x8);
    // private Normal.Realtime.Native.Microphone _nativeMicrophoneDevice
    // Size: 0x8
    // Offset: 0x38
    ::Normal::Realtime::Native::Microphone* nativeMicrophoneDevice;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Native::Microphone*) == 0x8);
    // private Normal.Realtime.MicrophoneDevice _unityMicrophoneDevice
    // Size: 0x8
    // Offset: 0x40
    ::Normal::Realtime::MicrophoneDevice* unityMicrophoneDevice;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::MicrophoneDevice*) == 0x8);
    // private Normal.Realtime.AudioDeviceDataReader _unityMicrophoneDeviceDataReader
    // Size: 0x8
    // Offset: 0x48
    ::Normal::Realtime::AudioDeviceDataReader* unityMicrophoneDeviceDataReader;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::AudioDeviceDataReader*) == 0x8);
    // private System.Int32 _microphoneSampleRate
    // Size: 0x4
    // Offset: 0x50
    int microphoneSampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _microphoneChannels
    // Size: 0x4
    // Offset: 0x54
    int microphoneChannels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _microphoneFrameSize
    // Size: 0x4
    // Offset: 0x58
    int microphoneFrameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single[] _microphoneFrameData
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<float> microphoneFrameData;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private Normal.Realtime.Native.AudioInputStream _microphoneStream
    // Size: 0x8
    // Offset: 0x68
    ::Normal::Realtime::Native::AudioInputStream* microphoneStream;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Native::AudioInputStream*) == 0x8);
    // private Normal.Realtime.Native.AudioPreprocessor _audioPreprocessor
    // Size: 0x8
    // Offset: 0x70
    ::Normal::Realtime::Native::AudioPreprocessor* audioPreprocessor;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Native::AudioPreprocessor*) == 0x8);
    // private Normal.Realtime.AudioPreprocessorPlaybackListener _audioPreprocessorPlaybackListener
    // Size: 0x8
    // Offset: 0x78
    ::Normal::Realtime::AudioPreprocessorPlaybackListener* audioPreprocessorPlaybackListener;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::AudioPreprocessorPlaybackListener*) == 0x8);
    // private System.Single _microphoneDbLevel
    // Size: 0x4
    // Offset: 0x80
    float microphoneDbLevel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Normal.Realtime.AudioOutput _audioOutput
    // Size: 0x8
    // Offset: 0x88
    ::Normal::Realtime::AudioOutput* audioOutput;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::AudioOutput*) == 0x8);
    // private System.Boolean _rebuildAudioStream
    // Size: 0x1
    // Offset: 0x90
    bool rebuildAudioStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Single <voiceVolume>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$voiceVolume$k__BackingField();
    // Get instance field reference: private System.Boolean _mute
    [[deprecated("Use field access instead!")]] bool& dyn__mute();
    // Get instance field reference: private Normal.Realtime.OculusMicrophoneDevice _oculusMicrophoneDevice
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::OculusMicrophoneDevice*& dyn__oculusMicrophoneDevice();
    // Get instance field reference: private Normal.Realtime.Native.Microphone _nativeMicrophoneDevice
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Native::Microphone*& dyn__nativeMicrophoneDevice();
    // Get instance field reference: private Normal.Realtime.MicrophoneDevice _unityMicrophoneDevice
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::MicrophoneDevice*& dyn__unityMicrophoneDevice();
    // Get instance field reference: private Normal.Realtime.AudioDeviceDataReader _unityMicrophoneDeviceDataReader
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::AudioDeviceDataReader*& dyn__unityMicrophoneDeviceDataReader();
    // Get instance field reference: private System.Int32 _microphoneSampleRate
    [[deprecated("Use field access instead!")]] int& dyn__microphoneSampleRate();
    // Get instance field reference: private System.Int32 _microphoneChannels
    [[deprecated("Use field access instead!")]] int& dyn__microphoneChannels();
    // Get instance field reference: private System.Int32 _microphoneFrameSize
    [[deprecated("Use field access instead!")]] int& dyn__microphoneFrameSize();
    // Get instance field reference: private System.Single[] _microphoneFrameData
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__microphoneFrameData();
    // Get instance field reference: private Normal.Realtime.Native.AudioInputStream _microphoneStream
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Native::AudioInputStream*& dyn__microphoneStream();
    // Get instance field reference: private Normal.Realtime.Native.AudioPreprocessor _audioPreprocessor
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Native::AudioPreprocessor*& dyn__audioPreprocessor();
    // Get instance field reference: private Normal.Realtime.AudioPreprocessorPlaybackListener _audioPreprocessorPlaybackListener
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::AudioPreprocessorPlaybackListener*& dyn__audioPreprocessorPlaybackListener();
    // Get instance field reference: private System.Single _microphoneDbLevel
    [[deprecated("Use field access instead!")]] float& dyn__microphoneDbLevel();
    // Get instance field reference: private Normal.Realtime.AudioOutput _audioOutput
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::AudioOutput*& dyn__audioOutput();
    // Get instance field reference: private System.Boolean _rebuildAudioStream
    [[deprecated("Use field access instead!")]] bool& dyn__rebuildAudioStream();
    // public System.Single get_voiceVolume()
    // Offset: 0x4CC750
    float get_voiceVolume();
    // private System.Void set_voiceVolume(System.Single value)
    // Offset: 0x4DC170
    void set_voiceVolume(float value);
    // public System.Boolean get_mute()
    // Offset: 0x4DBCA0
    bool get_mute();
    // public System.Void set_mute(System.Boolean value)
    // Offset: 0xBE0710
    void set_mute(bool value);
    // private System.Boolean get__hasMicrophone()
    // Offset: 0xBE09A0
    bool get__hasMicrophone();
    // public System.Void .ctor()
    // Offset: 0xBE0950
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeAvatarVoice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeAvatarVoice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeAvatarVoice*, creationType>()));
    }
    // private System.Void Update()
    // Offset: 0xBE0800
    void Update();
    // private System.Void OnDestroy()
    // Offset: 0xBE0170
    void OnDestroy();
    // private System.Void CalculateVoiceVolume()
    // Offset: 0xBDF340
    void CalculateVoiceVolume();
    // protected System.Void OnRealtimeModelReplaced(Normal.Realtime.RealtimeAvatarVoiceModel previousModel, Normal.Realtime.RealtimeAvatarVoiceModel currentModel)
    // Offset: 0xBE0240
    void OnRealtimeModelReplaced(::Normal::Realtime::RealtimeAvatarVoiceModel* previousModel, ::Normal::Realtime::RealtimeAvatarVoiceModel* currentModel);
    // private System.Void ClientIDUpdated(Normal.Realtime.RealtimeAvatarVoiceModel model, System.Int32 clientID)
    // Offset: 0xBDF420
    void ClientIDUpdated(::Normal::Realtime::RealtimeAvatarVoiceModel* model, int clientID);
    // private System.Void StreamIDUpdated(Normal.Realtime.RealtimeAvatarVoiceModel model, System.Int32 streamID)
    // Offset: 0xBE07B0
    void StreamIDUpdated(::Normal::Realtime::RealtimeAvatarVoiceModel* model, int streamID);
    // private System.Void ConnectAudioStream()
    // Offset: 0xBDF470
    void ConnectAudioStream();
    // private System.Void RequestMicrophonePermissionAndConnectLocalAudioStream()
    // Offset: 0xBE0450
    void RequestMicrophonePermissionAndConnectLocalAudioStream();
    // private System.Void ConnectLocalAudioStream()
    // Offset: 0xBDF4F0
    void ConnectLocalAudioStream();
    // private System.Void ConnectRemoteAudioStream()
    // Offset: 0xBDFC80
    void ConnectRemoteAudioStream();
    // private System.Void DisconnectAudioStream()
    // Offset: 0xBDFE60
    void DisconnectAudioStream();
    // private System.Void SendMicrophoneData()
    // Offset: 0xBE0460
    void SendMicrophoneData();
    // private System.Boolean GetMicrophoneAudioData(System.Single[] audioData)
    // Offset: 0xBE0130
    bool GetMicrophoneAudioData(::ArrayW<float> audioData);
    // private System.Void SetMute(System.Boolean mute)
    // Offset: 0xBE0710
    void SetMute(bool mute);
  }; // Normal.Realtime.RealtimeAvatarVoice
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::get_voiceVolume
// Il2CppName: get_voiceVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::get_voiceVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "get_voiceVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::set_voiceVolume
// Il2CppName: set_voiceVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)(float)>(&Normal::Realtime::RealtimeAvatarVoice::set_voiceVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "set_voiceVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::get_mute
// Il2CppName: get_mute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::get_mute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "get_mute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::set_mute
// Il2CppName: set_mute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)(bool)>(&Normal::Realtime::RealtimeAvatarVoice::set_mute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "set_mute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::get__hasMicrophone
// Il2CppName: get__hasMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::get__hasMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "get__hasMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::CalculateVoiceVolume
// Il2CppName: CalculateVoiceVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::CalculateVoiceVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "CalculateVoiceVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::OnRealtimeModelReplaced
// Il2CppName: OnRealtimeModelReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)(::Normal::Realtime::RealtimeAvatarVoiceModel*, ::Normal::Realtime::RealtimeAvatarVoiceModel*)>(&Normal::Realtime::RealtimeAvatarVoice::OnRealtimeModelReplaced)> {
  static const MethodInfo* get() {
    static auto* previousModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatarVoiceModel")->byval_arg;
    static auto* currentModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatarVoiceModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "OnRealtimeModelReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousModel, currentModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::ClientIDUpdated
// Il2CppName: ClientIDUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)(::Normal::Realtime::RealtimeAvatarVoiceModel*, int)>(&Normal::Realtime::RealtimeAvatarVoice::ClientIDUpdated)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatarVoiceModel")->byval_arg;
    static auto* clientID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "ClientIDUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, clientID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::StreamIDUpdated
// Il2CppName: StreamIDUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)(::Normal::Realtime::RealtimeAvatarVoiceModel*, int)>(&Normal::Realtime::RealtimeAvatarVoice::StreamIDUpdated)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatarVoiceModel")->byval_arg;
    static auto* streamID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "StreamIDUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, streamID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::ConnectAudioStream
// Il2CppName: ConnectAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::ConnectAudioStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "ConnectAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::RequestMicrophonePermissionAndConnectLocalAudioStream
// Il2CppName: RequestMicrophonePermissionAndConnectLocalAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::RequestMicrophonePermissionAndConnectLocalAudioStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "RequestMicrophonePermissionAndConnectLocalAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::ConnectLocalAudioStream
// Il2CppName: ConnectLocalAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::ConnectLocalAudioStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "ConnectLocalAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::ConnectRemoteAudioStream
// Il2CppName: ConnectRemoteAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::ConnectRemoteAudioStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "ConnectRemoteAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::DisconnectAudioStream
// Il2CppName: DisconnectAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::DisconnectAudioStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "DisconnectAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::SendMicrophoneData
// Il2CppName: SendMicrophoneData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)()>(&Normal::Realtime::RealtimeAvatarVoice::SendMicrophoneData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "SendMicrophoneData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::GetMicrophoneAudioData
// Il2CppName: GetMicrophoneAudioData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeAvatarVoice::*)(::ArrayW<float>)>(&Normal::Realtime::RealtimeAvatarVoice::GetMicrophoneAudioData)> {
  static const MethodInfo* get() {
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "GetMicrophoneAudioData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioData});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatarVoice::SetMute
// Il2CppName: SetMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatarVoice::*)(bool)>(&Normal::Realtime::RealtimeAvatarVoice::SetMute)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatarVoice*), "SetMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
