// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeModel
#include "Normal/Realtime/RealtimeModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: ReliableProperty`1<T>
  template<typename T>
  class ReliableProperty_1;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: StreamContext because it is already included!
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BuildingBrickModel
  class BuildingBrickModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BuildingBrickModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuildingBrickModel*, "", "BuildingBrickModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: BuildingBrickModel
  // [TokenAttribute] Offset: FFFFFFFF
  // [RealtimeModelAttribute] Offset: D4660
  class BuildingBrickModel : public ::Normal::Realtime::RealtimeModel {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    // Nested type: ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<T>
    template<typename T>
    class PropertyChangedHandler_1;
    // Nested type: ::GlobalNamespace::BuildingBrickModel::PropertyID
    struct PropertyID;
    public:
    // [RealtimePropertyAttribute] Offset: 0xF03F0
    // private System.Boolean _attached
    // Size: 0x1
    // Offset: 0x90
    bool attached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attached and: uuid
    char __padding0[0x7] = {};
    // [RealtimePropertyAttribute] Offset: 0xF04E0
    // private System.String _uuid
    // Size: 0x8
    // Offset: 0x98
    ::StringW uuid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [RealtimePropertyAttribute] Offset: 0xF0510
    // private System.String _bricksAbove
    // Size: 0x8
    // Offset: 0xA0
    ::StringW bricksAbove;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [RealtimePropertyAttribute] Offset: 0xF6BC0
    // private System.String _bricksBelow
    // Size: 0x8
    // Offset: 0xA8
    ::StringW bricksBelow;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [RealtimePropertyAttribute] Offset: 0xF6C20
    // private System.Int32 _matId
    // Size: 0x4
    // Offset: 0xB0
    int matId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0xF6C80
    // private System.Int32 _color
    // Size: 0x4
    // Offset: 0xB4
    int color;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0xF6D10
    // private System.Boolean _usingNewColors
    // Size: 0x1
    // Offset: 0xB8
    bool usingNewColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usingNewColors and: attachedDidChange
    char __padding6[0x7] = {};
    // private BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> attachedDidChange
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>* attachedDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*) == 0x8);
    // private BuildingBrickModel/PropertyChangedHandler`1<System.String> uuidDidChange
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* uuidDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*) == 0x8);
    // private BuildingBrickModel/PropertyChangedHandler`1<System.String> bricksAboveDidChange
    // Size: 0x8
    // Offset: 0xD0
    ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* bricksAboveDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*) == 0x8);
    // private BuildingBrickModel/PropertyChangedHandler`1<System.String> bricksBelowDidChange
    // Size: 0x8
    // Offset: 0xD8
    ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* bricksBelowDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*) == 0x8);
    // private BuildingBrickModel/PropertyChangedHandler`1<System.Int32> matIdDidChange
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>* matIdDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*) == 0x8);
    // private BuildingBrickModel/PropertyChangedHandler`1<System.Int32> colorDidChange
    // Size: 0x8
    // Offset: 0xE8
    ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>* colorDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*) == 0x8);
    // private BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> usingNewColorsDidChange
    // Size: 0x8
    // Offset: 0xF0
    ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>* usingNewColorsDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Boolean> _attachedProperty
    // Size: 0x8
    // Offset: 0xF8
    ::Normal::Realtime::ReliableProperty_1<bool>* attachedProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<bool>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.String> _uuidProperty
    // Size: 0x8
    // Offset: 0x100
    ::Normal::Realtime::ReliableProperty_1<::StringW>* uuidProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<::StringW>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.String> _bricksAboveProperty
    // Size: 0x8
    // Offset: 0x108
    ::Normal::Realtime::ReliableProperty_1<::StringW>* bricksAboveProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<::StringW>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.String> _bricksBelowProperty
    // Size: 0x8
    // Offset: 0x110
    ::Normal::Realtime::ReliableProperty_1<::StringW>* bricksBelowProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<::StringW>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Int32> _matIdProperty
    // Size: 0x8
    // Offset: 0x118
    ::Normal::Realtime::ReliableProperty_1<int>* matIdProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<int>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Int32> _colorProperty
    // Size: 0x8
    // Offset: 0x120
    ::Normal::Realtime::ReliableProperty_1<int>* colorProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<int>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<System.Boolean> _usingNewColorsProperty
    // Size: 0x8
    // Offset: 0x128
    ::Normal::Realtime::ReliableProperty_1<bool>* usingNewColorsProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<bool>*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean _attached
    [[deprecated]] bool& dyn__attached();
    // Get instance field reference: private System.String _uuid
    [[deprecated]] ::StringW& dyn__uuid();
    // Get instance field reference: private System.String _bricksAbove
    [[deprecated]] ::StringW& dyn__bricksAbove();
    // Get instance field reference: private System.String _bricksBelow
    [[deprecated]] ::StringW& dyn__bricksBelow();
    // Get instance field reference: private System.Int32 _matId
    [[deprecated]] int& dyn__matId();
    // Get instance field reference: private System.Int32 _color
    [[deprecated]] int& dyn__color();
    // Get instance field reference: private System.Boolean _usingNewColors
    [[deprecated]] bool& dyn__usingNewColors();
    // Get instance field reference: private BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> attachedDidChange
    [[deprecated]] ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*& dyn_attachedDidChange();
    // Get instance field reference: private BuildingBrickModel/PropertyChangedHandler`1<System.String> uuidDidChange
    [[deprecated]] ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*& dyn_uuidDidChange();
    // Get instance field reference: private BuildingBrickModel/PropertyChangedHandler`1<System.String> bricksAboveDidChange
    [[deprecated]] ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*& dyn_bricksAboveDidChange();
    // Get instance field reference: private BuildingBrickModel/PropertyChangedHandler`1<System.String> bricksBelowDidChange
    [[deprecated]] ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*& dyn_bricksBelowDidChange();
    // Get instance field reference: private BuildingBrickModel/PropertyChangedHandler`1<System.Int32> matIdDidChange
    [[deprecated]] ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*& dyn_matIdDidChange();
    // Get instance field reference: private BuildingBrickModel/PropertyChangedHandler`1<System.Int32> colorDidChange
    [[deprecated]] ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*& dyn_colorDidChange();
    // Get instance field reference: private BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> usingNewColorsDidChange
    [[deprecated]] ::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*& dyn_usingNewColorsDidChange();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Boolean> _attachedProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<bool>*& dyn__attachedProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.String> _uuidProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<::StringW>*& dyn__uuidProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.String> _bricksAboveProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<::StringW>*& dyn__bricksAboveProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.String> _bricksBelowProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<::StringW>*& dyn__bricksBelowProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Int32> _matIdProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<int>*& dyn__matIdProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Int32> _colorProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<int>*& dyn__colorProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<System.Boolean> _usingNewColorsProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<bool>*& dyn__usingNewColorsProperty();
    // public System.Boolean get_attached()
    // Offset: 0x6AB870
    bool get_attached();
    // public System.Void set_attached(System.Boolean value)
    // Offset: 0x6ABE90
    void set_attached(bool value);
    // public System.String get_uuid()
    // Offset: 0x6AB9F0
    ::StringW get_uuid();
    // public System.Void set_uuid(System.String value)
    // Offset: 0x6AC1B0
    void set_uuid(::StringW value);
    // public System.String get_bricksAbove()
    // Offset: 0x6AB8B0
    ::StringW get_bricksAbove();
    // public System.Void set_bricksAbove(System.String value)
    // Offset: 0x6ABF10
    void set_bricksAbove(::StringW value);
    // public System.String get_bricksBelow()
    // Offset: 0x6AB8F0
    ::StringW get_bricksBelow();
    // public System.Void set_bricksBelow(System.String value)
    // Offset: 0x6ABFA0
    void set_bricksBelow(::StringW value);
    // public System.Int32 get_matId()
    // Offset: 0x6AB970
    int get_matId();
    // public System.Void set_matId(System.Int32 value)
    // Offset: 0x6AC0B0
    void set_matId(int value);
    // public System.Int32 get_color()
    // Offset: 0x6AB930
    int get_color();
    // public System.Void set_color(System.Int32 value)
    // Offset: 0x6AC030
    void set_color(int value);
    // public System.Boolean get_usingNewColors()
    // Offset: 0x6AB9B0
    bool get_usingNewColors();
    // public System.Void set_usingNewColors(System.Boolean value)
    // Offset: 0x6AC130
    void set_usingNewColors(bool value);
    // public System.Void add_attachedDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6AB410
    void add_attachedDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void remove_attachedDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6ABA30
    void remove_attachedDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void add_uuidDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.String> value)
    // Offset: 0x6AB7D0
    void add_uuidDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* value);
    // public System.Void remove_uuidDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.String> value)
    // Offset: 0x6ABDF0
    void remove_uuidDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* value);
    // public System.Void add_bricksAboveDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.String> value)
    // Offset: 0x6AB4B0
    void add_bricksAboveDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* value);
    // public System.Void remove_bricksAboveDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.String> value)
    // Offset: 0x6ABAD0
    void remove_bricksAboveDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* value);
    // public System.Void add_bricksBelowDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.String> value)
    // Offset: 0x6AB550
    void add_bricksBelowDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* value);
    // public System.Void remove_bricksBelowDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.String> value)
    // Offset: 0x6ABB70
    void remove_bricksBelowDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>* value);
    // public System.Void add_matIdDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Int32> value)
    // Offset: 0x6AB690
    void add_matIdDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>* value);
    // public System.Void remove_matIdDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Int32> value)
    // Offset: 0x6ABCB0
    void remove_matIdDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>* value);
    // public System.Void add_colorDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Int32> value)
    // Offset: 0x6AB5F0
    void add_colorDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>* value);
    // public System.Void remove_colorDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Int32> value)
    // Offset: 0x6ABC10
    void remove_colorDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>* value);
    // public System.Void add_usingNewColorsDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6AB730
    void add_usingNewColorsDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>* value);
    // public System.Void remove_usingNewColorsDidChange(BuildingBrickModel/PropertyChangedHandler`1<System.Boolean> value)
    // Offset: 0x6ABD50
    void remove_usingNewColorsDidChange(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>* value);
    // private System.Void FireAttachedDidChange(System.Boolean value)
    // Offset: 0x6AA0F0
    void FireAttachedDidChange(bool value);
    // private System.Void FireUuidDidChange(System.String value)
    // Offset: 0x6AA4B0
    void FireUuidDidChange(::StringW value);
    // private System.Void FireBricksAboveDidChange(System.String value)
    // Offset: 0x6AA190
    void FireBricksAboveDidChange(::StringW value);
    // private System.Void FireBricksBelowDidChange(System.String value)
    // Offset: 0x6AA230
    void FireBricksBelowDidChange(::StringW value);
    // private System.Void FireMatIdDidChange(System.Int32 value)
    // Offset: 0x6AA370
    void FireMatIdDidChange(int value);
    // private System.Void FireColorDidChange(System.Int32 value)
    // Offset: 0x6AA2D0
    void FireColorDidChange(int value);
    // private System.Void FireUsingNewColorsDidChange(System.Boolean value)
    // Offset: 0x6AA410
    void FireUsingNewColorsDidChange(bool value);
    // private System.Void UpdateBackingFields()
    // Offset: 0x6AAC50
    void UpdateBackingFields();
    // public System.Void .ctor()
    // Offset: 0x6AB200
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuildingBrickModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BuildingBrickModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuildingBrickModel*, creationType>()));
    }
    // protected override System.Void OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    // Offset: 0x6AA550
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    void OnParentReplaced(::Normal::Realtime::RealtimeModel* previousParent, ::Normal::Realtime::RealtimeModel* currentParent);
    // protected override System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6AADF0
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Int32 RealtimeModel::WriteLength(Normal.Realtime.Serialization.StreamContext context)
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6AAFF0
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6AA630
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
  }; // BuildingBrickModel
  #pragma pack(pop)
  static check_size<sizeof(BuildingBrickModel), 296 + sizeof(::Normal::Realtime::ReliableProperty_1<bool>*)> __GlobalNamespace_BuildingBrickModelSizeCheck;
  static_assert(sizeof(BuildingBrickModel) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::get_attached
// Il2CppName: get_attached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::get_attached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "get_attached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::set_attached
// Il2CppName: set_attached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(bool)>(&GlobalNamespace::BuildingBrickModel::set_attached)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "set_attached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::get_uuid
// Il2CppName: get_uuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::get_uuid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "get_uuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::set_uuid
// Il2CppName: set_uuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::StringW)>(&GlobalNamespace::BuildingBrickModel::set_uuid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "set_uuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::get_bricksAbove
// Il2CppName: get_bricksAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::get_bricksAbove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "get_bricksAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::set_bricksAbove
// Il2CppName: set_bricksAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::StringW)>(&GlobalNamespace::BuildingBrickModel::set_bricksAbove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "set_bricksAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::get_bricksBelow
// Il2CppName: get_bricksBelow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::get_bricksBelow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "get_bricksBelow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::set_bricksBelow
// Il2CppName: set_bricksBelow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::StringW)>(&GlobalNamespace::BuildingBrickModel::set_bricksBelow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "set_bricksBelow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::get_matId
// Il2CppName: get_matId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::get_matId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "get_matId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::set_matId
// Il2CppName: set_matId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(int)>(&GlobalNamespace::BuildingBrickModel::set_matId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "set_matId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::get_color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(int)>(&GlobalNamespace::BuildingBrickModel::set_color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::get_usingNewColors
// Il2CppName: get_usingNewColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::get_usingNewColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "get_usingNewColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::set_usingNewColors
// Il2CppName: set_usingNewColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(bool)>(&GlobalNamespace::BuildingBrickModel::set_usingNewColors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "set_usingNewColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::add_attachedDidChange
// Il2CppName: add_attachedDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::BuildingBrickModel::add_attachedDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "add_attachedDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::remove_attachedDidChange
// Il2CppName: remove_attachedDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::BuildingBrickModel::remove_attachedDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "remove_attachedDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::add_uuidDidChange
// Il2CppName: add_uuidDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*)>(&GlobalNamespace::BuildingBrickModel::add_uuidDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "add_uuidDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::remove_uuidDidChange
// Il2CppName: remove_uuidDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*)>(&GlobalNamespace::BuildingBrickModel::remove_uuidDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "remove_uuidDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::add_bricksAboveDidChange
// Il2CppName: add_bricksAboveDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*)>(&GlobalNamespace::BuildingBrickModel::add_bricksAboveDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "add_bricksAboveDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::remove_bricksAboveDidChange
// Il2CppName: remove_bricksAboveDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*)>(&GlobalNamespace::BuildingBrickModel::remove_bricksAboveDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "remove_bricksAboveDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::add_bricksBelowDidChange
// Il2CppName: add_bricksBelowDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*)>(&GlobalNamespace::BuildingBrickModel::add_bricksBelowDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "add_bricksBelowDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::remove_bricksBelowDidChange
// Il2CppName: remove_bricksBelowDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<::StringW>*)>(&GlobalNamespace::BuildingBrickModel::remove_bricksBelowDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "remove_bricksBelowDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::add_matIdDidChange
// Il2CppName: add_matIdDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*)>(&GlobalNamespace::BuildingBrickModel::add_matIdDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "add_matIdDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::remove_matIdDidChange
// Il2CppName: remove_matIdDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*)>(&GlobalNamespace::BuildingBrickModel::remove_matIdDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "remove_matIdDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::add_colorDidChange
// Il2CppName: add_colorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*)>(&GlobalNamespace::BuildingBrickModel::add_colorDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "add_colorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::remove_colorDidChange
// Il2CppName: remove_colorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<int>*)>(&GlobalNamespace::BuildingBrickModel::remove_colorDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "remove_colorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::add_usingNewColorsDidChange
// Il2CppName: add_usingNewColorsDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::BuildingBrickModel::add_usingNewColorsDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "add_usingNewColorsDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::remove_usingNewColorsDidChange
// Il2CppName: remove_usingNewColorsDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::GlobalNamespace::BuildingBrickModel::PropertyChangedHandler_1<bool>*)>(&GlobalNamespace::BuildingBrickModel::remove_usingNewColorsDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "BuildingBrickModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "remove_usingNewColorsDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::FireAttachedDidChange
// Il2CppName: FireAttachedDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(bool)>(&GlobalNamespace::BuildingBrickModel::FireAttachedDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "FireAttachedDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::FireUuidDidChange
// Il2CppName: FireUuidDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::StringW)>(&GlobalNamespace::BuildingBrickModel::FireUuidDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "FireUuidDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::FireBricksAboveDidChange
// Il2CppName: FireBricksAboveDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::StringW)>(&GlobalNamespace::BuildingBrickModel::FireBricksAboveDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "FireBricksAboveDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::FireBricksBelowDidChange
// Il2CppName: FireBricksBelowDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::StringW)>(&GlobalNamespace::BuildingBrickModel::FireBricksBelowDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "FireBricksBelowDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::FireMatIdDidChange
// Il2CppName: FireMatIdDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(int)>(&GlobalNamespace::BuildingBrickModel::FireMatIdDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "FireMatIdDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::FireColorDidChange
// Il2CppName: FireColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(int)>(&GlobalNamespace::BuildingBrickModel::FireColorDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "FireColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::FireUsingNewColorsDidChange
// Il2CppName: FireUsingNewColorsDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(bool)>(&GlobalNamespace::BuildingBrickModel::FireUsingNewColorsDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "FireUsingNewColorsDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::UpdateBackingFields
// Il2CppName: UpdateBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)()>(&GlobalNamespace::BuildingBrickModel::UpdateBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "UpdateBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::OnParentReplaced
// Il2CppName: OnParentReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::Normal::Realtime::RealtimeModel*, ::Normal::Realtime::RealtimeModel*)>(&GlobalNamespace::BuildingBrickModel::OnParentReplaced)> {
  static const MethodInfo* get() {
    static auto* previousParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    static auto* currentParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "OnParentReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousParent, currentParent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BuildingBrickModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::BuildingBrickModel::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::BuildingBrickModel::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BuildingBrickModel::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuildingBrickModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::BuildingBrickModel::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuildingBrickModel*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
