// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NicknameResponse
  class NicknameResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NicknameResponse);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NicknameResponse*, "", "NicknameResponse");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: NicknameResponse
  // [TokenAttribute] Offset: FFFFFFFF
  class NicknameResponse : public ::Il2CppObject {
    public:
    public:
    // public System.String nickname
    // Size: 0x8
    // Offset: 0x10
    ::StringW nickname;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return nickname;
    }
    // Get instance field reference: public System.String nickname
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nickname();
    // public System.Void .ctor()
    // Offset: 0x1DD400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NicknameResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NicknameResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NicknameResponse*, creationType>()));
    }
  }; // NicknameResponse
  #pragma pack(pop)
  static check_size<sizeof(NicknameResponse), 16 + sizeof(::StringW)> __GlobalNamespace_NicknameResponseSizeCheck;
  static_assert(sizeof(NicknameResponse) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NicknameResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
