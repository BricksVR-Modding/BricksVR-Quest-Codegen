// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BrickPickerManager
  class BrickPickerManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ColorPickerSaveSpot
  class ColorPickerSaveSpot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColorPickerSaveSpot);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColorPickerSaveSpot*, "", "ColorPickerSaveSpot");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ColorPickerSaveSpot
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorPickerSaveSpot : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // [FormerlySerializedAsAttribute] Offset: 0x72A0C4
    // public UnityEngine.UI.Image borderImage
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Image* borderImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x72A0FC
    // public UnityEngine.UI.Image colorImage
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Image* colorImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public BrickPickerManager brickPickerManager
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BrickPickerManager* brickPickerManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BrickPickerManager*) == 0x8);
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.UI.Image borderImage
    ::UnityEngine::UI::Image*& dyn_borderImage();
    // Get instance field reference: public UnityEngine.UI.Image colorImage
    ::UnityEngine::UI::Image*& dyn_colorImage();
    // Get instance field reference: public BrickPickerManager brickPickerManager
    ::GlobalNamespace::BrickPickerManager*& dyn_brickPickerManager();
    // Get instance field reference: public UnityEngine.Color color
    ::UnityEngine::Color& dyn_color();
    // private System.Void Awake()
    // Offset: 0x10A2410
    void Awake();
    // public UnityEngine.Color GetColor()
    // Offset: 0x10A2440
    ::UnityEngine::Color GetColor();
    // public System.Void SetColor(UnityEngine.Color newColor)
    // Offset: 0x10A244C
    void SetColor(::UnityEngine::Color newColor);
    // private System.Void OnTriggerEnter(UnityEngine.Collider c)
    // Offset: 0x10A247C
    void OnTriggerEnter(::UnityEngine::Collider* c);
    // public System.Void Enable()
    // Offset: 0x10A24D4
    void Enable();
    // public System.Void Disable()
    // Offset: 0x10A24F4
    void Disable();
    // public System.Void .ctor()
    // Offset: 0x10A2514
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorPickerSaveSpot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorPickerSaveSpot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorPickerSaveSpot*, creationType>()));
    }
  }; // ColorPickerSaveSpot
  #pragma pack(pop)
  static check_size<sizeof(ColorPickerSaveSpot), 48 + sizeof(::UnityEngine::Color)> __GlobalNamespace_ColorPickerSaveSpotSizeCheck;
  static_assert(sizeof(ColorPickerSaveSpot) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColorPickerSaveSpot::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorPickerSaveSpot::*)()>(&GlobalNamespace::ColorPickerSaveSpot::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorPickerSaveSpot*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorPickerSaveSpot::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::ColorPickerSaveSpot::*)()>(&GlobalNamespace::ColorPickerSaveSpot::GetColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorPickerSaveSpot*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorPickerSaveSpot::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorPickerSaveSpot::*)(::UnityEngine::Color)>(&GlobalNamespace::ColorPickerSaveSpot::SetColor)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorPickerSaveSpot*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorPickerSaveSpot::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorPickerSaveSpot::*)(::UnityEngine::Collider*)>(&GlobalNamespace::ColorPickerSaveSpot::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorPickerSaveSpot*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorPickerSaveSpot::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorPickerSaveSpot::*)()>(&GlobalNamespace::ColorPickerSaveSpot::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorPickerSaveSpot*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorPickerSaveSpot::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorPickerSaveSpot::*)()>(&GlobalNamespace::ColorPickerSaveSpot::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorPickerSaveSpot*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorPickerSaveSpot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
