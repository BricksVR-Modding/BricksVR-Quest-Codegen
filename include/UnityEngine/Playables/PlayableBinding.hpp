// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableBinding
  struct PlayableBinding;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Playables::PlayableBinding, "UnityEngine.Playables", "PlayableBinding");
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Playables.PlayableBinding
  // [TokenAttribute] Offset: FFFFFFFF
  struct PlayableBinding/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::Playables::PlayableBinding::CreateOutputMethod
    class CreateOutputMethod;
    public:
    // private System.String m_StreamName
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_StreamName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Object m_SourceObject
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Object* m_SourceObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private System.Type m_SourceBindingType
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* m_SourceBindingType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private UnityEngine.Playables.PlayableBinding/UnityEngine.Playables.CreateOutputMethod m_CreateOutputMethod
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Playables::PlayableBinding::CreateOutputMethod* m_CreateOutputMethod;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableBinding::CreateOutputMethod*) == 0x8);
    public:
    // Creating value type constructor for type: PlayableBinding
    constexpr PlayableBinding(::StringW m_StreamName_ = {}, ::UnityEngine::Object* m_SourceObject_ = {}, ::System::Type* m_SourceBindingType_ = {}, ::UnityEngine::Playables::PlayableBinding::CreateOutputMethod* m_CreateOutputMethod_ = {}) noexcept : m_StreamName{m_StreamName_}, m_SourceObject{m_SourceObject_}, m_SourceBindingType{m_SourceBindingType_}, m_CreateOutputMethod{m_CreateOutputMethod_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly UnityEngine.Playables.PlayableBinding[] None
    static ::ArrayW<::UnityEngine::Playables::PlayableBinding> _get_None();
    // Set static field: static public readonly UnityEngine.Playables.PlayableBinding[] None
    static void _set_None(::ArrayW<::UnityEngine::Playables::PlayableBinding> value);
    // Get static field: static public readonly System.Double DefaultDuration
    static double _get_DefaultDuration();
    // Set static field: static public readonly System.Double DefaultDuration
    static void _set_DefaultDuration(double value);
    // Get instance field reference: private System.String m_StreamName
    ::StringW& dyn_m_StreamName();
    // Get instance field reference: private UnityEngine.Object m_SourceObject
    ::UnityEngine::Object*& dyn_m_SourceObject();
    // Get instance field reference: private System.Type m_SourceBindingType
    ::System::Type*& dyn_m_SourceBindingType();
    // Get instance field reference: private UnityEngine.Playables.PlayableBinding/UnityEngine.Playables.CreateOutputMethod m_CreateOutputMethod
    ::UnityEngine::Playables::PlayableBinding::CreateOutputMethod*& dyn_m_CreateOutputMethod();
    // static private System.Void .cctor()
    // Offset: 0x115966C
    static void _cctor();
  }; // UnityEngine.Playables.PlayableBinding
  #pragma pack(pop)
  static check_size<sizeof(PlayableBinding), 24 + sizeof(::UnityEngine::Playables::PlayableBinding::CreateOutputMethod*)> __UnityEngine_Playables_PlayableBindingSizeCheck;
  static_assert(sizeof(PlayableBinding) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableBinding::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Playables::PlayableBinding::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Playables::PlayableBinding), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
