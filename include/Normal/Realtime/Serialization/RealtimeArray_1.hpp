// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeModel
#include "Normal/Realtime/RealtimeModel.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Normal.Realtime.Serialization.ICollection
#include "Normal/Realtime/Serialization/ICollection.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.Generic.List`1/System.Collections.Generic.Enumerator
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: ModelAdded because it is already included!
  // Skipping declaration: ArrayUpdate because it is already included!
  // Skipping declaration: Properties because it is already included!
  // Skipping declaration: <>c__DisplayClass10_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass12_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass13_0 because it is already included!
  // Skipping declaration: <GetEnumerator>d__13 because it is already included!
  // Skipping declaration: <>c__DisplayClass16_0 because it is already included!
  // Forward declaring type: LocalChangeCache`1<T>
  template<typename T>
  class LocalChangeCache_1;
  // Forward declaring type: ReadStream
  class ReadStream;
  // Forward declaring type: WriteStream
  class WriteStream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: List`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: RealtimeArray`1<TValue>
  template<typename TValue>
  class RealtimeArray_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::Serialization::RealtimeArray_1, "Normal.Realtime.Serialization", "RealtimeArray`1");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: BB570
  template<typename TValue>
  class RealtimeArray_1 : public ::Normal::Realtime::RealtimeModel/*, public ::System::Collections::Generic::IEnumerable_1<TValue>, public ::Normal::Realtime::Serialization::ICollection*/ {
    public:
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::ModelAdded<TValue>
    class ModelAdded;
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::ArrayUpdate<TValue>
    class ArrayUpdate;
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::Properties<TValue>
    struct Properties;
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass10_0<TValue>
    class $$c__DisplayClass10_0;
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass12_0<TValue>
    class $$c__DisplayClass12_0;
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass13_0<TValue>
    class $$c__DisplayClass13_0;
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13<TValue>
    class $GetEnumerator$d__13;
    // Nested type: ::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass16_0<TValue>
    class $$c__DisplayClass16_0;
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ModelAdded
    // [TokenAttribute] Offset: FFFFFFFF
    class ModelAdded : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::MulticastDelegate {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "ModelAdded";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Void .ctor(System.Object object, System.IntPtr method)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RealtimeArray_1<TValue>::ModelAdded* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ModelAdded::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RealtimeArray_1<TValue>::ModelAdded*, creationType>(object, method)));
      }
      // public System.Void Invoke(Normal.Realtime.Serialization.RealtimeArray`1<TValue> array, TValue model, System.Boolean remote)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Invoke(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>* array, TValue model, bool remote) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ModelAdded::Invoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, model, remote);
      }
      // public System.IAsyncResult BeginInvoke(Normal.Realtime.Serialization.RealtimeArray`1<TValue> array, TValue model, System.Boolean remote, System.AsyncCallback callback, System.Object object)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::IAsyncResult* BeginInvoke(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>* array, TValue model, bool remote, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ModelAdded::BeginInvoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, array, model, remote, callback, object);
      }
      // public System.Void EndInvoke(System.IAsyncResult result)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void EndInvoke(::System::IAsyncResult* result) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ModelAdded::EndInvoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ModelAdded
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ModelAdded is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate
    // [TokenAttribute] Offset: FFFFFFFF
    class ArrayUpdate : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::Normal::Realtime::Serialization::IModel*/ {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "ArrayUpdate";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private Normal.Realtime.Serialization.RealtimeArray`1<TValue> _array
      // Size: 0x8
      // Offset: 0x0
      ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>* array;
      // Field size check
      static_assert(sizeof(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>*) == 0x8);
      // public System.Collections.Generic.List`1<TValue> updates
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<TValue>* updates;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<TValue>*) == 0x8);
      public:
      // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::IModel
      operator ::Normal::Realtime::Serialization::IModel() noexcept {
        return *reinterpret_cast<::Normal::Realtime::Serialization::IModel*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private Normal.Realtime.Serialization.RealtimeArray`1<TValue> _array
      [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>*& dyn__array() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ArrayUpdate::dyn__array");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_array"))->offset;
        return *reinterpret_cast<::Normal::Realtime::Serialization::RealtimeArray_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Collections.Generic.List`1<TValue> updates
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<TValue>*& dyn_updates() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ArrayUpdate::dyn_updates");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updates"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::List_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(Normal.Realtime.Serialization.RealtimeArray`1<TValue> array)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RealtimeArray_1<TValue>::ArrayUpdate* New_ctor(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>* array) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ArrayUpdate::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RealtimeArray_1<TValue>::ArrayUpdate*, creationType>(array)));
      }
      // public System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
      // Offset: 0xFFFFFFFFFFFFFFFF
      int WriteLength(::Normal::Realtime::Serialization::StreamContext context) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ArrayUpdate::WriteLength");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*), -1));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, context);
      }
      // public System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ArrayUpdate::Write");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, context);
      }
      // public System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::ArrayUpdate::Read");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, context);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.Properties
    // [TokenAttribute] Offset: FFFFFFFF
    struct Properties : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "Properties";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.UInt32 value__
      // Size: 0x4
      // Offset: 0x0
      uint value;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: Properties
      constexpr Properties(uint value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint
      constexpr operator uint() const noexcept {
        return value;
      }
      // Autogenerated static field getter
      // Get static field: static public Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.Properties<TValue> ArrayUpdate
      static typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::Properties _get_ArrayUpdate() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::Properties::_get_ArrayUpdate");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::Properties>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename RealtimeArray_1<TValue>::Properties>::get(), "ArrayUpdate"));
      }
      // Autogenerated static field setter
      // Set static field: static public Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.Properties<TValue> ArrayUpdate
      static void _set_ArrayUpdate(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::Properties value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::Properties::_set_ArrayUpdate");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename RealtimeArray_1<TValue>::Properties>::get(), "ArrayUpdate", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public System.UInt32 value__
      [[deprecated("Use field access instead!")]] uint& dyn_value__() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::Properties::dyn_value__");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
        return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.Properties
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.Properties is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass10_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass10_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass10_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public TValue value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue value;
      public:
      // Autogenerated instance field getter
      // Get instance field: public TValue value
      [[deprecated("Use field access instead!")]] TValue& dyn_value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass10_0::dyn_value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RealtimeArray_1<TValue>::$$c__DisplayClass10_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass10_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RealtimeArray_1<TValue>::$$c__DisplayClass10_0*, creationType>()));
      }
      // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> <Add>b__0(Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> entry)
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* $Add$b__0(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* entry) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass10_0::<Add>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Add>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*, false>(this, ___internal__method, entry);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass10_0
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass10_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass12_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass12_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass12_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Int32 count
      // Size: 0x4
      // Offset: 0x0
      int count;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return count;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 count
      [[deprecated("Use field access instead!")]] int& dyn_count() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass12_0::dyn_count");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "count"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RealtimeArray_1<TValue>::$$c__DisplayClass12_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass12_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RealtimeArray_1<TValue>::$$c__DisplayClass12_0*, creationType>()));
      }
      // System.Boolean <get_Count>b__0(Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> entry)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $get_Count$b__0(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* entry) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass12_0::<get_Count>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_Count>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass12_0
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass12_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass13_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass13_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass13_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Collections.Generic.List`1<TValue> array
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<TValue>* array;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<TValue>*) == 0x8);
      public:
      // Creating conversion operator: operator ::System::Collections::Generic::List_1<TValue>*
      constexpr operator ::System::Collections::Generic::List_1<TValue>*() const noexcept {
        return array;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Collections.Generic.List`1<TValue> array
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<TValue>*& dyn_array() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass13_0::dyn_array");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "array"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::List_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RealtimeArray_1<TValue>::$$c__DisplayClass13_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass13_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RealtimeArray_1<TValue>::$$c__DisplayClass13_0*, creationType>()));
      }
      // System.Boolean <GetEnumerator>b__0(Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> entry)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $GetEnumerator$b__0(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* entry) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass13_0::<GetEnumerator>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetEnumerator>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass13_0
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass13_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<GetEnumerator>d__13
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $GetEnumerator$d__13 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<TValue>*/ {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "<GetEnumerator>d__13";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private TValue <>2__current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue $$2__current;
      // public Normal.Realtime.Serialization.RealtimeArray`1<TValue> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>* $$4__this;
      // Field size check
      static_assert(sizeof(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>*) == 0x8);
      // private System.Collections.Generic.List`1/System.Collections.Generic.Enumerator<TValue> <>7__wrap1
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::System::Collections::Generic::List_1<TValue>::Enumerator $$7__wrap1;
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<TValue>
      operator ::System::Collections::Generic::IEnumerator_1<TValue>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<TValue>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private TValue <>2__current
      [[deprecated("Use field access instead!")]] TValue& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Normal.Realtime.Serialization.RealtimeArray`1<TValue> <>4__this
      [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Normal::Realtime::Serialization::RealtimeArray_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.List`1/System.Collections.Generic.Enumerator<TValue> <>7__wrap1
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::List_1<TValue>::Enumerator& dyn_$$7__wrap1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::dyn_$$7__wrap1");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::List_1<TValue>::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private TValue System.Collections.Generic.IEnumerator<TValue>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      TValue System_Collections_Generic_IEnumerator$TValue$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::System.Collections.Generic.IEnumerator<TValue>.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::$GetEnumerator$d__13*), -1));
        return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::$GetEnumerator$d__13*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RealtimeArray_1<TValue>::$GetEnumerator$d__13* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RealtimeArray_1<TValue>::$GetEnumerator$d__13*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::$GetEnumerator$d__13*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::$GetEnumerator$d__13*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void <>m__Finally1()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $$m__Finally1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::<>m__Finally1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$GetEnumerator$d__13::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::$GetEnumerator$d__13*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<GetEnumerator>d__13
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<GetEnumerator>d__13 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass16_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass16_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RealtimeArray_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass16_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Int32 index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public TValue value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue value;
      // public System.Boolean didFindValue
      // Size: 0x1
      // Offset: 0x0
      bool didFindValue;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 index
      [[deprecated("Use field access instead!")]] int& dyn_index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass16_0::dyn_index");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public TValue value
      [[deprecated("Use field access instead!")]] TValue& dyn_value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass16_0::dyn_value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Boolean didFindValue
      [[deprecated("Use field access instead!")]] bool& dyn_didFindValue() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass16_0::dyn_didFindValue");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didFindValue"))->offset;
        return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RealtimeArray_1<TValue>::$$c__DisplayClass16_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass16_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RealtimeArray_1<TValue>::$$c__DisplayClass16_0*, creationType>()));
      }
      // System.Boolean <get_Item>b__0(Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> entry)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $get_Item$b__0(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* entry) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::$$c__DisplayClass16_0::<get_Item>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_Item>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry);
      }
    }; // Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass16_0
    // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.<>c__DisplayClass16_0 is generic, or has no fields that are valid for size checks!
    public:
    // private System.Collections.Generic.List`1<TValue> _storage
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<TValue>* storage;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<TValue>*) == 0x8);
    // private Normal.Realtime.Serialization.LocalChangeCache`1<Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue>> _cache
    // Size: 0x8
    // Offset: 0x0
    ::Normal::Realtime::Serialization::LocalChangeCache_1<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*>* cache;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::LocalChangeCache_1<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*>*) == 0x8);
    // private Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> _activelyDeserializingInflightArrayUpdate
    // Size: 0x8
    // Offset: 0x0
    typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* activelyDeserializingInflightArrayUpdate;
    // Field size check
    static_assert(sizeof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*) == 0x8);
    // private Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ModelAdded<TValue> modelAdded
    // Size: 0x8
    // Offset: 0x0
    typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded* modelAdded;
    // Field size check
    static_assert(sizeof(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<TValue>
    operator ::System::Collections::Generic::IEnumerable_1<TValue>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<TValue>*>(this);
    }
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::ICollection
    operator ::Normal::Realtime::Serialization::ICollection() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::ICollection*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<TValue> _storage
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<TValue>*& dyn__storage() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::dyn__storage");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_storage"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Normal.Realtime.Serialization.LocalChangeCache`1<Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue>> _cache
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::LocalChangeCache_1<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*>*& dyn__cache() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::dyn__cache");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cache"))->offset;
      return *reinterpret_cast<::Normal::Realtime::Serialization::LocalChangeCache_1<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> _activelyDeserializingInflightArrayUpdate
    [[deprecated("Use field access instead!")]] typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*& dyn__activelyDeserializingInflightArrayUpdate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::dyn__activelyDeserializingInflightArrayUpdate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activelyDeserializingInflightArrayUpdate"))->offset;
      return *reinterpret_cast<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ModelAdded<TValue> modelAdded
    [[deprecated("Use field access instead!")]] typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded*& dyn_modelAdded() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::dyn_modelAdded");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modelAdded"))->offset;
      return *reinterpret_cast<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public TValue get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValue get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method, index);
    }
    // public System.Void add_modelAdded(Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ModelAdded<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_modelAdded(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::add_modelAdded");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_modelAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_modelAdded(Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ModelAdded<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_modelAdded(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ModelAdded* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::remove_modelAdded");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_modelAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeArray_1<TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeArray_1<TValue>*, creationType>()));
    }
    // private System.Void SafeDispatchModelAdded(TValue value, System.Boolean remote)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SafeDispatchModelAdded(TValue value, bool remote) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::SafeDispatchModelAdded");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SafeDispatchModelAdded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(remote)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, remote);
    }
    // public System.Void Add(TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Collections.Generic.IEnumerator`1<TValue> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<TValue>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<TValue>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Void _ReadArrayUpdate(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context, System.UInt32 propertyID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void _ReadArrayUpdate(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context, uint propertyID) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::_ReadArrayUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_ReadArrayUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(propertyID)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, context, propertyID);
    }
    // public System.UInt32 GetCollectionTypeID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint GetCollectionTypeID() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::GetCollectionTypeID");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::Serialization::RealtimeArray_1<TValue>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
    }
    // private Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> <.ctor>b__9_0()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* $_ctor$b__9_0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::<.ctor>b__9_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate*, false>(this, ___internal__method);
    }
    // private System.Boolean <WriteLength>b__18_0(Normal.Realtime.Serialization.RealtimeArray`1/Normal.Realtime.Serialization.ArrayUpdate<TValue> entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool $WriteLength$b__18_0(typename ::Normal::Realtime::Serialization::RealtimeArray_1<TValue>::ArrayUpdate* entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::<WriteLength>b__18_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WriteLength>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry);
    }
    // protected override System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Int32 RealtimeModel::WriteLength(Normal.Realtime.Serialization.StreamContext context)
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::WriteLength");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::RealtimeModel*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, context);
    }
    // protected override System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::Write");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::RealtimeModel*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, context);
    }
    // protected override System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::RealtimeArray_1::Read");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::RealtimeModel*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, context);
    }
  }; // Normal.Realtime.Serialization.RealtimeArray`1
  // Could not write size check! Type: Normal.Realtime.Serialization.RealtimeArray`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
