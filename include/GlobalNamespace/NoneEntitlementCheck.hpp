// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BaseEntitlementCheck
#include "GlobalNamespace/BaseEntitlementCheck.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoneEntitlementCheck
  class NoneEntitlementCheck;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoneEntitlementCheck);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoneEntitlementCheck*, "", "NoneEntitlementCheck");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: NoneEntitlementCheck
  // [TokenAttribute] Offset: FFFFFFFF
  class NoneEntitlementCheck : public ::GlobalNamespace::BaseEntitlementCheck {
    public:
    // public System.Void .ctor()
    // Offset: 0x4D3750
    // Implemented from: BaseEntitlementCheck
    // Base method: System.Void BaseEntitlementCheck::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoneEntitlementCheck* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoneEntitlementCheck::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoneEntitlementCheck*, creationType>()));
    }
    // public override System.Void IsEntitled(System.Action`2<System.Boolean,System.String> entitlementManagerCallback)
    // Offset: 0x6BF790
    // Implemented from: BaseEntitlementCheck
    // Base method: System.Void BaseEntitlementCheck::IsEntitled(System.Action`2<System.Boolean,System.String> entitlementManagerCallback)
    void IsEntitled(::System::Action_2<bool, ::StringW>* entitlementManagerCallback);
  }; // NoneEntitlementCheck
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoneEntitlementCheck::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoneEntitlementCheck::IsEntitled
// Il2CppName: IsEntitled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoneEntitlementCheck::*)(::System::Action_2<bool, ::StringW>*)>(&GlobalNamespace::NoneEntitlementCheck::IsEntitled)> {
  static const MethodInfo* get() {
    static auto* entitlementManagerCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoneEntitlementCheck*), "IsEntitled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entitlementManagerCallback});
  }
};
