// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RangeSelector
  class RangeSelector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RangeSelector);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RangeSelector*, "", "RangeSelector");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: RangeSelector
  // [TokenAttribute] Offset: FFFFFFFF
  class RangeSelector : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::RangeSelector::SerializableIntEvent
    class SerializableIntEvent;
    public:
    // public TMPro.TextMeshProUGUI text
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshProUGUI* text;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public System.Int32 min
    // Size: 0x4
    // Offset: 0x20
    int min;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 max
    // Size: 0x4
    // Offset: 0x24
    int max;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _currentValue
    // Size: 0x4
    // Offset: 0x28
    int currentValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentValue and: ValueUpdated
    char __padding3[0x4] = {};
    // public RangeSelector/SerializableIntEvent ValueUpdated
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::RangeSelector::SerializableIntEvent* ValueUpdated;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RangeSelector::SerializableIntEvent*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public TMPro.TextMeshProUGUI text
    [[deprecated]] ::TMPro::TextMeshProUGUI*& dyn_text();
    // Get instance field reference: public System.Int32 min
    [[deprecated]] int& dyn_min();
    // Get instance field reference: public System.Int32 max
    [[deprecated]] int& dyn_max();
    // Get instance field reference: private System.Int32 _currentValue
    [[deprecated]] int& dyn__currentValue();
    // Get instance field reference: public RangeSelector/SerializableIntEvent ValueUpdated
    [[deprecated]] ::GlobalNamespace::RangeSelector::SerializableIntEvent*& dyn_ValueUpdated();
    // public System.Void Next()
    // Offset: 0x6C8580
    void Next();
    // public System.Void Previous()
    // Offset: 0x6C8620
    void Previous();
    // public System.Void SetValue(System.Int32 value)
    // Offset: 0x6C8710
    void SetValue(int value);
    // private System.Void SendValueUpdatedEvent()
    // Offset: 0x6C86C0
    void SendValueUpdatedEvent();
    // private System.Void UpdateUIText()
    // Offset: 0x6C8750
    void UpdateUIText();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RangeSelector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RangeSelector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RangeSelector*, creationType>()));
    }
  }; // RangeSelector
  #pragma pack(pop)
  static check_size<sizeof(RangeSelector), 48 + sizeof(::GlobalNamespace::RangeSelector::SerializableIntEvent*)> __GlobalNamespace_RangeSelectorSizeCheck;
  static_assert(sizeof(RangeSelector) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RangeSelector::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RangeSelector::*)()>(&GlobalNamespace::RangeSelector::Next)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RangeSelector*), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RangeSelector::Previous
// Il2CppName: Previous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RangeSelector::*)()>(&GlobalNamespace::RangeSelector::Previous)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RangeSelector*), "Previous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RangeSelector::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RangeSelector::*)(int)>(&GlobalNamespace::RangeSelector::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RangeSelector*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RangeSelector::SendValueUpdatedEvent
// Il2CppName: SendValueUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RangeSelector::*)()>(&GlobalNamespace::RangeSelector::SendValueUpdatedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RangeSelector*), "SendValueUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RangeSelector::UpdateUIText
// Il2CppName: UpdateUIText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RangeSelector::*)()>(&GlobalNamespace::RangeSelector::UpdateUIText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RangeSelector*), "UpdateUIText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RangeSelector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
