// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Normal.Realtime.IConfigurableComponent
#include "Normal/Realtime/IConfigurableComponent.hpp"
// Including type: Normal.Realtime.IRealtimeComponent
#include "Normal/Realtime/IRealtimeComponent.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: Normal.Realtime.SerializableComponentIDPair
#include "Normal/Realtime/SerializableComponentIDPair.hpp"
// Including type: Normal.Realtime.SerializableViewIDPair
#include "Normal/Realtime/SerializableViewIDPair.hpp"
// Including type: Normal.Realtime.Serialization.MetaModel
#include "Normal/Realtime/Serialization/MetaModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: Realtime
  class Realtime;
  // Forward declaring type: RealtimeViewHierarchy
  class RealtimeViewHierarchy;
  // Forward declaring type: RealtimeComponentMap
  class RealtimeComponentMap;
  // Forward declaring type: RealtimeViewMap
  class RealtimeViewMap;
  // Forward declaring type: RealtimeViewModel
  class RealtimeViewModel;
  // Forward declaring type: Room
  class Room;
  // Forward declaring type: IConfigurableComponentMap
  class IConfigurableComponentMap;
  // Forward declaring type: ImmutableModelCollection
  class ImmutableModelCollection;
  // Forward declaring type: RealtimeModel
  class RealtimeModel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeView
  class RealtimeView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeView);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeView*, "Normal.Realtime", "RealtimeView");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeView
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 715D08
  class RealtimeView : public ::UnityEngine::MonoBehaviour/*, public ::Normal::Realtime::IConfigurableComponent, public ::Normal::Realtime::IRealtimeComponent, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::Normal::Realtime::RealtimeView::SceneViewWillRegisterDelegate
    class SceneViewWillRegisterDelegate;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Normal.Realtime.Realtime _realtime
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Realtime* realtime;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Realtime*) == 0x8);
    // [ObsoleteAttribute] Offset: 0x716590
    // private System.Byte[] _sceneViewUUID
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> sceneViewUUID;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.String _viewUUID
    // Size: 0x8
    // Offset: 0x28
    ::StringW viewUUID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _sceneViewPreventOwnershipTakeover
    // Size: 0x1
    // Offset: 0x30
    bool sceneViewPreventOwnershipTakeover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sceneViewDestroyWhenOwnerOrLastClientLeaves
    // Size: 0x1
    // Offset: 0x31
    bool sceneViewDestroyWhenOwnerOrLastClientLeaves;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sceneViewDestroyWhenOwnerOrLastClientLeavesMigrated
    // Size: 0x1
    // Offset: 0x32
    bool sceneViewDestroyWhenOwnerOrLastClientLeavesMigrated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sceneViewDestroyWhenLastClientLeaves
    // Size: 0x1
    // Offset: 0x33
    bool sceneViewDestroyWhenLastClientLeaves;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sceneViewDestroyWhenLastClientLeaves and: components
    char __padding6[0x4] = {};
    // private Normal.Realtime.SerializableComponentIDPair[] _components
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Normal::Realtime::SerializableComponentIDPair> components;
    // Field size check
    static_assert(sizeof(::ArrayW<::Normal::Realtime::SerializableComponentIDPair>) == 0x8);
    // private Normal.Realtime.SerializableViewIDPair[] _childViews
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Normal::Realtime::SerializableViewIDPair> childViews;
    // Field size check
    static_assert(sizeof(::ArrayW<::Normal::Realtime::SerializableViewIDPair>) == 0x8);
    // private Normal.Realtime.RealtimeViewHierarchy _hierarchy
    // Size: 0x8
    // Offset: 0x48
    ::Normal::Realtime::RealtimeViewHierarchy* hierarchy;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeViewHierarchy*) == 0x8);
    // private Normal.Realtime.RealtimeComponentMap _realtimeComponents
    // Size: 0x8
    // Offset: 0x50
    ::Normal::Realtime::RealtimeComponentMap* realtimeComponents;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeComponentMap*) == 0x8);
    // private Normal.Realtime.RealtimeViewMap _realtimeChildViews
    // Size: 0x8
    // Offset: 0x58
    ::Normal::Realtime::RealtimeViewMap* realtimeChildViews;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeViewMap*) == 0x8);
    // Normal.Realtime.RealtimeViewModel model
    // Size: 0x8
    // Offset: 0x60
    ::Normal::Realtime::RealtimeViewModel* model;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeViewModel*) == 0x8);
    // public Normal.Realtime.RealtimeView/Normal.Realtime.SceneViewWillRegisterDelegate sceneViewWillRegisterWithRealtime
    // Size: 0x8
    // Offset: 0x68
    ::Normal::Realtime::RealtimeView::SceneViewWillRegisterDelegate* sceneViewWillRegisterWithRealtime;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeView::SceneViewWillRegisterDelegate*) == 0x8);
    // private System.Boolean _isViewSetOnComponents
    // Size: 0x1
    // Offset: 0x70
    bool isViewSetOnComponents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::IConfigurableComponent
    operator ::Normal::Realtime::IConfigurableComponent() noexcept {
      return *reinterpret_cast<::Normal::Realtime::IConfigurableComponent*>(this);
    }
    // Creating interface conversion operator: operator ::Normal::Realtime::IRealtimeComponent
    operator ::Normal::Realtime::IRealtimeComponent() noexcept {
      return *reinterpret_cast<::Normal::Realtime::IRealtimeComponent*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Normal.Realtime.Realtime _realtime
    ::Normal::Realtime::Realtime*& dyn__realtime();
    // Get instance field reference: private System.Byte[] _sceneViewUUID
    ::ArrayW<uint8_t>& dyn__sceneViewUUID();
    // Get instance field reference: private System.String _viewUUID
    ::StringW& dyn__viewUUID();
    // Get instance field reference: private System.Boolean _sceneViewPreventOwnershipTakeover
    bool& dyn__sceneViewPreventOwnershipTakeover();
    // Get instance field reference: private System.Boolean _sceneViewDestroyWhenOwnerOrLastClientLeaves
    bool& dyn__sceneViewDestroyWhenOwnerOrLastClientLeaves();
    // Get instance field reference: private System.Boolean _sceneViewDestroyWhenOwnerOrLastClientLeavesMigrated
    bool& dyn__sceneViewDestroyWhenOwnerOrLastClientLeavesMigrated();
    // Get instance field reference: private System.Boolean _sceneViewDestroyWhenLastClientLeaves
    bool& dyn__sceneViewDestroyWhenLastClientLeaves();
    // Get instance field reference: private Normal.Realtime.SerializableComponentIDPair[] _components
    ::ArrayW<::Normal::Realtime::SerializableComponentIDPair>& dyn__components();
    // Get instance field reference: private Normal.Realtime.SerializableViewIDPair[] _childViews
    ::ArrayW<::Normal::Realtime::SerializableViewIDPair>& dyn__childViews();
    // Get instance field reference: private Normal.Realtime.RealtimeViewHierarchy _hierarchy
    ::Normal::Realtime::RealtimeViewHierarchy*& dyn__hierarchy();
    // Get instance field reference: private Normal.Realtime.RealtimeComponentMap _realtimeComponents
    ::Normal::Realtime::RealtimeComponentMap*& dyn__realtimeComponents();
    // Get instance field reference: private Normal.Realtime.RealtimeViewMap _realtimeChildViews
    ::Normal::Realtime::RealtimeViewMap*& dyn__realtimeChildViews();
    // Get instance field reference: Normal.Realtime.RealtimeViewModel model
    ::Normal::Realtime::RealtimeViewModel*& dyn_model();
    // Get instance field reference: public Normal.Realtime.RealtimeView/Normal.Realtime.SceneViewWillRegisterDelegate sceneViewWillRegisterWithRealtime
    ::Normal::Realtime::RealtimeView::SceneViewWillRegisterDelegate*& dyn_sceneViewWillRegisterWithRealtime();
    // Get instance field reference: private System.Boolean _isViewSetOnComponents
    bool& dyn__isViewSetOnComponents();
    // Normal.Realtime.RealtimeViewHierarchy get_hierarchy()
    // Offset: 0xA5DE54
    ::Normal::Realtime::RealtimeViewHierarchy* get_hierarchy();
    // public System.String get_viewUUID()
    // Offset: 0xA5DFB4
    ::StringW get_viewUUID();
    // public System.Boolean get_isChildView()
    // Offset: 0xA5DFFC
    bool get_isChildView();
    // public System.Boolean get_isRootView()
    // Offset: 0xA5E018
    bool get_isRootView();
    // public System.Boolean get_isPrefabView()
    // Offset: 0xA5E09C
    bool get_isPrefabView();
    // public System.Boolean get_isSceneView()
    // Offset: 0xA5E0FC
    bool get_isSceneView();
    // public System.Boolean get_isRootSceneView()
    // Offset: 0xA5E120
    bool get_isRootSceneView();
    // public System.Boolean get_isRootPrefabView()
    // Offset: 0xA5E0C0
    bool get_isRootPrefabView();
    // public Normal.Realtime.RealtimeView get_realtimeView()
    // Offset: 0xA610FC
    ::Normal::Realtime::RealtimeView* get_realtimeView();
    // public Normal.Realtime.Realtime get_realtime()
    // Offset: 0xA61100
    ::Normal::Realtime::Realtime* get_realtime();
    // public Normal.Realtime.Room get_room()
    // Offset: 0xA61108
    ::Normal::Realtime::Room* get_room();
    // public System.Int32 get_ownerID()
    // Offset: 0xA61124
    int get_ownerID();
    // public System.Boolean get_isOwnedByWorld()
    // Offset: 0xA61158
    bool get_isOwnedByWorld();
    // public System.Boolean get_isOwnedLocally()
    // Offset: 0xA61174
    bool get_isOwnedLocally();
    // public System.Boolean get_isOwnedRemotely()
    // Offset: 0xA611A8
    bool get_isOwnedRemotely();
    // public System.Int32 get_ownerIDSelf()
    // Offset: 0xA61128
    int get_ownerIDSelf();
    // public System.Int32 get_ownerIDInHierarchy()
    // Offset: 0xA61260
    int get_ownerIDInHierarchy();
    // public System.Boolean get_isUnownedSelf()
    // Offset: 0xA61290
    bool get_isUnownedSelf();
    // public System.Boolean get_isUnownedInHierarchy()
    // Offset: 0xA612C0
    bool get_isUnownedInHierarchy();
    // public System.Boolean get_isOwnedLocallySelf()
    // Offset: 0xA61178
    bool get_isOwnedLocallySelf();
    // public System.Boolean get_isOwnedLocallyInHierarchy()
    // Offset: 0xA612F0
    bool get_isOwnedLocallyInHierarchy();
    // public System.Boolean get_isOwnedRemotelySelf()
    // Offset: 0xA611AC
    bool get_isOwnedRemotelySelf();
    // public System.Boolean get_isOwnedRemotelyInHierarchy()
    // Offset: 0xA61320
    bool get_isOwnedRemotelyInHierarchy();
    // public System.Boolean get_preventOwnershipTakeover()
    // Offset: 0xA6140C
    bool get_preventOwnershipTakeover();
    // public System.Void set_preventOwnershipTakeover(System.Boolean value)
    // Offset: 0xA6143C
    void set_preventOwnershipTakeover(bool value);
    // public System.Boolean get_destroyWhenOwnerOrLastClientLeaves()
    // Offset: 0xA61474
    bool get_destroyWhenOwnerOrLastClientLeaves();
    // public System.Void set_destroyWhenOwnerOrLastClientLeaves(System.Boolean value)
    // Offset: 0xA614A4
    void set_destroyWhenOwnerOrLastClientLeaves(bool value);
    // public System.Boolean get_destroyWhenLastClientLeaves()
    // Offset: 0xA61554
    bool get_destroyWhenLastClientLeaves();
    // public System.Void set_destroyWhenLastClientLeaves(System.Boolean value)
    // Offset: 0xA61584
    void set_destroyWhenLastClientLeaves(bool value);
    // public System.Boolean get_destroyWhenOwnerLeaves()
    // Offset: 0xA615BC
    bool get_destroyWhenOwnerLeaves();
    // public System.Void set_destroyWhenOwnerLeaves(System.Boolean value)
    // Offset: 0xA615EC
    void set_destroyWhenOwnerLeaves(bool value);
    // System.Boolean IsParentView(Normal.Realtime.RealtimeView view)
    // Offset: 0xA5DF98
    bool IsParentView(::Normal::Realtime::RealtimeView* view);
    // public Normal.Realtime.RealtimeView GetRootView()
    // Offset: 0xA5DFBC
    ::Normal::Realtime::RealtimeView* GetRootView();
    // public Normal.Realtime.RealtimeView GetParentView()
    // Offset: 0xA5DFDC
    ::Normal::Realtime::RealtimeView* GetParentView();
    // public System.Void OnBeforeSerialize()
    // Offset: 0xA5E160
    void OnBeforeSerialize();
    // private System.Void StripSceneViewUUIDFromPrefabs()
    // Offset: 0xA5E260
    void StripSceneViewUUIDFromPrefabs();
    // public System.Void OnAfterDeserialize()
    // Offset: 0xA5E264
    void OnAfterDeserialize();
    // private System.Void MigrateSceneViewUUIDType()
    // Offset: 0xA5E2A4
    void MigrateSceneViewUUIDType();
    // private System.Void MigrateSceneViewLifetime()
    // Offset: 0xA5E444
    void MigrateSceneViewLifetime();
    // System.Void RebuildRealtimeGraph()
    // Offset: 0xA5E464
    void RebuildRealtimeGraph();
    // private System.Void RebuildRealtimeComponentMap(Normal.Realtime.IConfigurableComponentMap map, Normal.Realtime.IConfigurableComponent[] components)
    // Offset: 0xA5EAD4
    void RebuildRealtimeComponentMap(::Normal::Realtime::IConfigurableComponentMap* map, ::ArrayW<::Normal::Realtime::IConfigurableComponent*> components);
    // static private System.Void FindNextUnusedComponentID(Normal.Realtime.IConfigurableComponentMap components, ref System.UInt32 id)
    // Offset: 0xA5EE24
    static void FindNextUnusedComponentID(::Normal::Realtime::IConfigurableComponentMap* components, ByRef<uint> id);
    // static private System.Collections.Generic.List`1<Normal.Realtime.RealtimeView> FindRealtimeViewsInChildren(UnityEngine.Transform transform, System.Collections.Generic.List`1<Normal.Realtime.RealtimeView> views)
    // Offset: 0xA5E7B0
    static ::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeView*>* FindRealtimeViewsInChildren(::UnityEngine::Transform* transform, ::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeView*>* views);
    // private System.Void Awake()
    // Offset: 0xA5EF00
    void Awake();
    // private System.Void Start()
    // Offset: 0xA5F4AC
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0xA5FB70
    void OnDestroy();
    // private System.Void Reset()
    // Offset: 0xA5FBB4
    void Reset();
    // private System.Void ResolveSceneViewRealtime()
    // Offset: 0xA5F57C
    void ResolveSceneViewRealtime();
    // Normal.Realtime.RealtimeViewModel CreateRootSceneViewModel()
    // Offset: 0xA5FFBC
    ::Normal::Realtime::RealtimeViewModel* CreateRootSceneViewModel();
    // Normal.Realtime.RealtimeViewModel CreateRootPrefabViewModel(System.String prefabName, System.Int32 ownerID, Normal.Realtime.Serialization.MetaModel/Normal.Realtime.Serialization.LifetimeFlags lifetimeFlags)
    // Offset: 0xA6022C
    ::Normal::Realtime::RealtimeViewModel* CreateRootPrefabViewModel(::StringW prefabName, int ownerID, ::Normal::Realtime::Serialization::MetaModel::LifetimeFlags lifetimeFlags);
    // Normal.Realtime.RealtimeViewModel CreateChildViewModel()
    // Offset: 0xA6031C
    ::Normal::Realtime::RealtimeViewModel* CreateChildViewModel();
    // Normal.Realtime.ImmutableModelCollection CreateComponentsModel()
    // Offset: 0xA600C4
    ::Normal::Realtime::ImmutableModelCollection* CreateComponentsModel();
    // Normal.Realtime.ImmutableModelCollection CreateChildViewsModel()
    // Offset: 0xA600CC
    ::Normal::Realtime::ImmutableModelCollection* CreateChildViewsModel();
    // static private Normal.Realtime.ImmutableModelCollection CreateRealtimeModelCollection(Normal.Realtime.IConfigurableComponentMap components)
    // Offset: 0xA60470
    static ::Normal::Realtime::ImmutableModelCollection* CreateRealtimeModelCollection(::Normal::Realtime::IConfigurableComponentMap* components);
    // private Normal.Realtime.RealtimeModel Normal.Realtime.IConfigurableComponent.CreateModel()
    // Offset: 0xA60920
    ::Normal::Realtime::RealtimeModel* Normal_Realtime_IConfigurableComponent_CreateModel();
    // private System.Void Normal.Realtime.IConfigurableComponent.SetModel(Normal.Realtime.RealtimeModel model)
    // Offset: 0xA609AC
    void Normal_Realtime_IConfigurableComponent_SetModel(::Normal::Realtime::RealtimeModel* model);
    // private System.Void Normal.Realtime.IConfigurableComponent.SetView(Normal.Realtime.RealtimeView view)
    // Offset: 0xA610F8
    void Normal_Realtime_IConfigurableComponent_SetView(::Normal::Realtime::RealtimeView* view);
    // public System.Void RequestOwnership()
    // Offset: 0xA61350
    void RequestOwnership();
    // public System.Void SetOwnership(System.Int32 clientID)
    // Offset: 0xA6138C
    void SetOwnership(int clientID);
    // public System.Void ClearOwnership()
    // Offset: 0xA613D0
    void ClearOwnership();
    // private System.Void ThrowIfModelMissing()
    // Offset: 0xA611DC
    void ThrowIfModelMissing();
    // static Normal.Realtime.RealtimeView InstantiateViewPrefab(Normal.Realtime.RealtimeViewModel model, Normal.Realtime.Realtime realtime)
    // Offset: 0xA616A4
    static ::Normal::Realtime::RealtimeView* InstantiateViewPrefab(::Normal::Realtime::RealtimeViewModel* model, ::Normal::Realtime::Realtime* realtime);
    // private System.Void SetViewOnComponents(System.Boolean recursive)
    // Offset: 0xA5EF08
    void SetViewOnComponents(bool recursive);
    // private System.Void SetRealtime(Normal.Realtime.Realtime realtime)
    // Offset: 0xA61934
    void SetRealtime(::Normal::Realtime::Realtime* realtime);
    // private System.Void SetRealtimeOnChildViews(Normal.Realtime.Realtime realtime)
    // Offset: 0xA5F8A8
    void SetRealtimeOnChildViews(::Normal::Realtime::Realtime* realtime);
    // static private System.Void BindModelsToComponentMap(Normal.Realtime.ImmutableModelCollection models, Normal.Realtime.IConfigurableComponentMap components)
    // Offset: 0xA60B20
    static void BindModelsToComponentMap(::Normal::Realtime::ImmutableModelCollection* models, ::Normal::Realtime::IConfigurableComponentMap* components);
    // public System.Void .ctor()
    // Offset: 0xA619D4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeView*, creationType>()));
    }
  }; // Normal.Realtime.RealtimeView
  #pragma pack(pop)
  static check_size<sizeof(RealtimeView), 112 + sizeof(bool)> __Normal_Realtime_RealtimeViewSizeCheck;
  static_assert(sizeof(RealtimeView) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_hierarchy
// Il2CppName: get_hierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeViewHierarchy* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_hierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_hierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_viewUUID
// Il2CppName: get_viewUUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_viewUUID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_viewUUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isChildView
// Il2CppName: get_isChildView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isChildView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isChildView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isRootView
// Il2CppName: get_isRootView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isRootView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isRootView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isPrefabView
// Il2CppName: get_isPrefabView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isPrefabView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isPrefabView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isSceneView
// Il2CppName: get_isSceneView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isSceneView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isSceneView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isRootSceneView
// Il2CppName: get_isRootSceneView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isRootSceneView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isRootSceneView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isRootPrefabView
// Il2CppName: get_isRootPrefabView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isRootPrefabView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isRootPrefabView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_realtimeView
// Il2CppName: get_realtimeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeView* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_realtimeView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_realtimeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_realtime
// Il2CppName: get_realtime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Realtime* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_realtime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_realtime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_room
// Il2CppName: get_room
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Room* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_room)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_room", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_ownerID
// Il2CppName: get_ownerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_ownerID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_ownerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isOwnedByWorld
// Il2CppName: get_isOwnedByWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isOwnedByWorld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isOwnedByWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isOwnedLocally
// Il2CppName: get_isOwnedLocally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isOwnedLocally)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isOwnedLocally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isOwnedRemotely
// Il2CppName: get_isOwnedRemotely
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isOwnedRemotely)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isOwnedRemotely", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_ownerIDSelf
// Il2CppName: get_ownerIDSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_ownerIDSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_ownerIDSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_ownerIDInHierarchy
// Il2CppName: get_ownerIDInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_ownerIDInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_ownerIDInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isUnownedSelf
// Il2CppName: get_isUnownedSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isUnownedSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isUnownedSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isUnownedInHierarchy
// Il2CppName: get_isUnownedInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isUnownedInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isUnownedInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isOwnedLocallySelf
// Il2CppName: get_isOwnedLocallySelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isOwnedLocallySelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isOwnedLocallySelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isOwnedLocallyInHierarchy
// Il2CppName: get_isOwnedLocallyInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isOwnedLocallyInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isOwnedLocallyInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isOwnedRemotelySelf
// Il2CppName: get_isOwnedRemotelySelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isOwnedRemotelySelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isOwnedRemotelySelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_isOwnedRemotelyInHierarchy
// Il2CppName: get_isOwnedRemotelyInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_isOwnedRemotelyInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_isOwnedRemotelyInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_preventOwnershipTakeover
// Il2CppName: get_preventOwnershipTakeover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_preventOwnershipTakeover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_preventOwnershipTakeover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::set_preventOwnershipTakeover
// Il2CppName: set_preventOwnershipTakeover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(bool)>(&Normal::Realtime::RealtimeView::set_preventOwnershipTakeover)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "set_preventOwnershipTakeover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_destroyWhenOwnerOrLastClientLeaves
// Il2CppName: get_destroyWhenOwnerOrLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_destroyWhenOwnerOrLastClientLeaves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_destroyWhenOwnerOrLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::set_destroyWhenOwnerOrLastClientLeaves
// Il2CppName: set_destroyWhenOwnerOrLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(bool)>(&Normal::Realtime::RealtimeView::set_destroyWhenOwnerOrLastClientLeaves)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "set_destroyWhenOwnerOrLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_destroyWhenLastClientLeaves
// Il2CppName: get_destroyWhenLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_destroyWhenLastClientLeaves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_destroyWhenLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::set_destroyWhenLastClientLeaves
// Il2CppName: set_destroyWhenLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(bool)>(&Normal::Realtime::RealtimeView::set_destroyWhenLastClientLeaves)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "set_destroyWhenLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::get_destroyWhenOwnerLeaves
// Il2CppName: get_destroyWhenOwnerLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::get_destroyWhenOwnerLeaves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "get_destroyWhenOwnerLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::set_destroyWhenOwnerLeaves
// Il2CppName: set_destroyWhenOwnerLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(bool)>(&Normal::Realtime::RealtimeView::set_destroyWhenOwnerLeaves)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "set_destroyWhenOwnerLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::IsParentView
// Il2CppName: IsParentView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeView::*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::RealtimeView::IsParentView)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "IsParentView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::GetRootView
// Il2CppName: GetRootView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeView* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::GetRootView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "GetRootView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::GetParentView
// Il2CppName: GetParentView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeView* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::GetParentView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "GetParentView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::StripSceneViewUUIDFromPrefabs
// Il2CppName: StripSceneViewUUIDFromPrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::StripSceneViewUUIDFromPrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "StripSceneViewUUIDFromPrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::MigrateSceneViewUUIDType
// Il2CppName: MigrateSceneViewUUIDType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::MigrateSceneViewUUIDType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "MigrateSceneViewUUIDType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::MigrateSceneViewLifetime
// Il2CppName: MigrateSceneViewLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::MigrateSceneViewLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "MigrateSceneViewLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::RebuildRealtimeGraph
// Il2CppName: RebuildRealtimeGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::RebuildRealtimeGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "RebuildRealtimeGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::RebuildRealtimeComponentMap
// Il2CppName: RebuildRealtimeComponentMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(::Normal::Realtime::IConfigurableComponentMap*, ::ArrayW<::Normal::Realtime::IConfigurableComponent*>)>(&Normal::Realtime::RealtimeView::RebuildRealtimeComponentMap)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponentMap")->byval_arg;
    static auto* components = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponent"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "RebuildRealtimeComponentMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, components});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::FindNextUnusedComponentID
// Il2CppName: FindNextUnusedComponentID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Normal::Realtime::IConfigurableComponentMap*, ByRef<uint>)>(&Normal::Realtime::RealtimeView::FindNextUnusedComponentID)> {
  static const MethodInfo* get() {
    static auto* components = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponentMap")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "FindNextUnusedComponentID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{components, id});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::FindRealtimeViewsInChildren
// Il2CppName: FindRealtimeViewsInChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeView*>* (*)(::UnityEngine::Transform*, ::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeView*>*)>(&Normal::Realtime::RealtimeView::FindRealtimeViewsInChildren)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* views = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "FindRealtimeViewsInChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, views});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::ResolveSceneViewRealtime
// Il2CppName: ResolveSceneViewRealtime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::ResolveSceneViewRealtime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "ResolveSceneViewRealtime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::CreateRootSceneViewModel
// Il2CppName: CreateRootSceneViewModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeViewModel* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::CreateRootSceneViewModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "CreateRootSceneViewModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::CreateRootPrefabViewModel
// Il2CppName: CreateRootPrefabViewModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeViewModel* (Normal::Realtime::RealtimeView::*)(::StringW, int, ::Normal::Realtime::Serialization::MetaModel::LifetimeFlags)>(&Normal::Realtime::RealtimeView::CreateRootPrefabViewModel)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ownerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lifetimeFlags = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "MetaModel/LifetimeFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "CreateRootPrefabViewModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, ownerID, lifetimeFlags});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::CreateChildViewModel
// Il2CppName: CreateChildViewModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeViewModel* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::CreateChildViewModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "CreateChildViewModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::CreateComponentsModel
// Il2CppName: CreateComponentsModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::ImmutableModelCollection* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::CreateComponentsModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "CreateComponentsModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::CreateChildViewsModel
// Il2CppName: CreateChildViewsModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::ImmutableModelCollection* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::CreateChildViewsModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "CreateChildViewsModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::CreateRealtimeModelCollection
// Il2CppName: CreateRealtimeModelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::ImmutableModelCollection* (*)(::Normal::Realtime::IConfigurableComponentMap*)>(&Normal::Realtime::RealtimeView::CreateRealtimeModelCollection)> {
  static const MethodInfo* get() {
    static auto* components = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponentMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "CreateRealtimeModelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{components});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::Normal_Realtime_IConfigurableComponent_CreateModel
// Il2CppName: Normal.Realtime.IConfigurableComponent.CreateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeModel* (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::Normal_Realtime_IConfigurableComponent_CreateModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "Normal.Realtime.IConfigurableComponent.CreateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::Normal_Realtime_IConfigurableComponent_SetModel
// Il2CppName: Normal.Realtime.IConfigurableComponent.SetModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::RealtimeView::Normal_Realtime_IConfigurableComponent_SetModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "Normal.Realtime.IConfigurableComponent.SetModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::Normal_Realtime_IConfigurableComponent_SetView
// Il2CppName: Normal.Realtime.IConfigurableComponent.SetView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::RealtimeView::Normal_Realtime_IConfigurableComponent_SetView)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "Normal.Realtime.IConfigurableComponent.SetView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::RequestOwnership
// Il2CppName: RequestOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::RequestOwnership)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "RequestOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::SetOwnership
// Il2CppName: SetOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(int)>(&Normal::Realtime::RealtimeView::SetOwnership)> {
  static const MethodInfo* get() {
    static auto* clientID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "SetOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::ClearOwnership
// Il2CppName: ClearOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::ClearOwnership)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "ClearOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::ThrowIfModelMissing
// Il2CppName: ThrowIfModelMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)()>(&Normal::Realtime::RealtimeView::ThrowIfModelMissing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "ThrowIfModelMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::InstantiateViewPrefab
// Il2CppName: InstantiateViewPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeView* (*)(::Normal::Realtime::RealtimeViewModel*, ::Normal::Realtime::Realtime*)>(&Normal::Realtime::RealtimeView::InstantiateViewPrefab)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    static auto* realtime = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "InstantiateViewPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, realtime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::SetViewOnComponents
// Il2CppName: SetViewOnComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(bool)>(&Normal::Realtime::RealtimeView::SetViewOnComponents)> {
  static const MethodInfo* get() {
    static auto* recursive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "SetViewOnComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recursive});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::SetRealtime
// Il2CppName: SetRealtime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(::Normal::Realtime::Realtime*)>(&Normal::Realtime::RealtimeView::SetRealtime)> {
  static const MethodInfo* get() {
    static auto* realtime = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "SetRealtime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{realtime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::SetRealtimeOnChildViews
// Il2CppName: SetRealtimeOnChildViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeView::*)(::Normal::Realtime::Realtime*)>(&Normal::Realtime::RealtimeView::SetRealtimeOnChildViews)> {
  static const MethodInfo* get() {
    static auto* realtime = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "SetRealtimeOnChildViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{realtime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::BindModelsToComponentMap
// Il2CppName: BindModelsToComponentMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Normal::Realtime::ImmutableModelCollection*, ::Normal::Realtime::IConfigurableComponentMap*)>(&Normal::Realtime::RealtimeView::BindModelsToComponentMap)> {
  static const MethodInfo* get() {
    static auto* models = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "ImmutableModelCollection")->byval_arg;
    static auto* components = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponentMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeView*), "BindModelsToComponentMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{models, components});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
