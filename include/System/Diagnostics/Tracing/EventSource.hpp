// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Tracing.EventDescriptor
#include "System/Diagnostics/Tracing/EventDescriptor.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Diagnostics.Tracing.EventSourceSettings
#include "System/Diagnostics/Tracing/EventSourceSettings.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
// Including type: System.Diagnostics.Tracing.SessionMask
#include "System/Diagnostics/Tracing/SessionMask.hpp"
// Including type: System.Diagnostics.Tracing.EventSourceOptions
#include "System/Diagnostics/Tracing/EventSourceOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventCommandEventArgs
  class EventCommandEventArgs;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
  // Forward declaring type: EtwSession
  class EtwSession;
  // Forward declaring type: ActivityTracker
  class ActivityTracker;
  // Forward declaring type: TraceLoggingEventTypes
  class TraceLoggingEventTypes;
  // Forward declaring type: NameInfo
  class NameInfo;
  // Forward declaring type: EventChannel
  struct EventChannel;
  // Forward declaring type: EventListener
  class EventListener;
  // Forward declaring type: EventManifestOptions
  struct EventManifestOptions;
  // Forward declaring type: EventWrittenEventArgs
  class EventWrittenEventArgs;
  // Skipping declaration: EventMetadata because it is already included!
  // Forward declaring type: EventOpcode
  struct EventOpcode;
  // Forward declaring type: EventCommand
  struct EventCommand;
  // Forward declaring type: ManifestBuilder
  class ManifestBuilder;
  // Forward declaring type: EventAttribute
  class EventAttribute;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Runtime::InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: GCHandle
  struct GCHandle;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
  // Forward declaring type: MemberInfo
  class MemberInfo;
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventSource
  class EventSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EventSource);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventSource*, "System.Diagnostics.Tracing", "EventSource");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventSource
  // [TokenAttribute] Offset: FFFFFFFF
  class EventSource : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Diagnostics::Tracing::EventSource::EventData
    struct EventData;
    // Nested type: ::System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes
    struct Sha1ForNonSecretPurposes;
    // Nested type: ::System::Diagnostics::Tracing::EventSource::OverideEventProvider
    class OverideEventProvider;
    // Nested type: ::System::Diagnostics::Tracing::EventSource::EventMetadata
    struct EventMetadata;
    // Size: 0x3C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata
    // [TokenAttribute] Offset: FFFFFFFF
    struct EventMetadata/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Diagnostics.Tracing.EventDescriptor Descriptor
      // Size: 0x10
      // Offset: 0x0
      ::System::Diagnostics::Tracing::EventDescriptor Descriptor;
      // Field size check
      static_assert(sizeof(::System::Diagnostics::Tracing::EventDescriptor) == 0x10);
      // public System.Diagnostics.Tracing.EventTags Tags
      // Size: 0x4
      // Offset: 0x10
      ::System::Diagnostics::Tracing::EventTags Tags;
      // Field size check
      static_assert(sizeof(::System::Diagnostics::Tracing::EventTags) == 0x4);
      // public System.Boolean EnabledForAnyListener
      // Size: 0x1
      // Offset: 0x14
      bool EnabledForAnyListener;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean EnabledForETW
      // Size: 0x1
      // Offset: 0x15
      bool EnabledForETW;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean HasRelatedActivityID
      // Size: 0x1
      // Offset: 0x16
      bool HasRelatedActivityID;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Byte TriggersActivityTracking
      // Size: 0x1
      // Offset: 0x17
      uint8_t TriggersActivityTracking;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // public System.String Name
      // Size: 0x8
      // Offset: 0x18
      ::StringW Name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String Message
      // Size: 0x8
      // Offset: 0x20
      ::StringW Message;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Reflection.ParameterInfo[] Parameters
      // Size: 0x8
      // Offset: 0x28
      ::ArrayW<::System::Reflection::ParameterInfo*> Parameters;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Reflection::ParameterInfo*>) == 0x8);
      // public System.Diagnostics.Tracing.TraceLoggingEventTypes TraceLoggingEventTypes
      // Size: 0x8
      // Offset: 0x30
      ::System::Diagnostics::Tracing::TraceLoggingEventTypes* TraceLoggingEventTypes;
      // Field size check
      static_assert(sizeof(::System::Diagnostics::Tracing::TraceLoggingEventTypes*) == 0x8);
      // public System.Diagnostics.Tracing.EventActivityOptions ActivityOptions
      // Size: 0x4
      // Offset: 0x38
      ::System::Diagnostics::Tracing::EventActivityOptions ActivityOptions;
      // Field size check
      static_assert(sizeof(::System::Diagnostics::Tracing::EventActivityOptions) == 0x4);
      public:
      // Creating value type constructor for type: EventMetadata
      constexpr EventMetadata(::System::Diagnostics::Tracing::EventDescriptor Descriptor_ = {}, ::System::Diagnostics::Tracing::EventTags Tags_ = {}, bool EnabledForAnyListener_ = {}, bool EnabledForETW_ = {}, bool HasRelatedActivityID_ = {}, uint8_t TriggersActivityTracking_ = {}, ::StringW Name_ = {}, ::StringW Message_ = {}, ::ArrayW<::System::Reflection::ParameterInfo*> Parameters_ = ::ArrayW<::System::Reflection::ParameterInfo*>(static_cast<void*>(nullptr)), ::System::Diagnostics::Tracing::TraceLoggingEventTypes* TraceLoggingEventTypes_ = {}, ::System::Diagnostics::Tracing::EventActivityOptions ActivityOptions_ = {}) noexcept : Descriptor{Descriptor_}, Tags{Tags_}, EnabledForAnyListener{EnabledForAnyListener_}, EnabledForETW{EnabledForETW_}, HasRelatedActivityID{HasRelatedActivityID_}, TriggersActivityTracking{TriggersActivityTracking_}, Name{Name_}, Message{Message_}, Parameters{Parameters_}, TraceLoggingEventTypes{TraceLoggingEventTypes_}, ActivityOptions{ActivityOptions_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Diagnostics.Tracing.EventDescriptor Descriptor
      [[deprecated]] ::System::Diagnostics::Tracing::EventDescriptor& dyn_Descriptor();
      // Get instance field reference: public System.Diagnostics.Tracing.EventTags Tags
      [[deprecated]] ::System::Diagnostics::Tracing::EventTags& dyn_Tags();
      // Get instance field reference: public System.Boolean EnabledForAnyListener
      [[deprecated]] bool& dyn_EnabledForAnyListener();
      // Get instance field reference: public System.Boolean EnabledForETW
      [[deprecated]] bool& dyn_EnabledForETW();
      // Get instance field reference: public System.Boolean HasRelatedActivityID
      [[deprecated]] bool& dyn_HasRelatedActivityID();
      // Get instance field reference: public System.Byte TriggersActivityTracking
      [[deprecated]] uint8_t& dyn_TriggersActivityTracking();
      // Get instance field reference: public System.String Name
      [[deprecated]] ::StringW& dyn_Name();
      // Get instance field reference: public System.String Message
      [[deprecated]] ::StringW& dyn_Message();
      // Get instance field reference: public System.Reflection.ParameterInfo[] Parameters
      [[deprecated]] ::ArrayW<::System::Reflection::ParameterInfo*>& dyn_Parameters();
      // Get instance field reference: public System.Diagnostics.Tracing.TraceLoggingEventTypes TraceLoggingEventTypes
      [[deprecated]] ::System::Diagnostics::Tracing::TraceLoggingEventTypes*& dyn_TraceLoggingEventTypes();
      // Get instance field reference: public System.Diagnostics.Tracing.EventActivityOptions ActivityOptions
      [[deprecated]] ::System::Diagnostics::Tracing::EventActivityOptions& dyn_ActivityOptions();
    }; // System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata
    #pragma pack(pop)
    static check_size<sizeof(EventSource::EventMetadata), 56 + sizeof(::System::Diagnostics::Tracing::EventActivityOptions)> __System_Diagnostics_Tracing_EventSource_EventMetadataSizeCheck;
    static_assert(sizeof(EventSource::EventMetadata) == 0x3C);
    public:
    // private System.Byte[] providerMetadata
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> providerMetadata;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.String m_name
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Int32 m_id
    // Size: 0x4
    // Offset: 0x20
    int m_id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Guid m_guid
    // Size: 0x10
    // Offset: 0x24
    ::System::Guid m_guid;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // Padding between fields: m_guid and: m_eventData
    char __padding3[0x4] = {};
    // System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata[] m_eventData
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata> m_eventData;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata>) == 0x8);
    // private System.Byte[] m_rawManifest
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> m_rawManifest;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.EventHandler`1<System.Diagnostics.Tracing.EventCommandEventArgs> m_eventCommandExecuted
    // Size: 0x8
    // Offset: 0x48
    ::System::EventHandler_1<::System::Diagnostics::Tracing::EventCommandEventArgs*>* m_eventCommandExecuted;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::System::Diagnostics::Tracing::EventCommandEventArgs*>*) == 0x8);
    // private System.Diagnostics.Tracing.EventSourceSettings m_config
    // Size: 0x4
    // Offset: 0x50
    ::System::Diagnostics::Tracing::EventSourceSettings m_config;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventSourceSettings) == 0x4);
    // private System.Boolean m_eventSourceEnabled
    // Size: 0x1
    // Offset: 0x54
    bool m_eventSourceEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_eventSourceEnabled and: m_level
    char __padding8[0x3] = {};
    // System.Diagnostics.Tracing.EventLevel m_level
    // Size: 0x4
    // Offset: 0x58
    ::System::Diagnostics::Tracing::EventLevel m_level;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventLevel) == 0x4);
    // Padding between fields: m_level and: m_matchAnyKeyword
    char __padding9[0x4] = {};
    // System.Diagnostics.Tracing.EventKeywords m_matchAnyKeyword
    // Size: 0x8
    // Offset: 0x60
    ::System::Diagnostics::Tracing::EventKeywords m_matchAnyKeyword;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventKeywords) == 0x8);
    // System.Diagnostics.Tracing.EventDispatcher m_Dispatchers
    // Size: 0x8
    // Offset: 0x68
    ::System::Diagnostics::Tracing::EventDispatcher* m_Dispatchers;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventDispatcher*) == 0x8);
    // private System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.OverideEventProvider m_provider
    // Size: 0x8
    // Offset: 0x70
    ::System::Diagnostics::Tracing::EventSource::OverideEventProvider* m_provider;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventSource::OverideEventProvider*) == 0x8);
    // private System.Boolean m_completelyInited
    // Size: 0x1
    // Offset: 0x78
    bool m_completelyInited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_completelyInited and: m_constructionException
    char __padding13[0x7] = {};
    // private System.Exception m_constructionException
    // Size: 0x8
    // Offset: 0x80
    ::System::Exception* m_constructionException;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Byte m_outOfBandMessageCount
    // Size: 0x1
    // Offset: 0x88
    uint8_t m_outOfBandMessageCount;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: m_outOfBandMessageCount and: m_deferredCommands
    char __padding15[0x7] = {};
    // private System.Diagnostics.Tracing.EventCommandEventArgs m_deferredCommands
    // Size: 0x8
    // Offset: 0x90
    ::System::Diagnostics::Tracing::EventCommandEventArgs* m_deferredCommands;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventCommandEventArgs*) == 0x8);
    // private System.String[] m_traits
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::StringW> m_traits;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Diagnostics.Tracing.SessionMask m_curLiveSessions
    // Size: 0x4
    // Offset: 0xA0
    ::System::Diagnostics::Tracing::SessionMask m_curLiveSessions;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::SessionMask) == 0x4);
    // Padding between fields: m_curLiveSessions and: m_etwSessionIdMap
    char __padding18[0x4] = {};
    // private System.Diagnostics.Tracing.EtwSession[] m_etwSessionIdMap
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::System::Diagnostics::Tracing::EtwSession*> m_etwSessionIdMap;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Diagnostics::Tracing::EtwSession*>) == 0x8);
    // private System.Collections.Generic.List`1<System.Diagnostics.Tracing.EtwSession> m_legacySessions
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EtwSession*>* m_legacySessions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EtwSession*>*) == 0x8);
    // System.Int64 m_keywordTriggers
    // Size: 0x8
    // Offset: 0xB8
    int64_t m_keywordTriggers;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Diagnostics.Tracing.SessionMask m_activityFilteringForETWEnabled
    // Size: 0x4
    // Offset: 0xC0
    ::System::Diagnostics::Tracing::SessionMask m_activityFilteringForETWEnabled;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::SessionMask) == 0x4);
    // Padding between fields: m_activityFilteringForETWEnabled and: m_activityTracker
    char __padding22[0x4] = {};
    // private System.Diagnostics.Tracing.ActivityTracker m_activityTracker
    // Size: 0x8
    // Offset: 0xC8
    ::System::Diagnostics::Tracing::ActivityTracker* m_activityTracker;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::ActivityTracker*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static System.UInt32 s_currentPid
    static uint _get_s_currentPid();
    // Set static field: static System.UInt32 s_currentPid
    static void _set_s_currentPid(uint value);
    // Get static field: static private System.Byte m_EventSourceExceptionRecurenceCount
    static uint8_t _get_m_EventSourceExceptionRecurenceCount();
    // Set static field: static private System.Byte m_EventSourceExceptionRecurenceCount
    static void _set_m_EventSourceExceptionRecurenceCount(uint8_t value);
    // Get static field: static System.Action`1<System.Guid> s_activityDying
    static ::System::Action_1<::System::Guid>* _get_s_activityDying();
    // Set static field: static System.Action`1<System.Guid> s_activityDying
    static void _set_s_activityDying(::System::Action_1<::System::Guid>* value);
    // Get static field: static private readonly System.Byte[] namespaceBytes
    static ::ArrayW<uint8_t> _get_namespaceBytes();
    // Set static field: static private readonly System.Byte[] namespaceBytes
    static void _set_namespaceBytes(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Guid AspNetEventSourceGuid
    static ::System::Guid _get_AspNetEventSourceGuid();
    // Set static field: static private readonly System.Guid AspNetEventSourceGuid
    static void _set_AspNetEventSourceGuid(::System::Guid value);
    // Get instance field reference: private System.Byte[] providerMetadata
    [[deprecated]] ::ArrayW<uint8_t>& dyn_providerMetadata();
    // Get instance field reference: private System.String m_name
    [[deprecated]] ::StringW& dyn_m_name();
    // Get instance field reference: System.Int32 m_id
    [[deprecated]] int& dyn_m_id();
    // Get instance field reference: private System.Guid m_guid
    [[deprecated]] ::System::Guid& dyn_m_guid();
    // Get instance field reference: System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata[] m_eventData
    [[deprecated]] ::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata>& dyn_m_eventData();
    // Get instance field reference: private System.Byte[] m_rawManifest
    [[deprecated]] ::ArrayW<uint8_t>& dyn_m_rawManifest();
    // Get instance field reference: private System.EventHandler`1<System.Diagnostics.Tracing.EventCommandEventArgs> m_eventCommandExecuted
    [[deprecated]] ::System::EventHandler_1<::System::Diagnostics::Tracing::EventCommandEventArgs*>*& dyn_m_eventCommandExecuted();
    // Get instance field reference: private System.Diagnostics.Tracing.EventSourceSettings m_config
    [[deprecated]] ::System::Diagnostics::Tracing::EventSourceSettings& dyn_m_config();
    // Get instance field reference: private System.Boolean m_eventSourceEnabled
    [[deprecated]] bool& dyn_m_eventSourceEnabled();
    // Get instance field reference: System.Diagnostics.Tracing.EventLevel m_level
    [[deprecated]] ::System::Diagnostics::Tracing::EventLevel& dyn_m_level();
    // Get instance field reference: System.Diagnostics.Tracing.EventKeywords m_matchAnyKeyword
    [[deprecated]] ::System::Diagnostics::Tracing::EventKeywords& dyn_m_matchAnyKeyword();
    // Get instance field reference: System.Diagnostics.Tracing.EventDispatcher m_Dispatchers
    [[deprecated]] ::System::Diagnostics::Tracing::EventDispatcher*& dyn_m_Dispatchers();
    // Get instance field reference: private System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.OverideEventProvider m_provider
    [[deprecated]] ::System::Diagnostics::Tracing::EventSource::OverideEventProvider*& dyn_m_provider();
    // Get instance field reference: private System.Boolean m_completelyInited
    [[deprecated]] bool& dyn_m_completelyInited();
    // Get instance field reference: private System.Exception m_constructionException
    [[deprecated]] ::System::Exception*& dyn_m_constructionException();
    // Get instance field reference: private System.Byte m_outOfBandMessageCount
    [[deprecated]] uint8_t& dyn_m_outOfBandMessageCount();
    // Get instance field reference: private System.Diagnostics.Tracing.EventCommandEventArgs m_deferredCommands
    [[deprecated]] ::System::Diagnostics::Tracing::EventCommandEventArgs*& dyn_m_deferredCommands();
    // Get instance field reference: private System.String[] m_traits
    [[deprecated]] ::ArrayW<::StringW>& dyn_m_traits();
    // Get instance field reference: private System.Diagnostics.Tracing.SessionMask m_curLiveSessions
    [[deprecated]] ::System::Diagnostics::Tracing::SessionMask& dyn_m_curLiveSessions();
    // Get instance field reference: private System.Diagnostics.Tracing.EtwSession[] m_etwSessionIdMap
    [[deprecated]] ::ArrayW<::System::Diagnostics::Tracing::EtwSession*>& dyn_m_etwSessionIdMap();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Diagnostics.Tracing.EtwSession> m_legacySessions
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EtwSession*>*& dyn_m_legacySessions();
    // Get instance field reference: System.Int64 m_keywordTriggers
    [[deprecated]] int64_t& dyn_m_keywordTriggers();
    // Get instance field reference: System.Diagnostics.Tracing.SessionMask m_activityFilteringForETWEnabled
    [[deprecated]] ::System::Diagnostics::Tracing::SessionMask& dyn_m_activityFilteringForETWEnabled();
    // Get instance field reference: private System.Diagnostics.Tracing.ActivityTracker m_activityTracker
    [[deprecated]] ::System::Diagnostics::Tracing::ActivityTracker*& dyn_m_activityTracker();
    // public System.String get_Name()
    // Offset: 0x1E1520
    ::StringW get_Name();
    // public System.Guid get_Guid()
    // Offset: 0x228B00
    ::System::Guid get_Guid();
    // static public System.Guid get_CurrentThreadActivityId()
    // Offset: 0x228A10
    static ::System::Guid get_CurrentThreadActivityId();
    // static System.Guid get_InternalCurrentThreadActivityId()
    // Offset: 0x228B10
    static ::System::Guid get_InternalCurrentThreadActivityId();
    // static System.Guid get_FallbackActivityId()
    // Offset: 0x228A40
    static ::System::Guid get_FallbackActivityId();
    // private System.Boolean get_IsDisposed()
    // Offset: 0x228C10
    bool get_IsDisposed();
    // private System.Boolean get_ThrowOnEventWriteErrors()
    // Offset: 0x228C70
    bool get_ThrowOnEventWriteErrors();
    // private System.Boolean get_SelfDescribingEvents()
    // Offset: 0x228C60
    bool get_SelfDescribingEvents();
    // protected System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings)
    // Offset: 0x228720
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource* New_ctor(::System::Diagnostics::Tracing::EventSourceSettings settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventSource*, creationType>(settings)));
    }
    // protected System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings, params System.String[] traits)
    // Offset: 0x228890
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource* New_ctor(::System::Diagnostics::Tracing::EventSourceSettings settings, ::ArrayW<::StringW> traits) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventSource*, creationType>(settings, traits)));
    }
    // static private System.Void .cctor()
    // Offset: 0x228560
    static void _cctor();
    // private System.Void WriteMultiMerge(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    // Offset: 0x2276B0
    void WriteMultiMerge(::StringW eventName, ByRef<::System::Diagnostics::Tracing::EventSourceOptions> options, ::System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, ::System::Guid* activityID, ::System::Guid* childActivityID, ::ArrayW<::Il2CppObject*> values);
    // private System.Void WriteMultiMergeInner(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    // Offset: 0x2271B0
    void WriteMultiMergeInner(::StringW eventName, ByRef<::System::Diagnostics::Tracing::EventSourceOptions> options, ::System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, ::System::Guid* activityID, ::System::Guid* childActivityID, ::ArrayW<::Il2CppObject*> values);
    // System.Void WriteMultiMerge(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventData* data)
    // Offset: 0x227740
    void WriteMultiMerge(::StringW eventName, ByRef<::System::Diagnostics::Tracing::EventSourceOptions> options, ::System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, ::System::Guid* activityID, ::System::Guid* childActivityID, ::System::Diagnostics::Tracing::EventSource::EventData* data);
    // private System.Void WriteCleanup(System.Runtime.InteropServices.GCHandle* pPins, System.Int32 cPins)
    // Offset: 0x224D40
    void WriteCleanup(::System::Runtime::InteropServices::GCHandle* pPins, int cPins);
    // private System.Void InitializeProviderMetadata()
    // Offset: 0x221FB0
    void InitializeProviderMetadata();
    // static private System.Int32 AddValueToMetaData(System.Collections.Generic.List`1<System.Byte> metaData, System.String value)
    // Offset: 0x21C310
    static int AddValueToMetaData(::System::Collections::Generic::List_1<uint8_t>* metaData, ::StringW value);
    // static private System.Int32 HexDigit(System.Char c)
    // Offset: 0x221EB0
    static int HexDigit(::Il2CppChar c);
    // private System.Diagnostics.Tracing.NameInfo UpdateDescriptor(System.String name, System.Diagnostics.Tracing.TraceLoggingEventTypes eventInfo, ref System.Diagnostics.Tracing.EventSourceOptions options, out System.Diagnostics.Tracing.EventDescriptor descriptor)
    // Offset: 0x224730
    ::System::Diagnostics::Tracing::NameInfo* UpdateDescriptor(::StringW name, ::System::Diagnostics::Tracing::TraceLoggingEventTypes* eventInfo, ByRef<::System::Diagnostics::Tracing::EventSourceOptions> options, ByRef<::System::Diagnostics::Tracing::EventDescriptor> descriptor);
    // public System.Boolean IsEnabled()
    // Offset: 0x222B10
    bool IsEnabled();
    // public System.Boolean IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords)
    // Offset: 0x222B20
    bool IsEnabled(::System::Diagnostics::Tracing::EventLevel level, ::System::Diagnostics::Tracing::EventKeywords keywords);
    // public System.Boolean IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventChannel channel)
    // Offset: 0x222B20
    bool IsEnabled(::System::Diagnostics::Tracing::EventLevel level, ::System::Diagnostics::Tracing::EventKeywords keywords, ::System::Diagnostics::Tracing::EventChannel channel);
    // static public System.Guid GetGuid(System.Type eventSourceType)
    // Offset: 0x221530
    static ::System::Guid GetGuid(::System::Type* eventSourceType);
    // static public System.String GetName(System.Type eventSourceType)
    // Offset: 0x221B60
    static ::StringW GetName(::System::Type* eventSourceType);
    // static public System.Void SetCurrentThreadActivityId(System.Guid activityId)
    // Offset: 0x223CA0
    static void SetCurrentThreadActivityId(::System::Guid activityId);
    // protected System.Void OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs command)
    // Offset: 0x1DDF00
    void OnEventCommand(::System::Diagnostics::Tracing::EventCommandEventArgs* command);
    // protected System.Void WriteEvent(System.Int32 eventId, System.Int32 arg1)
    // Offset: 0x226FB0
    void WriteEvent(int eventId, int arg1);
    // protected System.Void WriteEvent(System.Int32 eventId, System.String arg1, System.String arg2)
    // Offset: 0x227060
    void WriteEvent(int eventId, ::StringW arg1, ::StringW arg2);
    // protected System.Void WriteEvent(System.Int32 eventId, System.String arg1, System.String arg2, System.String arg3)
    // Offset: 0x226E20
    void WriteEvent(int eventId, ::StringW arg1, ::StringW arg2, ::StringW arg3);
    // protected System.Void WriteEventCore(System.Int32 eventId, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventData* data)
    // Offset: 0x224DF0
    void WriteEventCore(int eventId, int eventDataCount, ::System::Diagnostics::Tracing::EventSource::EventData* data);
    // protected System.Void WriteEventWithRelatedActivityIdCore(System.Int32 eventId, System.Guid* relatedActivityId, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventData* data)
    // Offset: 0x226160
    void WriteEventWithRelatedActivityIdCore(int eventId, ::System::Guid* relatedActivityId, int eventDataCount, ::System::Diagnostics::Tracing::EventSource::EventData* data);
    // protected System.Void WriteEvent(System.Int32 eventId, params System.Object[] args)
    // Offset: 0x226E00
    void WriteEvent(int eventId, ::ArrayW<::Il2CppObject*> args);
    // public System.Void Dispose()
    // Offset: 0x21F4E0
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x21F550
    void Dispose(bool disposing);
    // System.Void WriteStringToListener(System.Diagnostics.Tracing.EventListener listener, System.String msg, System.Diagnostics.Tracing.SessionMask m)
    // Offset: 0x227E40
    void WriteStringToListener(::System::Diagnostics::Tracing::EventListener* listener, ::StringW msg, ::System::Diagnostics::Tracing::SessionMask m);
    // private System.Void WriteEventRaw(System.String eventName, ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* relatedActivityID, System.Int32 dataCount, System.IntPtr data)
    // Offset: 0x224E20
    void WriteEventRaw(::StringW eventName, ByRef<::System::Diagnostics::Tracing::EventDescriptor> eventDescriptor, ::System::Guid* activityID, ::System::Guid* relatedActivityID, int dataCount, ::System::IntPtr data);
    // private System.Void Initialize(System.Guid eventSourceGuid, System.String eventSourceName, System.String[] traits)
    // Offset: 0x222470
    void Initialize(::System::Guid eventSourceGuid, ::StringW eventSourceName, ::ArrayW<::StringW> traits);
    // static private System.String GetName(System.Type eventSourceType, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0x221BC0
    static ::StringW GetName(::System::Type* eventSourceType, ::System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Guid GenerateGuidFromName(System.String name)
    // Offset: 0x220710
    static ::System::Guid GenerateGuidFromName(::StringW name);
    // private System.Object DecodeObject(System.Int32 eventId, System.Int32 parameterId, ref System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventData* data)
    // Offset: 0x21E9E0
    ::Il2CppObject* DecodeObject(int eventId, int parameterId, ByRef<::System::Diagnostics::Tracing::EventSource::EventData*> data);
    // private System.Diagnostics.Tracing.EventDispatcher GetDispatcher(System.Diagnostics.Tracing.EventListener listener)
    // Offset: 0x220FF0
    ::System::Diagnostics::Tracing::EventDispatcher* GetDispatcher(::System::Diagnostics::Tracing::EventListener* listener);
    // private System.Void WriteEventVarargs(System.Int32 eventId, System.Guid* childActivityID, System.Object[] args)
    // Offset: 0x225390
    void WriteEventVarargs(int eventId, ::System::Guid* childActivityID, ::ArrayW<::Il2CppObject*> args);
    // private System.Object[] SerializeEventArgs(System.Int32 eventId, System.Object[] args)
    // Offset: 0x223A20
    ::ArrayW<::Il2CppObject*> SerializeEventArgs(int eventId, ::ArrayW<::Il2CppObject*> args);
    // private System.Void LogEventArgsMismatches(System.Reflection.ParameterInfo[] infos, System.Object[] args)
    // Offset: 0x222B50
    void LogEventArgsMismatches(::ArrayW<::System::Reflection::ParameterInfo*> infos, ::ArrayW<::Il2CppObject*> args);
    // private System.Int32 GetParamLengthIncludingByteArray(System.Reflection.ParameterInfo[] parameters)
    // Offset: 0x221DB0
    int GetParamLengthIncludingByteArray(::ArrayW<::System::Reflection::ParameterInfo*> parameters);
    // private System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventData* data)
    // Offset: 0x228100
    void WriteToAllListeners(int eventId, ::System::Guid* childActivityID, int eventDataCount, ::System::Diagnostics::Tracing::EventSource::EventData* data);
    // private System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, params System.Object[] args)
    // Offset: 0x227F90
    void WriteToAllListeners(int eventId, ::System::Guid* childActivityID, ::ArrayW<::Il2CppObject*> args);
    // private System.Void DispatchToAllListeners(System.Int32 eventId, System.Guid* childActivityID, System.Diagnostics.Tracing.EventWrittenEventArgs eventCallbackArgs)
    // Offset: 0x21F2D0
    void DispatchToAllListeners(int eventId, ::System::Guid* childActivityID, ::System::Diagnostics::Tracing::EventWrittenEventArgs* eventCallbackArgs);
    // private System.Void WriteEventString(System.Diagnostics.Tracing.EventLevel level, System.Int64 keywords, System.String msgString)
    // Offset: 0x224F20
    void WriteEventString(::System::Diagnostics::Tracing::EventLevel level, int64_t keywords, ::StringW msgString);
    // private System.Void WriteStringToAllListeners(System.String eventName, System.String msg)
    // Offset: 0x227C20
    void WriteStringToAllListeners(::StringW eventName, ::StringW msg);
    // private System.Diagnostics.Tracing.SessionMask GetEtwSessionMask(System.Int32 eventId, System.Guid* childActivityID)
    // Offset: 0x221030
    ::System::Diagnostics::Tracing::SessionMask GetEtwSessionMask(int eventId, ::System::Guid* childActivityID);
    // private System.Boolean IsEnabledByDefault(System.Int32 eventNum, System.Boolean enable, System.Diagnostics.Tracing.EventLevel currentLevel, System.Diagnostics.Tracing.EventKeywords currentMatchAnyKeyword)
    // Offset: 0x2229E0
    bool IsEnabledByDefault(int eventNum, bool enable, ::System::Diagnostics::Tracing::EventLevel currentLevel, ::System::Diagnostics::Tracing::EventKeywords currentMatchAnyKeyword);
    // private System.Boolean IsEnabledCommon(System.Boolean enabled, System.Diagnostics.Tracing.EventLevel currentLevel, System.Diagnostics.Tracing.EventKeywords currentMatchAnyKeyword, System.Diagnostics.Tracing.EventLevel eventLevel, System.Diagnostics.Tracing.EventKeywords eventKeywords, System.Diagnostics.Tracing.EventChannel eventChannel)
    // Offset: 0x222AE0
    bool IsEnabledCommon(bool enabled, ::System::Diagnostics::Tracing::EventLevel currentLevel, ::System::Diagnostics::Tracing::EventKeywords currentMatchAnyKeyword, ::System::Diagnostics::Tracing::EventLevel eventLevel, ::System::Diagnostics::Tracing::EventKeywords eventKeywords, ::System::Diagnostics::Tracing::EventChannel eventChannel);
    // private System.Void ThrowEventSourceException(System.String eventName, System.Exception innerEx)
    // Offset: 0x223EB0
    void ThrowEventSourceException(::StringW eventName, ::System::Exception* innerEx);
    // private System.Void ValidateEventOpcodeForTransfer(ref System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata eventData, System.String eventName)
    // Offset: 0x224C80
    void ValidateEventOpcodeForTransfer(ByRef<::System::Diagnostics::Tracing::EventSource::EventMetadata> eventData, ::StringW eventName);
    // static System.Diagnostics.Tracing.EventOpcode GetOpcodeWithDefault(System.Diagnostics.Tracing.EventOpcode opcode, System.String eventName)
    // Offset: 0x221D20
    static ::System::Diagnostics::Tracing::EventOpcode GetOpcodeWithDefault(::System::Diagnostics::Tracing::EventOpcode opcode, ::StringW eventName);
    // System.Void SendCommand(System.Diagnostics.Tracing.EventListener listener, System.Int32 perEventSourceSessionId, System.Int32 etwSessionId, System.Diagnostics.Tracing.EventCommand command, System.Boolean enable, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary`2<System.String,System.String> commandArguments)
    // Offset: 0x2235D0
    void SendCommand(::System::Diagnostics::Tracing::EventListener* listener, int perEventSourceSessionId, int etwSessionId, ::System::Diagnostics::Tracing::EventCommand command, bool enable, ::System::Diagnostics::Tracing::EventLevel level, ::System::Diagnostics::Tracing::EventKeywords matchAnyKeyword, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* commandArguments);
    // System.Void DoCommand(System.Diagnostics.Tracing.EventCommandEventArgs commandArgs)
    // Offset: 0x21F680
    void DoCommand(::System::Diagnostics::Tracing::EventCommandEventArgs* commandArgs);
    // System.Void UpdateEtwSession(System.Int32 sessionIdBit, System.Int32 etwSessionId, System.Boolean bEnable, System.String activityFilters, System.Boolean participateInSampling)
    // Offset: 0x224870
    void UpdateEtwSession(int sessionIdBit, int etwSessionId, bool bEnable, ::StringW activityFilters, bool participateInSampling);
    // static System.Boolean ParseCommandArgs(System.Collections.Generic.IDictionary`2<System.String,System.String> commandArguments, out System.Boolean participateInSampling, out System.String activityFilters, out System.Int32 sessionIdBit)
    // Offset: 0x222D70
    static bool ParseCommandArgs(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* commandArguments, ByRef<bool> participateInSampling, ByRef<::StringW> activityFilters, ByRef<int> sessionIdBit);
    // System.Void UpdateKwdTriggers(System.Boolean enable)
    // Offset: 0x224BB0
    void UpdateKwdTriggers(bool enable);
    // System.Boolean EnableEventForDispatcher(System.Diagnostics.Tracing.EventDispatcher dispatcher, System.Int32 eventId, System.Boolean value)
    // Offset: 0x2201C0
    bool EnableEventForDispatcher(::System::Diagnostics::Tracing::EventDispatcher* dispatcher, int eventId, bool value);
    // private System.Boolean AnyEventEnabled()
    // Offset: 0x21C5C0
    bool AnyEventEnabled();
    // private System.Void EnsureDescriptorsInitialized()
    // Offset: 0x2202C0
    void EnsureDescriptorsInitialized();
    // private System.Boolean SendManifest(System.Byte[] rawManifest)
    // Offset: 0x2237C0
    bool SendManifest(::ArrayW<uint8_t> rawManifest);
    // static System.Attribute GetCustomAttributeHelper(System.Reflection.MemberInfo member, System.Type attributeType, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0x220860
    static ::System::Attribute* GetCustomAttributeHelper(::System::Reflection::MemberInfo* member, ::System::Type* attributeType, ::System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Boolean AttributeTypeNamesMatch(System.Type attributeType, System.Type reflectedAttributeType)
    // Offset: 0x21C690
    static bool AttributeTypeNamesMatch(::System::Type* attributeType, ::System::Type* reflectedAttributeType);
    // static private System.Type GetEventSourceBaseType(System.Type eventSourceType, System.Boolean allowEventSourceOverride, System.Boolean reflectionOnly)
    // Offset: 0x221310
    static ::System::Type* GetEventSourceBaseType(::System::Type* eventSourceType, bool allowEventSourceOverride, bool reflectionOnly);
    // static private System.Byte[] CreateManifestAndDescriptors(System.Type eventSourceType, System.String eventSourceDllName, System.Diagnostics.Tracing.EventSource source, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0x21C820
    static ::ArrayW<uint8_t> CreateManifestAndDescriptors(::System::Type* eventSourceType, ::StringW eventSourceDllName, ::System::Diagnostics::Tracing::EventSource* source, ::System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Boolean RemoveFirstArgIfRelatedActivityId(ref System.Reflection.ParameterInfo[] args)
    // Offset: 0x222F70
    static bool RemoveFirstArgIfRelatedActivityId(ByRef<::ArrayW<::System::Reflection::ParameterInfo*>> args);
    // static private System.Void AddProviderEnumKind(System.Diagnostics.Tracing.ManifestBuilder manifest, System.Reflection.FieldInfo staticField, System.String providerEnumKind)
    // Offset: 0x21BD00
    static void AddProviderEnumKind(::System::Diagnostics::Tracing::ManifestBuilder* manifest, ::System::Reflection::FieldInfo* staticField, ::StringW providerEnumKind);
    // static private System.Void AddEventDescriptor(ref System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata[] eventData, System.String eventName, System.Diagnostics.Tracing.EventAttribute eventAttribute, System.Reflection.ParameterInfo[] eventParameters, System.Boolean hasRelatedActivityID)
    // Offset: 0x21B7E0
    static void AddEventDescriptor(ByRef<::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata>> eventData, ::StringW eventName, ::System::Diagnostics::Tracing::EventAttribute* eventAttribute, ::ArrayW<::System::Reflection::ParameterInfo*> eventParameters, bool hasRelatedActivityID);
    // static private System.Void TrimEventDescriptors(ref System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata[] eventData)
    // Offset: 0x224670
    static void TrimEventDescriptors(ByRef<::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata>> eventData);
    // System.Void AddListener(System.Diagnostics.Tracing.EventListener listener)
    // Offset: 0x21BB50
    void AddListener(::System::Diagnostics::Tracing::EventListener* listener);
    // static private System.Void DebugCheckEvent(ref System.Collections.Generic.Dictionary`2<System.String,System.String> eventsByName, System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.EventMetadata[] eventData, System.Reflection.MethodInfo method, System.Diagnostics.Tracing.EventAttribute eventAttribute, System.Diagnostics.Tracing.ManifestBuilder manifest, System.Diagnostics.Tracing.EventManifestOptions options)
    // Offset: 0x21E0E0
    static void DebugCheckEvent(ByRef<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*> eventsByName, ::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata> eventData, ::System::Reflection::MethodInfo* method, ::System::Diagnostics::Tracing::EventAttribute* eventAttribute, ::System::Diagnostics::Tracing::ManifestBuilder* manifest, ::System::Diagnostics::Tracing::EventManifestOptions options);
    // static private System.Int32 GetHelperCallFirstArg(System.Reflection.MethodInfo method)
    // Offset: 0x2218B0
    static int GetHelperCallFirstArg(::System::Reflection::MethodInfo* method);
    // System.Void ReportOutOfBandMessage(System.String msg, System.Boolean flush)
    // Offset: 0x2234E0
    void ReportOutOfBandMessage(::StringW msg, bool flush);
    // private System.Diagnostics.Tracing.EventSourceSettings ValidateSettings(System.Diagnostics.Tracing.EventSourceSettings settings)
    // Offset: 0x224CB0
    ::System::Diagnostics::Tracing::EventSourceSettings ValidateSettings(::System::Diagnostics::Tracing::EventSourceSettings settings);
    // private System.Void ReportActivitySamplingInfo(System.Diagnostics.Tracing.EventListener listener, System.Diagnostics.Tracing.SessionMask sessions)
    // Offset: 0x223110
    void ReportActivitySamplingInfo(::System::Diagnostics::Tracing::EventListener* listener, ::System::Diagnostics::Tracing::SessionMask sessions);
    // protected System.Void .ctor()
    // Offset: 0x228610
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventSource*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x224530
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // protected override System.Void Finalize()
    // Offset: 0x220690
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Diagnostics.Tracing.EventSource
  #pragma pack(pop)
  static check_size<sizeof(EventSource), 200 + sizeof(::System::Diagnostics::Tracing::ActivityTracker*)> __System_Diagnostics_Tracing_EventSourceSizeCheck;
  static_assert(sizeof(EventSource) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventSource::EventMetadata, "System.Diagnostics.Tracing", "EventSource/EventMetadata");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_Guid
// Il2CppName: get_Guid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::get_Guid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_Guid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_CurrentThreadActivityId
// Il2CppName: get_CurrentThreadActivityId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (*)()>(&System::Diagnostics::Tracing::EventSource::get_CurrentThreadActivityId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_CurrentThreadActivityId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_InternalCurrentThreadActivityId
// Il2CppName: get_InternalCurrentThreadActivityId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (*)()>(&System::Diagnostics::Tracing::EventSource::get_InternalCurrentThreadActivityId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_InternalCurrentThreadActivityId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_FallbackActivityId
// Il2CppName: get_FallbackActivityId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (*)()>(&System::Diagnostics::Tracing::EventSource::get_FallbackActivityId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_FallbackActivityId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_IsDisposed
// Il2CppName: get_IsDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::get_IsDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_IsDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_ThrowOnEventWriteErrors
// Il2CppName: get_ThrowOnEventWriteErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::get_ThrowOnEventWriteErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_ThrowOnEventWriteErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::get_SelfDescribingEvents
// Il2CppName: get_SelfDescribingEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::get_SelfDescribingEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "get_SelfDescribingEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Diagnostics::Tracing::EventSource::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteMultiMerge
// Il2CppName: WriteMultiMerge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::StringW, ByRef<::System::Diagnostics::Tracing::EventSourceOptions>, ::System::Diagnostics::Tracing::TraceLoggingEventTypes*, ::System::Guid*, ::System::Guid*, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventSource::WriteMultiMerge)> {
  static const MethodInfo* get() {
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSourceOptions")->this_arg;
    static auto* eventTypes = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "TraceLoggingEventTypes")->byval_arg;
    static auto* activityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteMultiMerge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventName, options, eventTypes, activityID, childActivityID, values});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteMultiMergeInner
// Il2CppName: WriteMultiMergeInner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::StringW, ByRef<::System::Diagnostics::Tracing::EventSourceOptions>, ::System::Diagnostics::Tracing::TraceLoggingEventTypes*, ::System::Guid*, ::System::Guid*, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventSource::WriteMultiMergeInner)> {
  static const MethodInfo* get() {
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSourceOptions")->this_arg;
    static auto* eventTypes = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "TraceLoggingEventTypes")->byval_arg;
    static auto* activityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteMultiMergeInner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventName, options, eventTypes, activityID, childActivityID, values});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteMultiMerge
// Il2CppName: WriteMultiMerge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::StringW, ByRef<::System::Diagnostics::Tracing::EventSourceOptions>, ::System::Diagnostics::Tracing::TraceLoggingEventTypes*, ::System::Guid*, ::System::Guid*, ::System::Diagnostics::Tracing::EventSource::EventData*)>(&System::Diagnostics::Tracing::EventSource::WriteMultiMerge)> {
  static const MethodInfo* get() {
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSourceOptions")->this_arg;
    static auto* eventTypes = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "TraceLoggingEventTypes")->byval_arg;
    static auto* activityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventData"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteMultiMerge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventName, options, eventTypes, activityID, childActivityID, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteCleanup
// Il2CppName: WriteCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Runtime::InteropServices::GCHandle*, int)>(&System::Diagnostics::Tracing::EventSource::WriteCleanup)> {
  static const MethodInfo* get() {
    static auto* pPins = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "GCHandle"))->byval_arg;
    static auto* cPins = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pPins, cPins});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::InitializeProviderMetadata
// Il2CppName: InitializeProviderMetadata
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::InitializeProviderMetadata)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "InitializeProviderMetadata", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::AddValueToMetaData
// Il2CppName: AddValueToMetaData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Collections::Generic::List_1<uint8_t>*, ::StringW)>(&System::Diagnostics::Tracing::EventSource::AddValueToMetaData)> {
  static const MethodInfo* get() {
    static auto* metaData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "AddValueToMetaData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metaData, value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::HexDigit
// Il2CppName: HexDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar)>(&System::Diagnostics::Tracing::EventSource::HexDigit)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "HexDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::UpdateDescriptor
// Il2CppName: UpdateDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::NameInfo* (System::Diagnostics::Tracing::EventSource::*)(::StringW, ::System::Diagnostics::Tracing::TraceLoggingEventTypes*, ByRef<::System::Diagnostics::Tracing::EventSourceOptions>, ByRef<::System::Diagnostics::Tracing::EventDescriptor>)>(&System::Diagnostics::Tracing::EventSource::UpdateDescriptor)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* eventInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "TraceLoggingEventTypes")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSourceOptions")->this_arg;
    static auto* descriptor = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "UpdateDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, eventInfo, options, descriptor});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::IsEnabled
// Il2CppName: IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::IsEnabled
// Il2CppName: IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventLevel, ::System::Diagnostics::Tracing::EventKeywords)>(&System::Diagnostics::Tracing::EventSource::IsEnabled)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    static auto* keywords = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, keywords});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::IsEnabled
// Il2CppName: IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventLevel, ::System::Diagnostics::Tracing::EventKeywords, ::System::Diagnostics::Tracing::EventChannel)>(&System::Diagnostics::Tracing::EventSource::IsEnabled)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    static auto* keywords = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventChannel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, keywords, channel});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetGuid
// Il2CppName: GetGuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (*)(::System::Type*)>(&System::Diagnostics::Tracing::EventSource::GetGuid)> {
  static const MethodInfo* get() {
    static auto* eventSourceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetGuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventSourceType});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*)>(&System::Diagnostics::Tracing::EventSource::GetName)> {
  static const MethodInfo* get() {
    static auto* eventSourceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventSourceType});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::SetCurrentThreadActivityId
// Il2CppName: SetCurrentThreadActivityId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Guid)>(&System::Diagnostics::Tracing::EventSource::SetCurrentThreadActivityId)> {
  static const MethodInfo* get() {
    static auto* activityId = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "SetCurrentThreadActivityId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activityId});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::OnEventCommand
// Il2CppName: OnEventCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventCommandEventArgs*)>(&System::Diagnostics::Tracing::EventSource::OnEventCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventCommandEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "OnEventCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEvent
// Il2CppName: WriteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, int)>(&System::Diagnostics::Tracing::EventSource::WriteEvent)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, arg1});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEvent
// Il2CppName: WriteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::StringW, ::StringW)>(&System::Diagnostics::Tracing::EventSource::WriteEvent)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, arg1, arg2});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEvent
// Il2CppName: WriteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::StringW, ::StringW, ::StringW)>(&System::Diagnostics::Tracing::EventSource::WriteEvent)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, arg1, arg2, arg3});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEventCore
// Il2CppName: WriteEventCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, int, ::System::Diagnostics::Tracing::EventSource::EventData*)>(&System::Diagnostics::Tracing::EventSource::WriteEventCore)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eventDataCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventData"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEventCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, eventDataCount, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEventWithRelatedActivityIdCore
// Il2CppName: WriteEventWithRelatedActivityIdCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::System::Guid*, int, ::System::Diagnostics::Tracing::EventSource::EventData*)>(&System::Diagnostics::Tracing::EventSource::WriteEventWithRelatedActivityIdCore)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* relatedActivityId = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* eventDataCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventData"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEventWithRelatedActivityIdCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, relatedActivityId, eventDataCount, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEvent
// Il2CppName: WriteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventSource::WriteEvent)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, args});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(bool)>(&System::Diagnostics::Tracing::EventSource::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteStringToListener
// Il2CppName: WriteStringToListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventListener*, ::StringW, ::System::Diagnostics::Tracing::SessionMask)>(&System::Diagnostics::Tracing::EventSource::WriteStringToListener)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventListener")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "SessionMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteStringToListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, msg, m});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEventRaw
// Il2CppName: WriteEventRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::StringW, ByRef<::System::Diagnostics::Tracing::EventDescriptor>, ::System::Guid*, ::System::Guid*, int, ::System::IntPtr)>(&System::Diagnostics::Tracing::EventSource::WriteEventRaw)> {
  static const MethodInfo* get() {
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* eventDescriptor = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventDescriptor")->this_arg;
    static auto* activityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* relatedActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* dataCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEventRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventName, eventDescriptor, activityID, relatedActivityID, dataCount, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Guid, ::StringW, ::ArrayW<::StringW>)>(&System::Diagnostics::Tracing::EventSource::Initialize)> {
  static const MethodInfo* get() {
    static auto* eventSourceGuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* eventSourceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* traits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventSourceGuid, eventSourceName, traits});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*, ::System::Diagnostics::Tracing::EventManifestOptions)>(&System::Diagnostics::Tracing::EventSource::GetName)> {
  static const MethodInfo* get() {
    static auto* eventSourceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventManifestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventSourceType, flags});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GenerateGuidFromName
// Il2CppName: GenerateGuidFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (*)(::StringW)>(&System::Diagnostics::Tracing::EventSource::GenerateGuidFromName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GenerateGuidFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::DecodeObject
// Il2CppName: DecodeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Diagnostics::Tracing::EventSource::*)(int, int, ByRef<::System::Diagnostics::Tracing::EventSource::EventData*>)>(&System::Diagnostics::Tracing::EventSource::DecodeObject)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parameterId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventData"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "DecodeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, parameterId, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetDispatcher
// Il2CppName: GetDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventDispatcher* (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventListener*)>(&System::Diagnostics::Tracing::EventSource::GetDispatcher)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEventVarargs
// Il2CppName: WriteEventVarargs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::System::Guid*, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventSource::WriteEventVarargs)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEventVarargs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, childActivityID, args});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::SerializeEventArgs
// Il2CppName: SerializeEventArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Diagnostics::Tracing::EventSource::*)(int, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventSource::SerializeEventArgs)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "SerializeEventArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, args});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::LogEventArgsMismatches
// Il2CppName: LogEventArgsMismatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::ArrayW<::System::Reflection::ParameterInfo*>, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventSource::LogEventArgsMismatches)> {
  static const MethodInfo* get() {
    static auto* infos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "LogEventArgsMismatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infos, args});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetParamLengthIncludingByteArray
// Il2CppName: GetParamLengthIncludingByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Tracing::EventSource::*)(::ArrayW<::System::Reflection::ParameterInfo*>)>(&System::Diagnostics::Tracing::EventSource::GetParamLengthIncludingByteArray)> {
  static const MethodInfo* get() {
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetParamLengthIncludingByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteToAllListeners
// Il2CppName: WriteToAllListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::System::Guid*, int, ::System::Diagnostics::Tracing::EventSource::EventData*)>(&System::Diagnostics::Tracing::EventSource::WriteToAllListeners)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* eventDataCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventData"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteToAllListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, childActivityID, eventDataCount, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteToAllListeners
// Il2CppName: WriteToAllListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::System::Guid*, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventSource::WriteToAllListeners)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteToAllListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, childActivityID, args});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::DispatchToAllListeners
// Il2CppName: DispatchToAllListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, ::System::Guid*, ::System::Diagnostics::Tracing::EventWrittenEventArgs*)>(&System::Diagnostics::Tracing::EventSource::DispatchToAllListeners)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* eventCallbackArgs = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventWrittenEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "DispatchToAllListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, childActivityID, eventCallbackArgs});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteEventString
// Il2CppName: WriteEventString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventLevel, int64_t, ::StringW)>(&System::Diagnostics::Tracing::EventSource::WriteEventString)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    static auto* keywords = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* msgString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteEventString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, keywords, msgString});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::WriteStringToAllListeners
// Il2CppName: WriteStringToAllListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::StringW, ::StringW)>(&System::Diagnostics::Tracing::EventSource::WriteStringToAllListeners)> {
  static const MethodInfo* get() {
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "WriteStringToAllListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventName, msg});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetEtwSessionMask
// Il2CppName: GetEtwSessionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::SessionMask (System::Diagnostics::Tracing::EventSource::*)(int, ::System::Guid*)>(&System::Diagnostics::Tracing::EventSource::GetEtwSessionMask)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetEtwSessionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, childActivityID});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::IsEnabledByDefault
// Il2CppName: IsEnabledByDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)(int, bool, ::System::Diagnostics::Tracing::EventLevel, ::System::Diagnostics::Tracing::EventKeywords)>(&System::Diagnostics::Tracing::EventSource::IsEnabledByDefault)> {
  static const MethodInfo* get() {
    static auto* eventNum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* currentLevel = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    static auto* currentMatchAnyKeyword = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "IsEnabledByDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventNum, enable, currentLevel, currentMatchAnyKeyword});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::IsEnabledCommon
// Il2CppName: IsEnabledCommon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)(bool, ::System::Diagnostics::Tracing::EventLevel, ::System::Diagnostics::Tracing::EventKeywords, ::System::Diagnostics::Tracing::EventLevel, ::System::Diagnostics::Tracing::EventKeywords, ::System::Diagnostics::Tracing::EventChannel)>(&System::Diagnostics::Tracing::EventSource::IsEnabledCommon)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* currentLevel = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    static auto* currentMatchAnyKeyword = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    static auto* eventLevel = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    static auto* eventKeywords = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    static auto* eventChannel = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventChannel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "IsEnabledCommon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled, currentLevel, currentMatchAnyKeyword, eventLevel, eventKeywords, eventChannel});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::ThrowEventSourceException
// Il2CppName: ThrowEventSourceException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::StringW, ::System::Exception*)>(&System::Diagnostics::Tracing::EventSource::ThrowEventSourceException)> {
  static const MethodInfo* get() {
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* innerEx = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "ThrowEventSourceException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventName, innerEx});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::ValidateEventOpcodeForTransfer
// Il2CppName: ValidateEventOpcodeForTransfer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(ByRef<::System::Diagnostics::Tracing::EventSource::EventMetadata>, ::StringW)>(&System::Diagnostics::Tracing::EventSource::ValidateEventOpcodeForTransfer)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventMetadata")->this_arg;
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "ValidateEventOpcodeForTransfer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, eventName});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetOpcodeWithDefault
// Il2CppName: GetOpcodeWithDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventOpcode (*)(::System::Diagnostics::Tracing::EventOpcode, ::StringW)>(&System::Diagnostics::Tracing::EventSource::GetOpcodeWithDefault)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventOpcode")->byval_arg;
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetOpcodeWithDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, eventName});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::SendCommand
// Il2CppName: SendCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventListener*, int, int, ::System::Diagnostics::Tracing::EventCommand, bool, ::System::Diagnostics::Tracing::EventLevel, ::System::Diagnostics::Tracing::EventKeywords, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&System::Diagnostics::Tracing::EventSource::SendCommand)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventListener")->byval_arg;
    static auto* perEventSourceSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* command = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventCommand")->byval_arg;
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    static auto* matchAnyKeyword = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    static auto* commandArguments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "SendCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, perEventSourceSessionId, etwSessionId, command, enable, level, matchAnyKeyword, commandArguments});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::DoCommand
// Il2CppName: DoCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventCommandEventArgs*)>(&System::Diagnostics::Tracing::EventSource::DoCommand)> {
  static const MethodInfo* get() {
    static auto* commandArgs = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventCommandEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "DoCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandArgs});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::UpdateEtwSession
// Il2CppName: UpdateEtwSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(int, int, bool, ::StringW, bool)>(&System::Diagnostics::Tracing::EventSource::UpdateEtwSession)> {
  static const MethodInfo* get() {
    static auto* sessionIdBit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bEnable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* activityFilters = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* participateInSampling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "UpdateEtwSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionIdBit, etwSessionId, bEnable, activityFilters, participateInSampling});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::ParseCommandArgs
// Il2CppName: ParseCommandArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*, ByRef<bool>, ByRef<::StringW>, ByRef<int>)>(&System::Diagnostics::Tracing::EventSource::ParseCommandArgs)> {
  static const MethodInfo* get() {
    static auto* commandArguments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* participateInSampling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* activityFilters = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* sessionIdBit = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "ParseCommandArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandArguments, participateInSampling, activityFilters, sessionIdBit});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::UpdateKwdTriggers
// Il2CppName: UpdateKwdTriggers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(bool)>(&System::Diagnostics::Tracing::EventSource::UpdateKwdTriggers)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "UpdateKwdTriggers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::EnableEventForDispatcher
// Il2CppName: EnableEventForDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventDispatcher*, int, bool)>(&System::Diagnostics::Tracing::EventSource::EnableEventForDispatcher)> {
  static const MethodInfo* get() {
    static auto* dispatcher = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventDispatcher")->byval_arg;
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "EnableEventForDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dispatcher, eventId, value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::AnyEventEnabled
// Il2CppName: AnyEventEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::AnyEventEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "AnyEventEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::EnsureDescriptorsInitialized
// Il2CppName: EnsureDescriptorsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::EnsureDescriptorsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "EnsureDescriptorsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::SendManifest
// Il2CppName: SendManifest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventSource::*)(::ArrayW<uint8_t>)>(&System::Diagnostics::Tracing::EventSource::SendManifest)> {
  static const MethodInfo* get() {
    static auto* rawManifest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "SendManifest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawManifest});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetCustomAttributeHelper
// Il2CppName: GetCustomAttributeHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Attribute* (*)(::System::Reflection::MemberInfo*, ::System::Type*, ::System::Diagnostics::Tracing::EventManifestOptions)>(&System::Diagnostics::Tracing::EventSource::GetCustomAttributeHelper)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventManifestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetCustomAttributeHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member, attributeType, flags});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::AttributeTypeNamesMatch
// Il2CppName: AttributeTypeNamesMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Diagnostics::Tracing::EventSource::AttributeTypeNamesMatch)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* reflectedAttributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "AttributeTypeNamesMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, reflectedAttributeType});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetEventSourceBaseType
// Il2CppName: GetEventSourceBaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*, bool, bool)>(&System::Diagnostics::Tracing::EventSource::GetEventSourceBaseType)> {
  static const MethodInfo* get() {
    static auto* eventSourceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* allowEventSourceOverride = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reflectionOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetEventSourceBaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventSourceType, allowEventSourceOverride, reflectionOnly});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::CreateManifestAndDescriptors
// Il2CppName: CreateManifestAndDescriptors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Type*, ::StringW, ::System::Diagnostics::Tracing::EventSource*, ::System::Diagnostics::Tracing::EventManifestOptions)>(&System::Diagnostics::Tracing::EventSource::CreateManifestAndDescriptors)> {
  static const MethodInfo* get() {
    static auto* eventSourceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* eventSourceDllName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventManifestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "CreateManifestAndDescriptors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventSourceType, eventSourceDllName, source, flags});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::RemoveFirstArgIfRelatedActivityId
// Il2CppName: RemoveFirstArgIfRelatedActivityId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::ArrayW<::System::Reflection::ParameterInfo*>>)>(&System::Diagnostics::Tracing::EventSource::RemoveFirstArgIfRelatedActivityId)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "RemoveFirstArgIfRelatedActivityId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::AddProviderEnumKind
// Il2CppName: AddProviderEnumKind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Diagnostics::Tracing::ManifestBuilder*, ::System::Reflection::FieldInfo*, ::StringW)>(&System::Diagnostics::Tracing::EventSource::AddProviderEnumKind)> {
  static const MethodInfo* get() {
    static auto* manifest = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ManifestBuilder")->byval_arg;
    static auto* staticField = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    static auto* providerEnumKind = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "AddProviderEnumKind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manifest, staticField, providerEnumKind});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::AddEventDescriptor
// Il2CppName: AddEventDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata>>, ::StringW, ::System::Diagnostics::Tracing::EventAttribute*, ::ArrayW<::System::Reflection::ParameterInfo*>, bool)>(&System::Diagnostics::Tracing::EventSource::AddEventDescriptor)> {
  static const MethodInfo* get() {
    static auto* eventData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventMetadata"), 1)->this_arg;
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* eventAttribute = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventAttribute")->byval_arg;
    static auto* eventParameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    static auto* hasRelatedActivityID = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "AddEventDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, eventName, eventAttribute, eventParameters, hasRelatedActivityID});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::TrimEventDescriptors
// Il2CppName: TrimEventDescriptors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata>>)>(&System::Diagnostics::Tracing::EventSource::TrimEventDescriptors)> {
  static const MethodInfo* get() {
    static auto* eventData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventMetadata"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "TrimEventDescriptors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::AddListener
// Il2CppName: AddListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventListener*)>(&System::Diagnostics::Tracing::EventSource::AddListener)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "AddListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::DebugCheckEvent
// Il2CppName: DebugCheckEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>, ::ArrayW<::System::Diagnostics::Tracing::EventSource::EventMetadata>, ::System::Reflection::MethodInfo*, ::System::Diagnostics::Tracing::EventAttribute*, ::System::Diagnostics::Tracing::ManifestBuilder*, ::System::Diagnostics::Tracing::EventManifestOptions)>(&System::Diagnostics::Tracing::EventSource::DebugCheckEvent)> {
  static const MethodInfo* get() {
    static auto* eventsByName = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->this_arg;
    static auto* eventData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource/EventMetadata"), 1)->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* eventAttribute = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventAttribute")->byval_arg;
    static auto* manifest = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ManifestBuilder")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventManifestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "DebugCheckEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventsByName, eventData, method, eventAttribute, manifest, options});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::GetHelperCallFirstArg
// Il2CppName: GetHelperCallFirstArg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Reflection::MethodInfo*)>(&System::Diagnostics::Tracing::EventSource::GetHelperCallFirstArg)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "GetHelperCallFirstArg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::ReportOutOfBandMessage
// Il2CppName: ReportOutOfBandMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::StringW, bool)>(&System::Diagnostics::Tracing::EventSource::ReportOutOfBandMessage)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flush = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "ReportOutOfBandMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, flush});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::ValidateSettings
// Il2CppName: ValidateSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventSourceSettings (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventSourceSettings)>(&System::Diagnostics::Tracing::EventSource::ValidateSettings)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSourceSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "ValidateSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::ReportActivitySamplingInfo
// Il2CppName: ReportActivitySamplingInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)(::System::Diagnostics::Tracing::EventListener*, ::System::Diagnostics::Tracing::SessionMask)>(&System::Diagnostics::Tracing::EventSource::ReportActivitySamplingInfo)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventListener")->byval_arg;
    static auto* sessions = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "SessionMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "ReportActivitySamplingInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, sessions});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::*)()>(&System::Diagnostics::Tracing::EventSource::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
