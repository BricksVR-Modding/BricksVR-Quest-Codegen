// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Windows.Speech
namespace UnityEngine::Windows::Speech {
  // Forward declaring type: SemanticMeaning
  struct SemanticMeaning;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Windows::Speech::SemanticMeaning, "UnityEngine.Windows.Speech", "SemanticMeaning");
// Type namespace: UnityEngine.Windows.Speech
namespace UnityEngine::Windows::Speech {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Windows.Speech.SemanticMeaning
  // [TokenAttribute] Offset: FFFFFFFF
  struct SemanticMeaning/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String key
    // Size: 0x8
    // Offset: 0x0
    ::StringW key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] values
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::StringW> values;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Creating value type constructor for type: SemanticMeaning
    constexpr SemanticMeaning(::StringW key_ = {}, ::ArrayW<::StringW> values_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr))) noexcept : key{key_}, values{values_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String key
    [[deprecated("Use field access instead!")]] ::StringW& dyn_key();
    // Get instance field reference: public System.String[] values
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_values();
  }; // UnityEngine.Windows.Speech.SemanticMeaning
  #pragma pack(pop)
  static check_size<sizeof(SemanticMeaning), 8 + sizeof(::ArrayW<::StringW>)> __UnityEngine_Windows_Speech_SemanticMeaningSizeCheck;
  static_assert(sizeof(SemanticMeaning) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
