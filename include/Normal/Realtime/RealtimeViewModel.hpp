// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeModel
#include "Normal/Realtime/RealtimeModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: StreamContext because it is already included!
  // Forward declaring type: ReadBuffer
  class ReadBuffer;
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeView
  class RealtimeView;
  // Forward declaring type: ImmutableModelCollection
  class ImmutableModelCollection;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeViewModel
  class RealtimeViewModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeViewModel);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeViewModel*, "Normal.Realtime", "RealtimeViewModel");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeViewModel
  // [TokenAttribute] Offset: FFFFFFFF
  class RealtimeViewModel : public ::Normal::Realtime::RealtimeModel {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    // Nested type: ::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate
    struct CachedDeltaUpdate;
    // Nested type: ::Normal::Realtime::RealtimeViewModel::PropertyID
    struct PropertyID;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Normal.Realtime.RealtimeViewModel/Normal.Realtime.CachedDeltaUpdate
    // [TokenAttribute] Offset: FFFFFFFF
    struct CachedDeltaUpdate/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.UInt32 updateID
      // Size: 0x4
      // Offset: 0x0
      uint updateID;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Padding between fields: updateID and: packetRoomTime
      char __padding0[0x4] = {};
      // public readonly System.Double packetRoomTime
      // Size: 0x8
      // Offset: 0x8
      double packetRoomTime;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public readonly Normal.Realtime.Serialization.ReadBuffer buffer
      // Size: 0x8
      // Offset: 0x10
      ::Normal::Realtime::Serialization::ReadBuffer* buffer;
      // Field size check
      static_assert(sizeof(::Normal::Realtime::Serialization::ReadBuffer*) == 0x8);
      public:
      // Creating value type constructor for type: CachedDeltaUpdate
      constexpr CachedDeltaUpdate(uint updateID_ = {}, double packetRoomTime_ = {}, ::Normal::Realtime::Serialization::ReadBuffer* buffer_ = {}) noexcept : updateID{updateID_}, packetRoomTime{packetRoomTime_}, buffer{buffer_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.UInt32 updateID
      [[deprecated("Use field access instead!")]] uint& dyn_updateID();
      // Get instance field reference: public readonly System.Double packetRoomTime
      [[deprecated("Use field access instead!")]] double& dyn_packetRoomTime();
      // Get instance field reference: public readonly Normal.Realtime.Serialization.ReadBuffer buffer
      [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::ReadBuffer*& dyn_buffer();
      // public System.Void .ctor(System.UInt32 updateID, System.Double packetRoomTime, Normal.Realtime.Serialization.ReadBuffer buffer)
      // Offset: 0x88BDF0
      // ABORTED: conflicts with another method.  CachedDeltaUpdate(uint updateID, double packetRoomTime, ::Normal::Realtime::Serialization::ReadBuffer* buffer);
    }; // Normal.Realtime.RealtimeViewModel/Normal.Realtime.CachedDeltaUpdate
    #pragma pack(pop)
    static check_size<sizeof(RealtimeViewModel::CachedDeltaUpdate), 16 + sizeof(::Normal::Realtime::Serialization::ReadBuffer*)> __Normal_Realtime_RealtimeViewModel_CachedDeltaUpdateSizeCheck;
    static_assert(sizeof(RealtimeViewModel::CachedDeltaUpdate) == 0x18);
    public:
    // private Normal.Realtime.RealtimeView <realtimeView>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::Normal::Realtime::RealtimeView* realtimeView;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeView*) == 0x8);
    // private System.String _sceneViewUUID
    // Size: 0x8
    // Offset: 0x98
    ::StringW sceneViewUUID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _prefabName
    // Size: 0x8
    // Offset: 0xA0
    ::StringW prefabName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Normal.Realtime.ImmutableModelCollection _componentsModel
    // Size: 0x8
    // Offset: 0xA8
    ::Normal::Realtime::ImmutableModelCollection* componentsModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ImmutableModelCollection*) == 0x8);
    // private Normal.Realtime.Serialization.ReadBuffer _cachedComponentsModel
    // Size: 0x8
    // Offset: 0xB0
    ::Normal::Realtime::Serialization::ReadBuffer* cachedComponentsModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::ReadBuffer*) == 0x8);
    // private System.Collections.Generic.List`1<Normal.Realtime.RealtimeViewModel/Normal.Realtime.CachedDeltaUpdate> _cachedComponentsModelDeltaUpdates
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate>* cachedComponentsModelDeltaUpdates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate>*) == 0x8);
    // private Normal.Realtime.ImmutableModelCollection _childViewsModel
    // Size: 0x8
    // Offset: 0xC0
    ::Normal::Realtime::ImmutableModelCollection* childViewsModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ImmutableModelCollection*) == 0x8);
    // private Normal.Realtime.Serialization.ReadBuffer _cachedChildViewsModel
    // Size: 0x8
    // Offset: 0xC8
    ::Normal::Realtime::Serialization::ReadBuffer* cachedChildViewsModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::ReadBuffer*) == 0x8);
    // private System.Collections.Generic.List`1<Normal.Realtime.RealtimeViewModel/Normal.Realtime.CachedDeltaUpdate> _cachedChildViewsModelDeltaUpdates
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate>* cachedChildViewsModelDeltaUpdates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate>*) == 0x8);
    public:
    // Get instance field reference: private Normal.Realtime.RealtimeView <realtimeView>k__BackingField
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::RealtimeView*& dyn_$realtimeView$k__BackingField();
    // Get instance field reference: private System.String _sceneViewUUID
    [[deprecated("Use field access instead!")]] ::StringW& dyn__sceneViewUUID();
    // Get instance field reference: private System.String _prefabName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__prefabName();
    // Get instance field reference: private Normal.Realtime.ImmutableModelCollection _componentsModel
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::ImmutableModelCollection*& dyn__componentsModel();
    // Get instance field reference: private Normal.Realtime.Serialization.ReadBuffer _cachedComponentsModel
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::ReadBuffer*& dyn__cachedComponentsModel();
    // Get instance field reference: private System.Collections.Generic.List`1<Normal.Realtime.RealtimeViewModel/Normal.Realtime.CachedDeltaUpdate> _cachedComponentsModelDeltaUpdates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate>*& dyn__cachedComponentsModelDeltaUpdates();
    // Get instance field reference: private Normal.Realtime.ImmutableModelCollection _childViewsModel
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::ImmutableModelCollection*& dyn__childViewsModel();
    // Get instance field reference: private Normal.Realtime.Serialization.ReadBuffer _cachedChildViewsModel
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::ReadBuffer*& dyn__cachedChildViewsModel();
    // Get instance field reference: private System.Collections.Generic.List`1<Normal.Realtime.RealtimeViewModel/Normal.Realtime.CachedDeltaUpdate> _cachedChildViewsModelDeltaUpdates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate>*& dyn__cachedChildViewsModelDeltaUpdates();
    // public Normal.Realtime.RealtimeView get_realtimeView()
    // Offset: 0x237650
    ::Normal::Realtime::RealtimeView* get_realtimeView();
    // private System.Void set_realtimeView(Normal.Realtime.RealtimeView value)
    // Offset: 0x300060
    void set_realtimeView(::Normal::Realtime::RealtimeView* value);
    // public System.String get_sceneViewUUID()
    // Offset: 0x2F4B70
    ::StringW get_sceneViewUUID();
    // public System.String get_prefabName()
    // Offset: 0x2FFDC0
    ::StringW get_prefabName();
    // public Normal.Realtime.ImmutableModelCollection get_componentsModel()
    // Offset: 0x2F9330
    ::Normal::Realtime::ImmutableModelCollection* get_componentsModel();
    // public Normal.Realtime.ImmutableModelCollection get_childViewsModel()
    // Offset: 0x1E0C90
    ::Normal::Realtime::ImmutableModelCollection* get_childViewsModel();
    // public System.Void .ctor()
    // Offset: 0x8939C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeViewModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeViewModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeViewModel*, creationType>()));
    }
    // public System.Void .ctor(System.String sceneViewUUID, System.String prefabName, System.Int32 ownerID, Normal.Realtime.Serialization.MetaModel/Normal.Realtime.Serialization.LifetimeFlags lifetimeFlags, Normal.Realtime.ImmutableModelCollection componentsModel, Normal.Realtime.ImmutableModelCollection childViewsModel)
    // Offset: 0x893770
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeViewModel* New_ctor(::StringW sceneViewUUID, ::StringW prefabName, int ownerID, ::Normal::Realtime::Serialization::MetaModel::LifetimeFlags lifetimeFlags, ::Normal::Realtime::ImmutableModelCollection* componentsModel, ::Normal::Realtime::ImmutableModelCollection* childViewsModel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeViewModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeViewModel*, creationType>(sceneViewUUID, prefabName, ownerID, lifetimeFlags, componentsModel, childViewsModel)));
    }
    // public System.Void .ctor(Normal.Realtime.ImmutableModelCollection componentsModel, Normal.Realtime.ImmutableModelCollection childViewsModel)
    // Offset: 0x8936E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeViewModel* New_ctor(::Normal::Realtime::ImmutableModelCollection* componentsModel, ::Normal::Realtime::ImmutableModelCollection* childViewsModel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeViewModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeViewModel*, creationType>(componentsModel, childViewsModel)));
    }
    // private System.Void SetChildModels(Normal.Realtime.ImmutableModelCollection componentsModel, Normal.Realtime.ImmutableModelCollection childViewsModel)
    // Offset: 0x893010
    void SetChildModels(::Normal::Realtime::ImmutableModelCollection* componentsModel, ::Normal::Realtime::ImmutableModelCollection* childViewsModel);
    // System.Void SetChildModelsAndDeserializeCacheIfNeeded(Normal.Realtime.ImmutableModelCollection componentsModel, Normal.Realtime.ImmutableModelCollection childViewsModel)
    // Offset: 0x892FB0
    void SetChildModelsAndDeserializeCacheIfNeeded(::Normal::Realtime::ImmutableModelCollection* componentsModel, ::Normal::Realtime::ImmutableModelCollection* childViewsModel);
    // System.Void SetRealtimeView(Normal.Realtime.RealtimeView realtimeView)
    // Offset: 0x300060
    void SetRealtimeView(::Normal::Realtime::RealtimeView* realtimeView);
    // private System.Void CreateComponentsModelAndChildViewsModelIfNeeded(System.String prefabName)
    // Offset: 0x891C30
    void CreateComponentsModelAndChildViewsModelIfNeeded(::StringW prefabName);
    // private System.Void DeserializeCachedComponentsModelIfNeeded(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x892250
    void DeserializeCachedComponentsModelIfNeeded(::Normal::Realtime::Serialization::StreamContext context);
    // private System.Void DeserializeCachedChildViewsModelIfNeeded(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x891F00
    void DeserializeCachedChildViewsModelIfNeeded(::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x893180
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Int32 RealtimeModel::WriteLength(Normal.Realtime.Serialization.StreamContext context)
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x893390
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8925A0
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
  }; // Normal.Realtime.RealtimeViewModel
  #pragma pack(pop)
  static check_size<sizeof(RealtimeViewModel), 208 + sizeof(::System::Collections::Generic::List_1<::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate>*)> __Normal_Realtime_RealtimeViewModelSizeCheck;
  static_assert(sizeof(RealtimeViewModel) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeViewModel::CachedDeltaUpdate, "Normal.Realtime", "RealtimeViewModel/CachedDeltaUpdate");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::get_realtimeView
// Il2CppName: get_realtimeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeView* (Normal::Realtime::RealtimeViewModel::*)()>(&Normal::Realtime::RealtimeViewModel::get_realtimeView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "get_realtimeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::set_realtimeView
// Il2CppName: set_realtimeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::RealtimeViewModel::set_realtimeView)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "set_realtimeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::get_sceneViewUUID
// Il2CppName: get_sceneViewUUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Normal::Realtime::RealtimeViewModel::*)()>(&Normal::Realtime::RealtimeViewModel::get_sceneViewUUID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "get_sceneViewUUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::get_prefabName
// Il2CppName: get_prefabName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Normal::Realtime::RealtimeViewModel::*)()>(&Normal::Realtime::RealtimeViewModel::get_prefabName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "get_prefabName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::get_componentsModel
// Il2CppName: get_componentsModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::ImmutableModelCollection* (Normal::Realtime::RealtimeViewModel::*)()>(&Normal::Realtime::RealtimeViewModel::get_componentsModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "get_componentsModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::get_childViewsModel
// Il2CppName: get_childViewsModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::ImmutableModelCollection* (Normal::Realtime::RealtimeViewModel::*)()>(&Normal::Realtime::RealtimeViewModel::get_childViewsModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "get_childViewsModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::SetChildModels
// Il2CppName: SetChildModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::ImmutableModelCollection*, ::Normal::Realtime::ImmutableModelCollection*)>(&Normal::Realtime::RealtimeViewModel::SetChildModels)> {
  static const MethodInfo* get() {
    static auto* componentsModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "ImmutableModelCollection")->byval_arg;
    static auto* childViewsModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "ImmutableModelCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "SetChildModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentsModel, childViewsModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::SetChildModelsAndDeserializeCacheIfNeeded
// Il2CppName: SetChildModelsAndDeserializeCacheIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::ImmutableModelCollection*, ::Normal::Realtime::ImmutableModelCollection*)>(&Normal::Realtime::RealtimeViewModel::SetChildModelsAndDeserializeCacheIfNeeded)> {
  static const MethodInfo* get() {
    static auto* componentsModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "ImmutableModelCollection")->byval_arg;
    static auto* childViewsModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "ImmutableModelCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "SetChildModelsAndDeserializeCacheIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentsModel, childViewsModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::SetRealtimeView
// Il2CppName: SetRealtimeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::RealtimeViewModel::SetRealtimeView)> {
  static const MethodInfo* get() {
    static auto* realtimeView = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "SetRealtimeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{realtimeView});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::CreateComponentsModelAndChildViewsModelIfNeeded
// Il2CppName: CreateComponentsModelAndChildViewsModelIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::StringW)>(&Normal::Realtime::RealtimeViewModel::CreateComponentsModelAndChildViewsModelIfNeeded)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "CreateComponentsModelAndChildViewsModelIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::DeserializeCachedComponentsModelIfNeeded
// Il2CppName: DeserializeCachedComponentsModelIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeViewModel::DeserializeCachedComponentsModelIfNeeded)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "DeserializeCachedComponentsModelIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::DeserializeCachedChildViewsModelIfNeeded
// Il2CppName: DeserializeCachedChildViewsModelIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeViewModel::DeserializeCachedChildViewsModelIfNeeded)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "DeserializeCachedChildViewsModelIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeViewModel::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeViewModel::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewModel::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeViewModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeViewModel::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewModel*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
