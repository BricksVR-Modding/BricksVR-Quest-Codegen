// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AdvancedColorPicker.ColorTypeComponent
#include "AdvancedColorPicker/ColorTypeComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Completed forward declares
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Forward declaring type: ColorLabel_TMP
  class ColorLabel_TMP;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AdvancedColorPicker::ColorLabel_TMP);
DEFINE_IL2CPP_ARG_TYPE(::AdvancedColorPicker::ColorLabel_TMP*, "AdvancedColorPicker", "ColorLabel_TMP");
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: AdvancedColorPicker.ColorLabel_TMP
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: E3DC0
  class ColorLabel_TMP : public ::AdvancedColorPicker::ColorTypeComponent {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    public:
    // private System.Single minValue
    // Size: 0x4
    // Offset: 0x28
    float minValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxValue
    // Size: 0x4
    // Offset: 0x2C
    float maxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.String formatter
    // Size: 0x8
    // Offset: 0x30
    ::StringW formatter;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private TMPro.TMP_Text label
    // Size: 0x8
    // Offset: 0x38
    ::TMPro::TMP_Text* label;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    public:
    // Get instance field reference: private System.Single minValue
    [[deprecated("Use field access instead!")]] float& dyn_minValue();
    // Get instance field reference: private System.Single maxValue
    [[deprecated("Use field access instead!")]] float& dyn_maxValue();
    // Get instance field reference: private System.String formatter
    [[deprecated("Use field access instead!")]] ::StringW& dyn_formatter();
    // Get instance field reference: private TMPro.TMP_Text label
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_label();
    // public System.Single get_MinValue()
    // Offset: 0x4CC750
    float get_MinValue();
    // public System.Void set_MinValue(System.Single value)
    // Offset: 0x631950
    void set_MinValue(float value);
    // public System.Single get_MaxValue()
    // Offset: 0x245FE0
    float get_MaxValue();
    // public System.Void set_MaxValue(System.Single value)
    // Offset: 0x6318B0
    void set_MaxValue(float value);
    // public System.String get_Formatter()
    // Offset: 0x1E0EB0
    ::StringW get_Formatter();
    // public System.Void set_Formatter(System.String value)
    // Offset: 0x631800
    void set_Formatter(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x6317B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorLabel_TMP* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AdvancedColorPicker::ColorLabel_TMP::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorLabel_TMP*, creationType>()));
    }
    // private System.String ConvertToDisplayString(System.Single value)
    // Offset: 0x630C90
    ::StringW ConvertToDisplayString(float value);
    // public System.Void SetDefaultValuesForType()
    // Offset: 0x6315B0
    void SetDefaultValuesForType();
    // protected override System.Void Awake()
    // Offset: 0x631450
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
    // protected override System.Void DisplayNewColor()
    // Offset: 0x6314B0
    // Implemented from: AdvancedColorPicker.ColorComponent
    // Base method: System.Void ColorComponent::DisplayNewColor()
    void DisplayNewColor();
  }; // AdvancedColorPicker.ColorLabel_TMP
  #pragma pack(pop)
  static check_size<sizeof(ColorLabel_TMP), 56 + sizeof(::TMPro::TMP_Text*)> __AdvancedColorPicker_ColorLabel_TMPSizeCheck;
  static_assert(sizeof(ColorLabel_TMP) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::get_MinValue
// Il2CppName: get_MinValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::ColorLabel_TMP::*)()>(&AdvancedColorPicker::ColorLabel_TMP::get_MinValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "get_MinValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::set_MinValue
// Il2CppName: set_MinValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::ColorLabel_TMP::*)(float)>(&AdvancedColorPicker::ColorLabel_TMP::set_MinValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "set_MinValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::get_MaxValue
// Il2CppName: get_MaxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AdvancedColorPicker::ColorLabel_TMP::*)()>(&AdvancedColorPicker::ColorLabel_TMP::get_MaxValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "get_MaxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::set_MaxValue
// Il2CppName: set_MaxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::ColorLabel_TMP::*)(float)>(&AdvancedColorPicker::ColorLabel_TMP::set_MaxValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "set_MaxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::get_Formatter
// Il2CppName: get_Formatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (AdvancedColorPicker::ColorLabel_TMP::*)()>(&AdvancedColorPicker::ColorLabel_TMP::get_Formatter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "get_Formatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::set_Formatter
// Il2CppName: set_Formatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::ColorLabel_TMP::*)(::StringW)>(&AdvancedColorPicker::ColorLabel_TMP::set_Formatter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "set_Formatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::ConvertToDisplayString
// Il2CppName: ConvertToDisplayString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (AdvancedColorPicker::ColorLabel_TMP::*)(float)>(&AdvancedColorPicker::ColorLabel_TMP::ConvertToDisplayString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "ConvertToDisplayString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::SetDefaultValuesForType
// Il2CppName: SetDefaultValuesForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::ColorLabel_TMP::*)()>(&AdvancedColorPicker::ColorLabel_TMP::SetDefaultValuesForType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "SetDefaultValuesForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::ColorLabel_TMP::*)()>(&AdvancedColorPicker::ColorLabel_TMP::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::ColorLabel_TMP::DisplayNewColor
// Il2CppName: DisplayNewColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::ColorLabel_TMP::*)()>(&AdvancedColorPicker::ColorLabel_TMP::DisplayNewColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::ColorLabel_TMP*), "DisplayNewColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
