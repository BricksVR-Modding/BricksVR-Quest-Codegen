// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NormalSessionManager
  class NormalSessionManager;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ExportManager
  class ExportManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ExportManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ExportManager*, "", "ExportManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: ExportManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ExportManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ExportManager::$StartExportCoroutine$d__12
    class $StartExportCoroutine$d__12;
    public:
    // public UnityEngine.UI.Button backButton
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Button* backButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.UI.Button exportButton
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Button* exportButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public TMPro.TextMeshProUGUI topText
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshProUGUI* topText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI bottomText
    // Size: 0x8
    // Offset: 0x30
    ::TMPro::TextMeshProUGUI* bottomText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI urlText
    // Size: 0x8
    // Offset: 0x38
    ::TMPro::TextMeshProUGUI* urlText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public UnityEngine.UI.Button urlButton
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UI::Button* urlButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public NormalSessionManager normalSessionManager
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::NormalSessionManager* normalSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NormalSessionManager*) == 0x8);
    // private System.String downloadUrl
    // Size: 0x8
    // Offset: 0x50
    ::StringW downloadUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String InitialTopText
    static constexpr const char* InitialTopText = "Exported files include all bricks and materials. You can open these files in Blender or other programs.";
    // Get static field: static private System.String InitialTopText
    static ::StringW _get_InitialTopText();
    // Set static field: static private System.String InitialTopText
    static void _set_InitialTopText(::StringW value);
    // static field const value: static private System.String InitialBottomText
    static constexpr const char* InitialBottomText = "Click Export to start an export. The export will happen in the background.";
    // Get static field: static private System.String InitialBottomText
    static ::StringW _get_InitialBottomText();
    // Set static field: static private System.String InitialBottomText
    static void _set_InitialBottomText(::StringW value);
    // Get instance field reference: public UnityEngine.UI.Button backButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_backButton();
    // Get instance field reference: public UnityEngine.UI.Button exportButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_exportButton();
    // Get instance field reference: public TMPro.TextMeshProUGUI topText
    [[deprecated]] ::TMPro::TextMeshProUGUI*& dyn_topText();
    // Get instance field reference: public TMPro.TextMeshProUGUI bottomText
    [[deprecated]] ::TMPro::TextMeshProUGUI*& dyn_bottomText();
    // Get instance field reference: public TMPro.TextMeshProUGUI urlText
    [[deprecated]] ::TMPro::TextMeshProUGUI*& dyn_urlText();
    // Get instance field reference: public UnityEngine.UI.Button urlButton
    [[deprecated]] ::UnityEngine::UI::Button*& dyn_urlButton();
    // Get instance field reference: public NormalSessionManager normalSessionManager
    [[deprecated]] ::GlobalNamespace::NormalSessionManager*& dyn_normalSessionManager();
    // Get instance field reference: private System.String downloadUrl
    [[deprecated]] ::StringW& dyn_downloadUrl();
    // private System.Void OnEnable()
    // Offset: 0x6B44D0
    void OnEnable();
    // public System.Void StartExport()
    // Offset: 0x6B4610
    void StartExport();
    // public System.Collections.IEnumerator StartExportCoroutine()
    // Offset: 0x6B45A0
    ::System::Collections::IEnumerator* StartExportCoroutine();
    // public System.Void URLClicked()
    // Offset: 0x6B4700
    void URLClicked();
    // public System.Void .ctor()
    // Offset: 0x6B4710
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExportManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExportManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExportManager*, creationType>()));
    }
  }; // ExportManager
  #pragma pack(pop)
  static check_size<sizeof(ExportManager), 80 + sizeof(::StringW)> __GlobalNamespace_ExportManagerSizeCheck;
  static_assert(sizeof(ExportManager) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ExportManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ExportManager::*)()>(&GlobalNamespace::ExportManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExportManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExportManager::StartExport
// Il2CppName: StartExport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ExportManager::*)()>(&GlobalNamespace::ExportManager::StartExport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExportManager*), "StartExport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExportManager::StartExportCoroutine
// Il2CppName: StartExportCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::ExportManager::*)()>(&GlobalNamespace::ExportManager::StartExportCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExportManager*), "StartExportCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExportManager::URLClicked
// Il2CppName: URLClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ExportManager::*)()>(&GlobalNamespace::ExportManager::URLClicked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExportManager*), "URLClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExportManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
