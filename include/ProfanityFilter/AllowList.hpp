// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ProfanityFilter.Interfaces.IAllowList
#include "ProfanityFilter/Interfaces/IAllowList.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: ProfanityFilter
namespace ProfanityFilter {
  // Forward declaring type: AllowList
  class AllowList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ProfanityFilter::AllowList);
DEFINE_IL2CPP_ARG_TYPE(::ProfanityFilter::AllowList*, "ProfanityFilter", "AllowList");
// Type namespace: ProfanityFilter
namespace ProfanityFilter {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: ProfanityFilter.AllowList
  // [TokenAttribute] Offset: FFFFFFFF
  class AllowList : public ::Il2CppObject/*, public ::ProfanityFilter::Interfaces::IAllowList*/ {
    public:
    public:
    // private System.Collections.Generic.List`1<System.String> _allowList
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* allowList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::ProfanityFilter::Interfaces::IAllowList
    operator ::ProfanityFilter::Interfaces::IAllowList() noexcept {
      return *reinterpret_cast<::ProfanityFilter::Interfaces::IAllowList*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::StringW>*
    constexpr operator ::System::Collections::Generic::List_1<::StringW>*() const noexcept {
      return allowList;
    }
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _allowList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__allowList();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.String> get_ToList()
    // Offset: 0x6721A0
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* get_ToList();
    // public System.Int32 get_Count()
    // Offset: 0x672160
    int get_Count();
    // public System.Void .ctor()
    // Offset: 0x6720F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AllowList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ProfanityFilter::AllowList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AllowList*, creationType>()));
    }
    // public System.Void Add(System.String wordToAllowlist)
    // Offset: 0x671DC0
    void Add(::StringW wordToAllowlist);
    // public System.Boolean Contains(System.String wordToCheck)
    // Offset: 0x671F50
    bool Contains(::StringW wordToCheck);
    // public System.Void Clear()
    // Offset: 0x671F00
    void Clear();
    // public System.Boolean Remove(System.String wordToRemove)
    // Offset: 0x672020
    bool Remove(::StringW wordToRemove);
  }; // ProfanityFilter.AllowList
  #pragma pack(pop)
  static check_size<sizeof(AllowList), 16 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __ProfanityFilter_AllowListSizeCheck;
  static_assert(sizeof(AllowList) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ProfanityFilter::AllowList::get_ToList
// Il2CppName: get_ToList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* (ProfanityFilter::AllowList::*)()>(&ProfanityFilter::AllowList::get_ToList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::AllowList*), "get_ToList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::AllowList::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ProfanityFilter::AllowList::*)()>(&ProfanityFilter::AllowList::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::AllowList*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::AllowList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ProfanityFilter::AllowList::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::AllowList::*)(::StringW)>(&ProfanityFilter::AllowList::Add)> {
  static const MethodInfo* get() {
    static auto* wordToAllowlist = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::AllowList*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wordToAllowlist});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::AllowList::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::AllowList::*)(::StringW)>(&ProfanityFilter::AllowList::Contains)> {
  static const MethodInfo* get() {
    static auto* wordToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::AllowList*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wordToCheck});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::AllowList::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::AllowList::*)()>(&ProfanityFilter::AllowList::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::AllowList*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::AllowList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::AllowList::*)(::StringW)>(&ProfanityFilter::AllowList::Remove)> {
  static const MethodInfo* get() {
    static auto* wordToRemove = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::AllowList*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wordToRemove});
  }
};
