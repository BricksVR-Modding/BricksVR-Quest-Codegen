// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.IConfigurableComponentMap
#include "Normal/Realtime/IConfigurableComponentMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: IConfigurableComponent
  class IConfigurableComponent;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: ConfigurableComponentMap
  class ConfigurableComponentMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::ConfigurableComponentMap);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::ConfigurableComponentMap*, "Normal.Realtime", "ConfigurableComponentMap");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.ConfigurableComponentMap
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 715D7C
  class ConfigurableComponentMap : public ::Il2CppObject/*, public ::Normal::Realtime::IConfigurableComponentMap*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt32,Normal.Realtime.IConfigurableComponent> _storage
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::IConfigurableComponent*>* storage;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::IConfigurableComponent*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::IConfigurableComponentMap
    operator ::Normal::Realtime::IConfigurableComponentMap() noexcept {
      return *reinterpret_cast<::Normal::Realtime::IConfigurableComponentMap*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::IConfigurableComponent*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::IConfigurableComponent*>*() const noexcept {
      return storage;
    }
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt32,Normal.Realtime.IConfigurableComponent> _storage
    ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::IConfigurableComponent*>*& dyn__storage();
    // public System.Int32 get_count()
    // Offset: 0xAE66CC
    int get_count();
    // public System.Collections.Generic.IEnumerable`1<System.UInt32> get_componentIDs()
    // Offset: 0xAE6724
    ::System::Collections::Generic::IEnumerable_1<uint>* get_componentIDs();
    // public System.Collections.Generic.IEnumerable`1<Normal.Realtime.IConfigurableComponent> get_components()
    // Offset: 0xAE677C
    ::System::Collections::Generic::IEnumerable_1<::Normal::Realtime::IConfigurableComponent*>* get_components();
    // public Normal.Realtime.IConfigurableComponent get_Item(System.UInt32 componentID)
    // Offset: 0xAE67D4
    ::Normal::Realtime::IConfigurableComponent* get_Item(uint componentID);
    // public System.Boolean ContainsComponentID(System.UInt32 componentID)
    // Offset: 0xAE6854
    bool ContainsComponentID(uint componentID);
    // public System.Boolean ContainsComponent(Normal.Realtime.IConfigurableComponent component)
    // Offset: 0xAE68BC
    bool ContainsComponent(::Normal::Realtime::IConfigurableComponent* component);
    // public System.Void Add(System.UInt32 componentID, Normal.Realtime.IConfigurableComponent component)
    // Offset: 0xAE6924
    void Add(uint componentID, ::Normal::Realtime::IConfigurableComponent* component);
    // public System.Void Deprecate(System.UInt32 componentID)
    // Offset: 0xAE6994
    void Deprecate(uint componentID);
    // protected System.Void .ctor()
    // Offset: 0xAE6A00
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConfigurableComponentMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ConfigurableComponentMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConfigurableComponentMap*, creationType>()));
    }
  }; // Normal.Realtime.ConfigurableComponentMap
  #pragma pack(pop)
  static check_size<sizeof(ConfigurableComponentMap), 16 + sizeof(::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::IConfigurableComponent*>*)> __Normal_Realtime_ConfigurableComponentMapSizeCheck;
  static_assert(sizeof(ConfigurableComponentMap) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::ConfigurableComponentMap::*)()>(&Normal::Realtime::ConfigurableComponentMap::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::get_componentIDs
// Il2CppName: get_componentIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<uint>* (Normal::Realtime::ConfigurableComponentMap::*)()>(&Normal::Realtime::ConfigurableComponentMap::get_componentIDs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "get_componentIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::get_components
// Il2CppName: get_components
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Normal::Realtime::IConfigurableComponent*>* (Normal::Realtime::ConfigurableComponentMap::*)()>(&Normal::Realtime::ConfigurableComponentMap::get_components)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "get_components", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::IConfigurableComponent* (Normal::Realtime::ConfigurableComponentMap::*)(uint)>(&Normal::Realtime::ConfigurableComponentMap::get_Item)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::ContainsComponentID
// Il2CppName: ContainsComponentID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::ConfigurableComponentMap::*)(uint)>(&Normal::Realtime::ConfigurableComponentMap::ContainsComponentID)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "ContainsComponentID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::ContainsComponent
// Il2CppName: ContainsComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::ConfigurableComponentMap::*)(::Normal::Realtime::IConfigurableComponent*)>(&Normal::Realtime::ConfigurableComponentMap::ContainsComponent)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "ContainsComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::ConfigurableComponentMap::*)(uint, ::Normal::Realtime::IConfigurableComponent*)>(&Normal::Realtime::ConfigurableComponentMap::Add)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* component = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID, component});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::Deprecate
// Il2CppName: Deprecate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::ConfigurableComponentMap::*)(uint)>(&Normal::Realtime::ConfigurableComponentMap::Deprecate)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::ConfigurableComponentMap*), "Deprecate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::ConfigurableComponentMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
