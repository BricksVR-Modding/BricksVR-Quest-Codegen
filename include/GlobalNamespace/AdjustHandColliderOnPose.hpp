// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRDirectInteractor
  class XRDirectInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AdjustHandColliderOnPose
  class AdjustHandColliderOnPose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AdjustHandColliderOnPose);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AdjustHandColliderOnPose*, "", "AdjustHandColliderOnPose");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5D
  #pragma pack(push, 1)
  // Autogenerated type: AdjustHandColliderOnPose
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjustHandColliderOnPose : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRDirectInteractor _interactor
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor* interactor;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*) == 0x8);
    // private UnityEngine.BoxCollider _collider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::BoxCollider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // private System.Boolean _currentlySelecting
    // Size: 0x1
    // Offset: 0x28
    bool currentlySelecting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: currentlySelecting and: bigColliderSize
    char __padding2[0x3] = {};
    // private readonly UnityEngine.Vector3 _bigColliderSize
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 bigColliderSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _bigColliderCenter
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 bigColliderCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private readonly UnityEngine.Vector3 _smallColliderSize
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 smallColliderSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _smallColliderCenter
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 smallColliderCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean rightHand
    // Size: 0x1
    // Offset: 0x5C
    bool rightHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRDirectInteractor _interactor
    [[deprecated]] ::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*& dyn__interactor();
    // Get instance field reference: private UnityEngine.BoxCollider _collider
    [[deprecated]] ::UnityEngine::BoxCollider*& dyn__collider();
    // Get instance field reference: private System.Boolean _currentlySelecting
    [[deprecated]] bool& dyn__currentlySelecting();
    // Get instance field reference: private readonly UnityEngine.Vector3 _bigColliderSize
    [[deprecated]] ::UnityEngine::Vector3& dyn__bigColliderSize();
    // Get instance field reference: private UnityEngine.Vector3 _bigColliderCenter
    [[deprecated]] ::UnityEngine::Vector3& dyn__bigColliderCenter();
    // Get instance field reference: private readonly UnityEngine.Vector3 _smallColliderSize
    [[deprecated]] ::UnityEngine::Vector3& dyn__smallColliderSize();
    // Get instance field reference: private UnityEngine.Vector3 _smallColliderCenter
    [[deprecated]] ::UnityEngine::Vector3& dyn__smallColliderCenter();
    // Get instance field reference: public System.Boolean rightHand
    [[deprecated]] bool& dyn_rightHand();
    // private System.Void Start()
    // Offset: 0x6DC730
    void Start();
    // private System.Void Update()
    // Offset: 0x6DC830
    void Update();
    // private System.Void <Update>b__9_0()
    // Offset: 0x6DC7C0
    void $Update$b__9_0();
    // public System.Void .ctor()
    // Offset: 0x6DC950
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustHandColliderOnPose* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdjustHandColliderOnPose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustHandColliderOnPose*, creationType>()));
    }
  }; // AdjustHandColliderOnPose
  #pragma pack(pop)
  static check_size<sizeof(AdjustHandColliderOnPose), 92 + sizeof(bool)> __GlobalNamespace_AdjustHandColliderOnPoseSizeCheck;
  static_assert(sizeof(AdjustHandColliderOnPose) == 0x5D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AdjustHandColliderOnPose::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustHandColliderOnPose::*)()>(&GlobalNamespace::AdjustHandColliderOnPose::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustHandColliderOnPose*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustHandColliderOnPose::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustHandColliderOnPose::*)()>(&GlobalNamespace::AdjustHandColliderOnPose::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustHandColliderOnPose*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustHandColliderOnPose::$Update$b__9_0
// Il2CppName: <Update>b__9_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AdjustHandColliderOnPose::*)()>(&GlobalNamespace::AdjustHandColliderOnPose::$Update$b__9_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AdjustHandColliderOnPose*), "<Update>b__9_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AdjustHandColliderOnPose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
