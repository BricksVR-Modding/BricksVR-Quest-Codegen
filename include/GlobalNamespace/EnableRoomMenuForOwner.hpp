// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RoomOwnershipSync
  class RoomOwnershipSync;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EnableRoomMenuForOwner
  class EnableRoomMenuForOwner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EnableRoomMenuForOwner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EnableRoomMenuForOwner*, "", "EnableRoomMenuForOwner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: EnableRoomMenuForOwner
  // [TokenAttribute] Offset: FFFFFFFF
  class EnableRoomMenuForOwner : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.UI.Toggle lockRoomToggle
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Toggle* lockRoomToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public UnityEngine.UI.Toggle lowGravityToggle
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Toggle* lowGravityToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public UnityEngine.UI.Toggle movingThroughBricksAllowedToggle
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Toggle* movingThroughBricksAllowedToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public RoomOwnershipSync ownershipSync
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::RoomOwnershipSync* ownershipSync;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RoomOwnershipSync*) == 0x8);
    // public TMPro.TextMeshProUGUI menuSubtitle
    // Size: 0x8
    // Offset: 0x38
    ::TMPro::TextMeshProUGUI* menuSubtitle;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String OwnerText
    static constexpr const char* OwnerText = "You are the room owner, so you can make changes.";
    // Get static field: static private System.String OwnerText
    static ::StringW _get_OwnerText();
    // Set static field: static private System.String OwnerText
    static void _set_OwnerText(::StringW value);
    // static field const value: static private System.String NotOwnerText
    static constexpr const char* NotOwnerText = "Only the room owner can change these settings.";
    // Get static field: static private System.String NotOwnerText
    static ::StringW _get_NotOwnerText();
    // Set static field: static private System.String NotOwnerText
    static void _set_NotOwnerText(::StringW value);
    // Get instance field reference: public UnityEngine.UI.Toggle lockRoomToggle
    [[deprecated]] ::UnityEngine::UI::Toggle*& dyn_lockRoomToggle();
    // Get instance field reference: public UnityEngine.UI.Toggle lowGravityToggle
    [[deprecated]] ::UnityEngine::UI::Toggle*& dyn_lowGravityToggle();
    // Get instance field reference: public UnityEngine.UI.Toggle movingThroughBricksAllowedToggle
    [[deprecated]] ::UnityEngine::UI::Toggle*& dyn_movingThroughBricksAllowedToggle();
    // Get instance field reference: public RoomOwnershipSync ownershipSync
    [[deprecated]] ::GlobalNamespace::RoomOwnershipSync*& dyn_ownershipSync();
    // Get instance field reference: public TMPro.TextMeshProUGUI menuSubtitle
    [[deprecated]] ::TMPro::TextMeshProUGUI*& dyn_menuSubtitle();
    // private System.Void OnEnable()
    // Offset: 0x6B36F0
    void OnEnable();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnableRoomMenuForOwner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableRoomMenuForOwner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnableRoomMenuForOwner*, creationType>()));
    }
  }; // EnableRoomMenuForOwner
  #pragma pack(pop)
  static check_size<sizeof(EnableRoomMenuForOwner), 56 + sizeof(::TMPro::TextMeshProUGUI*)> __GlobalNamespace_EnableRoomMenuForOwnerSizeCheck;
  static_assert(sizeof(EnableRoomMenuForOwner) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EnableRoomMenuForOwner::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnableRoomMenuForOwner::*)()>(&GlobalNamespace::EnableRoomMenuForOwner::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnableRoomMenuForOwner*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::EnableRoomMenuForOwner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
