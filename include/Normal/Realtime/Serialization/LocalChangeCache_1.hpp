// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: InflightUpdate because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: LocalChangeCache`1<T>
  template<typename T>
  class LocalChangeCache_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::Serialization::LocalChangeCache_1, "Normal.Realtime.Serialization", "LocalChangeCache`1");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.Serialization.LocalChangeCache`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class LocalChangeCache_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Normal::Realtime::Serialization::LocalChangeCache_1::InflightUpdate<T>
    struct InflightUpdate;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Normal.Realtime.Serialization.LocalChangeCache`1/Normal.Realtime.Serialization.InflightUpdate
    // [TokenAttribute] Offset: FFFFFFFF
    struct InflightUpdate : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType*/ {
      public:
      using declaring_type = LocalChangeCache_1<T>*;
      static constexpr std::string_view NESTED_NAME = "InflightUpdate";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public readonly System.UInt32 updateID
      // Size: 0x4
      // Offset: 0x0
      uint updateID;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public readonly T update
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T update;
      public:
      // Creating value type constructor for type: InflightUpdate
      constexpr InflightUpdate(uint updateID_ = {}, T update_ = {}) noexcept : updateID{updateID_}, update{update_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: public readonly System.UInt32 updateID
      [[deprecated("Use field access instead!")]] uint& dyn_updateID() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::InflightUpdate::dyn_updateID");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateID"))->offset;
        return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public readonly T update
      [[deprecated("Use field access instead!")]] T& dyn_update() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::InflightUpdate::dyn_update");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "update"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(System.UInt32 updateID, T update)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // ABORTED: conflicts with another method.  InflightUpdate(uint updateID, T update)
    }; // Normal.Realtime.Serialization.LocalChangeCache`1/Normal.Realtime.Serialization.InflightUpdate
    // Could not write size check! Type: Normal.Realtime.Serialization.LocalChangeCache`1/Normal.Realtime.Serialization.InflightUpdate is generic, or has no fields that are valid for size checks!
    public:
    // private System.Collections.Generic.Queue`1<Normal.Realtime.Serialization.LocalChangeCache`1/Normal.Realtime.Serialization.InflightUpdate<T>> _inflightUpdates
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Queue_1<typename ::Normal::Realtime::Serialization::LocalChangeCache_1<T>::InflightUpdate>* inflightUpdates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<typename ::Normal::Realtime::Serialization::LocalChangeCache_1<T>::InflightUpdate>*) == 0x8);
    // private T _localCache
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T localCache;
    // private System.Func`1<T> _initializeLocalCache
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_1<T>* initializeLocalCache;
    // Field size check
    static_assert(sizeof(::System::Func_1<T>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Queue`1<Normal.Realtime.Serialization.LocalChangeCache`1/Normal.Realtime.Serialization.InflightUpdate<T>> _inflightUpdates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<typename ::Normal::Realtime::Serialization::LocalChangeCache_1<T>::InflightUpdate>*& dyn__inflightUpdates() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::dyn__inflightUpdates");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inflightUpdates"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Queue_1<typename ::Normal::Realtime::Serialization::LocalChangeCache_1<T>::InflightUpdate>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _localCache
    [[deprecated("Use field access instead!")]] T& dyn__localCache() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::dyn__localCache");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localCache"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Func`1<T> _initializeLocalCache
    [[deprecated("Use field access instead!")]] ::System::Func_1<T>*& dyn__initializeLocalCache() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::dyn__initializeLocalCache");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializeLocalCache"))->offset;
      return *reinterpret_cast<::System::Func_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_localCache()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_localCache() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::get_localCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalChangeCache_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalChangeCache_1<T>*, creationType>()));
    }
    // public System.Void .ctor(System.Func`1<T> initializeLocalCache)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalChangeCache_1<T>* New_ctor(::System::Func_1<T>* initializeLocalCache) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalChangeCache_1<T>*, creationType>(initializeLocalCache)));
    }
    // private System.Void ResetLocalCache()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ResetLocalCache() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::ResetLocalCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetLocalCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public T PushLocalCacheToInflight(System.UInt32 updateID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T PushLocalCacheToInflight(uint updateID) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::PushLocalCacheToInflight");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushLocalCacheToInflight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateID)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, updateID);
    }
    // public T RemoveUpdateFromInflight(System.UInt32 updateID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T RemoveUpdateFromInflight(uint updateID) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::RemoveUpdateFromInflight");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveUpdateFromInflight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateID)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, updateID);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void UpdateLocalCache(System.Func`2<T,T> lambda)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateLocalCache(::System::Func_2<T, T>* lambda) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::UpdateLocalCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLocalCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lambda)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lambda);
    }
    // public System.Boolean LookForValueInCache(System.Func`2<T,System.Boolean> checkIfValueSet, System.Func`2<T,TValue> getValue, ref TValue value, System.Boolean inflightOnly)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    bool LookForValueInCache(::System::Func_2<T, bool>* checkIfValueSet, ::System::Func_2<T, TValue>* getValue, ByRef<TValue> value, bool inflightOnly) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::LookForValueInCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookForValueInCache", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(checkIfValueSet), ::il2cpp_utils::ExtractType(getValue), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(inflightOnly)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, checkIfValueSet, getValue, byref(value), inflightOnly);
    }
    // public TValue LookForValueInCache(TValue defaultValue, System.Func`2<T,System.Boolean> checkIfValueSet, System.Func`2<T,TValue> getValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    TValue LookForValueInCache(TValue defaultValue, ::System::Func_2<T, bool>* checkIfValueSet, ::System::Func_2<T, TValue>* getValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::LookForValueInCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookForValueInCache", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultValue), ::il2cpp_utils::ExtractType(checkIfValueSet), ::il2cpp_utils::ExtractType(getValue)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, defaultValue, checkIfValueSet, getValue);
    }
    // public System.Boolean ValueExistsInCache(System.Func`2<T,System.Boolean> checkIfValueSet, System.Boolean inflightOnly)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ValueExistsInCache(::System::Func_2<T, bool>* checkIfValueSet, bool inflightOnly) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::ValueExistsInCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValueExistsInCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(checkIfValueSet), ::il2cpp_utils::ExtractType(inflightOnly)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, checkIfValueSet, inflightOnly);
    }
    // public System.Void IterateThroughCacheOldestFirst(System.Func`2<T,System.Boolean> operateOnEntry, System.Boolean inflightOnly)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IterateThroughCacheOldestFirst(::System::Func_2<T, bool>* operateOnEntry, bool inflightOnly) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::IterateThroughCacheOldestFirst");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IterateThroughCacheOldestFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(operateOnEntry), ::il2cpp_utils::ExtractType(inflightOnly)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, operateOnEntry, inflightOnly);
    }
    // public System.Void IterateThroughCacheNewestFirst(System.Func`2<T,System.Boolean> operateOnEntry, System.Boolean inflightOnly)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IterateThroughCacheNewestFirst(::System::Func_2<T, bool>* operateOnEntry, bool inflightOnly) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::IterateThroughCacheNewestFirst");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IterateThroughCacheNewestFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(operateOnEntry), ::il2cpp_utils::ExtractType(inflightOnly)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, operateOnEntry, inflightOnly);
    }
    // private System.Boolean RetrieveValueFromCacheEntry(T entry, System.Func`2<T,System.Boolean> checkIfValueSet, System.Func`2<T,TValue> getValue, ref TValue foundValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    bool RetrieveValueFromCacheEntry(T entry, ::System::Func_2<T, bool>* checkIfValueSet, ::System::Func_2<T, TValue>* getValue, ByRef<TValue> foundValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::LocalChangeCache_1::RetrieveValueFromCacheEntry");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RetrieveValueFromCacheEntry", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(checkIfValueSet), ::il2cpp_utils::ExtractType(getValue), ::il2cpp_utils::ExtractType(foundValue)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, entry, checkIfValueSet, getValue, byref(foundValue));
    }
  }; // Normal.Realtime.Serialization.LocalChangeCache`1
  // Could not write size check! Type: Normal.Realtime.Serialization.LocalChangeCache`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
