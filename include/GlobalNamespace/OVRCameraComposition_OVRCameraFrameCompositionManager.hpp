// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRCameraComposition
#include "GlobalNamespace/OVRCameraComposition.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager*, "", "OVRCameraComposition/OVRCameraFrameCompositionManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: OVRCameraComposition/OVRCameraFrameCompositionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRCameraComposition::OVRCameraFrameCompositionManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject cameraFrameGameObj
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* cameraFrameGameObj;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public OVRCameraComposition composition
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRCameraComposition* composition;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraComposition*) == 0x8);
    // public UnityEngine.RenderTexture boundaryMeshMaskTexture
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RenderTexture* boundaryMeshMaskTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Material cameraFrameMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* cameraFrameMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material whiteMaterial
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* whiteMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject cameraFrameGameObj
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cameraFrameGameObj();
    // Get instance field reference: public OVRCameraComposition composition
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraComposition*& dyn_composition();
    // Get instance field reference: public UnityEngine.RenderTexture boundaryMeshMaskTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_boundaryMeshMaskTexture();
    // Get instance field reference: private UnityEngine.Material cameraFrameMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_cameraFrameMaterial();
    // Get instance field reference: private UnityEngine.Material whiteMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_whiteMaterial();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRCameraComposition::OVRCameraFrameCompositionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRCameraComposition::OVRCameraFrameCompositionManager*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x22FAF0
    void Start();
    // private System.Void OnPreRender()
    // Offset: 0x22F6F0
    void OnPreRender();
    // private System.Void OnPostRender()
    // Offset: 0x22F660
    void OnPostRender();
  }; // OVRCameraComposition/OVRCameraFrameCompositionManager
  #pragma pack(pop)
  static check_size<sizeof(OVRCameraComposition::OVRCameraFrameCompositionManager), 56 + sizeof(::UnityEngine::Material*)> __GlobalNamespace_OVRCameraComposition_OVRCameraFrameCompositionManagerSizeCheck;
  static_assert(sizeof(OVRCameraComposition::OVRCameraFrameCompositionManager) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::*)()>(&GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::*)()>(&GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::OnPreRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::OnPostRender
// Il2CppName: OnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::*)()>(&GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager::OnPostRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRCameraComposition::OVRCameraFrameCompositionManager*), "OnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
