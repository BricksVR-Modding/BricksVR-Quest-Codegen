// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeComponent`1
#include "Normal/Realtime/RealtimeComponent_1.hpp"
// Including type: UnityEngine.XR.XRNodeState
#include "UnityEngine/XR/XRNodeState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeAvatarModel
  class RealtimeAvatarModel;
  // Forward declaring type: RealtimeAvatarManager
  class RealtimeAvatarManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeAvatar
  class RealtimeAvatar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeAvatar);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeAvatar*, "Normal.Realtime", "RealtimeAvatar");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.RealtimeAvatar
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecutionOrder] Offset: 71F540
  class RealtimeAvatar : public ::Normal::Realtime::RealtimeComponent_1<::Normal::Realtime::RealtimeAvatarModel*> {
    public:
    // Nested type: ::Normal::Realtime::RealtimeAvatar::LocalPlayer
    class LocalPlayer;
    // Nested type: ::Normal::Realtime::RealtimeAvatar::DeviceType
    struct DeviceType;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Normal.Realtime.RealtimeAvatar/Normal.Realtime.LocalPlayer _localPlayer
    // Size: 0x8
    // Offset: 0x28
    ::Normal::Realtime::RealtimeAvatar::LocalPlayer* localPlayer;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeAvatar::LocalPlayer*) == 0x8);
    // private UnityEngine.Transform _head
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* head;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _leftHand
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _rightHand
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Normal.Realtime.RealtimeAvatarManager _realtimeAvatarManager
    // Size: 0x8
    // Offset: 0x48
    ::Normal::Realtime::RealtimeAvatarManager* realtimeAvatarManager;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeAvatarManager*) == 0x8);
    public:
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>* _get__nodeStates();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
    static void _set__nodeStates(::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>* value);
    // Get instance field reference: private Normal.Realtime.RealtimeAvatar/Normal.Realtime.LocalPlayer _localPlayer
    ::Normal::Realtime::RealtimeAvatar::LocalPlayer*& dyn__localPlayer();
    // Get instance field reference: private UnityEngine.Transform _head
    ::UnityEngine::Transform*& dyn__head();
    // Get instance field reference: private UnityEngine.Transform _leftHand
    ::UnityEngine::Transform*& dyn__leftHand();
    // Get instance field reference: private UnityEngine.Transform _rightHand
    ::UnityEngine::Transform*& dyn__rightHand();
    // Get instance field reference: private Normal.Realtime.RealtimeAvatarManager _realtimeAvatarManager
    ::Normal::Realtime::RealtimeAvatarManager*& dyn__realtimeAvatarManager();
    // public Normal.Realtime.RealtimeAvatar/Normal.Realtime.LocalPlayer get_localPlayer()
    // Offset: 0xFEF884
    ::Normal::Realtime::RealtimeAvatar::LocalPlayer* get_localPlayer();
    // public System.Void set_localPlayer(Normal.Realtime.RealtimeAvatar/Normal.Realtime.LocalPlayer value)
    // Offset: 0xFEF88C
    void set_localPlayer(::Normal::Realtime::RealtimeAvatar::LocalPlayer* value);
    // public Normal.Realtime.RealtimeAvatar/Normal.Realtime.DeviceType get_deviceType()
    // Offset: 0xFEFB24
    ::Normal::Realtime::RealtimeAvatar::DeviceType get_deviceType();
    // public System.Void set_deviceType(Normal.Realtime.RealtimeAvatar/Normal.Realtime.DeviceType value)
    // Offset: 0xFEFBC0
    void set_deviceType(::Normal::Realtime::RealtimeAvatar::DeviceType value);
    // public System.String get_deviceModel()
    // Offset: 0xFEFCAC
    ::StringW get_deviceModel();
    // public System.Void set_deviceModel(System.String value)
    // Offset: 0xFEFD48
    void set_deviceModel(::StringW value);
    // public UnityEngine.Transform get_head()
    // Offset: 0xFEFE44
    ::UnityEngine::Transform* get_head();
    // public UnityEngine.Transform get_leftHand()
    // Offset: 0xFEFE4C
    ::UnityEngine::Transform* get_leftHand();
    // public UnityEngine.Transform get_rightHand()
    // Offset: 0xFEFE54
    ::UnityEngine::Transform* get_rightHand();
    // private System.Void Start()
    // Offset: 0xFEFE5C
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0xFF01A4
    void OnDestroy();
    // private System.Void FixedUpdate()
    // Offset: 0xFF04F8
    void FixedUpdate();
    // private System.Void Update()
    // Offset: 0xFF0C5C
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0xFF0C60
    void LateUpdate();
    // protected System.Void OnRealtimeModelReplaced(Normal.Realtime.RealtimeAvatarModel previousModel, Normal.Realtime.RealtimeAvatarModel currentModel)
    // Offset: 0xFF0C64
    void OnRealtimeModelReplaced(::Normal::Realtime::RealtimeAvatarModel* previousModel, ::Normal::Realtime::RealtimeAvatarModel* currentModel);
    // private System.Void SetLocalPlayer(Normal.Realtime.RealtimeAvatar/Normal.Realtime.LocalPlayer localPlayer)
    // Offset: 0xFEF890
    void SetLocalPlayer(::Normal::Realtime::RealtimeAvatar::LocalPlayer* localPlayer);
    // private System.Void ActiveStateChanged(Normal.Realtime.RealtimeAvatarModel model, System.Boolean nodeIsActive)
    // Offset: 0xFF11D8
    void ActiveStateChanged(::Normal::Realtime::RealtimeAvatarModel* model, bool nodeIsActive);
    // private System.Void UpdateAvatarTransformsForLocalPlayer()
    // Offset: 0xFF04FC
    void UpdateAvatarTransformsForLocalPlayer();
    // static private System.Void UpdateTransformWithNodeState(UnityEngine.Transform transform, UnityEngine.XR.XRNodeState state)
    // Offset: 0xFF159C
    static void UpdateTransformWithNodeState(::UnityEngine::Transform* transform, ::UnityEngine::XR::XRNodeState state);
    // public System.Void .ctor()
    // Offset: 0xFF162C
    // Implemented from: Normal.Realtime.RealtimeComponent`1
    // Base method: System.Void RealtimeComponent_1::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeAvatar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeAvatar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeAvatar*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xFF167C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // Normal.Realtime.RealtimeAvatar
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeAvatar::LocalPlayer* (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::get_localPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::set_localPlayer
// Il2CppName: set_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)(::Normal::Realtime::RealtimeAvatar::LocalPlayer*)>(&Normal::Realtime::RealtimeAvatar::set_localPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatar/LocalPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "set_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::get_deviceType
// Il2CppName: get_deviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeAvatar::DeviceType (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::get_deviceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "get_deviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::set_deviceType
// Il2CppName: set_deviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)(::Normal::Realtime::RealtimeAvatar::DeviceType)>(&Normal::Realtime::RealtimeAvatar::set_deviceType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatar/DeviceType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "set_deviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::get_deviceModel
// Il2CppName: get_deviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::get_deviceModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "get_deviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::set_deviceModel
// Il2CppName: set_deviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)(::StringW)>(&Normal::Realtime::RealtimeAvatar::set_deviceModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "set_deviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::get_head
// Il2CppName: get_head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::get_head)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "get_head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::get_leftHand
// Il2CppName: get_leftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::get_leftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "get_leftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::get_rightHand
// Il2CppName: get_rightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::get_rightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "get_rightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::OnRealtimeModelReplaced
// Il2CppName: OnRealtimeModelReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)(::Normal::Realtime::RealtimeAvatarModel*, ::Normal::Realtime::RealtimeAvatarModel*)>(&Normal::Realtime::RealtimeAvatar::OnRealtimeModelReplaced)> {
  static const MethodInfo* get() {
    static auto* previousModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatarModel")->byval_arg;
    static auto* currentModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatarModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "OnRealtimeModelReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousModel, currentModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::SetLocalPlayer
// Il2CppName: SetLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)(::Normal::Realtime::RealtimeAvatar::LocalPlayer*)>(&Normal::Realtime::RealtimeAvatar::SetLocalPlayer)> {
  static const MethodInfo* get() {
    static auto* localPlayer = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatar/LocalPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "SetLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPlayer});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::ActiveStateChanged
// Il2CppName: ActiveStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)(::Normal::Realtime::RealtimeAvatarModel*, bool)>(&Normal::Realtime::RealtimeAvatar::ActiveStateChanged)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeAvatarModel")->byval_arg;
    static auto* nodeIsActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "ActiveStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, nodeIsActive});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::UpdateAvatarTransformsForLocalPlayer
// Il2CppName: UpdateAvatarTransformsForLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeAvatar::*)()>(&Normal::Realtime::RealtimeAvatar::UpdateAvatarTransformsForLocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "UpdateAvatarTransformsForLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::UpdateTransformWithNodeState
// Il2CppName: UpdateTransformWithNodeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::XR::XRNodeState)>(&Normal::Realtime::RealtimeAvatar::UpdateTransformWithNodeState)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNodeState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), "UpdateTransformWithNodeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, state});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Normal::Realtime::RealtimeAvatar::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeAvatar*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
