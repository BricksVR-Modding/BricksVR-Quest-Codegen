// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamManager
  class SteamManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamManager*, "", "SteamManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1E
  #pragma pack(push, 1)
  // Autogenerated type: SteamManager
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [FormerlySerializedAsAttribute] Offset: 0x102DC0
    // public System.UInt32 steamAppId
    // Size: 0x4
    // Offset: 0x18
    uint steamAppId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x1C
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _initializationSucceeded
    // Size: 0x1
    // Offset: 0x1D
    bool initializationSucceeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.UInt32 steamAppId
    [[deprecated]] uint& dyn_steamAppId();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated]] bool& dyn__initialized();
    // Get instance field reference: private System.Boolean _initializationSucceeded
    [[deprecated]] bool& dyn__initializationSucceeded();
    // private System.Void Awake()
    // Offset: 0x6CFCC0
    void Awake();
    // public System.Boolean Initialize()
    // Offset: 0x6CFD20
    bool Initialize();
    // public System.UInt64 GetUserId()
    // Offset: 0x6CFCD0
    uint64_t GetUserId();
    // public System.Void RestartAppIfNecessary()
    // Offset: 0x6CFE70
    void RestartAppIfNecessary();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamManager*, creationType>()));
    }
  }; // SteamManager
  #pragma pack(pop)
  static check_size<sizeof(SteamManager), 29 + sizeof(bool)> __GlobalNamespace_SteamManagerSizeCheck;
  static_assert(sizeof(SteamManager) == 0x1E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamManager::*)()>(&GlobalNamespace::SteamManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SteamManager::*)()>(&GlobalNamespace::SteamManager::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamManager::GetUserId
// Il2CppName: GetUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::SteamManager::*)()>(&GlobalNamespace::SteamManager::GetUserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamManager*), "GetUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamManager::RestartAppIfNecessary
// Il2CppName: RestartAppIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamManager::*)()>(&GlobalNamespace::SteamManager::RestartAppIfNecessary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamManager*), "RestartAppIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
