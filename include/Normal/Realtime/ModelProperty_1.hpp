// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.IProperty`1
#include "Normal/Realtime/IProperty_1.hpp"
// Including type: Normal.Realtime.Serialization.PropertyHeader
#include "Normal/Realtime/Serialization/PropertyHeader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: IModel
  class IModel;
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: ModelProperty`1<T>
  template<typename T>
  class ModelProperty_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::ModelProperty_1, "Normal.Realtime", "ModelProperty`1");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.ModelProperty`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ModelProperty_1 : public ::Il2CppObject/*, public ::Normal::Realtime::IProperty_1<T>*/ {
    public:
    public:
    // private readonly Normal.Realtime.Serialization.PropertyHeader _header
    // Size: 0x5
    // Offset: 0x0
    ::Normal::Realtime::Serialization::PropertyHeader header;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::PropertyHeader) == 0x5);
    // private readonly T <value>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T value;
    // private readonly System.Boolean _isCollectionModel
    // Size: 0x1
    // Offset: 0x0
    bool isCollectionModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.UInt32 _collectionTypeID
    // Size: 0x4
    // Offset: 0x0
    uint collectionTypeID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::IProperty_1<T>
    operator ::Normal::Realtime::IProperty_1<T>() noexcept {
      return *reinterpret_cast<::Normal::Realtime::IProperty_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Normal.Realtime.Serialization.PropertyHeader _header
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::PropertyHeader& dyn__header() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::dyn__header");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_header"))->offset;
      return *reinterpret_cast<::Normal::Realtime::Serialization::PropertyHeader*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T <value>k__BackingField
    [[deprecated("Use field access instead!")]] T& dyn_$value$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::dyn_$value$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<value>k__BackingField"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean _isCollectionModel
    [[deprecated("Use field access instead!")]] bool& dyn__isCollectionModel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::dyn__isCollectionModel");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isCollectionModel"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.UInt32 _collectionTypeID
    [[deprecated("Use field access instead!")]] uint& dyn__collectionTypeID() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::dyn__collectionTypeID");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_collectionTypeID"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::ModelProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.UInt32 propertyID, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ModelProperty_1<T>* New_ctor(uint propertyID, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ModelProperty_1<T>*, creationType>(propertyID, value)));
    }
    // public System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::WriteLength");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::ModelProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, context);
    }
    // public System.Boolean Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::Write");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::ModelProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stream, context);
    }
    // public System.Boolean Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::ModelProperty_1::Read");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::ModelProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stream, context);
    }
  }; // Normal.Realtime.ModelProperty`1
  // Could not write size check! Type: Normal.Realtime.ModelProperty`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
