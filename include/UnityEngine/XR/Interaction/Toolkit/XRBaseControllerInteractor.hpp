// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRController
  class XRController;
  // Skipping declaration: XRBaseInteractable because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseControllerInteractor
  class XRBaseControllerInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRBaseControllerInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 7244F0
  class XRBaseControllerInteractor : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Boolean m_ToggleSelect
    // Size: 0x1
    // Offset: 0x74
    bool m_ToggleSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HideControllerOnSelect
    // Size: 0x1
    // Offset: 0x75
    bool m_HideControllerOnSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_PlayAudioClipOnSelectEnter
    // Size: 0x1
    // Offset: 0x76
    bool m_PlayAudioClipOnSelectEnter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnSelectEnter and: m_AudioClipForOnSelectEnter
    char __padding2[0x1] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnSelectEnter
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AudioClip* m_AudioClipForOnSelectEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnSelectExit
    // Size: 0x1
    // Offset: 0x80
    bool m_PlayAudioClipOnSelectExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnSelectExit and: m_AudioClipForOnSelectExit
    char __padding4[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnSelectExit
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AudioClip* m_AudioClipForOnSelectExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnHoverEnter
    // Size: 0x1
    // Offset: 0x90
    bool m_PlayAudioClipOnHoverEnter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnHoverEnter and: m_AudioClipForOnHoverEnter
    char __padding6[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnHoverEnter
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::AudioClip* m_AudioClipForOnHoverEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayAudioClipOnHoverExit
    // Size: 0x1
    // Offset: 0xA0
    bool m_PlayAudioClipOnHoverExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayAudioClipOnHoverExit and: m_AudioClipForOnHoverExit
    char __padding8[0x7] = {};
    // private UnityEngine.AudioClip m_AudioClipForOnHoverExit
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::AudioClip* m_AudioClipForOnHoverExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean m_PlayHapticsOnSelectEnter
    // Size: 0x1
    // Offset: 0xB0
    bool m_PlayHapticsOnSelectEnter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnSelectEnter and: m_HapticSelectEnterIntensity
    char __padding10[0x3] = {};
    // private System.Single m_HapticSelectEnterIntensity
    // Size: 0x4
    // Offset: 0xB4
    float m_HapticSelectEnterIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticSelectEnterDuration
    // Size: 0x4
    // Offset: 0xB8
    float m_HapticSelectEnterDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnSelectExit
    // Size: 0x1
    // Offset: 0xBC
    bool m_PlayHapticsOnSelectExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnSelectExit and: m_HapticSelectExitIntensity
    char __padding13[0x3] = {};
    // private System.Single m_HapticSelectExitIntensity
    // Size: 0x4
    // Offset: 0xC0
    float m_HapticSelectExitIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticSelectExitDuration
    // Size: 0x4
    // Offset: 0xC4
    float m_HapticSelectExitDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnHoverEnter
    // Size: 0x1
    // Offset: 0xC8
    bool m_PlayHapticsOnHoverEnter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnHoverEnter and: m_HapticHoverEnterIntensity
    char __padding16[0x3] = {};
    // private System.Single m_HapticHoverEnterIntensity
    // Size: 0x4
    // Offset: 0xCC
    float m_HapticHoverEnterIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticHoverEnterDuration
    // Size: 0x4
    // Offset: 0xD0
    float m_HapticHoverEnterDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PlayHapticsOnHoverExit
    // Size: 0x1
    // Offset: 0xD4
    bool m_PlayHapticsOnHoverExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayHapticsOnHoverExit and: m_HapticHoverExitIntensity
    char __padding19[0x3] = {};
    // private System.Single m_HapticHoverExitIntensity
    // Size: 0x4
    // Offset: 0xD8
    float m_HapticHoverExitIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_HapticHoverExitDuration
    // Size: 0x4
    // Offset: 0xDC
    float m_HapticHoverExitDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_ToggleSelectActive
    // Size: 0x1
    // Offset: 0xE0
    bool m_ToggleSelectActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ToggleSelectActive and: m_Controller
    char __padding22[0x7] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRController m_Controller
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::XR::Interaction::Toolkit::XRController* m_Controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController*) == 0x8);
    // private UnityEngine.AudioSource m_EffectsAudioSource
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::AudioSource* m_EffectsAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean m_ToggleSelect
    bool& dyn_m_ToggleSelect();
    // Get instance field reference: private System.Boolean m_HideControllerOnSelect
    bool& dyn_m_HideControllerOnSelect();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnSelectEnter
    bool& dyn_m_PlayAudioClipOnSelectEnter();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnSelectEnter
    ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnSelectEnter();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnSelectExit
    bool& dyn_m_PlayAudioClipOnSelectExit();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnSelectExit
    ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnSelectExit();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnHoverEnter
    bool& dyn_m_PlayAudioClipOnHoverEnter();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnHoverEnter
    ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnHoverEnter();
    // Get instance field reference: private System.Boolean m_PlayAudioClipOnHoverExit
    bool& dyn_m_PlayAudioClipOnHoverExit();
    // Get instance field reference: private UnityEngine.AudioClip m_AudioClipForOnHoverExit
    ::UnityEngine::AudioClip*& dyn_m_AudioClipForOnHoverExit();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnSelectEnter
    bool& dyn_m_PlayHapticsOnSelectEnter();
    // Get instance field reference: private System.Single m_HapticSelectEnterIntensity
    float& dyn_m_HapticSelectEnterIntensity();
    // Get instance field reference: private System.Single m_HapticSelectEnterDuration
    float& dyn_m_HapticSelectEnterDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnSelectExit
    bool& dyn_m_PlayHapticsOnSelectExit();
    // Get instance field reference: private System.Single m_HapticSelectExitIntensity
    float& dyn_m_HapticSelectExitIntensity();
    // Get instance field reference: private System.Single m_HapticSelectExitDuration
    float& dyn_m_HapticSelectExitDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnHoverEnter
    bool& dyn_m_PlayHapticsOnHoverEnter();
    // Get instance field reference: private System.Single m_HapticHoverEnterIntensity
    float& dyn_m_HapticHoverEnterIntensity();
    // Get instance field reference: private System.Single m_HapticHoverEnterDuration
    float& dyn_m_HapticHoverEnterDuration();
    // Get instance field reference: private System.Boolean m_PlayHapticsOnHoverExit
    bool& dyn_m_PlayHapticsOnHoverExit();
    // Get instance field reference: private System.Single m_HapticHoverExitIntensity
    float& dyn_m_HapticHoverExitIntensity();
    // Get instance field reference: private System.Single m_HapticHoverExitDuration
    float& dyn_m_HapticHoverExitDuration();
    // Get instance field reference: private System.Boolean m_ToggleSelectActive
    bool& dyn_m_ToggleSelectActive();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController m_Controller
    ::UnityEngine::XR::Interaction::Toolkit::XRController*& dyn_m_Controller();
    // Get instance field reference: private UnityEngine.AudioSource m_EffectsAudioSource
    ::UnityEngine::AudioSource*& dyn_m_EffectsAudioSource();
    // public System.Boolean get_toggleSelect()
    // Offset: 0x8CB344
    bool get_toggleSelect();
    // public System.Void set_toggleSelect(System.Boolean value)
    // Offset: 0x8CB34C
    void set_toggleSelect(bool value);
    // public System.Boolean get_hideControllerOnSelect()
    // Offset: 0x8CB358
    bool get_hideControllerOnSelect();
    // public System.Void set_hideControllerOnSelect(System.Boolean value)
    // Offset: 0x8CB360
    void set_hideControllerOnSelect(bool value);
    // public System.Boolean get_playAudioClipOnSelectEnter()
    // Offset: 0x8CB440
    bool get_playAudioClipOnSelectEnter();
    // public System.Void set_playAudioClipOnSelectEnter(System.Boolean value)
    // Offset: 0x8CB448
    void set_playAudioClipOnSelectEnter(bool value);
    // public UnityEngine.AudioClip get_AudioClipForOnSelectEnter()
    // Offset: 0x8CB454
    ::UnityEngine::AudioClip* get_AudioClipForOnSelectEnter();
    // public System.Void set_AudioClipForOnSelectEnter(UnityEngine.AudioClip value)
    // Offset: 0x8CB45C
    void set_AudioClipForOnSelectEnter(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnSelectExit()
    // Offset: 0x8CB464
    bool get_playAudioClipOnSelectExit();
    // public System.Void set_playAudioClipOnSelectExit(System.Boolean value)
    // Offset: 0x8CB46C
    void set_playAudioClipOnSelectExit(bool value);
    // public UnityEngine.AudioClip get_AudioClipForOnSelectExit()
    // Offset: 0x8CB478
    ::UnityEngine::AudioClip* get_AudioClipForOnSelectExit();
    // public System.Void set_AudioClipForOnSelectExit(UnityEngine.AudioClip value)
    // Offset: 0x8CB480
    void set_AudioClipForOnSelectExit(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnHoverEnter()
    // Offset: 0x8CB488
    bool get_playAudioClipOnHoverEnter();
    // public System.Void set_playAudioClipOnHoverEnter(System.Boolean value)
    // Offset: 0x8CB490
    void set_playAudioClipOnHoverEnter(bool value);
    // public UnityEngine.AudioClip get_AudioClipForOnHoverEnter()
    // Offset: 0x8CB49C
    ::UnityEngine::AudioClip* get_AudioClipForOnHoverEnter();
    // public System.Void set_AudioClipForOnHoverEnter(UnityEngine.AudioClip value)
    // Offset: 0x8CB4A4
    void set_AudioClipForOnHoverEnter(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playAudioClipOnHoverExit()
    // Offset: 0x8CB4AC
    bool get_playAudioClipOnHoverExit();
    // public System.Void set_playAudioClipOnHoverExit(System.Boolean value)
    // Offset: 0x8CB4B4
    void set_playAudioClipOnHoverExit(bool value);
    // public UnityEngine.AudioClip get_AudioClipForOnHoverExit()
    // Offset: 0x8CB4C0
    ::UnityEngine::AudioClip* get_AudioClipForOnHoverExit();
    // public System.Void set_AudioClipForOnHoverExit(UnityEngine.AudioClip value)
    // Offset: 0x8CB4C8
    void set_AudioClipForOnHoverExit(::UnityEngine::AudioClip* value);
    // public System.Boolean get_playHapticsOnSelectEnter()
    // Offset: 0x8CB4D0
    bool get_playHapticsOnSelectEnter();
    // public System.Void set_playHapticsOnSelectEnter(System.Boolean value)
    // Offset: 0x8CB4D8
    void set_playHapticsOnSelectEnter(bool value);
    // public System.Single get_hapticSelectEnterIntensity()
    // Offset: 0x8CB4E4
    float get_hapticSelectEnterIntensity();
    // public System.Void set_hapticSelectEnterIntensity(System.Single value)
    // Offset: 0x8CB4EC
    void set_hapticSelectEnterIntensity(float value);
    // public System.Single get_hapticSelectEnterDuration()
    // Offset: 0x8CB4F4
    float get_hapticSelectEnterDuration();
    // public System.Void set_hapticSelectEnterDuration(System.Single value)
    // Offset: 0x8CB4FC
    void set_hapticSelectEnterDuration(float value);
    // public System.Boolean get_playHapticsOnSelectExit()
    // Offset: 0x8CB504
    bool get_playHapticsOnSelectExit();
    // public System.Void set_playHapticsOnSelectExit(System.Boolean value)
    // Offset: 0x8CB50C
    void set_playHapticsOnSelectExit(bool value);
    // public System.Single get_hapticSelectExitIntensity()
    // Offset: 0x8CB518
    float get_hapticSelectExitIntensity();
    // public System.Void set_hapticSelectExitIntensity(System.Single value)
    // Offset: 0x8CB520
    void set_hapticSelectExitIntensity(float value);
    // public System.Single get_hapticSelectExitDuration()
    // Offset: 0x8CB528
    float get_hapticSelectExitDuration();
    // public System.Void set_hapticSelectExitDuration(System.Single value)
    // Offset: 0x8CB530
    void set_hapticSelectExitDuration(float value);
    // public System.Boolean get_playHapticsOnHoverEnter()
    // Offset: 0x8CB538
    bool get_playHapticsOnHoverEnter();
    // public System.Void set_playHapticsOnHoverEnter(System.Boolean value)
    // Offset: 0x8CB540
    void set_playHapticsOnHoverEnter(bool value);
    // public System.Single get_hapticHoverEnterIntensity()
    // Offset: 0x8CB54C
    float get_hapticHoverEnterIntensity();
    // public System.Void set_hapticHoverEnterIntensity(System.Single value)
    // Offset: 0x8CB554
    void set_hapticHoverEnterIntensity(float value);
    // public System.Single get_hapticHoverEnterDuration()
    // Offset: 0x8CB55C
    float get_hapticHoverEnterDuration();
    // public System.Void set_hapticHoverEnterDuration(System.Single value)
    // Offset: 0x8CB564
    void set_hapticHoverEnterDuration(float value);
    // public System.Boolean get_playHapticsOnHoverExit()
    // Offset: 0x8CB56C
    bool get_playHapticsOnHoverExit();
    // public System.Void set_playHapticsOnHoverExit(System.Boolean value)
    // Offset: 0x8CB574
    void set_playHapticsOnHoverExit(bool value);
    // public System.Single get_hapticHoverExitIntensity()
    // Offset: 0x8CB580
    float get_hapticHoverExitIntensity();
    // public System.Void set_hapticHoverExitIntensity(System.Single value)
    // Offset: 0x8CB588
    void set_hapticHoverExitIntensity(float value);
    // public System.Single get_hapticHoverExitDuration()
    // Offset: 0x8CB590
    float get_hapticHoverExitDuration();
    // public System.Void set_hapticHoverExitDuration(System.Single value)
    // Offset: 0x8CB598
    void set_hapticHoverExitDuration(float value);
    // protected System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> get_ValidTargets()
    // Offset: 0xFFFFFFFF
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* get_ValidTargets();
    // protected System.Boolean get_isUISelectActive()
    // Offset: 0x8CBC74
    bool get_isUISelectActive();
    // private System.Void CreateEffectsAudioSource()
    // Offset: 0x8CB998
    void CreateEffectsAudioSource();
    // public System.Boolean SendHapticImpulse(System.Single amplitude, System.Single duration)
    // Offset: 0x8CBF08
    bool SendHapticImpulse(float amplitude, float duration);
    // public override System.Boolean get_isSelectActive()
    // Offset: 0x8CBBC0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::get_isSelectActive()
    bool get_isSelectActive();
    // protected System.Void .ctor()
    // Offset: 0x8CC614
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRBaseControllerInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRBaseControllerInteractor*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x8CB5A0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::Awake()
    void Awake();
    // public override System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0x8CBA20
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    void ProcessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // protected internal override System.Void OnSelectEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CBD08
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnSelectEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    void OnSelectEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal override System.Void OnSelectExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CBFB4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnSelectExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    void OnSelectExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal override System.Void OnHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CC1D4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    void OnHoverEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal override System.Void OnHoverExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x8CC3A4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnHoverExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    void OnHoverExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
  }; // UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRBaseControllerInteractor), 240 + sizeof(::UnityEngine::AudioSource*)> __UnityEngine_XR_Interaction_Toolkit_XRBaseControllerInteractorSizeCheck;
  static_assert(sizeof(XRBaseControllerInteractor) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_toggleSelect
// Il2CppName: get_toggleSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_toggleSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_toggleSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_toggleSelect
// Il2CppName: set_toggleSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_toggleSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_toggleSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hideControllerOnSelect
// Il2CppName: get_hideControllerOnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hideControllerOnSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hideControllerOnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hideControllerOnSelect
// Il2CppName: set_hideControllerOnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hideControllerOnSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hideControllerOnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectEnter
// Il2CppName: get_playAudioClipOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectEnter
// Il2CppName: set_playAudioClipOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectEnter
// Il2CppName: get_AudioClipForOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectEnter
// Il2CppName: set_AudioClipForOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectExit
// Il2CppName: get_playAudioClipOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectExit
// Il2CppName: set_playAudioClipOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnSelectExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectExit
// Il2CppName: get_AudioClipForOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectExit
// Il2CppName: set_AudioClipForOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnSelectExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverEnter
// Il2CppName: get_playAudioClipOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverEnter
// Il2CppName: set_playAudioClipOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverEnter
// Il2CppName: get_AudioClipForOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverEnter
// Il2CppName: set_AudioClipForOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverExit
// Il2CppName: get_playAudioClipOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playAudioClipOnHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playAudioClipOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverExit
// Il2CppName: set_playAudioClipOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playAudioClipOnHoverExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playAudioClipOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverExit
// Il2CppName: get_AudioClipForOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_AudioClipForOnHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_AudioClipForOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverExit
// Il2CppName: set_AudioClipForOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::AudioClip*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_AudioClipForOnHoverExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_AudioClipForOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectEnter
// Il2CppName: get_playHapticsOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectEnter
// Il2CppName: set_playHapticsOnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterIntensity
// Il2CppName: get_hapticSelectEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterIntensity
// Il2CppName: set_hapticSelectEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterDuration
// Il2CppName: get_hapticSelectEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectEnterDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterDuration
// Il2CppName: set_hapticSelectEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectEnterDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectExit
// Il2CppName: get_playHapticsOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectExit
// Il2CppName: set_playHapticsOnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnSelectExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitIntensity
// Il2CppName: get_hapticSelectExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitIntensity
// Il2CppName: set_hapticSelectExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitDuration
// Il2CppName: get_hapticSelectExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticSelectExitDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticSelectExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitDuration
// Il2CppName: set_hapticSelectExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticSelectExitDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticSelectExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverEnter
// Il2CppName: get_playHapticsOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverEnter
// Il2CppName: set_playHapticsOnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterIntensity
// Il2CppName: get_hapticHoverEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterIntensity
// Il2CppName: set_hapticHoverEnterIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverEnterIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterDuration
// Il2CppName: get_hapticHoverEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverEnterDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterDuration
// Il2CppName: set_hapticHoverEnterDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverEnterDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverEnterDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverExit
// Il2CppName: get_playHapticsOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_playHapticsOnHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_playHapticsOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverExit
// Il2CppName: set_playHapticsOnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_playHapticsOnHoverExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_playHapticsOnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitIntensity
// Il2CppName: get_hapticHoverExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitIntensity
// Il2CppName: set_hapticHoverExitIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverExitIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitDuration
// Il2CppName: get_hapticHoverExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_hapticHoverExitDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_hapticHoverExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitDuration
// Il2CppName: set_hapticHoverExitDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::set_hapticHoverExitDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "set_hapticHoverExitDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_ValidTargets
// Il2CppName: get_ValidTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_ValidTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_ValidTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isUISelectActive
// Il2CppName: get_isUISelectActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isUISelectActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_isUISelectActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CreateEffectsAudioSource
// Il2CppName: CreateEffectsAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::CreateEffectsAudioSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "CreateEffectsAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendHapticImpulse
// Il2CppName: SendHapticImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::SendHapticImpulse)> {
  static const MethodInfo* get() {
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "SendHapticImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amplitude, duration});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isSelectActive
// Il2CppName: get_isSelectActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::get_isSelectActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "get_isSelectActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::ProcessInteractor
// Il2CppName: ProcessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::ProcessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "ProcessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectEnter
// Il2CppName: OnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectEnter)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectExit
// Il2CppName: OnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnSelectExit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverEnter
// Il2CppName: OnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverEnter)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverExit
// Il2CppName: OnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor::OnHoverExit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor*), "OnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
