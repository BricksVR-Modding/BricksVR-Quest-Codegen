// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AnimateBrickCategoryImages
  class AnimateBrickCategoryImages;
  // Forward declaring type: BrickPickerManager
  class BrickPickerManager;
  // Forward declaring type: HapticsManager
  class HapticsManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SelectedCategoryManager
  class SelectedCategoryManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SelectedCategoryManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SelectedCategoryManager*, "", "SelectedCategoryManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: SelectedCategoryManager
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectedCategoryManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public AnimateBrickCategoryImages selectedBrickCategory
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::AnimateBrickCategoryImages* selectedBrickCategory;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AnimateBrickCategoryImages*) == 0x8);
    // public UnityEngine.GameObject tabButtonContainer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* tabButtonContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.ValueTuple`2<AnimateBrickCategoryImages,UnityEngine.Transform>[] _brickCategories
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::System::ValueTuple_2<::GlobalNamespace::AnimateBrickCategoryImages*, ::UnityEngine::Transform*>> brickCategories;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::ValueTuple_2<::GlobalNamespace::AnimateBrickCategoryImages*, ::UnityEngine::Transform*>>) == 0x8);
    // private UnityEngine.Vector3 _lastPos
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 lastPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: lastPos and: sliderBeginObject
    char __padding4[0x4] = {};
    // public UnityEngine.Transform sliderBeginObject
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* sliderBeginObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform sliderEndObject
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* sliderEndObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _lastLocalSliderBegin
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 lastLocalSliderBegin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _isGrabbed
    // Size: 0x1
    // Offset: 0x64
    bool isGrabbed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isGrabbed and: timeReleased
    char __padding8[0x3] = {};
    // private System.Single _timeReleased
    // Size: 0x4
    // Offset: 0x68
    float timeReleased;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeForSliderToSnap
    // Size: 0x4
    // Offset: 0x6C
    float timeForSliderToSnap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public BrickPickerManager brickPickerManager
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::BrickPickerManager* brickPickerManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BrickPickerManager*) == 0x8);
    // private HapticsManager _hapticsManager
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::HapticsManager* hapticsManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HapticsManager*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public AnimateBrickCategoryImages selectedBrickCategory
    [[deprecated]] ::GlobalNamespace::AnimateBrickCategoryImages*& dyn_selectedBrickCategory();
    // Get instance field reference: public UnityEngine.GameObject tabButtonContainer
    [[deprecated]] ::UnityEngine::GameObject*& dyn_tabButtonContainer();
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated]] ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private System.ValueTuple`2<AnimateBrickCategoryImages,UnityEngine.Transform>[] _brickCategories
    [[deprecated]] ::ArrayW<::System::ValueTuple_2<::GlobalNamespace::AnimateBrickCategoryImages*, ::UnityEngine::Transform*>>& dyn__brickCategories();
    // Get instance field reference: private UnityEngine.Vector3 _lastPos
    [[deprecated]] ::UnityEngine::Vector3& dyn__lastPos();
    // Get instance field reference: public UnityEngine.Transform sliderBeginObject
    [[deprecated]] ::UnityEngine::Transform*& dyn_sliderBeginObject();
    // Get instance field reference: public UnityEngine.Transform sliderEndObject
    [[deprecated]] ::UnityEngine::Transform*& dyn_sliderEndObject();
    // Get instance field reference: private UnityEngine.Vector3 _lastLocalSliderBegin
    [[deprecated]] ::UnityEngine::Vector3& dyn__lastLocalSliderBegin();
    // Get instance field reference: private System.Boolean _isGrabbed
    [[deprecated]] bool& dyn__isGrabbed();
    // Get instance field reference: private System.Single _timeReleased
    [[deprecated]] float& dyn__timeReleased();
    // Get instance field reference: public System.Single timeForSliderToSnap
    [[deprecated]] float& dyn_timeForSliderToSnap();
    // Get instance field reference: public BrickPickerManager brickPickerManager
    [[deprecated]] ::GlobalNamespace::BrickPickerManager*& dyn_brickPickerManager();
    // Get instance field reference: private HapticsManager _hapticsManager
    [[deprecated]] ::GlobalNamespace::HapticsManager*& dyn__hapticsManager();
    // private UnityEngine.Vector3 get_SliderBegin()
    // Offset: 0x6CDBF0
    ::UnityEngine::Vector3 get_SliderBegin();
    // private UnityEngine.Vector3 get_SliderEnd()
    // Offset: 0x6CDC30
    ::UnityEngine::Vector3 get_SliderEnd();
    // private System.Void Awake()
    // Offset: 0x6CCA40
    void Awake();
    // private System.Void Start()
    // Offset: 0x6CD7C0
    void Start();
    // private System.Void Update()
    // Offset: 0x6CD990
    void Update();
    // public System.Void SetPosition(UnityEngine.Vector3 pos, System.Boolean leftHand)
    // Offset: 0x6CD3B0
    void SetPosition(::UnityEngine::Vector3 pos, bool leftHand);
    // private System.Void GravitateSliderTowardsNearestItem()
    // Offset: 0x6CD0C0
    void GravitateSliderTowardsNearestItem();
    // private System.Void OnDrawGizmos()
    // Offset: 0x6CD2F0
    void OnDrawGizmos();
    // private System.Void UpdateSliderPosition(UnityEngine.Vector3 pos)
    // Offset: 0x6CD870
    void UpdateSliderPosition(::UnityEngine::Vector3 pos);
    // public System.Void PlayerGrabbed()
    // Offset: 0x6CD380
    void PlayerGrabbed();
    // public System.Void PlayerReleased()
    // Offset: 0x6CD390
    void PlayerReleased();
    // private AnimateBrickCategoryImages ClosestBrickCategoryImage()
    // Offset: 0x6CCBE0
    ::GlobalNamespace::AnimateBrickCategoryImages* ClosestBrickCategoryImage();
    // static private UnityEngine.Vector3 GetClosestPointOnInfiniteLine(UnityEngine.Vector3 point, UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd)
    // Offset: 0x6CCF60
    static ::UnityEngine::Vector3 GetClosestPointOnInfiniteLine(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 lineStart, ::UnityEngine::Vector3 lineEnd);
    // static private UnityEngine.Vector3 GetClosestPointOnFiniteLine(UnityEngine.Vector3 point, UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd)
    // Offset: 0x6CCD70
    static ::UnityEngine::Vector3 GetClosestPointOnFiniteLine(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 lineStart, ::UnityEngine::Vector3 lineEnd);
    // public System.Void .ctor()
    // Offset: 0x6CDBE0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectedCategoryManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SelectedCategoryManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectedCategoryManager*, creationType>()));
    }
  }; // SelectedCategoryManager
  #pragma pack(pop)
  static check_size<sizeof(SelectedCategoryManager), 120 + sizeof(::GlobalNamespace::HapticsManager*)> __GlobalNamespace_SelectedCategoryManagerSizeCheck;
  static_assert(sizeof(SelectedCategoryManager) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::get_SliderBegin
// Il2CppName: get_SliderBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::get_SliderBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "get_SliderBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::get_SliderEnd
// Il2CppName: get_SliderEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::get_SliderEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "get_SliderEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)(::UnityEngine::Vector3, bool)>(&GlobalNamespace::SelectedCategoryManager::SetPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, leftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::GravitateSliderTowardsNearestItem
// Il2CppName: GravitateSliderTowardsNearestItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::GravitateSliderTowardsNearestItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "GravitateSliderTowardsNearestItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::UpdateSliderPosition
// Il2CppName: UpdateSliderPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)(::UnityEngine::Vector3)>(&GlobalNamespace::SelectedCategoryManager::UpdateSliderPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "UpdateSliderPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::PlayerGrabbed
// Il2CppName: PlayerGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::PlayerGrabbed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "PlayerGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::PlayerReleased
// Il2CppName: PlayerReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::PlayerReleased)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "PlayerReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::ClosestBrickCategoryImage
// Il2CppName: ClosestBrickCategoryImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::AnimateBrickCategoryImages* (GlobalNamespace::SelectedCategoryManager::*)()>(&GlobalNamespace::SelectedCategoryManager::ClosestBrickCategoryImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "ClosestBrickCategoryImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::GetClosestPointOnInfiniteLine
// Il2CppName: GetClosestPointOnInfiniteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::SelectedCategoryManager::GetClosestPointOnInfiniteLine)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "GetClosestPointOnInfiniteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, lineStart, lineEnd});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::GetClosestPointOnFiniteLine
// Il2CppName: GetClosestPointOnFiniteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::SelectedCategoryManager::GetClosestPointOnFiniteLine)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectedCategoryManager*), "GetClosestPointOnFiniteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, lineStart, lineEnd});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectedCategoryManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
