// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Serialization.IStreamWriter
#include "Normal/Realtime/Serialization/IStreamWriter.hpp"
// Including type: Normal.Realtime.Serialization.IStreamReader
#include "Normal/Realtime/Serialization/IStreamReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeModel
  class RealtimeModel;
  // Forward declaring type: RealtimeViewModel
  class RealtimeViewModel;
  // Forward declaring type: Room
  class Room;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: StreamEventDispatcher
  class StreamEventDispatcher;
  // Forward declaring type: InflightUpdateNotifier
  class InflightUpdateNotifier;
  // Forward declaring type: RealtimeSet`1<TValue>
  template<typename TValue>
  class RealtimeSet_1;
  // Forward declaring type: WriteBuffer
  class WriteBuffer;
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadBuffer
  class ReadBuffer;
  // Forward declaring type: ReadStream
  class ReadStream;
  // Forward declaring type: StreamContext
  struct StreamContext;
}
// Forward declaring namespace: Normal::Realtime::Collections
namespace Normal::Realtime::Collections {
  // Forward declaring type: StringKeyDictionary`1<TValue>
  template<typename TValue>
  class StringKeyDictionary_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: Datastore
  class Datastore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Datastore);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Datastore*, "Normal.Realtime", "Datastore");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Datastore
  // [TokenAttribute] Offset: FFFFFFFF
  class Datastore : public ::Il2CppObject/*, public ::Normal::Realtime::Serialization::IStreamWriter, public ::Normal::Realtime::Serialization::IStreamReader*/ {
    public:
    // Nested type: ::Normal::Realtime::Datastore::PrefabViewModelAdded
    class PrefabViewModelAdded;
    // Nested type: ::Normal::Realtime::Datastore::PrefabViewModelRemoved
    class PrefabViewModelRemoved;
    // Nested type: ::Normal::Realtime::Datastore::Properties
    struct Properties;
    // Nested type: ::Normal::Realtime::Datastore::$$c__DisplayClass22_0
    class $$c__DisplayClass22_0;
    public:
    // private Normal.Realtime.RealtimeModel _roomModel
    // Size: 0x8
    // Offset: 0x10
    ::Normal::Realtime::RealtimeModel* roomModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeModel*) == 0x8);
    // private readonly Normal.Realtime.Serialization.StreamEventDispatcher _dispatcher
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Serialization::StreamEventDispatcher* dispatcher;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::StreamEventDispatcher*) == 0x8);
    // private readonly Normal.Realtime.Serialization.InflightUpdateNotifier _inflightUpdateNotifier
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::Serialization::InflightUpdateNotifier* inflightUpdateNotifier;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::InflightUpdateNotifier*) == 0x8);
    // private Normal.Realtime.Collections.StringKeyDictionary`1<Normal.Realtime.RealtimeViewModel> _sceneViewModels
    // Size: 0x8
    // Offset: 0x28
    ::Normal::Realtime::Collections::StringKeyDictionary_1<::Normal::Realtime::RealtimeViewModel*>* sceneViewModels;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Collections::StringKeyDictionary_1<::Normal::Realtime::RealtimeViewModel*>*) == 0x8);
    // private Normal.Realtime.Serialization.RealtimeSet`1<Normal.Realtime.RealtimeViewModel> _prefabViewModels
    // Size: 0x8
    // Offset: 0x30
    ::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>* prefabViewModels;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>*) == 0x8);
    // private Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelAdded prefabRealtimeViewModelAdded
    // Size: 0x8
    // Offset: 0x38
    ::Normal::Realtime::Datastore::PrefabViewModelAdded* prefabRealtimeViewModelAdded;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Datastore::PrefabViewModelAdded*) == 0x8);
    // private Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelRemoved prefabRealtimeViewModelRemoved
    // Size: 0x8
    // Offset: 0x40
    ::Normal::Realtime::Datastore::PrefabViewModelRemoved* prefabRealtimeViewModelRemoved;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Datastore::PrefabViewModelRemoved*) == 0x8);
    // private Normal.Realtime.Serialization.WriteBuffer _writeBuffer
    // Size: 0x8
    // Offset: 0x48
    ::Normal::Realtime::Serialization::WriteBuffer* writeBuffer;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::WriteBuffer*) == 0x8);
    // private Normal.Realtime.Serialization.WriteStream _writeStream
    // Size: 0x8
    // Offset: 0x50
    ::Normal::Realtime::Serialization::WriteStream* writeStream;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::WriteStream*) == 0x8);
    // private Normal.Realtime.Serialization.ReadBuffer _readBuffer
    // Size: 0x8
    // Offset: 0x58
    ::Normal::Realtime::Serialization::ReadBuffer* readBuffer;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::ReadBuffer*) == 0x8);
    // private Normal.Realtime.Serialization.ReadStream _readStream
    // Size: 0x8
    // Offset: 0x60
    ::Normal::Realtime::Serialization::ReadStream* readStream;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::ReadStream*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::IStreamWriter
    operator ::Normal::Realtime::Serialization::IStreamWriter() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::IStreamWriter*>(this);
    }
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::IStreamReader
    operator ::Normal::Realtime::Serialization::IStreamReader() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::IStreamReader*>(this);
    }
    // Get instance field reference: private Normal.Realtime.RealtimeModel _roomModel
    [[deprecated]] ::Normal::Realtime::RealtimeModel*& dyn__roomModel();
    // Get instance field reference: private readonly Normal.Realtime.Serialization.StreamEventDispatcher _dispatcher
    [[deprecated]] ::Normal::Realtime::Serialization::StreamEventDispatcher*& dyn__dispatcher();
    // Get instance field reference: private readonly Normal.Realtime.Serialization.InflightUpdateNotifier _inflightUpdateNotifier
    [[deprecated]] ::Normal::Realtime::Serialization::InflightUpdateNotifier*& dyn__inflightUpdateNotifier();
    // Get instance field reference: private Normal.Realtime.Collections.StringKeyDictionary`1<Normal.Realtime.RealtimeViewModel> _sceneViewModels
    [[deprecated]] ::Normal::Realtime::Collections::StringKeyDictionary_1<::Normal::Realtime::RealtimeViewModel*>*& dyn__sceneViewModels();
    // Get instance field reference: private Normal.Realtime.Serialization.RealtimeSet`1<Normal.Realtime.RealtimeViewModel> _prefabViewModels
    [[deprecated]] ::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>*& dyn__prefabViewModels();
    // Get instance field reference: private Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelAdded prefabRealtimeViewModelAdded
    [[deprecated]] ::Normal::Realtime::Datastore::PrefabViewModelAdded*& dyn_prefabRealtimeViewModelAdded();
    // Get instance field reference: private Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelRemoved prefabRealtimeViewModelRemoved
    [[deprecated]] ::Normal::Realtime::Datastore::PrefabViewModelRemoved*& dyn_prefabRealtimeViewModelRemoved();
    // Get instance field reference: private Normal.Realtime.Serialization.WriteBuffer _writeBuffer
    [[deprecated]] ::Normal::Realtime::Serialization::WriteBuffer*& dyn__writeBuffer();
    // Get instance field reference: private Normal.Realtime.Serialization.WriteStream _writeStream
    [[deprecated]] ::Normal::Realtime::Serialization::WriteStream*& dyn__writeStream();
    // Get instance field reference: private Normal.Realtime.Serialization.ReadBuffer _readBuffer
    [[deprecated]] ::Normal::Realtime::Serialization::ReadBuffer*& dyn__readBuffer();
    // Get instance field reference: private Normal.Realtime.Serialization.ReadStream _readStream
    [[deprecated]] ::Normal::Realtime::Serialization::ReadStream*& dyn__readStream();
    // public Normal.Realtime.RealtimeModel get_roomModel()
    // Offset: 0x1E1920
    ::Normal::Realtime::RealtimeModel* get_roomModel();
    // public Normal.Realtime.Collections.StringKeyDictionary`1<Normal.Realtime.RealtimeViewModel> get_sceneViewModels()
    // Offset: 0x1E1930
    ::Normal::Realtime::Collections::StringKeyDictionary_1<::Normal::Realtime::RealtimeViewModel*>* get_sceneViewModels();
    // public Normal.Realtime.Serialization.RealtimeSet`1<Normal.Realtime.RealtimeViewModel> get_prefabViewModels()
    // Offset: 0x1E0EB0
    ::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>* get_prefabViewModels();
    // public Normal.Realtime.Serialization.WriteBuffer get_writeBuffer()
    // Offset: 0x232190
    ::Normal::Realtime::Serialization::WriteBuffer* get_writeBuffer();
    // public System.Void add_prefabRealtimeViewModelAdded(Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelAdded value)
    // Offset: 0x8B8530
    void add_prefabRealtimeViewModelAdded(::Normal::Realtime::Datastore::PrefabViewModelAdded* value);
    // public System.Void remove_prefabRealtimeViewModelAdded(Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelAdded value)
    // Offset: 0x8B8670
    void remove_prefabRealtimeViewModelAdded(::Normal::Realtime::Datastore::PrefabViewModelAdded* value);
    // public System.Void add_prefabRealtimeViewModelRemoved(Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelRemoved value)
    // Offset: 0x8B85D0
    void add_prefabRealtimeViewModelRemoved(::Normal::Realtime::Datastore::PrefabViewModelRemoved* value);
    // public System.Void remove_prefabRealtimeViewModelRemoved(Normal.Realtime.Datastore/Normal.Realtime.PrefabViewModelRemoved value)
    // Offset: 0x8B8710
    void remove_prefabRealtimeViewModelRemoved(::Normal::Realtime::Datastore::PrefabViewModelRemoved* value);
    // public System.Void Reset(Normal.Realtime.Room room, Normal.Realtime.RealtimeModel roomModel)
    // Offset: 0x8B7D10
    void Reset(::Normal::Realtime::Room* room, ::Normal::Realtime::RealtimeModel* roomModel);
    // public Normal.Realtime.RealtimeViewModel GetSceneRealtimeViewModelForUUID(System.Byte[] sceneViewUUID)
    // Offset: 0x8B7AC0
    ::Normal::Realtime::RealtimeViewModel* GetSceneRealtimeViewModelForUUID(::ArrayW<uint8_t> sceneViewUUID);
    // public System.Void ConnectSceneRealtimeViewModel(System.String sceneViewUUID, Normal.Realtime.RealtimeViewModel sceneViewViewModel, System.Action`2<System.Boolean,Normal.Realtime.RealtimeViewModel> completionHandler)
    // Offset: 0x8B7760
    void ConnectSceneRealtimeViewModel(::StringW sceneViewUUID, ::Normal::Realtime::RealtimeViewModel* sceneViewViewModel, ::System::Action_2<bool, ::Normal::Realtime::RealtimeViewModel*>* completionHandler);
    // private System.Void TryInsertSceneViewModelIntoDatastore(System.String sceneViewUUID, Normal.Realtime.RealtimeViewModel sceneViewViewModel, System.Action`2<System.Boolean,Normal.Realtime.RealtimeViewModel> completionHandler, System.Int32 previousAttempts)
    // Offset: 0x8B81D0
    void TryInsertSceneViewModelIntoDatastore(::StringW sceneViewUUID, ::Normal::Realtime::RealtimeViewModel* sceneViewViewModel, ::System::Action_2<bool, ::Normal::Realtime::RealtimeViewModel*>* completionHandler, int previousAttempts);
    // public System.Void AddPrefabRealtimeViewModel(Normal.Realtime.RealtimeViewModel prefabViewModel)
    // Offset: 0x8B76D0
    void AddPrefabRealtimeViewModel(::Normal::Realtime::RealtimeViewModel* prefabViewModel);
    // public System.Boolean RemovePrefabRealtimeViewModel(Normal.Realtime.RealtimeViewModel model)
    // Offset: 0x8B7CB0
    bool RemovePrefabRealtimeViewModel(::Normal::Realtime::RealtimeViewModel* model);
    // private System.Void PrefabViewModelAddedToSet(Normal.Realtime.Serialization.RealtimeSet`1<Normal.Realtime.RealtimeViewModel> set, Normal.Realtime.RealtimeViewModel model, System.Boolean remote)
    // Offset: 0x8B7B60
    void PrefabViewModelAddedToSet(::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>* set, ::Normal::Realtime::RealtimeViewModel* model, bool remote);
    // private System.Void PrefabViewModelRemovedFromSet(Normal.Realtime.Serialization.RealtimeSet`1<Normal.Realtime.RealtimeViewModel> set, Normal.Realtime.RealtimeViewModel model, System.Boolean remote)
    // Offset: 0x8B7B80
    void PrefabViewModelRemovedFromSet(::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>* set, ::Normal::Realtime::RealtimeViewModel* model, bool remote);
    // private System.Void SetUpSerialization()
    // Offset: 0x8B80D0
    void SetUpSerialization();
    // public System.Void Deserialize(System.Byte[] buffer)
    // Offset: 0x8B7A20
    void Deserialize(::ArrayW<uint8_t> buffer);
    // public System.Void SerializeDeltaUpdates(System.Boolean reliable, System.UInt32 updateID, System.Double roomTime)
    // Offset: 0x8B8010
    void SerializeDeltaUpdates(bool reliable, uint updateID, double roomTime);
    // public System.UInt32 DeserializeDeltaUpdates(System.Byte[] buffer, System.Boolean reliable, System.Boolean updateIsFromUs, System.Double currentRoomTime)
    // Offset: 0x8B7870
    uint DeserializeDeltaUpdates(::ArrayW<uint8_t> buffer, bool reliable, bool updateIsFromUs, double currentRoomTime);
    // public System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8B82F0
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // public System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8B83C0
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // public System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8B7BA0
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // public System.Void .ctor()
    // Offset: 0x8B84A0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Datastore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Datastore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Datastore*, creationType>()));
    }
  }; // Normal.Realtime.Datastore
  #pragma pack(pop)
  static check_size<sizeof(Datastore), 96 + sizeof(::Normal::Realtime::Serialization::ReadStream*)> __Normal_Realtime_DatastoreSizeCheck;
  static_assert(sizeof(Datastore) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Datastore::get_roomModel
// Il2CppName: get_roomModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeModel* (Normal::Realtime::Datastore::*)()>(&Normal::Realtime::Datastore::get_roomModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "get_roomModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::get_sceneViewModels
// Il2CppName: get_sceneViewModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Collections::StringKeyDictionary_1<::Normal::Realtime::RealtimeViewModel*>* (Normal::Realtime::Datastore::*)()>(&Normal::Realtime::Datastore::get_sceneViewModels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "get_sceneViewModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::get_prefabViewModels
// Il2CppName: get_prefabViewModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>* (Normal::Realtime::Datastore::*)()>(&Normal::Realtime::Datastore::get_prefabViewModels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "get_prefabViewModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::get_writeBuffer
// Il2CppName: get_writeBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Serialization::WriteBuffer* (Normal::Realtime::Datastore::*)()>(&Normal::Realtime::Datastore::get_writeBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "get_writeBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::add_prefabRealtimeViewModelAdded
// Il2CppName: add_prefabRealtimeViewModelAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Datastore::PrefabViewModelAdded*)>(&Normal::Realtime::Datastore::add_prefabRealtimeViewModelAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Datastore/PrefabViewModelAdded")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "add_prefabRealtimeViewModelAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::remove_prefabRealtimeViewModelAdded
// Il2CppName: remove_prefabRealtimeViewModelAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Datastore::PrefabViewModelAdded*)>(&Normal::Realtime::Datastore::remove_prefabRealtimeViewModelAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Datastore/PrefabViewModelAdded")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "remove_prefabRealtimeViewModelAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::add_prefabRealtimeViewModelRemoved
// Il2CppName: add_prefabRealtimeViewModelRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Datastore::PrefabViewModelRemoved*)>(&Normal::Realtime::Datastore::add_prefabRealtimeViewModelRemoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Datastore/PrefabViewModelRemoved")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "add_prefabRealtimeViewModelRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::remove_prefabRealtimeViewModelRemoved
// Il2CppName: remove_prefabRealtimeViewModelRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Datastore::PrefabViewModelRemoved*)>(&Normal::Realtime::Datastore::remove_prefabRealtimeViewModelRemoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Datastore/PrefabViewModelRemoved")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "remove_prefabRealtimeViewModelRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Room*, ::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::Datastore::Reset)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room, roomModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::GetSceneRealtimeViewModelForUUID
// Il2CppName: GetSceneRealtimeViewModelForUUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeViewModel* (Normal::Realtime::Datastore::*)(::ArrayW<uint8_t>)>(&Normal::Realtime::Datastore::GetSceneRealtimeViewModelForUUID)> {
  static const MethodInfo* get() {
    static auto* sceneViewUUID = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "GetSceneRealtimeViewModelForUUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneViewUUID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::ConnectSceneRealtimeViewModel
// Il2CppName: ConnectSceneRealtimeViewModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::StringW, ::Normal::Realtime::RealtimeViewModel*, ::System::Action_2<bool, ::Normal::Realtime::RealtimeViewModel*>*)>(&Normal::Realtime::Datastore::ConnectSceneRealtimeViewModel)> {
  static const MethodInfo* get() {
    static auto* sceneViewUUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sceneViewViewModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    static auto* completionHandler = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "ConnectSceneRealtimeViewModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneViewUUID, sceneViewViewModel, completionHandler});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::TryInsertSceneViewModelIntoDatastore
// Il2CppName: TryInsertSceneViewModelIntoDatastore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::StringW, ::Normal::Realtime::RealtimeViewModel*, ::System::Action_2<bool, ::Normal::Realtime::RealtimeViewModel*>*, int)>(&Normal::Realtime::Datastore::TryInsertSceneViewModelIntoDatastore)> {
  static const MethodInfo* get() {
    static auto* sceneViewUUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sceneViewViewModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    static auto* completionHandler = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")})->byval_arg;
    static auto* previousAttempts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "TryInsertSceneViewModelIntoDatastore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneViewUUID, sceneViewViewModel, completionHandler, previousAttempts});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::AddPrefabRealtimeViewModel
// Il2CppName: AddPrefabRealtimeViewModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::RealtimeViewModel*)>(&Normal::Realtime::Datastore::AddPrefabRealtimeViewModel)> {
  static const MethodInfo* get() {
    static auto* prefabViewModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "AddPrefabRealtimeViewModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabViewModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::RemovePrefabRealtimeViewModel
// Il2CppName: RemovePrefabRealtimeViewModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Datastore::*)(::Normal::Realtime::RealtimeViewModel*)>(&Normal::Realtime::Datastore::RemovePrefabRealtimeViewModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "RemovePrefabRealtimeViewModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::PrefabViewModelAddedToSet
// Il2CppName: PrefabViewModelAddedToSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>*, ::Normal::Realtime::RealtimeViewModel*, bool)>(&Normal::Realtime::Datastore::PrefabViewModelAddedToSet)> {
  static const MethodInfo* get() {
    static auto* set = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "RealtimeSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")})->byval_arg;
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    static auto* remote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "PrefabViewModelAddedToSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{set, model, remote});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::PrefabViewModelRemovedFromSet
// Il2CppName: PrefabViewModelRemovedFromSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Serialization::RealtimeSet_1<::Normal::Realtime::RealtimeViewModel*>*, ::Normal::Realtime::RealtimeViewModel*, bool)>(&Normal::Realtime::Datastore::PrefabViewModelRemovedFromSet)> {
  static const MethodInfo* get() {
    static auto* set = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "RealtimeSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")})->byval_arg;
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    static auto* remote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "PrefabViewModelRemovedFromSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{set, model, remote});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::SetUpSerialization
// Il2CppName: SetUpSerialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)()>(&Normal::Realtime::Datastore::SetUpSerialization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "SetUpSerialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::ArrayW<uint8_t>)>(&Normal::Realtime::Datastore::Deserialize)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::SerializeDeltaUpdates
// Il2CppName: SerializeDeltaUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(bool, uint, double)>(&Normal::Realtime::Datastore::SerializeDeltaUpdates)> {
  static const MethodInfo* get() {
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* roomTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "SerializeDeltaUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reliable, updateID, roomTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::DeserializeDeltaUpdates
// Il2CppName: DeserializeDeltaUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Normal::Realtime::Datastore::*)(::ArrayW<uint8_t>, bool, bool, double)>(&Normal::Realtime::Datastore::DeserializeDeltaUpdates)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateIsFromUs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* currentRoomTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "DeserializeDeltaUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, reliable, updateIsFromUs, currentRoomTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Datastore::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Datastore::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Datastore::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Datastore::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Datastore::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Datastore*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Datastore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
