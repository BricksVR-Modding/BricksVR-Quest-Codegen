// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState
#include "UnityEngine/XR/Interaction/Toolkit/UI/ButtonDeltaState.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.RaycastResult
#include "UnityEngine/EventSystems/RaycastResult.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: MouseButtonModel
  struct MouseButtonModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel, "UnityEngine.XR.Interaction.Toolkit.UI", "MouseButtonModel");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Size: 0x78
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.MouseButtonModel
  // [TokenAttribute] Offset: FFFFFFFF
  struct MouseButtonModel/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::ImplementationData
    struct ImplementationData;
    // Size: 0x70
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.MouseButtonModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData
    // [TokenAttribute] Offset: FFFFFFFF
    struct ImplementationData/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Boolean <isDragging>k__BackingField
      // Size: 0x1
      // Offset: 0x0
      bool isDragging;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isDragging and: pressedTime
      char __padding0[0x3] = {};
      // private System.Single <pressedTime>k__BackingField
      // Size: 0x4
      // Offset: 0x4
      float pressedTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private UnityEngine.Vector2 <pressedPosition>k__BackingField
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Vector2 pressedPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // private UnityEngine.EventSystems.RaycastResult <pressedRaycast>k__BackingField
      // Size: 0x48
      // Offset: 0x10
      ::UnityEngine::EventSystems::RaycastResult pressedRaycast;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x48);
      // private UnityEngine.GameObject <pressedGameObject>k__BackingField
      // Size: 0x8
      // Offset: 0x58
      ::UnityEngine::GameObject* pressedGameObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject <pressedGameObjectRaw>k__BackingField
      // Size: 0x8
      // Offset: 0x60
      ::UnityEngine::GameObject* pressedGameObjectRaw;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject <draggedGameObject>k__BackingField
      // Size: 0x8
      // Offset: 0x68
      ::UnityEngine::GameObject* draggedGameObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      public:
      // Creating value type constructor for type: ImplementationData
      constexpr ImplementationData(bool isDragging_ = {}, float pressedTime_ = {}, ::UnityEngine::Vector2 pressedPosition_ = {}, ::UnityEngine::EventSystems::RaycastResult pressedRaycast_ = {}, ::UnityEngine::GameObject* pressedGameObject_ = {}, ::UnityEngine::GameObject* pressedGameObjectRaw_ = {}, ::UnityEngine::GameObject* draggedGameObject_ = {}) noexcept : isDragging{isDragging_}, pressedTime{pressedTime_}, pressedPosition{pressedPosition_}, pressedRaycast{pressedRaycast_}, pressedGameObject{pressedGameObject_}, pressedGameObjectRaw{pressedGameObjectRaw_}, draggedGameObject{draggedGameObject_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Boolean <isDragging>k__BackingField
      bool& dyn_$isDragging$k__BackingField();
      // Get instance field reference: private System.Single <pressedTime>k__BackingField
      float& dyn_$pressedTime$k__BackingField();
      // Get instance field reference: private UnityEngine.Vector2 <pressedPosition>k__BackingField
      ::UnityEngine::Vector2& dyn_$pressedPosition$k__BackingField();
      // Get instance field reference: private UnityEngine.EventSystems.RaycastResult <pressedRaycast>k__BackingField
      ::UnityEngine::EventSystems::RaycastResult& dyn_$pressedRaycast$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pressedGameObject>k__BackingField
      ::UnityEngine::GameObject*& dyn_$pressedGameObject$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pressedGameObjectRaw>k__BackingField
      ::UnityEngine::GameObject*& dyn_$pressedGameObjectRaw$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <draggedGameObject>k__BackingField
      ::UnityEngine::GameObject*& dyn_$draggedGameObject$k__BackingField();
      // public System.Boolean get_isDragging()
      // Offset: 0x8C5548
      bool get_isDragging();
      // public System.Void set_isDragging(System.Boolean value)
      // Offset: 0x8C5550
      void set_isDragging(bool value);
      // public System.Single get_pressedTime()
      // Offset: 0x8C555C
      float get_pressedTime();
      // public System.Void set_pressedTime(System.Single value)
      // Offset: 0x8C5564
      void set_pressedTime(float value);
      // public UnityEngine.Vector2 get_pressedPosition()
      // Offset: 0x8C556C
      ::UnityEngine::Vector2 get_pressedPosition();
      // public System.Void set_pressedPosition(UnityEngine.Vector2 value)
      // Offset: 0x8C5574
      void set_pressedPosition(::UnityEngine::Vector2 value);
      // public UnityEngine.EventSystems.RaycastResult get_pressedRaycast()
      // Offset: 0x8C557C
      ::UnityEngine::EventSystems::RaycastResult get_pressedRaycast();
      // public System.Void set_pressedRaycast(UnityEngine.EventSystems.RaycastResult value)
      // Offset: 0x8C558C
      void set_pressedRaycast(::UnityEngine::EventSystems::RaycastResult value);
      // public UnityEngine.GameObject get_pressedGameObject()
      // Offset: 0x8C55A8
      ::UnityEngine::GameObject* get_pressedGameObject();
      // public System.Void set_pressedGameObject(UnityEngine.GameObject value)
      // Offset: 0x8C55B0
      void set_pressedGameObject(::UnityEngine::GameObject* value);
      // public UnityEngine.GameObject get_pressedGameObjectRaw()
      // Offset: 0x8C55B8
      ::UnityEngine::GameObject* get_pressedGameObjectRaw();
      // public System.Void set_pressedGameObjectRaw(UnityEngine.GameObject value)
      // Offset: 0x8C55C0
      void set_pressedGameObjectRaw(::UnityEngine::GameObject* value);
      // public UnityEngine.GameObject get_draggedGameObject()
      // Offset: 0x8C55C8
      ::UnityEngine::GameObject* get_draggedGameObject();
      // public System.Void set_draggedGameObject(UnityEngine.GameObject value)
      // Offset: 0x8C55D0
      void set_draggedGameObject(::UnityEngine::GameObject* value);
      // public System.Void Reset()
      // Offset: 0x8C53E4
      void Reset();
    }; // UnityEngine.XR.Interaction.Toolkit.UI.MouseButtonModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData
    #pragma pack(pop)
    static check_size<sizeof(MouseButtonModel::ImplementationData), 104 + sizeof(::UnityEngine::GameObject*)> __UnityEngine_XR_Interaction_Toolkit_UI_MouseButtonModel_ImplementationDataSizeCheck;
    static_assert(sizeof(MouseButtonModel::ImplementationData) == 0x70);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState <lastFrameDelta>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState lastFrameDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState) == 0x4);
    // private System.Boolean m_IsDown
    // Size: 0x1
    // Offset: 0x4
    bool m_IsDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsDown and: m_ImplementationData
    char __padding1[0x3] = {};
    // private UnityEngine.XR.Interaction.Toolkit.UI.MouseButtonModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData m_ImplementationData
    // Size: 0x70
    // Offset: 0x8
    ::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::ImplementationData m_ImplementationData;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::ImplementationData) == 0x70);
    public:
    // Creating value type constructor for type: MouseButtonModel
    constexpr MouseButtonModel(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState lastFrameDelta_ = {}, bool m_IsDown_ = {}, ::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::ImplementationData m_ImplementationData_ = {}) noexcept : lastFrameDelta{lastFrameDelta_}, m_IsDown{m_IsDown_}, m_ImplementationData{m_ImplementationData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState <lastFrameDelta>k__BackingField
    ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState& dyn_$lastFrameDelta$k__BackingField();
    // Get instance field reference: private System.Boolean m_IsDown
    bool& dyn_m_IsDown();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.MouseButtonModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData m_ImplementationData
    ::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::ImplementationData& dyn_m_ImplementationData();
    // public System.Boolean get_isDown()
    // Offset: 0x8C5380
    bool get_isDown();
    // public System.Void set_isDown(System.Boolean value)
    // Offset: 0x8C5388
    void set_isDown(bool value);
    // UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState get_lastFrameDelta()
    // Offset: 0x8C53C0
    ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState get_lastFrameDelta();
    // private System.Void set_lastFrameDelta(UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState value)
    // Offset: 0x8C53C8
    void set_lastFrameDelta(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState value);
    // public System.Void Reset()
    // Offset: 0x8C53D0
    void Reset();
    // public System.Void OnFrameFinished()
    // Offset: 0x8C5468
    void OnFrameFinished();
    // public System.Void CopyTo(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x8C5470
    void CopyTo(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void CopyFrom(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x8C54E0
    void CopyFrom(::UnityEngine::EventSystems::PointerEventData* eventData);
  }; // UnityEngine.XR.Interaction.Toolkit.UI.MouseButtonModel
  #pragma pack(pop)
  static check_size<sizeof(MouseButtonModel), 8 + sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::ImplementationData)> __UnityEngine_XR_Interaction_Toolkit_UI_MouseButtonModelSizeCheck;
  static_assert(sizeof(MouseButtonModel) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::ImplementationData, "UnityEngine.XR.Interaction.Toolkit.UI", "MouseButtonModel/ImplementationData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::get_isDown
// Il2CppName: get_isDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::get_isDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "get_isDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::set_isDown
// Il2CppName: set_isDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::set_isDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "set_isDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::get_lastFrameDelta
// Il2CppName: get_lastFrameDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::get_lastFrameDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "get_lastFrameDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::set_lastFrameDelta
// Il2CppName: set_lastFrameDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState)>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::set_lastFrameDelta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "ButtonDeltaState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "set_lastFrameDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::OnFrameFinished
// Il2CppName: OnFrameFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::OnFrameFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "OnFrameFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::CopyTo)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::MouseButtonModel), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
