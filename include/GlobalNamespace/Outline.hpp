// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Mode because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Outline
  class Outline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Outline);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Outline*, "", "Outline");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: Outline
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class Outline : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Outline::Mode
    struct Mode;
    // Nested type: ::GlobalNamespace::Outline::ListVector3
    class ListVector3;
    // Nested type: ::GlobalNamespace::Outline::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Outline/Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Outline/Mode OutlineAll
      static constexpr const int OutlineAll = 0;
      // Get static field: static public Outline/Mode OutlineAll
      static ::GlobalNamespace::Outline::Mode _get_OutlineAll();
      // Set static field: static public Outline/Mode OutlineAll
      static void _set_OutlineAll(::GlobalNamespace::Outline::Mode value);
      // static field const value: static public Outline/Mode OutlineVisible
      static constexpr const int OutlineVisible = 1;
      // Get static field: static public Outline/Mode OutlineVisible
      static ::GlobalNamespace::Outline::Mode _get_OutlineVisible();
      // Set static field: static public Outline/Mode OutlineVisible
      static void _set_OutlineVisible(::GlobalNamespace::Outline::Mode value);
      // static field const value: static public Outline/Mode OutlineHidden
      static constexpr const int OutlineHidden = 2;
      // Get static field: static public Outline/Mode OutlineHidden
      static ::GlobalNamespace::Outline::Mode _get_OutlineHidden();
      // Set static field: static public Outline/Mode OutlineHidden
      static void _set_OutlineHidden(::GlobalNamespace::Outline::Mode value);
      // static field const value: static public Outline/Mode OutlineAndSilhouette
      static constexpr const int OutlineAndSilhouette = 3;
      // Get static field: static public Outline/Mode OutlineAndSilhouette
      static ::GlobalNamespace::Outline::Mode _get_OutlineAndSilhouette();
      // Set static field: static public Outline/Mode OutlineAndSilhouette
      static void _set_OutlineAndSilhouette(::GlobalNamespace::Outline::Mode value);
      // static field const value: static public Outline/Mode SilhouetteOnly
      static constexpr const int SilhouetteOnly = 4;
      // Get static field: static public Outline/Mode SilhouetteOnly
      static ::GlobalNamespace::Outline::Mode _get_SilhouetteOnly();
      // Set static field: static public Outline/Mode SilhouetteOnly
      static void _set_SilhouetteOnly(::GlobalNamespace::Outline::Mode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // Outline/Mode
    #pragma pack(pop)
    static check_size<sizeof(Outline::Mode), 0 + sizeof(int)> __GlobalNamespace_Outline_ModeSizeCheck;
    static_assert(sizeof(Outline::Mode) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Outline/Mode outlineMode
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::Outline::Mode outlineMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Outline::Mode) == 0x4);
    // private UnityEngine.Color outlineColor
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Color outlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0x729AD0
    // private System.Single outlineWidth
    // Size: 0x4
    // Offset: 0x2C
    float outlineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x729B10
    // [TooltipAttribute] Offset: 0x729B10
    // private System.Boolean precomputeOutline
    // Size: 0x1
    // Offset: 0x30
    bool precomputeOutline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: precomputeOutline and: bakeKeys
    char __padding3[0x7] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Mesh> bakeKeys
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>* bakeKeys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*) == 0x8);
    // private System.Collections.Generic.List`1<Outline/ListVector3> bakeValues
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::Outline::ListVector3*>* bakeValues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::Outline::ListVector3*>*) == 0x8);
    // private UnityEngine.Renderer[] renderers
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Renderer*> renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // private UnityEngine.Material outlineMaskMaterial
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* outlineMaskMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material outlineFillMaterial
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* outlineFillMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean needsUpdate
    // Size: 0x1
    // Offset: 0x60
    bool needsUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Mesh> registeredMeshes
    static ::System::Collections::Generic::HashSet_1<::UnityEngine::Mesh*>* _get_registeredMeshes();
    // Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Mesh> registeredMeshes
    static void _set_registeredMeshes(::System::Collections::Generic::HashSet_1<::UnityEngine::Mesh*>* value);
    // Get instance field reference: private Outline/Mode outlineMode
    ::GlobalNamespace::Outline::Mode& dyn_outlineMode();
    // Get instance field reference: private UnityEngine.Color outlineColor
    ::UnityEngine::Color& dyn_outlineColor();
    // Get instance field reference: private System.Single outlineWidth
    float& dyn_outlineWidth();
    // Get instance field reference: private System.Boolean precomputeOutline
    bool& dyn_precomputeOutline();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Mesh> bakeKeys
    ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*& dyn_bakeKeys();
    // Get instance field reference: private System.Collections.Generic.List`1<Outline/ListVector3> bakeValues
    ::System::Collections::Generic::List_1<::GlobalNamespace::Outline::ListVector3*>*& dyn_bakeValues();
    // Get instance field reference: private UnityEngine.Renderer[] renderers
    ::ArrayW<::UnityEngine::Renderer*>& dyn_renderers();
    // Get instance field reference: private UnityEngine.Material outlineMaskMaterial
    ::UnityEngine::Material*& dyn_outlineMaskMaterial();
    // Get instance field reference: private UnityEngine.Material outlineFillMaterial
    ::UnityEngine::Material*& dyn_outlineFillMaterial();
    // Get instance field reference: private System.Boolean needsUpdate
    bool& dyn_needsUpdate();
    // public Outline/Mode get_OutlineMode()
    // Offset: 0x111D068
    ::GlobalNamespace::Outline::Mode get_OutlineMode();
    // public System.Void set_OutlineMode(Outline/Mode value)
    // Offset: 0x111D070
    void set_OutlineMode(::GlobalNamespace::Outline::Mode value);
    // public UnityEngine.Color get_OutlineColor()
    // Offset: 0x111D080
    ::UnityEngine::Color get_OutlineColor();
    // public System.Void set_OutlineColor(UnityEngine.Color value)
    // Offset: 0x111D08C
    void set_OutlineColor(::UnityEngine::Color value);
    // public System.Single get_OutlineWidth()
    // Offset: 0x111D0A0
    float get_OutlineWidth();
    // public System.Void set_OutlineWidth(System.Single value)
    // Offset: 0x111D0A8
    void set_OutlineWidth(float value);
    // private System.Void Awake()
    // Offset: 0x111D0B8
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x111D498
    void OnEnable();
    // public System.Void ForceUpdate()
    // Offset: 0x111D5A8
    void ForceUpdate();
    // private System.Void OnValidate()
    // Offset: 0x111D5B4
    void OnValidate();
    // private System.Void Update()
    // Offset: 0x111D824
    void Update();
    // private System.Void OnDisable()
    // Offset: 0x111D9F0
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x111DB00
    void OnDestroy();
    // private System.Void Bake()
    // Offset: 0x111D68C
    void Bake();
    // private System.Void LoadSmoothNormals()
    // Offset: 0x111D1E4
    void LoadSmoothNormals();
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> SmoothNormals(UnityEngine.Mesh mesh)
    // Offset: 0x111DB78
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* SmoothNormals(::UnityEngine::Mesh* mesh);
    // private System.Void UpdateMaterialProperties()
    // Offset: 0x111D838
    void UpdateMaterialProperties();
    // public System.Void .ctor()
    // Offset: 0x111E5A8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Outline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Outline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Outline*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x111E658
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // Outline
  #pragma pack(pop)
  static check_size<sizeof(Outline), 96 + sizeof(bool)> __GlobalNamespace_OutlineSizeCheck;
  static_assert(sizeof(Outline) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Outline::Mode, "", "Outline/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Outline::get_OutlineMode
// Il2CppName: get_OutlineMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Outline::Mode (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::get_OutlineMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "get_OutlineMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::set_OutlineMode
// Il2CppName: set_OutlineMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)(::GlobalNamespace::Outline::Mode)>(&GlobalNamespace::Outline::set_OutlineMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "Outline/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "set_OutlineMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::get_OutlineColor
// Il2CppName: get_OutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::get_OutlineColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "get_OutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::set_OutlineColor
// Il2CppName: set_OutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)(::UnityEngine::Color)>(&GlobalNamespace::Outline::set_OutlineColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "set_OutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::get_OutlineWidth
// Il2CppName: get_OutlineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::get_OutlineWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "get_OutlineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::set_OutlineWidth
// Il2CppName: set_OutlineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)(float)>(&GlobalNamespace::Outline::set_OutlineWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "set_OutlineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::ForceUpdate
// Il2CppName: ForceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::ForceUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "ForceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::Bake
// Il2CppName: Bake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::Bake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "Bake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::LoadSmoothNormals
// Il2CppName: LoadSmoothNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::LoadSmoothNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "LoadSmoothNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::SmoothNormals
// Il2CppName: SmoothNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (GlobalNamespace::Outline::*)(::UnityEngine::Mesh*)>(&GlobalNamespace::Outline::SmoothNormals)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "SmoothNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::UpdateMaterialProperties
// Il2CppName: UpdateMaterialProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Outline::*)()>(&GlobalNamespace::Outline::UpdateMaterialProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), "UpdateMaterialProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Outline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Outline::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::Outline::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Outline*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
