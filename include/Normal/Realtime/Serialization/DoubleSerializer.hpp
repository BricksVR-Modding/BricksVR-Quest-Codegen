// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Serialization.ISerializer`1
#include "Normal/Realtime/Serialization/ISerializer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: DoubleSerializer
  class DoubleSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Serialization::DoubleSerializer);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::DoubleSerializer*, "Normal.Realtime.Serialization", "DoubleSerializer");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Serialization.DoubleSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  class DoubleSerializer : public ::Il2CppObject/*, public ::Normal::Realtime::Serialization::ISerializer_1<double>*/ {
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::ISerializer_1<double>
    operator ::Normal::Realtime::Serialization::ISerializer_1<double>() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::ISerializer_1<double>*>(this);
    }
    // public System.Void .ctor()
    // Offset: 0x1DD400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DoubleSerializer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::DoubleSerializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DoubleSerializer*, creationType>()));
    }
    // public System.Int32 Length(System.Double value)
    // Offset: 0x325B80
    int Length(double value);
    // public System.Void Write(ref Normal.Realtime.Serialization.WriteStream stream, System.Double value)
    // Offset: 0x88C230
    void Write(ByRef<::Normal::Realtime::Serialization::WriteStream*> stream, double value);
    // public System.Void Read(ref Normal.Realtime.Serialization.ReadStream stream, ref System.Double value)
    // Offset: 0x88C1A0
    void Read(ByRef<::Normal::Realtime::Serialization::ReadStream*> stream, ByRef<double> value);
  }; // Normal.Realtime.Serialization.DoubleSerializer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::DoubleSerializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Serialization::DoubleSerializer::Length
// Il2CppName: Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Serialization::DoubleSerializer::*)(double)>(&Normal::Realtime::Serialization::DoubleSerializer::Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::DoubleSerializer*), "Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::DoubleSerializer::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::DoubleSerializer::*)(ByRef<::Normal::Realtime::Serialization::WriteStream*>, double)>(&Normal::Realtime::Serialization::DoubleSerializer::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::DoubleSerializer*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::DoubleSerializer::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::DoubleSerializer::*)(ByRef<::Normal::Realtime::Serialization::ReadStream*>, ByRef<double>)>(&Normal::Realtime::Serialization::DoubleSerializer::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::DoubleSerializer*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
