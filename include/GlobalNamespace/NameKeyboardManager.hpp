// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: UserSettings
  class UserSettings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: ProfanityFilter
namespace ProfanityFilter {
  // Forward declaring type: ProfanityFilter
  class ProfanityFilter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NameKeyboardManager
  class NameKeyboardManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NameKeyboardManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NameKeyboardManager*, "", "NameKeyboardManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: NameKeyboardManager
  // [TokenAttribute] Offset: FFFFFFFF
  class NameKeyboardManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public TMPro.TextMeshProUGUI nameText
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshProUGUI* nameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public UserSettings userSettings
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::UserSettings* userSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserSettings*) == 0x8);
    // public UnityEngine.GameObject mainMenu
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* mainMenu;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject miscMenu
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* miscMenu;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.String _enteredName
    // Size: 0x8
    // Offset: 0x38
    ::StringW enteredName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _defaultNameLabel
    // Size: 0x8
    // Offset: 0x40
    ::StringW defaultNameLabel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private ProfanityFilter.ProfanityFilter _profanityFilter
    // Size: 0x8
    // Offset: 0x48
    ::ProfanityFilter::ProfanityFilter* profanityFilter;
    // Field size check
    static_assert(sizeof(::ProfanityFilter::ProfanityFilter*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 MaxNameLength
    static constexpr const int MaxNameLength = 15;
    // Get static field: static private System.Int32 MaxNameLength
    static int _get_MaxNameLength();
    // Set static field: static private System.Int32 MaxNameLength
    static void _set_MaxNameLength(int value);
    // Get instance field reference: public TMPro.TextMeshProUGUI nameText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_nameText();
    // Get instance field reference: public UserSettings userSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserSettings*& dyn_userSettings();
    // Get instance field reference: public UnityEngine.GameObject mainMenu
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mainMenu();
    // Get instance field reference: public UnityEngine.GameObject miscMenu
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_miscMenu();
    // Get instance field reference: private System.String _enteredName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__enteredName();
    // Get instance field reference: private System.String _defaultNameLabel
    [[deprecated("Use field access instead!")]] ::StringW& dyn__defaultNameLabel();
    // Get instance field reference: private ProfanityFilter.ProfanityFilter _profanityFilter
    [[deprecated("Use field access instead!")]] ::ProfanityFilter::ProfanityFilter*& dyn__profanityFilter();
    // public System.Void .ctor()
    // Offset: 0x6BF740
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NameKeyboardManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NameKeyboardManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NameKeyboardManager*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x6BF440
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x6BF590
    void OnEnable();
    // public System.Void KeyPress(System.String key)
    // Offset: 0x6BF4D0
    void KeyPress(::StringW key);
    // public System.Void BackspacePress()
    // Offset: 0x6B2580
    void BackspacePress();
    // public System.Void SubmitAndReturnToMain()
    // Offset: 0x6BF600
    void SubmitAndReturnToMain();
    // public System.Void SubmitAndReturnToMisc()
    // Offset: 0x6BF6A0
    void SubmitAndReturnToMisc();
    // private System.Void UpdateNameOnUI()
    // Offset: 0x6B2740
    void UpdateNameOnUI();
  }; // NameKeyboardManager
  #pragma pack(pop)
  static check_size<sizeof(NameKeyboardManager), 72 + sizeof(::ProfanityFilter::ProfanityFilter*)> __GlobalNamespace_NameKeyboardManagerSizeCheck;
  static_assert(sizeof(NameKeyboardManager) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NameKeyboardManager::*)()>(&GlobalNamespace::NameKeyboardManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NameKeyboardManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NameKeyboardManager::*)()>(&GlobalNamespace::NameKeyboardManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NameKeyboardManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::KeyPress
// Il2CppName: KeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NameKeyboardManager::*)(::StringW)>(&GlobalNamespace::NameKeyboardManager::KeyPress)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NameKeyboardManager*), "KeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::BackspacePress
// Il2CppName: BackspacePress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NameKeyboardManager::*)()>(&GlobalNamespace::NameKeyboardManager::BackspacePress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NameKeyboardManager*), "BackspacePress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::SubmitAndReturnToMain
// Il2CppName: SubmitAndReturnToMain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NameKeyboardManager::*)()>(&GlobalNamespace::NameKeyboardManager::SubmitAndReturnToMain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NameKeyboardManager*), "SubmitAndReturnToMain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::SubmitAndReturnToMisc
// Il2CppName: SubmitAndReturnToMisc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NameKeyboardManager::*)()>(&GlobalNamespace::NameKeyboardManager::SubmitAndReturnToMisc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NameKeyboardManager*), "SubmitAndReturnToMisc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NameKeyboardManager::UpdateNameOnUI
// Il2CppName: UpdateNameOnUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NameKeyboardManager::*)()>(&GlobalNamespace::NameKeyboardManager::UpdateNameOnUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NameKeyboardManager*), "UpdateNameOnUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
