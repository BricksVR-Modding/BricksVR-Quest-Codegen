// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeAvatar
#include "Normal/Realtime/RealtimeAvatar.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeAvatar::LocalPlayer);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeAvatar::LocalPlayer*, "Normal.Realtime", "RealtimeAvatar/LocalPlayer");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeAvatar/Normal.Realtime.LocalPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class RealtimeAvatar::LocalPlayer : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.Transform root
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform head
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* head;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftHand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHand
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform root
    ::UnityEngine::Transform*& dyn_root();
    // Get instance field reference: public UnityEngine.Transform head
    ::UnityEngine::Transform*& dyn_head();
    // Get instance field reference: public UnityEngine.Transform leftHand
    ::UnityEngine::Transform*& dyn_leftHand();
    // Get instance field reference: public UnityEngine.Transform rightHand
    ::UnityEngine::Transform*& dyn_rightHand();
    // public System.Void .ctor()
    // Offset: 0xFF16F0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeAvatar::LocalPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeAvatar::LocalPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeAvatar::LocalPlayer*, creationType>()));
    }
  }; // Normal.Realtime.RealtimeAvatar/Normal.Realtime.LocalPlayer
  #pragma pack(pop)
  static check_size<sizeof(RealtimeAvatar::LocalPlayer), 40 + sizeof(::UnityEngine::Transform*)> __Normal_Realtime_RealtimeAvatar_LocalPlayerSizeCheck;
  static_assert(sizeof(RealtimeAvatar::LocalPlayer) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeAvatar::LocalPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
