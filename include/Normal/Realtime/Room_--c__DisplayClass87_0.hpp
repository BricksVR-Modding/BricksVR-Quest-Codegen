// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Room
#include "Normal/Realtime/Room.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Native
namespace Normal::Realtime::Native {
  // Forward declaring type: Matcher
  class Matcher;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Room::$$c__DisplayClass87_0);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Room::$$c__DisplayClass87_0*, "Normal.Realtime", "Room/<>c__DisplayClass87_0");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Room/Normal.Realtime.<>c__DisplayClass87_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class Room::$$c__DisplayClass87_0 : public ::Il2CppObject {
    public:
    public:
    // public Normal.Realtime.Room <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Normal::Realtime::Room* $$4__this;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room*) == 0x8);
    // public Normal.Realtime.Native.Matcher matcher
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Native::Matcher* matcher;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Native::Matcher*) == 0x8);
    // public System.String connectToRoomRequest
    // Size: 0x8
    // Offset: 0x20
    ::StringW connectToRoomRequest;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean shouldConnectAgain
    // Size: 0x1
    // Offset: 0x28
    bool shouldConnectAgain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Normal.Realtime.Room <>4__this
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Room*& dyn_$$4__this();
    // Get instance field reference: public Normal.Realtime.Native.Matcher matcher
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Native::Matcher*& dyn_matcher();
    // Get instance field reference: public System.String connectToRoomRequest
    [[deprecated("Use field access instead!")]] ::StringW& dyn_connectToRoomRequest();
    // Get instance field reference: public System.Boolean shouldConnectAgain
    [[deprecated("Use field access instead!")]] bool& dyn_shouldConnectAgain();
    // public System.Void .ctor()
    // Offset: 0x1DD400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Room::$$c__DisplayClass87_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Room::$$c__DisplayClass87_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Room::$$c__DisplayClass87_0*, creationType>()));
    }
    // System.Void <ConnectToServer_Coroutine>b__0()
    // Offset: 0x8A1F90
    void $ConnectToServer_Coroutine$b__0();
  }; // Normal.Realtime.Room/Normal.Realtime.<>c__DisplayClass87_0
  #pragma pack(pop)
  static check_size<sizeof(Room::$$c__DisplayClass87_0), 40 + sizeof(bool)> __Normal_Realtime_Room_$$c__DisplayClass87_0SizeCheck;
  static_assert(sizeof(Room::$$c__DisplayClass87_0) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Room::$$c__DisplayClass87_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Room::$$c__DisplayClass87_0::$ConnectToServer_Coroutine$b__0
// Il2CppName: <ConnectToServer_Coroutine>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::$$c__DisplayClass87_0::*)()>(&Normal::Realtime::Room::$$c__DisplayClass87_0::$ConnectToServer_Coroutine$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room::$$c__DisplayClass87_0*), "<ConnectToServer_Coroutine>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
