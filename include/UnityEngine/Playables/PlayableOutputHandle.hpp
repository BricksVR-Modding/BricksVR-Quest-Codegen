// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableOutputHandle
  struct PlayableOutputHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Playables::PlayableOutputHandle, "UnityEngine.Playables", "PlayableOutputHandle");
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Playables.PlayableOutputHandle
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: DC110
  // [NativeHeaderAttribute] Offset: DC110
  // [NativeHeaderAttribute] Offset: DC110
  // [UsedByNativeCodeAttribute] Offset: DC110
  struct PlayableOutputHandle/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Playables::PlayableOutputHandle>*/ {
    public:
    public:
    // System.IntPtr m_Handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_Handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.UInt32 m_Version
    // Size: 0x4
    // Offset: 0x8
    uint m_Version;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: PlayableOutputHandle
    constexpr PlayableOutputHandle(::System::IntPtr m_Handle_ = {}, uint m_Version_ = {}) noexcept : m_Handle{m_Handle_}, m_Version{m_Version_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Playables::PlayableOutputHandle>
    operator ::System::IEquatable_1<::UnityEngine::Playables::PlayableOutputHandle>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Playables::PlayableOutputHandle>*>(this);
    }
    // Get static field: static private readonly UnityEngine.Playables.PlayableOutputHandle m_Null
    static ::UnityEngine::Playables::PlayableOutputHandle _get_m_Null();
    // Set static field: static private readonly UnityEngine.Playables.PlayableOutputHandle m_Null
    static void _set_m_Null(::UnityEngine::Playables::PlayableOutputHandle value);
    // Get instance field reference: System.IntPtr m_Handle
    [[deprecated]] ::System::IntPtr& dyn_m_Handle();
    // Get instance field reference: System.UInt32 m_Version
    [[deprecated]] uint& dyn_m_Version();
    // static public UnityEngine.Playables.PlayableOutputHandle get_Null()
    // Offset: 0x973AA0
    static ::UnityEngine::Playables::PlayableOutputHandle get_Null();
    // static private System.Void .cctor()
    // Offset: 0x973A60
    static void _cctor();
    // public System.Boolean Equals(UnityEngine.Playables.PlayableOutputHandle other)
    // Offset: 0x9738D0
    bool Equals(::UnityEngine::Playables::PlayableOutputHandle other);
    // static System.Boolean CompareVersion(UnityEngine.Playables.PlayableOutputHandle lhs, UnityEngine.Playables.PlayableOutputHandle rhs)
    // Offset: 0x973400
    static bool CompareVersion(::UnityEngine::Playables::PlayableOutputHandle lhs, ::UnityEngine::Playables::PlayableOutputHandle rhs);
    // public override System.Int32 GetHashCode()
    // Offset: 0x9735F0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object p)
    // Offset: 0x973970
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object p)
    bool Equals(::Il2CppObject* p);
  }; // UnityEngine.Playables.PlayableOutputHandle
  #pragma pack(pop)
  static check_size<sizeof(PlayableOutputHandle), 8 + sizeof(uint)> __UnityEngine_Playables_PlayableOutputHandleSizeCheck;
  static_assert(sizeof(PlayableOutputHandle) == 0xC);
  // static public System.Boolean op_Equality(UnityEngine.Playables.PlayableOutputHandle lhs, UnityEngine.Playables.PlayableOutputHandle rhs)
  // Offset: 0x973B10
  bool operator ==(const ::UnityEngine::Playables::PlayableOutputHandle& lhs, const ::UnityEngine::Playables::PlayableOutputHandle& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::PlayableOutputHandle (*)()>(&UnityEngine::Playables::PlayableOutputHandle::get_Null)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Playables::PlayableOutputHandle), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Playables::PlayableOutputHandle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Playables::PlayableOutputHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Playables::PlayableOutputHandle::*)(::UnityEngine::Playables::PlayableOutputHandle)>(&UnityEngine::Playables::PlayableOutputHandle::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableOutputHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Playables::PlayableOutputHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::CompareVersion
// Il2CppName: CompareVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Playables::PlayableOutputHandle, ::UnityEngine::Playables::PlayableOutputHandle)>(&UnityEngine::Playables::PlayableOutputHandle::CompareVersion)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableOutputHandle")->byval_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableOutputHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Playables::PlayableOutputHandle), "CompareVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Playables::PlayableOutputHandle::*)()>(&UnityEngine::Playables::PlayableOutputHandle::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Playables::PlayableOutputHandle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Playables::PlayableOutputHandle::*)(::Il2CppObject*)>(&UnityEngine::Playables::PlayableOutputHandle::Equals)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Playables::PlayableOutputHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
