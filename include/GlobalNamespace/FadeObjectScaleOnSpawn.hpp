// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FadeObjectScaleOnSpawn
  class FadeObjectScaleOnSpawn;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FadeObjectScaleOnSpawn);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FadeObjectScaleOnSpawn*, "", "FadeObjectScaleOnSpawn");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: FadeObjectScaleOnSpawn
  // [TokenAttribute] Offset: FFFFFFFF
  class FadeObjectScaleOnSpawn : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.Vector3 _initialScale
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 initialScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: initialScale and: t
    char __padding0[0x4] = {};
    // private UnityEngine.Transform _t
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* t;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _timeStartedFading
    // Size: 0x4
    // Offset: 0x30
    float timeStartedFading;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: timeStartedFading and: objectToScale
    char __padding2[0x4] = {};
    // public UnityEngine.GameObject objectToScale
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* objectToScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean _fadeBackwards
    // Size: 0x1
    // Offset: 0x40
    bool fadeBackwards;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Single _fadeDuration
    static float _get__fadeDuration();
    // Set static field: static private readonly System.Single _fadeDuration
    static void _set__fadeDuration(float value);
    // Get static field: static private readonly UnityEngine.Vector3 ScaleToStartAt
    static ::UnityEngine::Vector3 _get_ScaleToStartAt();
    // Set static field: static private readonly UnityEngine.Vector3 ScaleToStartAt
    static void _set_ScaleToStartAt(::UnityEngine::Vector3 value);
    // Get instance field reference: private UnityEngine.Vector3 _initialScale
    ::UnityEngine::Vector3& dyn__initialScale();
    // Get instance field reference: private UnityEngine.Transform _t
    ::UnityEngine::Transform*& dyn__t();
    // Get instance field reference: private System.Single _timeStartedFading
    float& dyn__timeStartedFading();
    // Get instance field reference: public UnityEngine.GameObject objectToScale
    ::UnityEngine::GameObject*& dyn_objectToScale();
    // Get instance field reference: private System.Boolean _fadeBackwards
    bool& dyn__fadeBackwards();
    // private System.Void OnEnable()
    // Offset: 0x10A5E40
    void OnEnable();
    // public System.Void SetBackwardsFade()
    // Offset: 0x10A5FE8
    void SetBackwardsFade();
    // private System.Void Update()
    // Offset: 0x10A5FF4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x10A61A0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FadeObjectScaleOnSpawn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FadeObjectScaleOnSpawn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FadeObjectScaleOnSpawn*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x10A61A8
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // FadeObjectScaleOnSpawn
  #pragma pack(pop)
  static check_size<sizeof(FadeObjectScaleOnSpawn), 64 + sizeof(bool)> __GlobalNamespace_FadeObjectScaleOnSpawnSizeCheck;
  static_assert(sizeof(FadeObjectScaleOnSpawn) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FadeObjectScaleOnSpawn::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeObjectScaleOnSpawn::*)()>(&GlobalNamespace::FadeObjectScaleOnSpawn::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeObjectScaleOnSpawn*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeObjectScaleOnSpawn::SetBackwardsFade
// Il2CppName: SetBackwardsFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeObjectScaleOnSpawn::*)()>(&GlobalNamespace::FadeObjectScaleOnSpawn::SetBackwardsFade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeObjectScaleOnSpawn*), "SetBackwardsFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeObjectScaleOnSpawn::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FadeObjectScaleOnSpawn::*)()>(&GlobalNamespace::FadeObjectScaleOnSpawn::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeObjectScaleOnSpawn*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FadeObjectScaleOnSpawn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FadeObjectScaleOnSpawn::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FadeObjectScaleOnSpawn::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FadeObjectScaleOnSpawn*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
