// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.Data.ConnectionInfo
#include "Steamworks/Data/ConnectionInfo.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: IConnectionManager
  class IConnectionManager;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: ConnectionManager
  class ConnectionManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::ConnectionManager);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::ConnectionManager*, "Steamworks", "ConnectionManager");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x2D2
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.ConnectionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ConnectionManager : public ::Il2CppObject {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0xBBA20
    // private Steamworks.IConnectionManager <Interface>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Steamworks::IConnectionManager* Interface;
    // Field size check
    static_assert(sizeof(::Steamworks::IConnectionManager*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0xBB920
    // private Steamworks.Data.ConnectionInfo <ConnectionInfo>k__BackingField
    // Size: 0xC8
    // Offset: 0x18
    ::Steamworks::Data::ConnectionInfo ConnectionInfo;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::ConnectionInfo) == 0xC8);
    // Padding between fields: ConnectionInfo and: Connected
    char __padding1[0x1F0] = {};
    // public System.Boolean Connected
    // Size: 0x1
    // Offset: 0x2D0
    bool Connected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Connecting
    // Size: 0x1
    // Offset: 0x2D1
    bool Connecting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Steamworks.IConnectionManager <Interface>k__BackingField
    [[deprecated("Use field access instead!")]] ::Steamworks::IConnectionManager*& dyn_$Interface$k__BackingField();
    // Get instance field reference: private Steamworks.Data.ConnectionInfo <ConnectionInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::Steamworks::Data::ConnectionInfo& dyn_$ConnectionInfo$k__BackingField();
    // Get instance field reference: public System.Boolean Connected
    [[deprecated("Use field access instead!")]] bool& dyn_Connected();
    // Get instance field reference: public System.Boolean Connecting
    [[deprecated("Use field access instead!")]] bool& dyn_Connecting();
    // public Steamworks.IConnectionManager get_Interface()
    // Offset: 0x1E1920
    ::Steamworks::IConnectionManager* get_Interface();
    // System.Void set_ConnectionInfo(Steamworks.Data.ConnectionInfo value)
    // Offset: 0x45D330
    void set_ConnectionInfo(::Steamworks::Data::ConnectionInfo value);
    // public System.Void OnConnectionChanged(Steamworks.Data.ConnectionInfo info)
    // Offset: 0x45CFA0
    void OnConnectionChanged(::Steamworks::Data::ConnectionInfo info);
    // public System.Void OnConnecting(Steamworks.Data.ConnectionInfo info)
    // Offset: 0x45CEB0
    void OnConnecting(::Steamworks::Data::ConnectionInfo info);
    // public System.Void OnConnected(Steamworks.Data.ConnectionInfo info)
    // Offset: 0x45CDB0
    void OnConnected(::Steamworks::Data::ConnectionInfo info);
    // public System.Void OnDisconnected(Steamworks.Data.ConnectionInfo info)
    // Offset: 0x45D230
    void OnDisconnected(::Steamworks::Data::ConnectionInfo info);
  }; // Steamworks.ConnectionManager
  #pragma pack(pop)
  static check_size<sizeof(ConnectionManager), 721 + sizeof(bool)> __Steamworks_ConnectionManagerSizeCheck;
  static_assert(sizeof(ConnectionManager) == 0x2D2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::ConnectionManager::get_Interface
// Il2CppName: get_Interface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::IConnectionManager* (Steamworks::ConnectionManager::*)()>(&Steamworks::ConnectionManager::get_Interface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ConnectionManager*), "get_Interface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ConnectionManager::set_ConnectionInfo
// Il2CppName: set_ConnectionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::ConnectionManager::*)(::Steamworks::Data::ConnectionInfo)>(&Steamworks::ConnectionManager::set_ConnectionInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ConnectionManager*), "set_ConnectionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Steamworks::ConnectionManager::OnConnectionChanged
// Il2CppName: OnConnectionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::ConnectionManager::*)(::Steamworks::Data::ConnectionInfo)>(&Steamworks::ConnectionManager::OnConnectionChanged)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ConnectionManager*), "OnConnectionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: Steamworks::ConnectionManager::OnConnecting
// Il2CppName: OnConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::ConnectionManager::*)(::Steamworks::Data::ConnectionInfo)>(&Steamworks::ConnectionManager::OnConnecting)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ConnectionManager*), "OnConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: Steamworks::ConnectionManager::OnConnected
// Il2CppName: OnConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::ConnectionManager::*)(::Steamworks::Data::ConnectionInfo)>(&Steamworks::ConnectionManager::OnConnected)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ConnectionManager*), "OnConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: Steamworks::ConnectionManager::OnDisconnected
// Il2CppName: OnDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::ConnectionManager::*)(::Steamworks::Data::ConnectionInfo)>(&Steamworks::ConnectionManager::OnDisconnected)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "ConnectionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ConnectionManager*), "OnDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
