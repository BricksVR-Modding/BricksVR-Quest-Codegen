// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Forward declaring type: Extensions
  class Extensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Utility::Extensions);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Utility::Extensions*, "Normal.Utility", "Extensions");
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Utility.Extensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Extensions : public ::Il2CppObject {
    public:
    // static public T AddComponentIfNeeded(UnityEngine.GameObject gameObject)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T AddComponentIfNeeded(::UnityEngine::GameObject* gameObject) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Utility::Extensions::AddComponentIfNeeded");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Utility", "Extensions", "AddComponentIfNeeded", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, gameObject);
    }
    // static public T GetComponentInParent(UnityEngine.Component obj, System.Boolean includeInactive)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T GetComponentInParent(::UnityEngine::Component* obj, bool includeInactive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Utility::Extensions::GetComponentInParent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Utility", "Extensions", "GetComponentInParent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(includeInactive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, obj, includeInactive);
    }
  }; // Normal.Utility.Extensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Utility::Extensions::AddComponentIfNeeded
// Il2CppName: AddComponentIfNeeded
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Normal::Utility::Extensions::GetComponentInParent
// Il2CppName: GetComponentInParent
// Cannot write MetadataGetter for generic methods!
