// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeComponent
#include "Normal/Realtime/RealtimeComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HandGestureModel
  class HandGestureModel;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ChangeHandGesture
  class ChangeHandGesture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ChangeHandGesture);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ChangeHandGesture*, "", "ChangeHandGesture");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: ChangeHandGesture
  // [TokenAttribute] Offset: FFFFFFFF
  class ChangeHandGesture : public ::Normal::Realtime::RealtimeComponent {
    public:
    // Writing base type padding for base size: 0x39 to desired offset: 0x40
    char ___base_padding[0x7] = {};
    public:
    // public UnityEngine.GameObject handAnimatorObject
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* handAnimatorObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private HandGestureModel _model
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::HandGestureModel* model;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandGestureModel*) == 0x8);
    // private UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private System.Int32 animLayerIndexThumb
    // Size: 0x4
    // Offset: 0x58
    int animLayerIndexThumb;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 animLayerIndexPoint
    // Size: 0x4
    // Offset: 0x5C
    int animLayerIndexPoint;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 animParamIndexFlex
    // Size: 0x4
    // Offset: 0x60
    int animParamIndexFlex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 animParamIndexPose
    // Size: 0x4
    // Offset: 0x64
    int animParamIndexPose;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String animParamPinch
    // Size: 0x8
    // Offset: 0x68
    ::StringW animParamPinch;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject handAnimatorObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_handAnimatorObject();
    // Get instance field reference: private HandGestureModel _model
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HandGestureModel*& dyn__model();
    // Get instance field reference: private UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: private System.Int32 animLayerIndexThumb
    [[deprecated("Use field access instead!")]] int& dyn_animLayerIndexThumb();
    // Get instance field reference: private System.Int32 animLayerIndexPoint
    [[deprecated("Use field access instead!")]] int& dyn_animLayerIndexPoint();
    // Get instance field reference: private System.Int32 animParamIndexFlex
    [[deprecated("Use field access instead!")]] int& dyn_animParamIndexFlex();
    // Get instance field reference: private System.Int32 animParamIndexPose
    [[deprecated("Use field access instead!")]] int& dyn_animParamIndexPose();
    // Get instance field reference: private System.String animParamPinch
    [[deprecated("Use field access instead!")]] ::StringW& dyn_animParamPinch();
    // private System.Void set_model(HandGestureModel value)
    // Offset: 0x6AEAA0
    void set_model(::GlobalNamespace::HandGestureModel* value);
    // public System.Void .ctor()
    // Offset: 0x6AEA50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChangeHandGesture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChangeHandGesture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChangeHandGesture*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x6AE590
    void Start();
    // private System.Void HandPoseIdDidChange(HandGestureModel model, System.Int32 value)
    // Offset: 0x6AE110
    void HandPoseIdDidChange(::GlobalNamespace::HandGestureModel* model, int value);
    // private System.Void FlexDidChange(HandGestureModel model, System.Single value)
    // Offset: 0x6AE080
    void FlexDidChange(::GlobalNamespace::HandGestureModel* model, float value);
    // private System.Void PointDidChange(HandGestureModel model, System.Single value)
    // Offset: 0x6AE240
    void PointDidChange(::GlobalNamespace::HandGestureModel* model, float value);
    // private System.Void ThumbsUpDidChange(HandGestureModel model, System.Single value)
    // Offset: 0x6AE650
    void ThumbsUpDidChange(::GlobalNamespace::HandGestureModel* model, float value);
    // private System.Void PinchDidChange(HandGestureModel model, System.Single value)
    // Offset: 0x6AE1A0
    void PinchDidChange(::GlobalNamespace::HandGestureModel* model, float value);
    // private System.Void UpdateHandAnimator()
    // Offset: 0x6AE6E0
    void UpdateHandAnimator();
    // public System.Void SetHandPoseId(System.Int32 value)
    // Offset: 0x6AE360
    void SetHandPoseId(int value);
    // public System.Void SetFlex(System.Single value)
    // Offset: 0x6AE2D0
    void SetFlex(float value);
    // public System.Void SetPoint(System.Single value)
    // Offset: 0x6AE470
    void SetPoint(float value);
    // public System.Void SetThumbsUp(System.Single value)
    // Offset: 0x6AE500
    void SetThumbsUp(float value);
    // public System.Void SetPinch(System.Single value)
    // Offset: 0x6AE3E0
    void SetPinch(float value);
  }; // ChangeHandGesture
  #pragma pack(pop)
  static check_size<sizeof(ChangeHandGesture), 104 + sizeof(::StringW)> __GlobalNamespace_ChangeHandGestureSizeCheck;
  static_assert(sizeof(ChangeHandGesture) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::set_model
// Il2CppName: set_model
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(::GlobalNamespace::HandGestureModel*)>(&GlobalNamespace::ChangeHandGesture::set_model)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "HandGestureModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "set_model", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)()>(&GlobalNamespace::ChangeHandGesture::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::HandPoseIdDidChange
// Il2CppName: HandPoseIdDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(::GlobalNamespace::HandGestureModel*, int)>(&GlobalNamespace::ChangeHandGesture::HandPoseIdDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "HandGestureModel")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "HandPoseIdDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::FlexDidChange
// Il2CppName: FlexDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(::GlobalNamespace::HandGestureModel*, float)>(&GlobalNamespace::ChangeHandGesture::FlexDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "HandGestureModel")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "FlexDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::PointDidChange
// Il2CppName: PointDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(::GlobalNamespace::HandGestureModel*, float)>(&GlobalNamespace::ChangeHandGesture::PointDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "HandGestureModel")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "PointDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::ThumbsUpDidChange
// Il2CppName: ThumbsUpDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(::GlobalNamespace::HandGestureModel*, float)>(&GlobalNamespace::ChangeHandGesture::ThumbsUpDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "HandGestureModel")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "ThumbsUpDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::PinchDidChange
// Il2CppName: PinchDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(::GlobalNamespace::HandGestureModel*, float)>(&GlobalNamespace::ChangeHandGesture::PinchDidChange)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("", "HandGestureModel")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "PinchDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::UpdateHandAnimator
// Il2CppName: UpdateHandAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)()>(&GlobalNamespace::ChangeHandGesture::UpdateHandAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "UpdateHandAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::SetHandPoseId
// Il2CppName: SetHandPoseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(int)>(&GlobalNamespace::ChangeHandGesture::SetHandPoseId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "SetHandPoseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::SetFlex
// Il2CppName: SetFlex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(float)>(&GlobalNamespace::ChangeHandGesture::SetFlex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "SetFlex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::SetPoint
// Il2CppName: SetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(float)>(&GlobalNamespace::ChangeHandGesture::SetPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "SetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::SetThumbsUp
// Il2CppName: SetThumbsUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(float)>(&GlobalNamespace::ChangeHandGesture::SetThumbsUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "SetThumbsUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChangeHandGesture::SetPinch
// Il2CppName: SetPinch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChangeHandGesture::*)(float)>(&GlobalNamespace::ChangeHandGesture::SetPinch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChangeHandGesture*), "SetPinch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
