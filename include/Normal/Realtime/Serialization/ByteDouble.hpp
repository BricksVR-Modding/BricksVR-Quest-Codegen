// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: ByteDouble
  struct ByteDouble;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::ByteDouble, "Normal.Realtime.Serialization", "ByteDouble");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.Serialization.ByteDouble
  // [TokenAttribute] Offset: FFFFFFFF
  struct ByteDouble/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Double value
    // Size: 0x8
    // Offset: 0x0
    double value;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.UInt64 bytes
    // Size: 0x8
    // Offset: 0x0
    uint64_t bytes;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: ByteDouble
    constexpr ByteDouble(double value_ = {}, uint64_t bytes_ = {}) noexcept : value{value_}, bytes{bytes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Double value
    [[deprecated("Use field access instead!")]] double& dyn_value();
    // Get instance field reference: private System.UInt64 bytes
    [[deprecated("Use field access instead!")]] uint64_t& dyn_bytes();
    // static public System.Double Reinterpret(System.UInt64 value)
    // Offset: 0x570420
    static double Reinterpret(uint64_t value);
    // static public System.UInt64 Reinterpret(System.Double value)
    // Offset: 0x570190
    static uint64_t Reinterpret(double value);
  }; // Normal.Realtime.Serialization.ByteDouble
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::ByteDouble::Reinterpret
// Il2CppName: Reinterpret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(uint64_t)>(&Normal::Realtime::Serialization::ByteDouble::Reinterpret)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::ByteDouble), "Reinterpret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::ByteDouble::Reinterpret
// Il2CppName: Reinterpret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(double)>(&Normal::Realtime::Serialization::ByteDouble::Reinterpret)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::ByteDouble), "Reinterpret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
