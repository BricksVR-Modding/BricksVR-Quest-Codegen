// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.IProperty`1
#include "Normal/Realtime/IProperty_1.hpp"
// Including type: Normal.Realtime.PropertySerializer`1
#include "Normal/Realtime/PropertySerializer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: UnreliableProperty`1<T>
  template<typename T>
  class UnreliableProperty_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Normal::Realtime::UnreliableProperty_1, "Normal.Realtime", "UnreliableProperty`1");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Normal.Realtime.UnreliableProperty`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class UnreliableProperty_1 : public ::Il2CppObject/*, public ::Normal::Realtime::IProperty_1<T>*/ {
    public:
    public:
    // private readonly Normal.Realtime.PropertySerializer`1<T> serializer
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Normal::Realtime::PropertySerializer_1<T> serializer;
    // private readonly System.Collections.Generic.IEqualityComparer`1<T> comparer
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEqualityComparer_1<T>* comparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEqualityComparer_1<T>*) == 0x8);
    // private T _value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T value;
    // private System.Boolean <dirty>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool dirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::IProperty_1<T>
    operator ::Normal::Realtime::IProperty_1<T>() noexcept {
      return *reinterpret_cast<::Normal::Realtime::IProperty_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Normal.Realtime.PropertySerializer`1<T> serializer
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::PropertySerializer_1<T>& dyn_serializer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::dyn_serializer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "serializer"))->offset;
      return *reinterpret_cast<::Normal::Realtime::PropertySerializer_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.IEqualityComparer`1<T> comparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEqualityComparer_1<T>*& dyn_comparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::dyn_comparer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "comparer"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _value
    [[deprecated("Use field access instead!")]] T& dyn__value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::dyn__value");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <dirty>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$dirty$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::dyn_$dirty$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<dirty>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::UnreliableProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void set_value(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_value(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::set_value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_dirty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_dirty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::get_dirty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_dirty(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_dirty(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::set_dirty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.UInt32 propertyID, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnreliableProperty_1<T>* New_ctor(uint propertyID, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnreliableProperty_1<T>*, creationType>(propertyID, value)));
    }
    // private System.Boolean ShouldWrite(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ShouldWrite(::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::ShouldWrite");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, context);
    }
    // public System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::WriteLength");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::UnreliableProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, context);
    }
    // public System.Boolean Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::Write");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::UnreliableProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stream, context);
    }
    // public System.Boolean Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::UnreliableProperty_1::Read");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Normal::Realtime::UnreliableProperty_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stream, context);
    }
  }; // Normal.Realtime.UnreliableProperty`1
  // Could not write size check! Type: Normal.Realtime.UnreliableProperty`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
