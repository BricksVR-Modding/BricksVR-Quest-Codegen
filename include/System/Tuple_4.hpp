// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: Tuple`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Tuple_4;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Tuple_4, "System", "Tuple`4");
// Type namespace: System
namespace System {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Tuple`4
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T1, typename T2, typename T3, typename T4>
  class Tuple_4 : public ::Il2CppObject {
    public:
    public:
    // private readonly T1 m_Item1
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T1 m_Item1;
    // private readonly T2 m_Item2
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T2 m_Item2;
    // private readonly T3 m_Item3
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T3 m_Item3;
    // private readonly T4 m_Item4
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T4 m_Item4;
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly T1 m_Item1
    [[deprecated]] T1& dyn_m_Item1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::dyn_m_Item1");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Item1"))->offset;
      return *reinterpret_cast<T1*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T2 m_Item2
    [[deprecated]] T2& dyn_m_Item2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::dyn_m_Item2");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Item2"))->offset;
      return *reinterpret_cast<T2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T3 m_Item3
    [[deprecated]] T3& dyn_m_Item3() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::dyn_m_Item3");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Item3"))->offset;
      return *reinterpret_cast<T3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T4 m_Item4
    [[deprecated]] T4& dyn_m_Item4() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::dyn_m_Item4");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Item4"))->offset;
      return *reinterpret_cast<T4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T1 get_Item1()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T1 get_Item1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::get_Item1");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T1, false>(this, ___internal__method);
    }
    // public T2 get_Item2()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T2 get_Item2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::get_Item2");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T2, false>(this, ___internal__method);
    }
    // public T3 get_Item3()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T3 get_Item3() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::get_Item3");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T3, false>(this, ___internal__method);
    }
    // public T4 get_Item4()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T4 get_Item4() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Tuple_4::get_Item4");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T4, false>(this, ___internal__method);
    }
  }; // System.Tuple`4
  // Could not write size check! Type: System.Tuple`4 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
