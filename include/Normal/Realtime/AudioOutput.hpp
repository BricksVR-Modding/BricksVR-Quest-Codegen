// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
}
// Forward declaring namespace: Normal::Realtime::Native
namespace Normal::Realtime::Native {
  // Forward declaring type: AudioOutputStream
  class AudioOutputStream;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: AudioOutput
  class AudioOutput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::AudioOutput);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::AudioOutput*, "Normal.Realtime", "AudioOutput");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.AudioOutput
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioOutput : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Normal::Realtime::AudioOutput::$$c
    class $$c;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Boolean _mute
    // Size: 0x1
    // Offset: 0x18
    bool mute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mute and: dbLevel
    char __padding0[0x3] = {};
    // private System.Single _dbLevel
    // Size: 0x4
    // Offset: 0x1C
    float dbLevel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _systemSampleRate
    // Size: 0x4
    // Offset: 0x20
    int systemSampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: systemSampleRate and: audioOutputStream
    char __padding2[0x4] = {};
    // private Normal.Realtime.Native.AudioOutputStream _audioOutputStream
    // Size: 0x8
    // Offset: 0x28
    ::Normal::Realtime::Native::AudioOutputStream* audioOutputStream;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Native::AudioOutputStream*) == 0x8);
    // private System.Int32 _audioOutputStreamChannels
    // Size: 0x4
    // Offset: 0x30
    int audioOutputStreamChannels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: audioOutputStreamChannels and: audioClip
    char __padding4[0x4] = {};
    // private UnityEngine.AudioClip _audioClip
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Single[] _audioData
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> audioData;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean _mute
    bool& dyn__mute();
    // Get instance field reference: private System.Single _dbLevel
    float& dyn__dbLevel();
    // Get instance field reference: private System.Int32 _systemSampleRate
    int& dyn__systemSampleRate();
    // Get instance field reference: private Normal.Realtime.Native.AudioOutputStream _audioOutputStream
    ::Normal::Realtime::Native::AudioOutputStream*& dyn__audioOutputStream();
    // Get instance field reference: private System.Int32 _audioOutputStreamChannels
    int& dyn__audioOutputStreamChannels();
    // Get instance field reference: private UnityEngine.AudioClip _audioClip
    ::UnityEngine::AudioClip*& dyn__audioClip();
    // Get instance field reference: private System.Single[] _audioData
    ::ArrayW<float>& dyn__audioData();
    // public System.Boolean get_mute()
    // Offset: 0xFEDBA8
    bool get_mute();
    // public System.Void set_mute(System.Boolean value)
    // Offset: 0xFEDBCC
    void set_mute(bool value);
    // public System.Single get_dbLevel()
    // Offset: 0xFEDBF8
    float get_dbLevel();
    // private System.Void Awake()
    // Offset: 0xFEDC1C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xFEDC44
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0xFEDDBC
    void OnEnable();
    // public System.Void StartWithAudioOutputStream(Normal.Realtime.Native.AudioOutputStream audioOutputStream)
    // Offset: 0xFEDEBC
    void StartWithAudioOutputStream(::Normal::Realtime::Native::AudioOutputStream* audioOutputStream);
    // public System.Void Stop()
    // Offset: 0xFEDC48
    void Stop();
    // private System.Void OnAudioFilterRead(System.Single[] data, System.Int32 channels)
    // Offset: 0xFEE108
    void OnAudioFilterRead(::ArrayW<float> data, int channels);
    // public System.Void .ctor()
    // Offset: 0xFEE378
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioOutput* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::AudioOutput::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioOutput*, creationType>()));
    }
  }; // Normal.Realtime.AudioOutput
  #pragma pack(pop)
  static check_size<sizeof(AudioOutput), 64 + sizeof(::ArrayW<float>)> __Normal_Realtime_AudioOutputSizeCheck;
  static_assert(sizeof(AudioOutput) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::get_mute
// Il2CppName: get_mute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::AudioOutput::*)()>(&Normal::Realtime::AudioOutput::get_mute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "get_mute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::set_mute
// Il2CppName: set_mute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioOutput::*)(bool)>(&Normal::Realtime::AudioOutput::set_mute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "set_mute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::get_dbLevel
// Il2CppName: get_dbLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Normal::Realtime::AudioOutput::*)()>(&Normal::Realtime::AudioOutput::get_dbLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "get_dbLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioOutput::*)()>(&Normal::Realtime::AudioOutput::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioOutput::*)()>(&Normal::Realtime::AudioOutput::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioOutput::*)()>(&Normal::Realtime::AudioOutput::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::StartWithAudioOutputStream
// Il2CppName: StartWithAudioOutputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioOutput::*)(::Normal::Realtime::Native::AudioOutputStream*)>(&Normal::Realtime::AudioOutput::StartWithAudioOutputStream)> {
  static const MethodInfo* get() {
    static auto* audioOutputStream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "AudioOutputStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "StartWithAudioOutputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioOutputStream});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioOutput::*)()>(&Normal::Realtime::AudioOutput::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::AudioOutput::*)(::ArrayW<float>, int)>(&Normal::Realtime::AudioOutput::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::AudioOutput*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channels});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::AudioOutput::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
