// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Serialization.IModel
#include "Normal/Realtime/Serialization/IModel.hpp"
// Including type: Normal.Realtime.RealtimeModelEvent
#include "Normal/Realtime/RealtimeModelEvent.hpp"
// Including type: Normal.Realtime.Serialization.StreamContext
#include "Normal/Realtime/Serialization/StreamContext.hpp"
// Including type: Normal.Realtime.Serialization.MetaModel
#include "Normal/Realtime/Serialization/MetaModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: Room
  class Room;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeModel
  class RealtimeModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeModel);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeModel*, "Normal.Realtime", "RealtimeModel");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeModel
  // [TokenAttribute] Offset: FFFFFFFF
  class RealtimeModel : public ::Il2CppObject/*, public ::Normal::Realtime::Serialization::IModel*/ {
    public:
    public:
    // private System.Boolean <isFreshModel>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool isFreshModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFreshModel and: metaModel
    char __padding0[0x7] = {};
    // private Normal.Realtime.Serialization.MetaModel _metaModel
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Serialization::MetaModel* metaModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::MetaModel*) == 0x8);
    // private Normal.Realtime.RealtimeModel _parent
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::RealtimeModel* parent;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeModel*) == 0x8);
    // private Normal.Realtime.RealtimeModel[] _children
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Normal::Realtime::RealtimeModel*> children;
    // Field size check
    static_assert(sizeof(::ArrayW<::Normal::Realtime::RealtimeModel*>) == 0x8);
    // private Normal.Realtime.Room _room
    // Size: 0x8
    // Offset: 0x30
    ::Normal::Realtime::Room* room;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Normal.Realtime.RealtimeModelEvent,System.Action> _callbacks
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::Normal::Realtime::RealtimeModelEvent, ::System::Action*>* callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Normal::Realtime::RealtimeModelEvent, ::System::Action*>*) == 0x8);
    // private Normal.Realtime.Serialization.StreamContext _cachedReliableContext
    // Size: 0x20
    // Offset: 0x40
    ::Normal::Realtime::Serialization::StreamContext cachedReliableContext;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::StreamContext) == 0x20);
    // private System.Int32 _cachedReliableLength
    // Size: 0x4
    // Offset: 0x60
    int cachedReliableLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cachedReliableLength and: cachedUnreliableContext
    char __padding7[0x4] = {};
    // private Normal.Realtime.Serialization.StreamContext _cachedUnreliableContext
    // Size: 0x20
    // Offset: 0x68
    ::Normal::Realtime::Serialization::StreamContext cachedUnreliableContext;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::StreamContext) == 0x20);
    // private System.Int32 _cachedUnreliableLength
    // Size: 0x4
    // Offset: 0x88
    int cachedUnreliableLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::IModel
    operator ::Normal::Realtime::Serialization::IModel() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::IModel*>(this);
    }
    // Get instance field reference: private System.Boolean <isFreshModel>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isFreshModel$k__BackingField();
    // Get instance field reference: private Normal.Realtime.Serialization.MetaModel _metaModel
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::MetaModel*& dyn__metaModel();
    // Get instance field reference: private Normal.Realtime.RealtimeModel _parent
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::RealtimeModel*& dyn__parent();
    // Get instance field reference: private Normal.Realtime.RealtimeModel[] _children
    [[deprecated("Use field access instead!")]] ::ArrayW<::Normal::Realtime::RealtimeModel*>& dyn__children();
    // Get instance field reference: private Normal.Realtime.Room _room
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Room*& dyn__room();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Normal.Realtime.RealtimeModelEvent,System.Action> _callbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Normal::Realtime::RealtimeModelEvent, ::System::Action*>*& dyn__callbacks();
    // Get instance field reference: private Normal.Realtime.Serialization.StreamContext _cachedReliableContext
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::StreamContext& dyn__cachedReliableContext();
    // Get instance field reference: private System.Int32 _cachedReliableLength
    [[deprecated("Use field access instead!")]] int& dyn__cachedReliableLength();
    // Get instance field reference: private Normal.Realtime.Serialization.StreamContext _cachedUnreliableContext
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Serialization::StreamContext& dyn__cachedUnreliableContext();
    // Get instance field reference: private System.Int32 _cachedUnreliableLength
    [[deprecated("Use field access instead!")]] int& dyn__cachedUnreliableLength();
    // public System.Boolean get_isFreshModel()
    // Offset: 0x245FD0
    bool get_isFreshModel();
    // private System.Void set_isFreshModel(System.Boolean value)
    // Offset: 0x2F6C00
    void set_isFreshModel(bool value);
    // public System.Boolean get_hasMetaModel()
    // Offset: 0x5839B0
    bool get_hasMetaModel();
    // public System.Boolean get_preventOwnershipTakeover()
    // Offset: 0x8C12E0
    bool get_preventOwnershipTakeover();
    // public System.Void set_preventOwnershipTakeover(System.Boolean value)
    // Offset: 0x8C1340
    void set_preventOwnershipTakeover(bool value);
    // public System.Boolean get_destroyWhenOwnerOrLastClientLeaves()
    // Offset: 0x8C0FB0
    bool get_destroyWhenOwnerOrLastClientLeaves();
    // public System.Void set_destroyWhenOwnerOrLastClientLeaves(System.Boolean value)
    // Offset: 0x8C1330
    void set_destroyWhenOwnerOrLastClientLeaves(bool value);
    // public System.Boolean get_isPersistent()
    // Offset: 0x8C11E0
    bool get_isPersistent();
    // public System.Boolean get_destroyWhenLastClientLeaves()
    // Offset: 0x8C0F50
    bool get_destroyWhenLastClientLeaves();
    // public System.Void set_destroyWhenLastClientLeaves(System.Boolean value)
    // Offset: 0x8C1310
    void set_destroyWhenLastClientLeaves(bool value);
    // public System.Boolean get_destroyWhenOwnerLeaves()
    // Offset: 0x8C0F80
    bool get_destroyWhenOwnerLeaves();
    // public System.Void set_destroyWhenOwnerLeaves(System.Boolean value)
    // Offset: 0x8C1320
    void set_destroyWhenOwnerLeaves(bool value);
    // Normal.Realtime.RealtimeModel get_parent()
    // Offset: 0x1E1950
    ::Normal::Realtime::RealtimeModel* get_parent();
    // public Normal.Realtime.Room get_room()
    // Offset: 0x1E0EB0
    ::Normal::Realtime::Room* get_room();
    // public System.Boolean get_isRoomConnected()
    // Offset: 0x8C1250
    bool get_isRoomConnected();
    // public System.Int32 get_ownerID()
    // Offset: 0x8C0110
    int get_ownerID();
    // public System.Int32 get_ownerIDSelf()
    // Offset: 0x8C0110
    int get_ownerIDSelf();
    // public System.Int32 get_ownerIDInHierarchy()
    // Offset: 0x8C12D0
    int get_ownerIDInHierarchy();
    // public System.Boolean get_isUnownedSelf()
    // Offset: 0x8C1290
    bool get_isUnownedSelf();
    // public System.Boolean get_isUnownedInHierarchy()
    // Offset: 0x8C1270
    bool get_isUnownedInHierarchy();
    // public System.Boolean get_isOwnedRemotelySelf()
    // Offset: 0x8C1160
    bool get_isOwnedRemotelySelf();
    // public System.Boolean get_isOwnedRemotelyInHierarchy()
    // Offset: 0x8C10F0
    bool get_isOwnedRemotelyInHierarchy();
    // public System.Boolean get_isOwnedLocallySelf()
    // Offset: 0x8C1070
    bool get_isOwnedLocallySelf();
    // public System.Boolean get_isOwnedLocallyInHierarchy()
    // Offset: 0x8C1000
    bool get_isOwnedLocallyInHierarchy();
    // System.Boolean get_isCachedLengthDirty()
    // Offset: 0x8C0FE0
    bool get_isCachedLengthDirty();
    // System.Boolean get_isReliableLengthDirty()
    // Offset: 0x8C1240
    bool get_isReliableLengthDirty();
    // System.Boolean get_isUnreliableLengthDirty()
    // Offset: 0x8C12C0
    bool get_isUnreliableLengthDirty();
    // protected System.Void .ctor(Normal.Realtime.Serialization.MetaModel metaModel, Normal.Realtime.RealtimeModel parent)
    // Offset: 0x8C0EF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeModel* New_ctor(::Normal::Realtime::Serialization::MetaModel* metaModel, ::Normal::Realtime::RealtimeModel* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeModel*, creationType>(metaModel, parent)));
    }
    // protected System.Void SetMetaModel(Normal.Realtime.Serialization.MetaModel metaModel)
    // Offset: 0x1E4910
    void SetMetaModel(::Normal::Realtime::Serialization::MetaModel* metaModel);
    // private System.Boolean GetLifetimeFlag(Normal.Realtime.Serialization.MetaModel/Normal.Realtime.Serialization.LifetimeFlags flag)
    // Offset: 0x8C0030
    bool GetLifetimeFlag(::Normal::Realtime::Serialization::MetaModel::LifetimeFlags flag);
    // private System.Void SetLifetimeFlag(Normal.Realtime.Serialization.MetaModel/Normal.Realtime.Serialization.LifetimeFlags flag, System.Boolean value)
    // Offset: 0x8C0960
    void SetLifetimeFlag(::Normal::Realtime::Serialization::MetaModel::LifetimeFlags flag, bool value);
    // protected System.Void WriteMetaModel(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8C0E90
    void WriteMetaModel(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected System.Void ReadMetaModel(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8C0560
    void ReadMetaModel(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected System.Int32 MetaModelWriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8C0240
    int MetaModelWriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // System.Void SetParent(Normal.Realtime.RealtimeModel parent)
    // Offset: 0x8C0AE0
    void SetParent(::Normal::Realtime::RealtimeModel* parent);
    // protected System.Void SetChildren(System.Collections.Generic.IEnumerable`1<Normal.Realtime.RealtimeModel> children)
    // Offset: 0x8C08B0
    void SetChildren(::System::Collections::Generic::IEnumerable_1<::Normal::Realtime::RealtimeModel*>* children);
    // protected System.Void OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    // Offset: 0x1DDF00
    void OnParentReplaced(::Normal::Realtime::RealtimeModel* previousParent, ::Normal::Realtime::RealtimeModel* currentParent);
    // System.Void SetRoom(Normal.Realtime.Room room)
    // Offset: 0x8C0C30
    void SetRoom(::Normal::Realtime::Room* room);
    // private System.Void AttachAllCallbacks(Normal.Realtime.Room room)
    // Offset: 0x8BF9F0
    void AttachAllCallbacks(::Normal::Realtime::Room* room);
    // private System.Void DetachAllCallbacks(Normal.Realtime.Room room)
    // Offset: 0x8BFD70
    void DetachAllCallbacks(::Normal::Realtime::Room* room);
    // private System.Void AttachModelEvent(Normal.Realtime.Room room, Normal.Realtime.RealtimeModelEvent event)
    // Offset: 0x8BFB00
    void AttachModelEvent(::Normal::Realtime::Room* room, ::Normal::Realtime::RealtimeModelEvent event);
    // private System.Void DetachModelEvent(Normal.Realtime.Room room, Normal.Realtime.RealtimeModelEvent event)
    // Offset: 0x8BFE80
    void DetachModelEvent(::Normal::Realtime::Room* room, ::Normal::Realtime::RealtimeModelEvent event);
    // protected System.Void SubscribeEventCallback(Normal.Realtime.RealtimeModelEvent event, System.Action handler)
    // Offset: 0x8C0CE0
    void SubscribeEventCallback(::Normal::Realtime::RealtimeModelEvent event, ::System::Action* handler);
    // protected System.Void UnsubscribeEventCallback(Normal.Realtime.RealtimeModelEvent event)
    // Offset: 0x8C0E20
    void UnsubscribeEventCallback(::Normal::Realtime::RealtimeModelEvent event);
    // private System.Void OnWillWrite(Normal.Realtime.Room room)
    // Offset: 0x8C0550
    void OnWillWrite(::Normal::Realtime::Room* room);
    // private System.Void OnDidWrite(Normal.Realtime.Room room)
    // Offset: 0x8C0530
    void OnDidWrite(::Normal::Realtime::Room* room);
    // private System.Void OnWillRead(Normal.Realtime.Room room)
    // Offset: 0x8C0540
    void OnWillRead(::Normal::Realtime::Room* room);
    // private System.Void OnDidRead(Normal.Realtime.Room room)
    // Offset: 0x8C0520
    void OnDidRead(::Normal::Realtime::Room* room);
    // private System.Void OnDidReadProperties(Normal.Realtime.Room room)
    // Offset: 0x8C0460
    void OnDidReadProperties(::Normal::Realtime::Room* room);
    // private System.Void SafeInvokeCallback(Normal.Realtime.RealtimeModelEvent event)
    // Offset: 0x8C07C0
    void SafeInvokeCallback(::Normal::Realtime::RealtimeModelEvent event);
    // private System.Int32 GetOwnerIDSelf()
    // Offset: 0x8C0110
    int GetOwnerIDSelf();
    // private System.Int32 GetOwnerIDInHierarchy()
    // Offset: 0x8C0060
    int GetOwnerIDInHierarchy();
    // public System.Void RequestOwnership(System.Int32 ownerID)
    // Offset: 0x8C05C0
    void RequestOwnership(int ownerID);
    // public System.Void RequestOwnership(System.Boolean sendRedundantUpdates)
    // Offset: 0x8C0680
    void RequestOwnership(bool sendRedundantUpdates);
    // public System.Void SetOwnership(System.Int32 ownerID, System.Boolean sendRedundantUpdates)
    // Offset: 0x8C0A10
    void SetOwnership(int ownerID, bool sendRedundantUpdates);
    // public System.Void ClearOwnership(System.Boolean sendRedundantUpdates)
    // Offset: 0x8BFCB0
    void ClearOwnership(bool sendRedundantUpdates);
    // protected System.Void InvalidateCachedLength()
    // Offset: 0x8C0130
    void InvalidateCachedLength();
    // protected System.Void InvalidateReliableLength()
    // Offset: 0x8C01E0
    void InvalidateReliableLength();
    // protected System.Void InvalidateUnreliableLength()
    // Offset: 0x8C0210
    void InvalidateUnreliableLength();
    // protected System.Void InvalidateContextLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8C0160
    void InvalidateContextLength(::Normal::Realtime::Serialization::StreamContext context);
    // private System.Int32 Normal.Realtime.Serialization.IStreamWriter.WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8C02D0
    int Normal_Realtime_Serialization_IStreamWriter_WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // protected System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // private System.Void Normal.Realtime.Serialization.IStreamWriter.Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8C0420
    void Normal_Realtime_Serialization_IStreamWriter_Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // private System.Void Normal.Realtime.Serialization.IStreamReader.Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x8C0290
    void Normal_Realtime_Serialization_IStreamReader_Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
  }; // Normal.Realtime.RealtimeModel
  #pragma pack(pop)
  static check_size<sizeof(RealtimeModel), 136 + sizeof(int)> __Normal_Realtime_RealtimeModelSizeCheck;
  static_assert(sizeof(RealtimeModel) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isFreshModel
// Il2CppName: get_isFreshModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isFreshModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isFreshModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::set_isFreshModel
// Il2CppName: set_isFreshModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(bool)>(&Normal::Realtime::RealtimeModel::set_isFreshModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "set_isFreshModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_hasMetaModel
// Il2CppName: get_hasMetaModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_hasMetaModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_hasMetaModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_preventOwnershipTakeover
// Il2CppName: get_preventOwnershipTakeover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_preventOwnershipTakeover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_preventOwnershipTakeover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::set_preventOwnershipTakeover
// Il2CppName: set_preventOwnershipTakeover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(bool)>(&Normal::Realtime::RealtimeModel::set_preventOwnershipTakeover)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "set_preventOwnershipTakeover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_destroyWhenOwnerOrLastClientLeaves
// Il2CppName: get_destroyWhenOwnerOrLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_destroyWhenOwnerOrLastClientLeaves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_destroyWhenOwnerOrLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::set_destroyWhenOwnerOrLastClientLeaves
// Il2CppName: set_destroyWhenOwnerOrLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(bool)>(&Normal::Realtime::RealtimeModel::set_destroyWhenOwnerOrLastClientLeaves)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "set_destroyWhenOwnerOrLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isPersistent
// Il2CppName: get_isPersistent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isPersistent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isPersistent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_destroyWhenLastClientLeaves
// Il2CppName: get_destroyWhenLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_destroyWhenLastClientLeaves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_destroyWhenLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::set_destroyWhenLastClientLeaves
// Il2CppName: set_destroyWhenLastClientLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(bool)>(&Normal::Realtime::RealtimeModel::set_destroyWhenLastClientLeaves)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "set_destroyWhenLastClientLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_destroyWhenOwnerLeaves
// Il2CppName: get_destroyWhenOwnerLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_destroyWhenOwnerLeaves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_destroyWhenOwnerLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::set_destroyWhenOwnerLeaves
// Il2CppName: set_destroyWhenOwnerLeaves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(bool)>(&Normal::Realtime::RealtimeModel::set_destroyWhenOwnerLeaves)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "set_destroyWhenOwnerLeaves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeModel* (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_room
// Il2CppName: get_room
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Room* (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_room)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_room", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isRoomConnected
// Il2CppName: get_isRoomConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isRoomConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isRoomConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_ownerID
// Il2CppName: get_ownerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_ownerID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_ownerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_ownerIDSelf
// Il2CppName: get_ownerIDSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_ownerIDSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_ownerIDSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_ownerIDInHierarchy
// Il2CppName: get_ownerIDInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_ownerIDInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_ownerIDInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isUnownedSelf
// Il2CppName: get_isUnownedSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isUnownedSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isUnownedSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isUnownedInHierarchy
// Il2CppName: get_isUnownedInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isUnownedInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isUnownedInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isOwnedRemotelySelf
// Il2CppName: get_isOwnedRemotelySelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isOwnedRemotelySelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isOwnedRemotelySelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isOwnedRemotelyInHierarchy
// Il2CppName: get_isOwnedRemotelyInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isOwnedRemotelyInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isOwnedRemotelyInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isOwnedLocallySelf
// Il2CppName: get_isOwnedLocallySelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isOwnedLocallySelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isOwnedLocallySelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isOwnedLocallyInHierarchy
// Il2CppName: get_isOwnedLocallyInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isOwnedLocallyInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isOwnedLocallyInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isCachedLengthDirty
// Il2CppName: get_isCachedLengthDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isCachedLengthDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isCachedLengthDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isReliableLengthDirty
// Il2CppName: get_isReliableLengthDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isReliableLengthDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isReliableLengthDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::get_isUnreliableLengthDirty
// Il2CppName: get_isUnreliableLengthDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::get_isUnreliableLengthDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "get_isUnreliableLengthDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SetMetaModel
// Il2CppName: SetMetaModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::MetaModel*)>(&Normal::Realtime::RealtimeModel::SetMetaModel)> {
  static const MethodInfo* get() {
    static auto* metaModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "MetaModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SetMetaModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metaModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::GetLifetimeFlag
// Il2CppName: GetLifetimeFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::MetaModel::LifetimeFlags)>(&Normal::Realtime::RealtimeModel::GetLifetimeFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "MetaModel/LifetimeFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "GetLifetimeFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SetLifetimeFlag
// Il2CppName: SetLifetimeFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::MetaModel::LifetimeFlags, bool)>(&Normal::Realtime::RealtimeModel::SetLifetimeFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "MetaModel/LifetimeFlags")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SetLifetimeFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::WriteMetaModel
// Il2CppName: WriteMetaModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::WriteMetaModel)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "WriteMetaModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::ReadMetaModel
// Il2CppName: ReadMetaModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::ReadMetaModel)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "ReadMetaModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::MetaModelWriteLength
// Il2CppName: MetaModelWriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::MetaModelWriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "MetaModelWriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::RealtimeModel::SetParent)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SetChildren
// Il2CppName: SetChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::System::Collections::Generic::IEnumerable_1<::Normal::Realtime::RealtimeModel*>*)>(&Normal::Realtime::RealtimeModel::SetChildren)> {
  static const MethodInfo* get() {
    static auto* children = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SetChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{children});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::OnParentReplaced
// Il2CppName: OnParentReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::RealtimeModel*, ::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::RealtimeModel::OnParentReplaced)> {
  static const MethodInfo* get() {
    static auto* previousParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    static auto* currentParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "OnParentReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousParent, currentParent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SetRoom
// Il2CppName: SetRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::SetRoom)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SetRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::AttachAllCallbacks
// Il2CppName: AttachAllCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::AttachAllCallbacks)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "AttachAllCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::DetachAllCallbacks
// Il2CppName: DetachAllCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::DetachAllCallbacks)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "DetachAllCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::AttachModelEvent
// Il2CppName: AttachModelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*, ::Normal::Realtime::RealtimeModelEvent)>(&Normal::Realtime::RealtimeModel::AttachModelEvent)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    static auto* event = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "AttachModelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room, event});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::DetachModelEvent
// Il2CppName: DetachModelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*, ::Normal::Realtime::RealtimeModelEvent)>(&Normal::Realtime::RealtimeModel::DetachModelEvent)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    static auto* event = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "DetachModelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room, event});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SubscribeEventCallback
// Il2CppName: SubscribeEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::RealtimeModelEvent, ::System::Action*)>(&Normal::Realtime::RealtimeModel::SubscribeEventCallback)> {
  static const MethodInfo* get() {
    static auto* event = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModelEvent")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SubscribeEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{event, handler});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::UnsubscribeEventCallback
// Il2CppName: UnsubscribeEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::RealtimeModelEvent)>(&Normal::Realtime::RealtimeModel::UnsubscribeEventCallback)> {
  static const MethodInfo* get() {
    static auto* event = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "UnsubscribeEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{event});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::OnWillWrite
// Il2CppName: OnWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::OnWillWrite)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "OnWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::OnDidWrite
// Il2CppName: OnDidWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::OnDidWrite)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "OnDidWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::OnWillRead
// Il2CppName: OnWillRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::OnWillRead)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "OnWillRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::OnDidRead
// Il2CppName: OnDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::OnDidRead)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "OnDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::OnDidReadProperties
// Il2CppName: OnDidReadProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::RealtimeModel::OnDidReadProperties)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "OnDidReadProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SafeInvokeCallback
// Il2CppName: SafeInvokeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::RealtimeModelEvent)>(&Normal::Realtime::RealtimeModel::SafeInvokeCallback)> {
  static const MethodInfo* get() {
    static auto* event = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModelEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SafeInvokeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{event});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::GetOwnerIDSelf
// Il2CppName: GetOwnerIDSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::GetOwnerIDSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "GetOwnerIDSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::GetOwnerIDInHierarchy
// Il2CppName: GetOwnerIDInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::GetOwnerIDInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "GetOwnerIDInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::RequestOwnership
// Il2CppName: RequestOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(int)>(&Normal::Realtime::RealtimeModel::RequestOwnership)> {
  static const MethodInfo* get() {
    static auto* ownerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "RequestOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ownerID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::RequestOwnership
// Il2CppName: RequestOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(bool)>(&Normal::Realtime::RealtimeModel::RequestOwnership)> {
  static const MethodInfo* get() {
    static auto* sendRedundantUpdates = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "RequestOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendRedundantUpdates});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::SetOwnership
// Il2CppName: SetOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(int, bool)>(&Normal::Realtime::RealtimeModel::SetOwnership)> {
  static const MethodInfo* get() {
    static auto* ownerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sendRedundantUpdates = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "SetOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ownerID, sendRedundantUpdates});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::ClearOwnership
// Il2CppName: ClearOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(bool)>(&Normal::Realtime::RealtimeModel::ClearOwnership)> {
  static const MethodInfo* get() {
    static auto* sendRedundantUpdates = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "ClearOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendRedundantUpdates});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::InvalidateCachedLength
// Il2CppName: InvalidateCachedLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::InvalidateCachedLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "InvalidateCachedLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::InvalidateReliableLength
// Il2CppName: InvalidateReliableLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::InvalidateReliableLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "InvalidateReliableLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::InvalidateUnreliableLength
// Il2CppName: InvalidateUnreliableLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)()>(&Normal::Realtime::RealtimeModel::InvalidateUnreliableLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "InvalidateUnreliableLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::InvalidateContextLength
// Il2CppName: InvalidateContextLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::InvalidateContextLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "InvalidateContextLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::Normal_Realtime_Serialization_IStreamWriter_WriteLength
// Il2CppName: Normal.Realtime.Serialization.IStreamWriter.WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::Normal_Realtime_Serialization_IStreamWriter_WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "Normal.Realtime.Serialization.IStreamWriter.WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::Normal_Realtime_Serialization_IStreamWriter_Write
// Il2CppName: Normal.Realtime.Serialization.IStreamWriter.Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::Normal_Realtime_Serialization_IStreamWriter_Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "Normal.Realtime.Serialization.IStreamWriter.Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::Normal_Realtime_Serialization_IStreamReader_Read
// Il2CppName: Normal.Realtime.Serialization.IStreamReader.Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::Normal_Realtime_Serialization_IStreamReader_Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "Normal.Realtime.Serialization.IStreamReader.Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeModel::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::RealtimeModel::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeModel*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
