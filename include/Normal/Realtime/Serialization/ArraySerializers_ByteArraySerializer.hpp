// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Serialization.ArraySerializers
#include "Normal/Realtime/Serialization/ArraySerializers.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Normal.Realtime.Serialization.ISerializer`1
#include "Normal/Realtime/Serialization/ISerializer_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer, "Normal.Realtime.Serialization", "ArraySerializers/ByteArraySerializer");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.Serialization.ArraySerializers/Normal.Realtime.Serialization.ByteArraySerializer
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct ArraySerializers::ByteArraySerializer/*, public ::System::ValueType, public ::Normal::Realtime::Serialization::ISerializer_1<::ArrayW<uint8_t>>*/ {
    public:
    // Creating value type constructor for type: ByteArraySerializer
    constexpr ByteArraySerializer() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Normal::Realtime::Serialization::ISerializer_1<::ArrayW<uint8_t>>
    operator ::Normal::Realtime::Serialization::ISerializer_1<::ArrayW<uint8_t>>() noexcept {
      return *reinterpret_cast<::Normal::Realtime::Serialization::ISerializer_1<::ArrayW<uint8_t>>*>(this);
    }
    // public System.Int32 Length(System.Byte[] value)
    // Offset: 0xA69708
    int Length(::ArrayW<uint8_t> value);
    // public System.Void Write(ref Normal.Realtime.Serialization.WriteStream stream, System.Byte[] value)
    // Offset: 0xA6975C
    void Write(ByRef<::Normal::Realtime::Serialization::WriteStream*> stream, ::ArrayW<uint8_t> value);
    // public System.Void Read(ref Normal.Realtime.Serialization.ReadStream stream, ref System.Byte[] bytes)
    // Offset: 0xA69778
    void Read(ByRef<::Normal::Realtime::Serialization::ReadStream*> stream, ByRef<::ArrayW<uint8_t>> bytes);
  }; // Normal.Realtime.Serialization.ArraySerializers/Normal.Realtime.Serialization.ByteArraySerializer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::Length
// Il2CppName: Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::*)(::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::Length)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer), "Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::*)(ByRef<::Normal::Realtime::Serialization::WriteStream*>, ::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->this_arg;
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::*)(ByRef<::Normal::Realtime::Serialization::ReadStream*>, ByRef<::ArrayW<uint8_t>>)>(&Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->this_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::ArraySerializers::ByteArraySerializer), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, bytes});
  }
};
