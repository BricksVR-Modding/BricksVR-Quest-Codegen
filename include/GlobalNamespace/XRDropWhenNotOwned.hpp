// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRGrabInteractable
  class XRGrabInteractable;
  // Forward declaring type: XRBaseInteractor
  class XRBaseInteractor;
  // Forward declaring type: XRBaseInteractable
  class XRBaseInteractable;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeTransform
  class RealtimeTransform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: XRDropWhenNotOwned
  class XRDropWhenNotOwned;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::XRDropWhenNotOwned);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::XRDropWhenNotOwned*, "", "XRDropWhenNotOwned");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: XRDropWhenNotOwned
  // [TokenAttribute] Offset: FFFFFFFF
  class XRDropWhenNotOwned : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::XRDropWhenNotOwned::$DelayedReEnableInteractable$d__8
    class $DelayedReEnableInteractable$d__8;
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable _interactable
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable* interactable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor _interactor
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*) == 0x8);
    // private Normal.Realtime.RealtimeTransform _realtimeTransform
    // Size: 0x8
    // Offset: 0x28
    ::Normal::Realtime::RealtimeTransform* realtimeTransform;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeTransform*) == 0x8);
    // private System.Boolean _held
    // Size: 0x1
    // Offset: 0x30
    bool held;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable _interactable
    [[deprecated]] ::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*& dyn__interactable();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor _interactor
    [[deprecated]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*& dyn__interactor();
    // Get instance field reference: private Normal.Realtime.RealtimeTransform _realtimeTransform
    [[deprecated]] ::Normal::Realtime::RealtimeTransform*& dyn__realtimeTransform();
    // Get instance field reference: private System.Boolean _held
    [[deprecated]] bool& dyn__held();
    // private System.Void Awake()
    // Offset: 0x9283F0
    void Awake();
    // private System.Void ObjectGrabbed(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x928630
    void ObjectGrabbed(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void ObjectDropped(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x928600
    void ObjectDropped(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void Update()
    // Offset: 0x928650
    void Update();
    // static private System.Collections.IEnumerator DelayedReEnableInteractable(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x928590
    static ::System::Collections::IEnumerator* DelayedReEnableInteractable(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRDropWhenNotOwned* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XRDropWhenNotOwned::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRDropWhenNotOwned*, creationType>()));
    }
  }; // XRDropWhenNotOwned
  #pragma pack(pop)
  static check_size<sizeof(XRDropWhenNotOwned), 48 + sizeof(bool)> __GlobalNamespace_XRDropWhenNotOwnedSizeCheck;
  static_assert(sizeof(XRDropWhenNotOwned) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::XRDropWhenNotOwned::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XRDropWhenNotOwned::*)()>(&GlobalNamespace::XRDropWhenNotOwned::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XRDropWhenNotOwned*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XRDropWhenNotOwned::ObjectGrabbed
// Il2CppName: ObjectGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XRDropWhenNotOwned::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&GlobalNamespace::XRDropWhenNotOwned::ObjectGrabbed)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XRDropWhenNotOwned*), "ObjectGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XRDropWhenNotOwned::ObjectDropped
// Il2CppName: ObjectDropped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XRDropWhenNotOwned::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&GlobalNamespace::XRDropWhenNotOwned::ObjectDropped)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XRDropWhenNotOwned*), "ObjectDropped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XRDropWhenNotOwned::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::XRDropWhenNotOwned::*)()>(&GlobalNamespace::XRDropWhenNotOwned::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XRDropWhenNotOwned*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XRDropWhenNotOwned::DelayedReEnableInteractable
// Il2CppName: DelayedReEnableInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&GlobalNamespace::XRDropWhenNotOwned::DelayedReEnableInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::XRDropWhenNotOwned*), "DelayedReEnableInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::XRDropWhenNotOwned::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
