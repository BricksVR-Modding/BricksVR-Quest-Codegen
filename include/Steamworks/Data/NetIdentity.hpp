// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Steamworks.Data.NetAddress
#include "Steamworks/Data/NetAddress.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: NetIdentity
  struct NetIdentity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::NetIdentity, "Steamworks.Data", "NetIdentity");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0x1A
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.NetIdentity
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetIdentity/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Steamworks::Data::NetIdentity::IdentityType
    struct IdentityType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType
    // [TokenAttribute] Offset: FFFFFFFF
    struct IdentityType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: IdentityType
      constexpr IdentityType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType Invalid
      static constexpr const int Invalid = 0;
      // Get static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType Invalid
      static ::Steamworks::Data::NetIdentity::IdentityType _get_Invalid();
      // Set static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType Invalid
      static void _set_Invalid(::Steamworks::Data::NetIdentity::IdentityType value);
      // static field const value: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType IPAddress
      static constexpr const int IPAddress = 1;
      // Get static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType IPAddress
      static ::Steamworks::Data::NetIdentity::IdentityType _get_IPAddress();
      // Set static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType IPAddress
      static void _set_IPAddress(::Steamworks::Data::NetIdentity::IdentityType value);
      // static field const value: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType GenericString
      static constexpr const int GenericString = 2;
      // Get static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType GenericString
      static ::Steamworks::Data::NetIdentity::IdentityType _get_GenericString();
      // Set static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType GenericString
      static void _set_GenericString(::Steamworks::Data::NetIdentity::IdentityType value);
      // static field const value: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType GenericBytes
      static constexpr const int GenericBytes = 3;
      // Get static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType GenericBytes
      static ::Steamworks::Data::NetIdentity::IdentityType _get_GenericBytes();
      // Set static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType GenericBytes
      static void _set_GenericBytes(::Steamworks::Data::NetIdentity::IdentityType value);
      // static field const value: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType SteamID
      static constexpr const int SteamID = 16;
      // Get static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType SteamID
      static ::Steamworks::Data::NetIdentity::IdentityType _get_SteamID();
      // Set static field: static public Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType SteamID
      static void _set_SteamID(::Steamworks::Data::NetIdentity::IdentityType value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType
    #pragma pack(pop)
    static check_size<sizeof(NetIdentity::IdentityType), 0 + sizeof(int)> __Steamworks_Data_NetIdentity_IdentityTypeSizeCheck;
    static_assert(sizeof(NetIdentity::IdentityType) == 0x4);
    public:
    // Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType type
    // Size: 0x4
    // Offset: 0x0
    ::Steamworks::Data::NetIdentity::IdentityType type;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::NetIdentity::IdentityType) == 0x4);
    // System.Int32 size
    // Size: 0x4
    // Offset: 0x4
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating union for fields at offset: 0x8
    union {
      // System.UInt64 steamid
      // Size: 0x8
      // Offset: 0x8
      uint64_t steamid;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // Steamworks.Data.NetAddress netaddress
      // Size: 0x12
      // Offset: 0x8
      ::Steamworks::Data::NetAddress netaddress;
      // Field size check
      static_assert(sizeof(::Steamworks::Data::NetAddress) == 0x12);
    };
    public:
    // Creating value type constructor for type: NetIdentity
    constexpr NetIdentity(::Steamworks::Data::NetIdentity::IdentityType type_ = {}, int size_ = {}, uint64_t steamid_ = {}) noexcept : type{type_}, size{size_}, steamid{steamid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Steamworks.Data.NetIdentity/Steamworks.Data.IdentityType type
    ::Steamworks::Data::NetIdentity::IdentityType& dyn_type();
    // Get instance field reference: System.Int32 size
    int& dyn_size();
    // Get instance field reference: System.UInt64 steamid
    uint64_t& dyn_steamid();
    // Get instance field reference: Steamworks.Data.NetAddress netaddress
    ::Steamworks::Data::NetAddress& dyn_netaddress();
    // public override System.String ToString()
    // Offset: 0xA57268
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Steamworks.Data.NetIdentity
  #pragma pack(pop)
  static check_size<sizeof(NetIdentity), 8 + sizeof(::Steamworks::Data::NetAddress)> __Steamworks_Data_NetIdentitySizeCheck;
  static_assert(sizeof(NetIdentity) == 0x1A);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::NetIdentity::IdentityType, "Steamworks.Data", "NetIdentity/IdentityType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Data::NetIdentity::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Steamworks::Data::NetIdentity::*)()>(&Steamworks::Data::NetIdentity::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::NetIdentity), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
