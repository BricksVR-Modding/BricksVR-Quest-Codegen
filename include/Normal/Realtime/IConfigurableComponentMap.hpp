// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: IConfigurableComponent
  class IConfigurableComponent;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: IConfigurableComponentMap
  class IConfigurableComponentMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::IConfigurableComponentMap);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::IConfigurableComponentMap*, "Normal.Realtime", "IConfigurableComponentMap");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.IConfigurableComponentMap
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 715D44
  class IConfigurableComponentMap {
    public:
    // public System.Int32 get_count()
    // Offset: 0xFFFFFFFF
    int get_count();
    // public System.Collections.Generic.IEnumerable`1<System.UInt32> get_componentIDs()
    // Offset: 0xFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<uint>* get_componentIDs();
    // public System.Collections.Generic.IEnumerable`1<Normal.Realtime.IConfigurableComponent> get_components()
    // Offset: 0xFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::Normal::Realtime::IConfigurableComponent*>* get_components();
    // public Normal.Realtime.IConfigurableComponent get_Item(System.UInt32 componentID)
    // Offset: 0xFFFFFFFF
    ::Normal::Realtime::IConfigurableComponent* get_Item(uint componentID);
    // public System.Boolean ContainsComponentID(System.UInt32 componentID)
    // Offset: 0xFFFFFFFF
    bool ContainsComponentID(uint componentID);
    // public System.Boolean ContainsComponent(Normal.Realtime.IConfigurableComponent component)
    // Offset: 0xFFFFFFFF
    bool ContainsComponent(::Normal::Realtime::IConfigurableComponent* component);
    // public System.Void Add(System.UInt32 componentID, Normal.Realtime.IConfigurableComponent component)
    // Offset: 0xFFFFFFFF
    void Add(uint componentID, ::Normal::Realtime::IConfigurableComponent* component);
    // public System.Void Deprecate(System.UInt32 componentID)
    // Offset: 0xFFFFFFFF
    void Deprecate(uint componentID);
  }; // Normal.Realtime.IConfigurableComponentMap
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::IConfigurableComponentMap::*)()>(&Normal::Realtime::IConfigurableComponentMap::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::get_componentIDs
// Il2CppName: get_componentIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<uint>* (Normal::Realtime::IConfigurableComponentMap::*)()>(&Normal::Realtime::IConfigurableComponentMap::get_componentIDs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "get_componentIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::get_components
// Il2CppName: get_components
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Normal::Realtime::IConfigurableComponent*>* (Normal::Realtime::IConfigurableComponentMap::*)()>(&Normal::Realtime::IConfigurableComponentMap::get_components)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "get_components", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::IConfigurableComponent* (Normal::Realtime::IConfigurableComponentMap::*)(uint)>(&Normal::Realtime::IConfigurableComponentMap::get_Item)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::ContainsComponentID
// Il2CppName: ContainsComponentID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::IConfigurableComponentMap::*)(uint)>(&Normal::Realtime::IConfigurableComponentMap::ContainsComponentID)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "ContainsComponentID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::ContainsComponent
// Il2CppName: ContainsComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::IConfigurableComponentMap::*)(::Normal::Realtime::IConfigurableComponent*)>(&Normal::Realtime::IConfigurableComponentMap::ContainsComponent)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "ContainsComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::IConfigurableComponentMap::*)(uint, ::Normal::Realtime::IConfigurableComponent*)>(&Normal::Realtime::IConfigurableComponentMap::Add)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* component = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IConfigurableComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID, component});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::IConfigurableComponentMap::Deprecate
// Il2CppName: Deprecate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::IConfigurableComponentMap::*)(uint)>(&Normal::Realtime::IConfigurableComponentMap::Deprecate)> {
  static const MethodInfo* get() {
    static auto* componentID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::IConfigurableComponentMap*), "Deprecate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{componentID});
  }
};
