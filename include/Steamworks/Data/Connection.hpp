// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: Result
  struct Result;
}
// Completed forward declares
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: Connection
  struct Connection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::Connection, "Steamworks.Data", "Connection");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.Connection
  // [TokenAttribute] Offset: FFFFFFFF
  struct Connection/*, public ::System::ValueType*/ {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0xBB920
    // private System.UInt32 <Id>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    uint Id;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: Connection
    constexpr Connection(uint Id_ = {}) noexcept : Id{Id_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return Id;
    }
    // Get instance field reference: private System.UInt32 <Id>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$Id$k__BackingField();
    // public System.UInt32 get_Id()
    // Offset: 0x269910
    uint get_Id();
    // public Steamworks.Result Accept()
    // Offset: 0x45D3C0
    ::Steamworks::Result Accept();
    // public System.Boolean Close(System.Boolean linger, System.Int32 reasonCode, System.String debugString)
    // Offset: 0x45D430
    bool Close(bool linger, int reasonCode, ::StringW debugString);
    // public override System.String ToString()
    // Offset: 0x45D4D0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Steamworks.Data.Connection
  #pragma pack(pop)
  static check_size<sizeof(Connection), 0 + sizeof(uint)> __Steamworks_Data_ConnectionSizeCheck;
  static_assert(sizeof(Connection) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Data::Connection::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Steamworks::Data::Connection::*)()>(&Steamworks::Data::Connection::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::Connection), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::Data::Connection::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::Result (Steamworks::Data::Connection::*)()>(&Steamworks::Data::Connection::Accept)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::Connection), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::Data::Connection::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Steamworks::Data::Connection::*)(bool, int, ::StringW)>(&Steamworks::Data::Connection::Close)> {
  static const MethodInfo* get() {
    static auto* linger = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reasonCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* debugString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::Connection), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linger, reasonCode, debugString});
  }
};
// Writing MetadataGetter for method: Steamworks::Data::Connection::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Steamworks::Data::Connection::*)()>(&Steamworks::Data::Connection::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::Connection), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
