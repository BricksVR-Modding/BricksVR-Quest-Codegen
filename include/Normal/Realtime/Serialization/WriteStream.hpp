// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Serialization.Serialization
#include "Normal/Realtime/Serialization/Serialization.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteBuffer
  class WriteBuffer;
  // Forward declaring type: IStreamWriter
  class IStreamWriter;
  // Forward declaring type: StreamContext
  struct StreamContext;
  // Forward declaring type: ICollection
  class ICollection;
  // Forward declaring type: PropertyHeader
  struct PropertyHeader;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: WriteStream
  class WriteStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Serialization::WriteStream);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::WriteStream*, "Normal.Realtime.Serialization", "WriteStream");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Serialization.WriteStream
  // [TokenAttribute] Offset: FFFFFFFF
  class WriteStream : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Normal.Realtime.Serialization.WriteBuffer _buffer
    // Size: 0x8
    // Offset: 0x10
    ::Normal::Realtime::Serialization::WriteBuffer* buffer;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Serialization::WriteBuffer*) == 0x8);
    public:
    // Creating conversion operator: operator ::Normal::Realtime::Serialization::WriteBuffer*
    constexpr operator ::Normal::Realtime::Serialization::WriteBuffer*() const noexcept {
      return buffer;
    }
    // Get instance field reference: private Normal.Realtime.Serialization.WriteBuffer _buffer
    ::Normal::Realtime::Serialization::WriteBuffer*& dyn__buffer();
    // public System.Void .ctor(Normal.Realtime.Serialization.WriteBuffer buffer)
    // Offset: 0xA71580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WriteStream* New_ctor(::Normal::Realtime::Serialization::WriteBuffer* buffer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::WriteStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WriteStream*, creationType>(buffer)));
    }
    // static public System.UInt32 ConvertNegativeOneIntToUInt(System.Int32 value)
    // Offset: 0xA6C3B8
    static uint ConvertNegativeOneIntToUInt(int value);
    // static public System.Int32 Vector2ToBytesLength()
    // Offset: 0xA70964
    static int Vector2ToBytesLength();
    // static public System.Byte[] Vector2ToBytes(UnityEngine.Vector2 value)
    // Offset: 0xA7096C
    static ::ArrayW<uint8_t> Vector2ToBytes(::UnityEngine::Vector2 value);
    // static public System.Int32 Vector3ToBytesLength()
    // Offset: 0xA70B6C
    static int Vector3ToBytesLength();
    // static public System.Byte[] Vector3ToBytes(UnityEngine.Vector3 value)
    // Offset: 0xA70B74
    static ::ArrayW<uint8_t> Vector3ToBytes(::UnityEngine::Vector3 value);
    // static public System.Int32 QuaternionToBytesLength()
    // Offset: 0xA70C20
    static int QuaternionToBytesLength();
    // static public System.Byte[] QuaternionToBytes(UnityEngine.Quaternion value)
    // Offset: 0xA70C28
    static ::ArrayW<uint8_t> QuaternionToBytes(::UnityEngine::Quaternion value);
    // static public System.Int32 ColorToBytesLength()
    // Offset: 0xA70CE0
    static int ColorToBytesLength();
    // static public System.Byte[] ColorToBytes(UnityEngine.Color value)
    // Offset: 0xA70CE8
    static ::ArrayW<uint8_t> ColorToBytes(::UnityEngine::Color value);
    // static public System.Int32 FloatToBytesLength()
    // Offset: 0xA70DA0
    static int FloatToBytesLength();
    // static public System.Void FloatToBytes(System.Single value, System.Byte[] buffer, ref System.Int32 offset)
    // Offset: 0xA709F4
    static void FloatToBytes(float value, ::ArrayW<uint8_t> buffer, ByRef<int> offset);
    // static public System.Int32 WriteNullLength(System.UInt32 propertyID)
    // Offset: 0xA70DA8
    static int WriteNullLength(uint propertyID);
    // static public System.Int32 WriteVarint32Length(System.UInt32 propertyID, System.UInt32 value)
    // Offset: 0xA6BC84
    static int WriteVarint32Length(uint propertyID, uint value);
    // static public System.Int32 WriteFloatLength(System.UInt32 propertyID)
    // Offset: 0xA70E80
    static int WriteFloatLength(uint propertyID);
    // static public System.Int32 WriteDoubleLength(System.UInt32 propertyID)
    // Offset: 0xA70ED4
    static int WriteDoubleLength(uint propertyID);
    // static public System.Int32 WriteBytesLength(System.UInt32 propertyID, System.Int32 numberOfBytes)
    // Offset: 0xA70F28
    static int WriteBytesLength(uint propertyID, int numberOfBytes);
    // static public System.Int32 WriteBytesLength(System.UInt32 propertyID, System.Byte[] value)
    // Offset: 0xA71004
    static int WriteBytesLength(uint propertyID, ::ArrayW<uint8_t> value);
    // static public System.Int32 WriteStringLength(System.UInt32 propertyID, System.String value)
    // Offset: 0xA62AD0
    static int WriteStringLength(uint propertyID, ::StringW value);
    // static public System.Int32 WriteModelLength(System.UInt32 propertyID, Normal.Realtime.Serialization.IStreamWriter model, Normal.Realtime.Serialization.StreamContext context, System.Boolean forceWriteFullModel)
    // Offset: 0xA62B3C
    static int WriteModelLength(uint propertyID, ::Normal::Realtime::Serialization::IStreamWriter* model, ::Normal::Realtime::Serialization::StreamContext context, bool forceWriteFullModel);
    // static public System.Int32 WriteCollectionLength(System.UInt32 propertyID, Normal.Realtime.Serialization.ICollection collection, Normal.Realtime.Serialization.StreamContext context, System.Boolean forceWriteFullModel)
    // Offset: 0xA712C8
    static int WriteCollectionLength(uint propertyID, ::Normal::Realtime::Serialization::ICollection* collection, ::Normal::Realtime::Serialization::StreamContext context, bool forceWriteFullModel);
    // static private System.Int32 WriteRawPropertyKeyLength(System.UInt32 propertyID, Normal.Realtime.Serialization.Serialization/Normal.Realtime.Serialization.WireType wireType)
    // Offset: 0xA70DF0
    static int WriteRawPropertyKeyLength(uint propertyID, ::Normal::Realtime::Serialization::Serialization::WireType wireType);
    // static private System.Int32 WriteRawByteLength()
    // Offset: 0xA714D0
    static int WriteRawByteLength();
    // static private System.Int32 WriteRawVarint32Length(System.UInt32 value)
    // Offset: 0xA70E3C
    static int WriteRawVarint32Length(uint value);
    // static private System.Int32 WriteRawFloatLength()
    // Offset: 0xA70ECC
    static int WriteRawFloatLength();
    // static private System.Int32 WriteRawDoubleLength()
    // Offset: 0xA70F20
    static int WriteRawDoubleLength();
    // static private System.Int32 WriteRawBytesLength(System.Int32 numberOfBytes)
    // Offset: 0xA70FBC
    static int WriteRawBytesLength(int numberOfBytes);
    // static private System.Int32 WriteRawBytesLength(System.Byte[] value)
    // Offset: 0xA710AC
    static int WriteRawBytesLength(::ArrayW<uint8_t> value);
    // static private System.Int32 WriteRawStringLength(System.String value)
    // Offset: 0xA71100
    static int WriteRawStringLength(::StringW value);
    // static private System.Int32 WriteRawModelLength(Normal.Realtime.Serialization.IStreamWriter model, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA714D8
    static int WriteRawModelLength(::Normal::Realtime::Serialization::IStreamWriter* model, ::Normal::Realtime::Serialization::StreamContext context);
    // static private System.Int32 WriteRawModelLength(Normal.Realtime.Serialization.IStreamWriter model, System.Int32 modelWriteLength, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA71280
    static int WriteRawModelLength(::Normal::Realtime::Serialization::IStreamWriter* model, int modelWriteLength, ::Normal::Realtime::Serialization::StreamContext context);
    // static private System.Int32 WriteRawCollectionLength(Normal.Realtime.Serialization.ICollection collection, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA71544
    static int WriteRawCollectionLength(::Normal::Realtime::Serialization::ICollection* collection, ::Normal::Realtime::Serialization::StreamContext context);
    // static private System.Int32 WriteRawCollectionLength(Normal.Realtime.Serialization.ICollection collection, System.Int32 collectionWriteLength, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA7138C
    static int WriteRawCollectionLength(::Normal::Realtime::Serialization::ICollection* collection, int collectionWriteLength, ::Normal::Realtime::Serialization::StreamContext context);
    // static private System.Int32 GetModelWriteLength(Normal.Realtime.Serialization.IStreamWriter model, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA71184
    static int GetModelWriteLength(::Normal::Realtime::Serialization::IStreamWriter* model, ::Normal::Realtime::Serialization::StreamContext context);
    // public System.Void SerializeModel(Normal.Realtime.Serialization.IStreamWriter model, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA715AC
    void SerializeModel(::Normal::Realtime::Serialization::IStreamWriter* model, ::Normal::Realtime::Serialization::StreamContext context);
    // public System.Void WriteNull(System.UInt32 propertyID)
    // Offset: 0xA71724
    void WriteNull(uint propertyID);
    // public System.Void WriteVarint32(System.UInt32 propertyID, System.UInt32 value)
    // Offset: 0xA6BE48
    void WriteVarint32(uint propertyID, uint value);
    // public System.Void WriteFloat(System.UInt32 propertyID, System.Single value)
    // Offset: 0xA717B0
    void WriteFloat(uint propertyID, float value);
    // public System.Void WriteDouble(System.UInt32 propertyID, System.Double value)
    // Offset: 0xA717F0
    void WriteDouble(uint propertyID, double value);
    // public System.Void WriteBytes(System.UInt32 propertyID, System.Byte[] value)
    // Offset: 0xA71830
    void WriteBytes(uint propertyID, ::ArrayW<uint8_t> value);
    // public System.Void WriteBytes(System.UInt32 propertyID, System.Byte[] value, System.Int32 offset, System.Int32 length)
    // Offset: 0xA718A4
    void WriteBytes(uint propertyID, ::ArrayW<uint8_t> value, int offset, int length);
    // public System.Void WriteString(System.UInt32 propertyID, System.String value)
    // Offset: 0xA62D4C
    void WriteString(uint propertyID, ::StringW value);
    // public System.Void WriteModel(System.UInt32 propertyID, Normal.Realtime.Serialization.IStreamWriter value, Normal.Realtime.Serialization.StreamContext context, System.Boolean forceWriteFullModel)
    // Offset: 0xA62D7C
    void WriteModel(uint propertyID, ::Normal::Realtime::Serialization::IStreamWriter* value, ::Normal::Realtime::Serialization::StreamContext context, bool forceWriteFullModel);
    // public System.Void WriteCollection(System.UInt32 propertyID, Normal.Realtime.Serialization.ICollection value, Normal.Realtime.Serialization.StreamContext context, System.Boolean forceWriteFullModel)
    // Offset: 0xA71B34
    void WriteCollection(uint propertyID, ::Normal::Realtime::Serialization::ICollection* value, ::Normal::Realtime::Serialization::StreamContext context, bool forceWriteFullModel);
    // private System.Void WriteRawPropertyKey(System.UInt32 propertyID, Normal.Realtime.Serialization.Serialization/Normal.Realtime.Serialization.WireType wireType)
    // Offset: 0xA7172C
    void WriteRawPropertyKey(uint propertyID, ::Normal::Realtime::Serialization::Serialization::WireType wireType);
    // private System.Void WriteRawBytes(System.Byte[] value)
    // Offset: 0xA71860
    void WriteRawBytes(::ArrayW<uint8_t> value);
    // private System.Void WriteRawBytes(System.Byte[] value, System.Int32 offset, System.Int32 length)
    // Offset: 0xA718EC
    void WriteRawBytes(::ArrayW<uint8_t> value, int offset, int length);
    // private System.Void WriteRawString(System.String value)
    // Offset: 0xA71944
    void WriteRawString(::StringW value);
    // private System.Void WriteRawModel(Normal.Realtime.Serialization.IStreamWriter model, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA716C0
    void WriteRawModel(::Normal::Realtime::Serialization::IStreamWriter* model, ::Normal::Realtime::Serialization::StreamContext context);
    // private System.Void WriteRawModel(Normal.Realtime.Serialization.IStreamWriter model, System.Int32 modelWriteLength, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA719D4
    void WriteRawModel(::Normal::Realtime::Serialization::IStreamWriter* model, int modelWriteLength, ::Normal::Realtime::Serialization::StreamContext context);
    // private System.Void WriteRawCollection(Normal.Realtime.Serialization.ICollection collection, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA71CD8
    void WriteRawCollection(::Normal::Realtime::Serialization::ICollection* collection, ::Normal::Realtime::Serialization::StreamContext context);
    // private System.Void WriteRawCollection(Normal.Realtime.Serialization.ICollection collection, System.Int32 collectionWriteLength, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0xA71BD4
    void WriteRawCollection(::Normal::Realtime::Serialization::ICollection* collection, int collectionWriteLength, ::Normal::Realtime::Serialization::StreamContext context);
    // static public System.Int32 LengthBool(System.Boolean value)
    // Offset: 0xA71D3C
    static int LengthBool(bool value);
    // static public System.Int32 LengthByte(System.Byte value)
    // Offset: 0xA71D44
    static int LengthByte(uint8_t value);
    // static public System.Int32 LengthSByte(System.SByte value)
    // Offset: 0xA71D4C
    static int LengthSByte(int8_t value);
    // static public System.Int32 LengthUShort(System.UInt16 value)
    // Offset: 0xA71D54
    static int LengthUShort(uint16_t value);
    // static public System.Int32 LengthShort(System.Int16 value)
    // Offset: 0xA71D78
    static int LengthShort(int16_t value);
    // static public System.Int32 LengthUInt(System.UInt32 value)
    // Offset: 0xA71DB4
    static int LengthUInt(uint value);
    // static public System.Int32 LengthInt(System.Int32 value)
    // Offset: 0xA71DF8
    static int LengthInt(int value);
    // static public System.Int32 LengthFloat(System.Single value)
    // Offset: 0xA71E3C
    static int LengthFloat(float value);
    // static public System.Int32 LengthDouble(System.Double value)
    // Offset: 0xA71E44
    static int LengthDouble(double value);
    // static public System.Int32 LengthString(System.String value)
    // Offset: 0xA71E4C
    static int LengthString(::StringW value);
    // static public System.Int32 LengthBytes(System.Byte[] value)
    // Offset: 0xA71E50
    static int LengthBytes(::ArrayW<uint8_t> value);
    // static private System.Int32 LengthVarint32(System.UInt32 value)
    // Offset: 0xA71EA4
    static int LengthVarint32(uint value);
    // static public System.Int32 LengthPropertyHeader(in Normal.Realtime.Serialization.PropertyHeader header)
    // Offset: 0xA71EE8
    static int LengthPropertyHeader(ByRef<::Normal::Realtime::Serialization::PropertyHeader> header);
    // public System.Void WriteBool(System.Boolean value)
    // Offset: 0xA71F38
    void WriteBool(bool value);
    // public System.Void WriteByte(System.Byte value)
    // Offset: 0xA71F54
    void WriteByte(uint8_t value);
    // public System.Void WriteSByte(System.SByte value)
    // Offset: 0xA71F6C
    void WriteSByte(int8_t value);
    // public System.Void WriteUShort(System.UInt16 value)
    // Offset: 0xA71F88
    void WriteUShort(uint16_t value);
    // public System.Void WriteShort(System.Int16 value)
    // Offset: 0xA71FA4
    void WriteShort(int16_t value);
    // public System.Void WriteUInt(System.UInt32 value)
    // Offset: 0xA71FC0
    void WriteUInt(uint value);
    // public System.Void WriteInt(System.Int32 value)
    // Offset: 0xA71FD8
    void WriteInt(int value);
    // public System.Void WriteFloat(System.Single value)
    // Offset: 0xA71FF0
    void WriteFloat(float value);
    // public System.Void WriteDouble(System.Double value)
    // Offset: 0xA7200C
    void WriteDouble(double value);
    // public System.Void WriteString(System.String value)
    // Offset: 0xA72028
    void WriteString(::StringW value);
    // public System.Void WriteBytes(System.Byte[] value)
    // Offset: 0xA7202C
    void WriteBytes(::ArrayW<uint8_t> value);
    // public System.Void WritePropertyHeader(in Normal.Realtime.Serialization.PropertyHeader header)
    // Offset: 0xA72030
    void WritePropertyHeader(ByRef<::Normal::Realtime::Serialization::PropertyHeader> header);
  }; // Normal.Realtime.Serialization.WriteStream
  #pragma pack(pop)
  static check_size<sizeof(WriteStream), 16 + sizeof(::Normal::Realtime::Serialization::WriteBuffer*)> __Normal_Realtime_Serialization_WriteStreamSizeCheck;
  static_assert(sizeof(WriteStream) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::ConvertNegativeOneIntToUInt
// Il2CppName: ConvertNegativeOneIntToUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(int)>(&Normal::Realtime::Serialization::WriteStream::ConvertNegativeOneIntToUInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "ConvertNegativeOneIntToUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::Vector2ToBytesLength
// Il2CppName: Vector2ToBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::Vector2ToBytesLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "Vector2ToBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::Vector2ToBytes
// Il2CppName: Vector2ToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::UnityEngine::Vector2)>(&Normal::Realtime::Serialization::WriteStream::Vector2ToBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "Vector2ToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::Vector3ToBytesLength
// Il2CppName: Vector3ToBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::Vector3ToBytesLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "Vector3ToBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::Vector3ToBytes
// Il2CppName: Vector3ToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::UnityEngine::Vector3)>(&Normal::Realtime::Serialization::WriteStream::Vector3ToBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "Vector3ToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::QuaternionToBytesLength
// Il2CppName: QuaternionToBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::QuaternionToBytesLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "QuaternionToBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::QuaternionToBytes
// Il2CppName: QuaternionToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::UnityEngine::Quaternion)>(&Normal::Realtime::Serialization::WriteStream::QuaternionToBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "QuaternionToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::ColorToBytesLength
// Il2CppName: ColorToBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::ColorToBytesLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "ColorToBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::ColorToBytes
// Il2CppName: ColorToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::UnityEngine::Color)>(&Normal::Realtime::Serialization::WriteStream::ColorToBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "ColorToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::FloatToBytesLength
// Il2CppName: FloatToBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::FloatToBytesLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "FloatToBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::FloatToBytes
// Il2CppName: FloatToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, ::ArrayW<uint8_t>, ByRef<int>)>(&Normal::Realtime::Serialization::WriteStream::FloatToBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "FloatToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, offset});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteNullLength
// Il2CppName: WriteNullLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Normal::Realtime::Serialization::WriteStream::WriteNullLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteNullLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteVarint32Length
// Il2CppName: WriteVarint32Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, uint)>(&Normal::Realtime::Serialization::WriteStream::WriteVarint32Length)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteVarint32Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteFloatLength
// Il2CppName: WriteFloatLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Normal::Realtime::Serialization::WriteStream::WriteFloatLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteFloatLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteDoubleLength
// Il2CppName: WriteDoubleLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Normal::Realtime::Serialization::WriteStream::WriteDoubleLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteDoubleLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteBytesLength
// Il2CppName: WriteBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, int)>(&Normal::Realtime::Serialization::WriteStream::WriteBytesLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* numberOfBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, numberOfBytes});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteBytesLength
// Il2CppName: WriteBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::WriteStream::WriteBytesLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteStringLength
// Il2CppName: WriteStringLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ::StringW)>(&Normal::Realtime::Serialization::WriteStream::WriteStringLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteStringLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteModelLength
// Il2CppName: WriteModelLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ::Normal::Realtime::Serialization::IStreamWriter*, ::Normal::Realtime::Serialization::StreamContext, bool)>(&Normal::Realtime::Serialization::WriteStream::WriteModelLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    static auto* forceWriteFullModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteModelLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, model, context, forceWriteFullModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteCollectionLength
// Il2CppName: WriteCollectionLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ::Normal::Realtime::Serialization::ICollection*, ::Normal::Realtime::Serialization::StreamContext, bool)>(&Normal::Realtime::Serialization::WriteStream::WriteCollectionLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* collection = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ICollection")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    static auto* forceWriteFullModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteCollectionLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, collection, context, forceWriteFullModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawPropertyKeyLength
// Il2CppName: WriteRawPropertyKeyLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ::Normal::Realtime::Serialization::Serialization::WireType)>(&Normal::Realtime::Serialization::WriteStream::WriteRawPropertyKeyLength)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* wireType = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "Serialization/WireType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawPropertyKeyLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, wireType});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawByteLength
// Il2CppName: WriteRawByteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::WriteRawByteLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawByteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawVarint32Length
// Il2CppName: WriteRawVarint32Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Normal::Realtime::Serialization::WriteStream::WriteRawVarint32Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawVarint32Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawFloatLength
// Il2CppName: WriteRawFloatLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::WriteRawFloatLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawFloatLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawDoubleLength
// Il2CppName: WriteRawDoubleLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Normal::Realtime::Serialization::WriteStream::WriteRawDoubleLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawDoubleLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawBytesLength
// Il2CppName: WriteRawBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Normal::Realtime::Serialization::WriteStream::WriteRawBytesLength)> {
  static const MethodInfo* get() {
    static auto* numberOfBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numberOfBytes});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawBytesLength
// Il2CppName: WriteRawBytesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::WriteStream::WriteRawBytesLength)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawBytesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawStringLength
// Il2CppName: WriteRawStringLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&Normal::Realtime::Serialization::WriteStream::WriteRawStringLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawStringLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawModelLength
// Il2CppName: WriteRawModelLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Normal::Realtime::Serialization::IStreamWriter*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawModelLength)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawModelLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawModelLength
// Il2CppName: WriteRawModelLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Normal::Realtime::Serialization::IStreamWriter*, int, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawModelLength)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* modelWriteLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawModelLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, modelWriteLength, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawCollectionLength
// Il2CppName: WriteRawCollectionLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Normal::Realtime::Serialization::ICollection*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawCollectionLength)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ICollection")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawCollectionLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawCollectionLength
// Il2CppName: WriteRawCollectionLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Normal::Realtime::Serialization::ICollection*, int, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawCollectionLength)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ICollection")->byval_arg;
    static auto* collectionWriteLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawCollectionLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection, collectionWriteLength, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::GetModelWriteLength
// Il2CppName: GetModelWriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Normal::Realtime::Serialization::IStreamWriter*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::GetModelWriteLength)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "GetModelWriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::SerializeModel
// Il2CppName: SerializeModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::Normal::Realtime::Serialization::IStreamWriter*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::SerializeModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "SerializeModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteNull
// Il2CppName: WriteNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint)>(&Normal::Realtime::Serialization::WriteStream::WriteNull)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteVarint32
// Il2CppName: WriteVarint32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, uint)>(&Normal::Realtime::Serialization::WriteStream::WriteVarint32)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteVarint32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteFloat
// Il2CppName: WriteFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, float)>(&Normal::Realtime::Serialization::WriteStream::WriteFloat)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteDouble
// Il2CppName: WriteDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, double)>(&Normal::Realtime::Serialization::WriteStream::WriteDouble)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteBytes
// Il2CppName: WriteBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, ::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::WriteStream::WriteBytes)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteBytes
// Il2CppName: WriteBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, ::ArrayW<uint8_t>, int, int)>(&Normal::Realtime::Serialization::WriteStream::WriteBytes)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value, offset, length});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, ::StringW)>(&Normal::Realtime::Serialization::WriteStream::WriteString)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteModel
// Il2CppName: WriteModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, ::Normal::Realtime::Serialization::IStreamWriter*, ::Normal::Realtime::Serialization::StreamContext, bool)>(&Normal::Realtime::Serialization::WriteStream::WriteModel)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    static auto* forceWriteFullModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value, context, forceWriteFullModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteCollection
// Il2CppName: WriteCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, ::Normal::Realtime::Serialization::ICollection*, ::Normal::Realtime::Serialization::StreamContext, bool)>(&Normal::Realtime::Serialization::WriteStream::WriteCollection)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ICollection")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    static auto* forceWriteFullModel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, value, context, forceWriteFullModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawPropertyKey
// Il2CppName: WriteRawPropertyKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint, ::Normal::Realtime::Serialization::Serialization::WireType)>(&Normal::Realtime::Serialization::WriteStream::WriteRawPropertyKey)> {
  static const MethodInfo* get() {
    static auto* propertyID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* wireType = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "Serialization/WireType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawPropertyKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyID, wireType});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawBytes
// Il2CppName: WriteRawBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::WriteStream::WriteRawBytes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawBytes
// Il2CppName: WriteRawBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::ArrayW<uint8_t>, int, int)>(&Normal::Realtime::Serialization::WriteStream::WriteRawBytes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, offset, length});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawString
// Il2CppName: WriteRawString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::StringW)>(&Normal::Realtime::Serialization::WriteStream::WriteRawString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawModel
// Il2CppName: WriteRawModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::Normal::Realtime::Serialization::IStreamWriter*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawModel
// Il2CppName: WriteRawModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::Normal::Realtime::Serialization::IStreamWriter*, int, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IStreamWriter")->byval_arg;
    static auto* modelWriteLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, modelWriteLength, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawCollection
// Il2CppName: WriteRawCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::Normal::Realtime::Serialization::ICollection*, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawCollection)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ICollection")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteRawCollection
// Il2CppName: WriteRawCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::Normal::Realtime::Serialization::ICollection*, int, ::Normal::Realtime::Serialization::StreamContext)>(&Normal::Realtime::Serialization::WriteStream::WriteRawCollection)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ICollection")->byval_arg;
    static auto* collectionWriteLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteRawCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection, collectionWriteLength, context});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthBool
// Il2CppName: LengthBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(bool)>(&Normal::Realtime::Serialization::WriteStream::LengthBool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthByte
// Il2CppName: LengthByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint8_t)>(&Normal::Realtime::Serialization::WriteStream::LengthByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthSByte
// Il2CppName: LengthSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int8_t)>(&Normal::Realtime::Serialization::WriteStream::LengthSByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthUShort
// Il2CppName: LengthUShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint16_t)>(&Normal::Realtime::Serialization::WriteStream::LengthUShort)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthUShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthShort
// Il2CppName: LengthShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int16_t)>(&Normal::Realtime::Serialization::WriteStream::LengthShort)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthUInt
// Il2CppName: LengthUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Normal::Realtime::Serialization::WriteStream::LengthUInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthInt
// Il2CppName: LengthInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Normal::Realtime::Serialization::WriteStream::LengthInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthFloat
// Il2CppName: LengthFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&Normal::Realtime::Serialization::WriteStream::LengthFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthDouble
// Il2CppName: LengthDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(double)>(&Normal::Realtime::Serialization::WriteStream::LengthDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthString
// Il2CppName: LengthString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&Normal::Realtime::Serialization::WriteStream::LengthString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthBytes
// Il2CppName: LengthBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::WriteStream::LengthBytes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthVarint32
// Il2CppName: LengthVarint32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Normal::Realtime::Serialization::WriteStream::LengthVarint32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthVarint32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::LengthPropertyHeader
// Il2CppName: LengthPropertyHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::Normal::Realtime::Serialization::PropertyHeader>)>(&Normal::Realtime::Serialization::WriteStream::LengthPropertyHeader)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "PropertyHeader")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "LengthPropertyHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteBool
// Il2CppName: WriteBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(bool)>(&Normal::Realtime::Serialization::WriteStream::WriteBool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteByte
// Il2CppName: WriteByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint8_t)>(&Normal::Realtime::Serialization::WriteStream::WriteByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteSByte
// Il2CppName: WriteSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(int8_t)>(&Normal::Realtime::Serialization::WriteStream::WriteSByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteUShort
// Il2CppName: WriteUShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint16_t)>(&Normal::Realtime::Serialization::WriteStream::WriteUShort)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteUShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteShort
// Il2CppName: WriteShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(int16_t)>(&Normal::Realtime::Serialization::WriteStream::WriteShort)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteUInt
// Il2CppName: WriteUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(uint)>(&Normal::Realtime::Serialization::WriteStream::WriteUInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteInt
// Il2CppName: WriteInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(int)>(&Normal::Realtime::Serialization::WriteStream::WriteInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteFloat
// Il2CppName: WriteFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(float)>(&Normal::Realtime::Serialization::WriteStream::WriteFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteDouble
// Il2CppName: WriteDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(double)>(&Normal::Realtime::Serialization::WriteStream::WriteDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::StringW)>(&Normal::Realtime::Serialization::WriteStream::WriteString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WriteBytes
// Il2CppName: WriteBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(::ArrayW<uint8_t>)>(&Normal::Realtime::Serialization::WriteStream::WriteBytes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WriteBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::WriteStream::WritePropertyHeader
// Il2CppName: WritePropertyHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Serialization::WriteStream::*)(ByRef<::Normal::Realtime::Serialization::PropertyHeader>)>(&Normal::Realtime::Serialization::WriteStream::WritePropertyHeader)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "PropertyHeader")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::WriteStream*), "WritePropertyHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header});
  }
};
