// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AnimateBrickCategoryImages
  class AnimateBrickCategoryImages;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AnimateBrickCategoryImages);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AnimateBrickCategoryImages*, "", "AnimateBrickCategoryImages");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: AnimateBrickCategoryImages
  // [TokenAttribute] Offset: FFFFFFFF
  class AnimateBrickCategoryImages : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean active
    // Size: 0x1
    // Offset: 0x18
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: active and: animationValue
    char __padding0[0x3] = {};
    // private System.Single animationValue
    // Size: 0x4
    // Offset: 0x1C
    float animationValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single animationSpeed
    // Size: 0x4
    // Offset: 0x20
    float animationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color unselectedColor
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color unselectedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color selectedColor
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Color selectedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single unselectedImageScale
    // Size: 0x4
    // Offset: 0x44
    float unselectedImageScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single selectedImageScale
    // Size: 0x4
    // Offset: 0x48
    float selectedImageScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: selectedImageScale and: backgroundImage
    char __padding6[0x4] = {};
    // public UnityEngine.UI.Image backgroundImage
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Image* backgroundImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image brickImage
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UI::Image* brickImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public System.String categoryName
    // Size: 0x8
    // Offset: 0x60
    ::StringW categoryName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean active
    [[deprecated]] bool& dyn_active();
    // Get instance field reference: private System.Single animationValue
    [[deprecated]] float& dyn_animationValue();
    // Get instance field reference: public System.Single animationSpeed
    [[deprecated]] float& dyn_animationSpeed();
    // Get instance field reference: public UnityEngine.Color unselectedColor
    [[deprecated]] ::UnityEngine::Color& dyn_unselectedColor();
    // Get instance field reference: public UnityEngine.Color selectedColor
    [[deprecated]] ::UnityEngine::Color& dyn_selectedColor();
    // Get instance field reference: public System.Single unselectedImageScale
    [[deprecated]] float& dyn_unselectedImageScale();
    // Get instance field reference: public System.Single selectedImageScale
    [[deprecated]] float& dyn_selectedImageScale();
    // Get instance field reference: public UnityEngine.UI.Image backgroundImage
    [[deprecated]] ::UnityEngine::UI::Image*& dyn_backgroundImage();
    // Get instance field reference: public UnityEngine.UI.Image brickImage
    [[deprecated]] ::UnityEngine::UI::Image*& dyn_brickImage();
    // Get instance field reference: public System.String categoryName
    [[deprecated]] ::StringW& dyn_categoryName();
    // private System.Void Awake()
    // Offset: 0x6DE280
    void Awake();
    // private System.Void Update()
    // Offset: 0x6DE470
    void Update();
    // private System.Void RunAnimation()
    // Offset: 0x6DE2B0
    void RunAnimation();
    // public System.Void .ctor()
    // Offset: 0x6DE4E0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimateBrickCategoryImages* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimateBrickCategoryImages::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimateBrickCategoryImages*, creationType>()));
    }
  }; // AnimateBrickCategoryImages
  #pragma pack(pop)
  static check_size<sizeof(AnimateBrickCategoryImages), 96 + sizeof(::StringW)> __GlobalNamespace_AnimateBrickCategoryImagesSizeCheck;
  static_assert(sizeof(AnimateBrickCategoryImages) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AnimateBrickCategoryImages::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnimateBrickCategoryImages::*)()>(&GlobalNamespace::AnimateBrickCategoryImages::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnimateBrickCategoryImages*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnimateBrickCategoryImages::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnimateBrickCategoryImages::*)()>(&GlobalNamespace::AnimateBrickCategoryImages::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnimateBrickCategoryImages*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnimateBrickCategoryImages::RunAnimation
// Il2CppName: RunAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnimateBrickCategoryImages::*)()>(&GlobalNamespace::AnimateBrickCategoryImages::RunAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnimateBrickCategoryImages*), "RunAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnimateBrickCategoryImages::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
