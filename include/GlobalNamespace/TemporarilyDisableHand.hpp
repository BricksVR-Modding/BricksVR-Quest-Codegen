// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRDirectInteractor
  class XRDirectInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TemporarilyDisableHand
  class TemporarilyDisableHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TemporarilyDisableHand);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TemporarilyDisableHand*, "", "TemporarilyDisableHand");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: TemporarilyDisableHand
  // [TokenAttribute] Offset: FFFFFFFF
  class TemporarilyDisableHand : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::TemporarilyDisableHand::$TemporarilyDisableIEnum$d__5
    class $TemporarilyDisableIEnum$d__5;
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRDirectInteractor _xrDirectInteractor
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor* xrDirectInteractor;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*) == 0x8);
    // private UnityEngine.LayerMask _previousLayerMask
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::LayerMask previousLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: previousLayerMask and: coroutine
    char __padding1[0x4] = {};
    // private UnityEngine.Coroutine _coroutine
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Coroutine* coroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRDirectInteractor _xrDirectInteractor
    [[deprecated]] ::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*& dyn__xrDirectInteractor();
    // Get instance field reference: private UnityEngine.LayerMask _previousLayerMask
    [[deprecated]] ::UnityEngine::LayerMask& dyn__previousLayerMask();
    // Get instance field reference: private UnityEngine.Coroutine _coroutine
    [[deprecated]] ::UnityEngine::Coroutine*& dyn__coroutine();
    // private System.Void Start()
    // Offset: 0x6D0430
    void Start();
    // public System.Void TemporarilyDisable()
    // Offset: 0x6D0500
    void TemporarilyDisable();
    // private System.Collections.IEnumerator TemporarilyDisableIEnum(System.Single time)
    // Offset: 0x6D0480
    ::System::Collections::IEnumerator* TemporarilyDisableIEnum(float time);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TemporarilyDisableHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TemporarilyDisableHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TemporarilyDisableHand*, creationType>()));
    }
  }; // TemporarilyDisableHand
  #pragma pack(pop)
  static check_size<sizeof(TemporarilyDisableHand), 40 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_TemporarilyDisableHandSizeCheck;
  static_assert(sizeof(TemporarilyDisableHand) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TemporarilyDisableHand::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TemporarilyDisableHand::*)()>(&GlobalNamespace::TemporarilyDisableHand::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TemporarilyDisableHand*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TemporarilyDisableHand::TemporarilyDisable
// Il2CppName: TemporarilyDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TemporarilyDisableHand::*)()>(&GlobalNamespace::TemporarilyDisableHand::TemporarilyDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TemporarilyDisableHand*), "TemporarilyDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TemporarilyDisableHand::TemporarilyDisableIEnum
// Il2CppName: TemporarilyDisableIEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TemporarilyDisableHand::*)(float)>(&GlobalNamespace::TemporarilyDisableHand::TemporarilyDisableIEnum)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TemporarilyDisableHand*), "TemporarilyDisableIEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TemporarilyDisableHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
