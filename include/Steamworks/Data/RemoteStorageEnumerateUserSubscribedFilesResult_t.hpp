// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Steamworks.ICallbackData
#include "Steamworks/ICallbackData.hpp"
// Including type: Steamworks.Result
#include "Steamworks/Result.hpp"
// Including type: Steamworks.Data.PublishedFileId
#include "Steamworks/Data/PublishedFileId.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: CallbackType
  struct CallbackType;
}
// Completed forward declares
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: RemoteStorageEnumerateUserSubscribedFilesResult_t
  struct RemoteStorageEnumerateUserSubscribedFilesResult_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t, "Steamworks.Data", "RemoteStorageEnumerateUserSubscribedFilesResult_t");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.RemoteStorageEnumerateUserSubscribedFilesResult_t
  // [TokenAttribute] Offset: FFFFFFFF
  struct RemoteStorageEnumerateUserSubscribedFilesResult_t/*, public ::System::ValueType, public ::Steamworks::ICallbackData*/ {
    public:
    public:
    // Steamworks.Result Result
    // Size: 0x4
    // Offset: 0x0
    ::Steamworks::Result Result;
    // Field size check
    static_assert(sizeof(::Steamworks::Result) == 0x4);
    // System.Int32 ResultsReturned
    // Size: 0x4
    // Offset: 0x4
    int ResultsReturned;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 TotalResultCount
    // Size: 0x4
    // Offset: 0x8
    int TotalResultCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: TotalResultCount and: GPublishedFileId
    char __padding2[0x4] = {};
    // Steamworks.Data.PublishedFileId[] GPublishedFileId
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Steamworks::Data::PublishedFileId> GPublishedFileId;
    // Field size check
    static_assert(sizeof(::ArrayW<::Steamworks::Data::PublishedFileId>) == 0x8);
    // System.UInt32[] GRTimeSubscribed
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint> GRTimeSubscribed;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    public:
    // Creating value type constructor for type: RemoteStorageEnumerateUserSubscribedFilesResult_t
    constexpr RemoteStorageEnumerateUserSubscribedFilesResult_t(::Steamworks::Result Result_ = {}, int ResultsReturned_ = {}, int TotalResultCount_ = {}, ::ArrayW<::Steamworks::Data::PublishedFileId> GPublishedFileId_ = ::ArrayW<::Steamworks::Data::PublishedFileId>(static_cast<void*>(nullptr)), ::ArrayW<uint> GRTimeSubscribed_ = ::ArrayW<uint>(static_cast<void*>(nullptr))) noexcept : Result{Result_}, ResultsReturned{ResultsReturned_}, TotalResultCount{TotalResultCount_}, GPublishedFileId{GPublishedFileId_}, GRTimeSubscribed{GRTimeSubscribed_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Steamworks::ICallbackData
    operator ::Steamworks::ICallbackData() noexcept {
      return *reinterpret_cast<::Steamworks::ICallbackData*>(this);
    }
    // Get static field: static public System.Int32 _datasize
    static int _get__datasize();
    // Set static field: static public System.Int32 _datasize
    static void _set__datasize(int value);
    // Get instance field reference: Steamworks.Result Result
    ::Steamworks::Result& dyn_Result();
    // Get instance field reference: System.Int32 ResultsReturned
    int& dyn_ResultsReturned();
    // Get instance field reference: System.Int32 TotalResultCount
    int& dyn_TotalResultCount();
    // Get instance field reference: Steamworks.Data.PublishedFileId[] GPublishedFileId
    ::ArrayW<::Steamworks::Data::PublishedFileId>& dyn_GPublishedFileId();
    // Get instance field reference: System.UInt32[] GRTimeSubscribed
    ::ArrayW<uint>& dyn_GRTimeSubscribed();
    // public Steamworks.CallbackType get_CallbackType()
    // Offset: 0xA58108
    ::Steamworks::CallbackType get_CallbackType();
    // static private System.Void .cctor()
    // Offset: 0xA58110
    static void _cctor();
  }; // Steamworks.Data.RemoteStorageEnumerateUserSubscribedFilesResult_t
  #pragma pack(pop)
  static check_size<sizeof(RemoteStorageEnumerateUserSubscribedFilesResult_t), 24 + sizeof(::ArrayW<uint>)> __Steamworks_Data_RemoteStorageEnumerateUserSubscribedFilesResult_tSizeCheck;
  static_assert(sizeof(RemoteStorageEnumerateUserSubscribedFilesResult_t) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t::get_CallbackType
// Il2CppName: get_CallbackType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::CallbackType (Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t::*)()>(&Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t::get_CallbackType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t), "get_CallbackType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::RemoteStorageEnumerateUserSubscribedFilesResult_t), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
