// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.LocomotionProvider
#include "UnityEngine/XR/Interaction/Toolkit/LocomotionProvider.hpp"
// Including type: UnityEngine.XR.InputFeatureUsage`1
#include "UnityEngine/XR/InputFeatureUsage_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRController
  class XRController;
  // Skipping declaration: InputAxes because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: SnapTurnProvider
  class SnapTurnProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*, "UnityEngine.XR.Interaction.Toolkit", "SnapTurnProvider");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class SnapTurnProvider : public ::UnityEngine::XR::Interaction::Toolkit::LocomotionProvider {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes
    struct InputAxes;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputAxes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputAxes
      constexpr InputAxes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static constexpr const int Primary2DAxis = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes _get_Primary2DAxis();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static void _set_Primary2DAxis(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static constexpr const int Secondary2DAxis = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes _get_Secondary2DAxis();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static void _set_Secondary2DAxis(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes
    #pragma pack(pop)
    static check_size<sizeof(SnapTurnProvider::InputAxes), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_SnapTurnProvider_InputAxesSizeCheck;
    static_assert(sizeof(SnapTurnProvider::InputAxes) == 0x4);
    public:
    // public System.Int32 turnIndex
    // Size: 0x4
    // Offset: 0x30
    int turnIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xD4960
    // private UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes m_TurnUsage
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes m_TurnUsage;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes) == 0x4);
    // [TooltipAttribute] Offset: 0xD4B20
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRController> m_Controllers
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRController*>* m_Controllers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRController*>*) == 0x8);
    // [TooltipAttribute] Offset: 0xD6000
    // private System.Single m_TurnAmount
    // Size: 0x4
    // Offset: 0x40
    float m_TurnAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD61D0
    // private System.Single m_DebounceTime
    // Size: 0x4
    // Offset: 0x44
    float m_DebounceTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD6320
    // private System.Single m_DeadZone
    // Size: 0x4
    // Offset: 0x48
    float m_DeadZone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_CurrentTurnAmount
    // Size: 0x4
    // Offset: 0x4C
    float m_CurrentTurnAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TimeStarted
    // Size: 0x4
    // Offset: 0x50
    float m_TimeStarted;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_TimeStarted and: m_ControllersWereActive
    char __padding7[0x4] = {};
    // private System.Collections.Generic.List`1<System.Boolean> m_ControllersWereActive
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<bool>* m_ControllersWereActive;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<bool>*) == 0x8);
    public:
    // Get static field: static private readonly UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Vector2>[] m_Vec2UsageList
    static ::ArrayW<::UnityEngine::XR::InputFeatureUsage_1<::UnityEngine::Vector2>> _get_m_Vec2UsageList();
    // Set static field: static private readonly UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Vector2>[] m_Vec2UsageList
    static void _set_m_Vec2UsageList(::ArrayW<::UnityEngine::XR::InputFeatureUsage_1<::UnityEngine::Vector2>> value);
    // Get instance field reference: public System.Int32 turnIndex
    [[deprecated]] int& dyn_turnIndex();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes m_TurnUsage
    [[deprecated]] ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes& dyn_m_TurnUsage();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRController> m_Controllers
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRController*>*& dyn_m_Controllers();
    // Get instance field reference: private System.Single m_TurnAmount
    [[deprecated]] float& dyn_m_TurnAmount();
    // Get instance field reference: private System.Single m_DebounceTime
    [[deprecated]] float& dyn_m_DebounceTime();
    // Get instance field reference: private System.Single m_DeadZone
    [[deprecated]] float& dyn_m_DeadZone();
    // Get instance field reference: private System.Single m_CurrentTurnAmount
    [[deprecated]] float& dyn_m_CurrentTurnAmount();
    // Get instance field reference: private System.Single m_TimeStarted
    [[deprecated]] float& dyn_m_TimeStarted();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Boolean> m_ControllersWereActive
    [[deprecated]] ::System::Collections::Generic::List_1<bool>*& dyn_m_ControllersWereActive();
    // public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes get_turnUsage()
    // Offset: 0x217200
    ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes get_turnUsage();
    // public System.Void set_turnUsage(UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes value)
    // Offset: 0x217260
    void set_turnUsage(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes value);
    // public System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRController> get_controllers()
    // Offset: 0x1E1940
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRController*>* get_controllers();
    // public System.Void set_controllers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRController> value)
    // Offset: 0x2322B0
    void set_controllers(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRController*>* value);
    // public System.Single get_turnAmount()
    // Offset: 0x2F9050
    float get_turnAmount();
    // public System.Void set_turnAmount(System.Single value)
    // Offset: 0x2F9070
    void set_turnAmount(float value);
    // public System.Single get_debounceTime()
    // Offset: 0x23FD70
    float get_debounceTime();
    // public System.Void set_debounceTime(System.Single value)
    // Offset: 0x2400D0
    void set_debounceTime(float value);
    // public System.Single get_deadZone()
    // Offset: 0x2F9040
    float get_deadZone();
    // public System.Void set_deadZone(System.Single value)
    // Offset: 0x2F9060
    void set_deadZone(float value);
    // private System.Void Update()
    // Offset: 0x2F8A40
    void Update();
    // private System.Void EnsureControllerDataListSize()
    // Offset: 0x2F8840
    void EnsureControllerDataListSize();
    // System.Void FakeStartTurn(System.Boolean isLeft)
    // Offset: 0x2F8920
    void FakeStartTurn(bool isLeft);
    // private System.Void StartTurn(System.Single amount)
    // Offset: 0x2F8940
    void StartTurn(float amount);
    // public System.Void .ctor()
    // Offset: 0x2F8F90
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.LocomotionProvider
    // Base method: System.Void LocomotionProvider::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SnapTurnProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SnapTurnProvider*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2F8E90
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider
  #pragma pack(pop)
  static check_size<sizeof(SnapTurnProvider), 88 + sizeof(::System::Collections::Generic::List_1<bool>*)> __UnityEngine_XR_Interaction_Toolkit_SnapTurnProviderSizeCheck;
  static_assert(sizeof(SnapTurnProvider) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes, "UnityEngine.XR.Interaction.Toolkit", "SnapTurnProvider/InputAxes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_turnUsage
// Il2CppName: get_turnUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_turnUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "get_turnUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_turnUsage
// Il2CppName: set_turnUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::InputAxes)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_turnUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "SnapTurnProvider/InputAxes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "set_turnUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_controllers
// Il2CppName: get_controllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRController*>* (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_controllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "get_controllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_controllers
// Il2CppName: set_controllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRController*>*)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_controllers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "set_controllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_turnAmount
// Il2CppName: get_turnAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_turnAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "get_turnAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_turnAmount
// Il2CppName: set_turnAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_turnAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "set_turnAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_debounceTime
// Il2CppName: get_debounceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_debounceTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "get_debounceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_debounceTime
// Il2CppName: set_debounceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_debounceTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "set_debounceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_deadZone
// Il2CppName: get_deadZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::get_deadZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "get_deadZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_deadZone
// Il2CppName: set_deadZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::set_deadZone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "set_deadZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::EnsureControllerDataListSize
// Il2CppName: EnsureControllerDataListSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::EnsureControllerDataListSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "EnsureControllerDataListSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::FakeStartTurn
// Il2CppName: FakeStartTurn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::FakeStartTurn)> {
  static const MethodInfo* get() {
    static auto* isLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "FakeStartTurn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeft});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::StartTurn
// Il2CppName: StartTurn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::StartTurn)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), "StartTurn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
