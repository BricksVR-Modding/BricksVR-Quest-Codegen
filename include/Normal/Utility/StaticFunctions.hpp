// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Forward declaring type: StaticFunctions
  class StaticFunctions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Utility::StaticFunctions);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Utility::StaticFunctions*, "Normal.Utility", "StaticFunctions");
// Type namespace: Normal.Utility
namespace Normal::Utility {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Utility.StaticFunctions
  // [TokenAttribute] Offset: FFFFFFFF
  class StaticFunctions : public ::Il2CppObject {
    public:
    // static public System.Void SetLayerRecursively(UnityEngine.GameObject gameObject, System.Int32 layer)
    // Offset: 0x89F6B0
    static void SetLayerRecursively(::UnityEngine::GameObject* gameObject, int layer);
    // static public System.Single CalculateAverageDbForAudioBuffer(System.Single[] audioBuffer, System.Int32 offset)
    // Offset: 0x89F2F0
    static float CalculateAverageDbForAudioBuffer(::ArrayW<float> audioBuffer, int offset);
    // static public System.Single LinearToDb(System.Single linear)
    // Offset: 0x89F480
    static float LinearToDb(float linear);
    // static public System.Void SwingTwistDecomposition(UnityEngine.Quaternion rotation, UnityEngine.Vector3 direction, out UnityEngine.Quaternion swing, out UnityEngine.Quaternion twist)
    // Offset: 0x89F9C0
    static void SwingTwistDecomposition(::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 direction, ByRef<::UnityEngine::Quaternion> swing, ByRef<::UnityEngine::Quaternion> twist);
    // static private UnityEngine.Vector4 NormalizeQuaternion(UnityEngine.Vector4 quaternion)
    // Offset: 0x89F500
    static ::UnityEngine::Vector4 NormalizeQuaternion(::UnityEngine::Vector4 quaternion);
    // static private UnityEngine.Vector4 StabilizeLengthOfQuaternion(UnityEngine.Vector4 q)
    // Offset: 0x89F8C0
    static ::UnityEngine::Vector4 StabilizeLengthOfQuaternion(::UnityEngine::Vector4 q);
    // static public System.Double LerpClamped(System.Double a, System.Double b, System.Double t)
    // Offset: 0x89F430
    static double LerpClamped(double a, double b, double t);
    // public System.Void .ctor()
    // Offset: 0x1DD400
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StaticFunctions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Utility::StaticFunctions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StaticFunctions*, creationType>()));
    }
  }; // Normal.Utility.StaticFunctions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::SetLayerRecursively
// Il2CppName: SetLayerRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, int)>(&Normal::Utility::StaticFunctions::SetLayerRecursively)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::StaticFunctions*), "SetLayerRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, layer});
  }
};
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::CalculateAverageDbForAudioBuffer
// Il2CppName: CalculateAverageDbForAudioBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::ArrayW<float>, int)>(&Normal::Utility::StaticFunctions::CalculateAverageDbForAudioBuffer)> {
  static const MethodInfo* get() {
    static auto* audioBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::StaticFunctions*), "CalculateAverageDbForAudioBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioBuffer, offset});
  }
};
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::LinearToDb
// Il2CppName: LinearToDb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Normal::Utility::StaticFunctions::LinearToDb)> {
  static const MethodInfo* get() {
    static auto* linear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::StaticFunctions*), "LinearToDb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linear});
  }
};
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::SwingTwistDecomposition
// Il2CppName: SwingTwistDecomposition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Quaternion, ::UnityEngine::Vector3, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Quaternion>)>(&Normal::Utility::StaticFunctions::SwingTwistDecomposition)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* swing = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* twist = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::StaticFunctions*), "SwingTwistDecomposition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation, direction, swing, twist});
  }
};
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::NormalizeQuaternion
// Il2CppName: NormalizeQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&Normal::Utility::StaticFunctions::NormalizeQuaternion)> {
  static const MethodInfo* get() {
    static auto* quaternion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::StaticFunctions*), "NormalizeQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{quaternion});
  }
};
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::StabilizeLengthOfQuaternion
// Il2CppName: StabilizeLengthOfQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&Normal::Utility::StaticFunctions::StabilizeLengthOfQuaternion)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::StaticFunctions*), "StabilizeLengthOfQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::LerpClamped
// Il2CppName: LerpClamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&Normal::Utility::StaticFunctions::LerpClamped)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Utility::StaticFunctions*), "LerpClamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: Normal::Utility::StaticFunctions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
