// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Sigtrap.VrTunnellingPro.TunnellingPresetBase
#include "Sigtrap/VrTunnellingPro/TunnellingPresetBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings);
DEFINE_IL2CPP_ARG_TYPE(::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*, "Sigtrap.VrTunnellingPro", "TunnellingPresetBase/MotionSettings");
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class TunnellingPresetBase::MotionSettings : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Boolean _use
    // Size: 0x1
    // Offset: 0x10
    bool use;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: use and: strength
    char __padding0[0x3] = {};
    // [RangeAttribute] Offset: 0x72F210
    // private System.Single _strength
    // Size: 0x4
    // Offset: 0x14
    float strength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _min
    // Size: 0x4
    // Offset: 0x18
    float min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _max
    // Size: 0x4
    // Offset: 0x1C
    float max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _smoothing
    // Size: 0x4
    // Offset: 0x20
    float smoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Boolean _use
    bool& dyn__use();
    // Get instance field reference: private System.Single _strength
    float& dyn__strength();
    // Get instance field reference: private System.Single _min
    float& dyn__min();
    // Get instance field reference: private System.Single _max
    float& dyn__max();
    // Get instance field reference: private System.Single _smoothing
    float& dyn__smoothing();
    // public System.Boolean get_use()
    // Offset: 0x10C203C
    bool get_use();
    // public System.Single get_strength()
    // Offset: 0x10C2044
    float get_strength();
    // public System.Single get_min()
    // Offset: 0x10C204C
    float get_min();
    // public System.Single get_max()
    // Offset: 0x10C2054
    float get_max();
    // public System.Single get_smoothing()
    // Offset: 0x10C205C
    float get_smoothing();
    // public System.Void .ctor()
    // Offset: 0x10C2064
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TunnellingPresetBase::MotionSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TunnellingPresetBase::MotionSettings*, creationType>()));
    }
  }; // Sigtrap.VrTunnellingPro.TunnellingPresetBase/Sigtrap.VrTunnellingPro.MotionSettings
  #pragma pack(pop)
  static check_size<sizeof(TunnellingPresetBase::MotionSettings), 32 + sizeof(float)> __Sigtrap_VrTunnellingPro_TunnellingPresetBase_MotionSettingsSizeCheck;
  static_assert(sizeof(TunnellingPresetBase::MotionSettings) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_use
// Il2CppName: get_use
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_use)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*), "get_use", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_strength
// Il2CppName: get_strength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_strength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*), "get_strength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_min
// Il2CppName: get_min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*), "get_min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_max
// Il2CppName: get_max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*), "get_max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_smoothing
// Il2CppName: get_smoothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::*)()>(&Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::get_smoothing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings*), "get_smoothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingPresetBase::MotionSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
