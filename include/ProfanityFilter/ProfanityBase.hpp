// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: ProfanityFilter
namespace ProfanityFilter {
  // Forward declaring type: ProfanityBase
  class ProfanityBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ProfanityFilter::ProfanityBase);
DEFINE_IL2CPP_ARG_TYPE(::ProfanityFilter::ProfanityBase*, "ProfanityFilter", "ProfanityBase");
// Type namespace: ProfanityFilter
namespace ProfanityFilter {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: ProfanityFilter.ProfanityBase
  // [TokenAttribute] Offset: FFFFFFFF
  class ProfanityBase : public ::Il2CppObject {
    public:
    public:
    // protected System.Collections.Generic.List`1<System.String> _profanities
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* profanities;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private readonly System.String[] _wordList
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> wordList;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Get instance field reference: protected System.Collections.Generic.List`1<System.String> _profanities
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__profanities();
    // Get instance field reference: private readonly System.String[] _wordList
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__wordList();
    // public System.Int32 get_Count()
    // Offset: 0x6A8F70
    int get_Count();
    // public System.Void .ctor()
    // Offset: 0x699E70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfanityBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ProfanityFilter::ProfanityBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfanityBase*, creationType>()));
    }
    // protected System.Void .ctor(System.String[] profanityList)
    // Offset: 0x67BC50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfanityBase* New_ctor(::ArrayW<::StringW> profanityList) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ProfanityFilter::ProfanityBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfanityBase*, creationType>(profanityList)));
    }
    // protected System.Void .ctor(System.Collections.Generic.List`1<System.String> profanityList)
    // Offset: 0x68AD60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfanityBase* New_ctor(::System::Collections::Generic::List_1<::StringW>* profanityList) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ProfanityFilter::ProfanityBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfanityBase*, creationType>(profanityList)));
    }
    // public System.Void AddProfanity(System.String profanity)
    // Offset: 0x67B830
    void AddProfanity(::StringW profanity);
    // public System.Void AddProfanity(System.String[] profanityList)
    // Offset: 0x67B7A0
    void AddProfanity(::ArrayW<::StringW> profanityList);
    // public System.Void AddProfanity(System.Collections.Generic.List`1<System.String> profanityList)
    // Offset: 0x67B710
    void AddProfanity(::System::Collections::Generic::List_1<::StringW>* profanityList);
    // public System.Boolean RemoveProfanity(System.String profanity)
    // Offset: 0x67B920
    bool RemoveProfanity(::StringW profanity);
    // public System.Boolean RemoveProfanity(System.Collections.Generic.List`1<System.String> profanities)
    // Offset: 0x67B9F0
    bool RemoveProfanity(::System::Collections::Generic::List_1<::StringW>* profanities);
    // public System.Boolean RemoveProfanity(System.String[] profanities)
    // Offset: 0x67BB80
    bool RemoveProfanity(::ArrayW<::StringW> profanities);
    // public System.Void Clear()
    // Offset: 0x67B8D0
    void Clear();
  }; // ProfanityFilter.ProfanityBase
  #pragma pack(pop)
  static check_size<sizeof(ProfanityBase), 24 + sizeof(::ArrayW<::StringW>)> __ProfanityFilter_ProfanityBaseSizeCheck;
  static_assert(sizeof(ProfanityBase) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ProfanityFilter::ProfanityBase::*)()>(&ProfanityFilter::ProfanityBase::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::AddProfanity
// Il2CppName: AddProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::ProfanityBase::*)(::StringW)>(&ProfanityFilter::ProfanityBase::AddProfanity)> {
  static const MethodInfo* get() {
    static auto* profanity = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "AddProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanity});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::AddProfanity
// Il2CppName: AddProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::ProfanityBase::*)(::ArrayW<::StringW>)>(&ProfanityFilter::ProfanityBase::AddProfanity)> {
  static const MethodInfo* get() {
    static auto* profanityList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "AddProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanityList});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::AddProfanity
// Il2CppName: AddProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::ProfanityBase::*)(::System::Collections::Generic::List_1<::StringW>*)>(&ProfanityFilter::ProfanityBase::AddProfanity)> {
  static const MethodInfo* get() {
    static auto* profanityList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "AddProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanityList});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::RemoveProfanity
// Il2CppName: RemoveProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::ProfanityBase::*)(::StringW)>(&ProfanityFilter::ProfanityBase::RemoveProfanity)> {
  static const MethodInfo* get() {
    static auto* profanity = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "RemoveProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanity});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::RemoveProfanity
// Il2CppName: RemoveProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::ProfanityBase::*)(::System::Collections::Generic::List_1<::StringW>*)>(&ProfanityFilter::ProfanityBase::RemoveProfanity)> {
  static const MethodInfo* get() {
    static auto* profanities = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "RemoveProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanities});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::RemoveProfanity
// Il2CppName: RemoveProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::ProfanityBase::*)(::ArrayW<::StringW>)>(&ProfanityFilter::ProfanityBase::RemoveProfanity)> {
  static const MethodInfo* get() {
    static auto* profanities = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "RemoveProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanities});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityBase::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::ProfanityBase::*)()>(&ProfanityFilter::ProfanityBase::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityBase*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
