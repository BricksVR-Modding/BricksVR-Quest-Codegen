// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AvatarFaceGetter
  class AvatarFaceGetter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AvatarFaceGetter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AvatarFaceGetter*, "", "AvatarFaceGetter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: AvatarFaceGetter
  // [TokenAttribute] Offset: FFFFFFFF
  class AvatarFaceGetter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [FormerlySerializedAsAttribute] Offset: 0xF02A0
    // public UnityEngine.Sprite[] mouths
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Sprite*> mouths;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Sprite*>) == 0x8);
    // public UnityEngine.Sprite[] eyes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Sprite*> eyes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Sprite*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private AvatarFaceGetter _instance
    static ::GlobalNamespace::AvatarFaceGetter* _get__instance();
    // Set static field: static private AvatarFaceGetter _instance
    static void _set__instance(::GlobalNamespace::AvatarFaceGetter* value);
    // Get instance field reference: public UnityEngine.Sprite[] mouths
    [[deprecated]] ::ArrayW<::UnityEngine::Sprite*>& dyn_mouths();
    // Get instance field reference: public UnityEngine.Sprite[] eyes
    [[deprecated]] ::ArrayW<::UnityEngine::Sprite*>& dyn_eyes();
    // static public AvatarFaceGetter GetInstance()
    // Offset: 0x6DE810
    static ::GlobalNamespace::AvatarFaceGetter* GetInstance();
    // public UnityEngine.Sprite GetMouth(System.Int32 index)
    // Offset: 0x6DE8D0
    ::UnityEngine::Sprite* GetMouth(int index);
    // public UnityEngine.Sprite GetEyes(System.Int32 index)
    // Offset: 0x6DE7D0
    ::UnityEngine::Sprite* GetEyes(int index);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarFaceGetter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AvatarFaceGetter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarFaceGetter*, creationType>()));
    }
  }; // AvatarFaceGetter
  #pragma pack(pop)
  static check_size<sizeof(AvatarFaceGetter), 32 + sizeof(::ArrayW<::UnityEngine::Sprite*>)> __GlobalNamespace_AvatarFaceGetterSizeCheck;
  static_assert(sizeof(AvatarFaceGetter) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AvatarFaceGetter::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::AvatarFaceGetter* (*)()>(&GlobalNamespace::AvatarFaceGetter::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarFaceGetter*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarFaceGetter::GetMouth
// Il2CppName: GetMouth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (GlobalNamespace::AvatarFaceGetter::*)(int)>(&GlobalNamespace::AvatarFaceGetter::GetMouth)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarFaceGetter*), "GetMouth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarFaceGetter::GetEyes
// Il2CppName: GetEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (GlobalNamespace::AvatarFaceGetter::*)(int)>(&GlobalNamespace::AvatarFaceGetter::GetEyes)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarFaceGetter*), "GetEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarFaceGetter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
