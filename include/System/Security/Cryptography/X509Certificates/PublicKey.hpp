// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsnEncodedData
  class AsnEncodedData;
  // Forward declaring type: Oid
  class Oid;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: PublicKey
  class PublicKey;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::X509Certificates::PublicKey);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::X509Certificates::PublicKey*, "System.Security.Cryptography.X509Certificates", "PublicKey");
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.X509Certificates.PublicKey
  // [TokenAttribute] Offset: FFFFFFFF
  class PublicKey : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Security.Cryptography.AsnEncodedData _keyValue
    // Size: 0x8
    // Offset: 0x10
    ::System::Security::Cryptography::AsnEncodedData* keyValue;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::AsnEncodedData*) == 0x8);
    // private System.Security.Cryptography.AsnEncodedData _params
    // Size: 0x8
    // Offset: 0x18
    ::System::Security::Cryptography::AsnEncodedData* params;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::AsnEncodedData*) == 0x8);
    // private System.Security.Cryptography.Oid _oid
    // Size: 0x8
    // Offset: 0x20
    ::System::Security::Cryptography::Oid* oid;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::Oid*) == 0x8);
    public:
    // Get static field: static private System.Byte[] Empty
    static ::ArrayW<uint8_t> _get_Empty();
    // Set static field: static private System.Byte[] Empty
    static void _set_Empty(::ArrayW<uint8_t> value);
    // Get instance field reference: private System.Security.Cryptography.AsnEncodedData _keyValue
    ::System::Security::Cryptography::AsnEncodedData*& dyn__keyValue();
    // Get instance field reference: private System.Security.Cryptography.AsnEncodedData _params
    ::System::Security::Cryptography::AsnEncodedData*& dyn__params();
    // Get instance field reference: private System.Security.Cryptography.Oid _oid
    ::System::Security::Cryptography::Oid*& dyn__oid();
    // public System.Security.Cryptography.AsnEncodedData get_EncodedKeyValue()
    // Offset: 0xA2202C
    ::System::Security::Cryptography::AsnEncodedData* get_EncodedKeyValue();
    // public System.Security.Cryptography.AsnEncodedData get_EncodedParameters()
    // Offset: 0xA22034
    ::System::Security::Cryptography::AsnEncodedData* get_EncodedParameters();
    // public System.Security.Cryptography.Oid get_Oid()
    // Offset: 0xA2203C
    ::System::Security::Cryptography::Oid* get_Oid();
    // static private System.Void .cctor()
    // Offset: 0xA22044
    static void _cctor();
  }; // System.Security.Cryptography.X509Certificates.PublicKey
  #pragma pack(pop)
  static check_size<sizeof(PublicKey), 32 + sizeof(::System::Security::Cryptography::Oid*)> __System_Security_Cryptography_X509Certificates_PublicKeySizeCheck;
  static_assert(sizeof(PublicKey) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedKeyValue
// Il2CppName: get_EncodedKeyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsnEncodedData* (System::Security::Cryptography::X509Certificates::PublicKey::*)()>(&System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedKeyValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::PublicKey*), "get_EncodedKeyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedParameters
// Il2CppName: get_EncodedParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::AsnEncodedData* (System::Security::Cryptography::X509Certificates::PublicKey::*)()>(&System::Security::Cryptography::X509Certificates::PublicKey::get_EncodedParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::PublicKey*), "get_EncodedParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::PublicKey::get_Oid
// Il2CppName: get_Oid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::Oid* (System::Security::Cryptography::X509Certificates::PublicKey::*)()>(&System::Security::Cryptography::X509Certificates::PublicKey::get_Oid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::PublicKey*), "get_Oid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::PublicKey::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Security::Cryptography::X509Certificates::PublicKey::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::PublicKey*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
