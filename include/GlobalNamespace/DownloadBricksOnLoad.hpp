// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: NormcoreRPC
#include "GlobalNamespace/NormcoreRPC.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ChunkedRenderer
  class ChunkedRenderer;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: Realtime
  class Realtime;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DownloadBricksOnLoad
  class DownloadBricksOnLoad;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DownloadBricksOnLoad);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DownloadBricksOnLoad*, "", "DownloadBricksOnLoad");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: DownloadBricksOnLoad
  // [TokenAttribute] Offset: FFFFFFFF
  class DownloadBricksOnLoad : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::DownloadBricksOnLoad::FetchAllBricksResponse
    class FetchAllBricksResponse;
    // Nested type: ::GlobalNamespace::DownloadBricksOnLoad::$LoadBrickDataAsync$d__14
    class $LoadBrickDataAsync$d__14;
    // Nested type: ::GlobalNamespace::DownloadBricksOnLoad::$DownloadBrickData$d__16
    class $DownloadBrickData$d__16;
    public:
    // private Normal.Realtime.Realtime _realtime
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Realtime* realtime;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Realtime*) == 0x8);
    // private System.String _roomDataJson
    // Size: 0x8
    // Offset: 0x20
    ::StringW roomDataJson;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private TMPro.TextMeshProUGUI _joiningStatusText
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshProUGUI* joiningStatusText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public System.Boolean upstreamError
    // Size: 0x1
    // Offset: 0x30
    bool upstreamError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean connectivityError
    // Size: 0x1
    // Offset: 0x31
    bool connectivityError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isDoneDownloading
    // Size: 0x1
    // Offset: 0x32
    bool isDoneDownloading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDoneDownloading and: downloadSpeedMultiplier
    char __padding5[0x1] = {};
    // private System.Int32 _downloadSpeedMultiplier
    // Size: 0x4
    // Offset: 0x34
    int downloadSpeedMultiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public ChunkedRenderer chunkedRenderer
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::ChunkedRenderer* chunkedRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ChunkedRenderer*) == 0x8);
    // public System.Collections.Generic.List`1<NormcoreRPC/Brick> bricksParentedToHeads
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::NormcoreRPC::Brick*>* bricksParentedToHeads;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::NormcoreRPC::Brick*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Normal.Realtime.Realtime _realtime
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Realtime*& dyn__realtime();
    // Get instance field reference: private System.String _roomDataJson
    [[deprecated("Use field access instead!")]] ::StringW& dyn__roomDataJson();
    // Get instance field reference: private TMPro.TextMeshProUGUI _joiningStatusText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__joiningStatusText();
    // Get instance field reference: public System.Boolean upstreamError
    [[deprecated("Use field access instead!")]] bool& dyn_upstreamError();
    // Get instance field reference: public System.Boolean connectivityError
    [[deprecated("Use field access instead!")]] bool& dyn_connectivityError();
    // Get instance field reference: public System.Boolean isDoneDownloading
    [[deprecated("Use field access instead!")]] bool& dyn_isDoneDownloading();
    // Get instance field reference: private System.Int32 _downloadSpeedMultiplier
    [[deprecated("Use field access instead!")]] int& dyn__downloadSpeedMultiplier();
    // Get instance field reference: public ChunkedRenderer chunkedRenderer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ChunkedRenderer*& dyn_chunkedRenderer();
    // Get instance field reference: public System.Collections.Generic.List`1<NormcoreRPC/Brick> bricksParentedToHeads
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::NormcoreRPC::Brick*>*& dyn_bricksParentedToHeads();
    // public System.Boolean get_Errored()
    // Offset: 0x6B34C0
    bool get_Errored();
    // public System.Void .ctor()
    // Offset: 0x6B3450
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DownloadBricksOnLoad* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DownloadBricksOnLoad::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DownloadBricksOnLoad*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x6B33F0
    void Start();
    // public System.Void Reset()
    // Offset: 0x6B3340
    void Reset();
    // public System.Void StartLoading(System.String roomName, TMPro.TextMeshProUGUI joiningStatusText)
    // Offset: 0x6B3350
    void StartLoading(::StringW roomName, ::TMPro::TextMeshProUGUI* joiningStatusText);
    // private System.Collections.IEnumerator LoadBrickDataAsync(System.String roomName)
    // Offset: 0x6B2E90
    ::System::Collections::IEnumerator* LoadBrickDataAsync(::StringW roomName);
    // public System.Void LoadBricksParentedToHeads()
    // Offset: 0x6B2F20
    void LoadBricksParentedToHeads();
    // private System.Collections.IEnumerator DownloadBrickData(System.String room)
    // Offset: 0x6B2E00
    ::System::Collections::IEnumerator* DownloadBrickData(::StringW room);
  }; // DownloadBricksOnLoad
  #pragma pack(pop)
  static check_size<sizeof(DownloadBricksOnLoad), 64 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::NormcoreRPC::Brick*>*)> __GlobalNamespace_DownloadBricksOnLoadSizeCheck;
  static_assert(sizeof(DownloadBricksOnLoad) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::get_Errored
// Il2CppName: get_Errored
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::DownloadBricksOnLoad::*)()>(&GlobalNamespace::DownloadBricksOnLoad::get_Errored)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DownloadBricksOnLoad*), "get_Errored", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DownloadBricksOnLoad::*)()>(&GlobalNamespace::DownloadBricksOnLoad::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DownloadBricksOnLoad*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DownloadBricksOnLoad::*)()>(&GlobalNamespace::DownloadBricksOnLoad::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DownloadBricksOnLoad*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::StartLoading
// Il2CppName: StartLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DownloadBricksOnLoad::*)(::StringW, ::TMPro::TextMeshProUGUI*)>(&GlobalNamespace::DownloadBricksOnLoad::StartLoading)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* joiningStatusText = &::il2cpp_utils::GetClassFromName("TMPro", "TextMeshProUGUI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DownloadBricksOnLoad*), "StartLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, joiningStatusText});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::LoadBrickDataAsync
// Il2CppName: LoadBrickDataAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::DownloadBricksOnLoad::*)(::StringW)>(&GlobalNamespace::DownloadBricksOnLoad::LoadBrickDataAsync)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DownloadBricksOnLoad*), "LoadBrickDataAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::LoadBricksParentedToHeads
// Il2CppName: LoadBricksParentedToHeads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DownloadBricksOnLoad::*)()>(&GlobalNamespace::DownloadBricksOnLoad::LoadBricksParentedToHeads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DownloadBricksOnLoad*), "LoadBricksParentedToHeads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DownloadBricksOnLoad::DownloadBrickData
// Il2CppName: DownloadBrickData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::DownloadBricksOnLoad::*)(::StringW)>(&GlobalNamespace::DownloadBricksOnLoad::DownloadBrickData)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DownloadBricksOnLoad*), "DownloadBrickData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
