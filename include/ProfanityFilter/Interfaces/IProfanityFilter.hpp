// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueTuple`3
#include "System/ValueTuple_3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ProfanityFilter::Interfaces
namespace ProfanityFilter::Interfaces {
  // Forward declaring type: IAllowList
  class IAllowList;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: ProfanityFilter.Interfaces
namespace ProfanityFilter::Interfaces {
  // Forward declaring type: IProfanityFilter
  class IProfanityFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ProfanityFilter::Interfaces::IProfanityFilter);
DEFINE_IL2CPP_ARG_TYPE(::ProfanityFilter::Interfaces::IProfanityFilter*, "ProfanityFilter.Interfaces", "IProfanityFilter");
// Type namespace: ProfanityFilter.Interfaces
namespace ProfanityFilter::Interfaces {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ProfanityFilter.Interfaces.IProfanityFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class IProfanityFilter {
    public:
    // public ProfanityFilter.Interfaces.IAllowList get_AllowList()
    // Offset: 0xFFFFFFFF
    ::ProfanityFilter::Interfaces::IAllowList* get_AllowList();
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    int get_Count();
    // public System.Boolean IsProfanity(System.String word)
    // Offset: 0xFFFFFFFF
    bool IsProfanity(::StringW word);
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.String> DetectAllProfanities(System.String sentence)
    // Offset: 0xFFFFFFFF
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* DetectAllProfanities(::StringW sentence);
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.String> DetectAllProfanities(System.String sentence, System.Boolean removePartialMatches)
    // Offset: 0xFFFFFFFF
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* DetectAllProfanities(::StringW sentence, bool removePartialMatches);
    // public System.Boolean ContainsProfanity(System.String term)
    // Offset: 0xFFFFFFFF
    bool ContainsProfanity(::StringW term);
    // public System.String CensorString(System.String sentence)
    // Offset: 0xFFFFFFFF
    ::StringW CensorString(::StringW sentence);
    // public System.String CensorString(System.String sentence, System.Char censorCharacter)
    // Offset: 0xFFFFFFFF
    ::StringW CensorString(::StringW sentence, ::Il2CppChar censorCharacter);
    // public System.String CensorString(System.String sentence, System.Char censorCharacter, System.Boolean ignoreNumbers)
    // Offset: 0xFFFFFFFF
    ::StringW CensorString(::StringW sentence, ::Il2CppChar censorCharacter, bool ignoreNumbers);
    // public System.Nullable`1<System.ValueTuple`3<System.Int32,System.Int32,System.String>> GetCompleteWord(System.String toCheck, System.String profanity)
    // Offset: 0xFFFFFFFF
    ::System::Nullable_1<::System::ValueTuple_3<int, int, ::StringW>> GetCompleteWord(::StringW toCheck, ::StringW profanity);
    // public System.Void AddProfanity(System.String profanity)
    // Offset: 0xFFFFFFFF
    void AddProfanity(::StringW profanity);
    // public System.Void AddProfanity(System.String[] profanityList)
    // Offset: 0xFFFFFFFF
    void AddProfanity(::ArrayW<::StringW> profanityList);
    // public System.Void AddProfanity(System.Collections.Generic.List`1<System.String> profanityList)
    // Offset: 0xFFFFFFFF
    void AddProfanity(::System::Collections::Generic::List_1<::StringW>* profanityList);
    // public System.Boolean RemoveProfanity(System.String profanity)
    // Offset: 0xFFFFFFFF
    bool RemoveProfanity(::StringW profanity);
    // public System.Boolean RemoveProfanity(System.Collections.Generic.List`1<System.String> profanities)
    // Offset: 0xFFFFFFFF
    bool RemoveProfanity(::System::Collections::Generic::List_1<::StringW>* profanities);
    // public System.Boolean RemoveProfanity(System.String[] profanities)
    // Offset: 0xFFFFFFFF
    bool RemoveProfanity(::ArrayW<::StringW> profanities);
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear();
  }; // ProfanityFilter.Interfaces.IProfanityFilter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::get_AllowList
// Il2CppName: get_AllowList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ProfanityFilter::Interfaces::IAllowList* (ProfanityFilter::Interfaces::IProfanityFilter::*)()>(&ProfanityFilter::Interfaces::IProfanityFilter::get_AllowList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "get_AllowList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ProfanityFilter::Interfaces::IProfanityFilter::*)()>(&ProfanityFilter::Interfaces::IProfanityFilter::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::IsProfanity
// Il2CppName: IsProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW)>(&ProfanityFilter::Interfaces::IProfanityFilter::IsProfanity)> {
  static const MethodInfo* get() {
    static auto* word = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "IsProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{word});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::DetectAllProfanities
// Il2CppName: DetectAllProfanities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW)>(&ProfanityFilter::Interfaces::IProfanityFilter::DetectAllProfanities)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "DetectAllProfanities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::DetectAllProfanities
// Il2CppName: DetectAllProfanities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW, bool)>(&ProfanityFilter::Interfaces::IProfanityFilter::DetectAllProfanities)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* removePartialMatches = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "DetectAllProfanities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence, removePartialMatches});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::ContainsProfanity
// Il2CppName: ContainsProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW)>(&ProfanityFilter::Interfaces::IProfanityFilter::ContainsProfanity)> {
  static const MethodInfo* get() {
    static auto* term = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "ContainsProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{term});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::CensorString
// Il2CppName: CensorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW)>(&ProfanityFilter::Interfaces::IProfanityFilter::CensorString)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "CensorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::CensorString
// Il2CppName: CensorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW, ::Il2CppChar)>(&ProfanityFilter::Interfaces::IProfanityFilter::CensorString)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* censorCharacter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "CensorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence, censorCharacter});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::CensorString
// Il2CppName: CensorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW, ::Il2CppChar, bool)>(&ProfanityFilter::Interfaces::IProfanityFilter::CensorString)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* censorCharacter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* ignoreNumbers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "CensorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence, censorCharacter, ignoreNumbers});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::GetCompleteWord
// Il2CppName: GetCompleteWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::ValueTuple_3<int, int, ::StringW>> (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW, ::StringW)>(&ProfanityFilter::Interfaces::IProfanityFilter::GetCompleteWord)> {
  static const MethodInfo* get() {
    static auto* toCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* profanity = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "GetCompleteWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toCheck, profanity});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::AddProfanity
// Il2CppName: AddProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW)>(&ProfanityFilter::Interfaces::IProfanityFilter::AddProfanity)> {
  static const MethodInfo* get() {
    static auto* profanity = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "AddProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanity});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::AddProfanity
// Il2CppName: AddProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::Interfaces::IProfanityFilter::*)(::ArrayW<::StringW>)>(&ProfanityFilter::Interfaces::IProfanityFilter::AddProfanity)> {
  static const MethodInfo* get() {
    static auto* profanityList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "AddProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanityList});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::AddProfanity
// Il2CppName: AddProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::Interfaces::IProfanityFilter::*)(::System::Collections::Generic::List_1<::StringW>*)>(&ProfanityFilter::Interfaces::IProfanityFilter::AddProfanity)> {
  static const MethodInfo* get() {
    static auto* profanityList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "AddProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanityList});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::RemoveProfanity
// Il2CppName: RemoveProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::Interfaces::IProfanityFilter::*)(::StringW)>(&ProfanityFilter::Interfaces::IProfanityFilter::RemoveProfanity)> {
  static const MethodInfo* get() {
    static auto* profanity = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "RemoveProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanity});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::RemoveProfanity
// Il2CppName: RemoveProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::Interfaces::IProfanityFilter::*)(::System::Collections::Generic::List_1<::StringW>*)>(&ProfanityFilter::Interfaces::IProfanityFilter::RemoveProfanity)> {
  static const MethodInfo* get() {
    static auto* profanities = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "RemoveProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanities});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::RemoveProfanity
// Il2CppName: RemoveProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::Interfaces::IProfanityFilter::*)(::ArrayW<::StringW>)>(&ProfanityFilter::Interfaces::IProfanityFilter::RemoveProfanity)> {
  static const MethodInfo* get() {
    static auto* profanities = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "RemoveProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{profanities});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::Interfaces::IProfanityFilter::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::Interfaces::IProfanityFilter::*)()>(&ProfanityFilter::Interfaces::IProfanityFilter::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::Interfaces::IProfanityFilter*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
