// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: ByteFloat
  struct ByteFloat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::ByteFloat, "Normal.Realtime.Serialization", "ByteFloat");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.Serialization.ByteFloat
  // [TokenAttribute] Offset: FFFFFFFF
  struct ByteFloat/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single value
    // Size: 0x4
    // Offset: 0x0
    float value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt32 bytes
    // Size: 0x4
    // Offset: 0x0
    uint bytes;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: ByteFloat
    constexpr ByteFloat(float value_ = {}, uint bytes_ = {}) noexcept : value{value_}, bytes{bytes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Single value
    float& dyn_value();
    // Get instance field reference: private System.UInt32 bytes
    uint& dyn_bytes();
    // static public System.Single Reinterpret(System.UInt32 value)
    // Offset: 0xA6ACC4
    static float Reinterpret(uint value);
    // static public System.UInt32 Reinterpret(System.Single value)
    // Offset: 0xA6ACCC
    static uint Reinterpret(float value);
  }; // Normal.Realtime.Serialization.ByteFloat
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::ByteFloat::Reinterpret
// Il2CppName: Reinterpret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint)>(&Normal::Realtime::Serialization::ByteFloat::Reinterpret)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::ByteFloat), "Reinterpret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::ByteFloat::Reinterpret
// Il2CppName: Reinterpret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(float)>(&Normal::Realtime::Serialization::ByteFloat::Reinterpret)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::ByteFloat), "Reinterpret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
