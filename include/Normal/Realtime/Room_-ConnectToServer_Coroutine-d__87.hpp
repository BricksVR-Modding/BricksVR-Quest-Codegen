// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.Room
#include "Normal/Realtime/Room.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: Normal.Realtime.Native.Cluster
#include "Normal/Realtime/Native/Cluster.hpp"
// Including type: Normal.Realtime.Native.Region
#include "Normal/Realtime/Native/Region.hpp"
// Including type: Normal.Realtime.CoroutineRunner
#include "Normal/Realtime/CoroutineRunner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime::Native
namespace Normal::Realtime::Native {
  // Forward declaring type: Matcher
  class Matcher;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeModel
  class RealtimeModel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Ping
  class Ping;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87*, "Normal.Realtime", "Room/<ConnectToServer_Coroutine>d__87");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x94
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Room/Normal.Realtime.<ConnectToServer_Coroutine>d__87
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class Room::$ConnectToServer_Coroutine$d__87 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public Normal.Realtime.Room <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::Room* $$4__this;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room*) == 0x8);
    // public Normal.Realtime.Native.Matcher matcher
    // Size: 0x8
    // Offset: 0x28
    ::Normal::Realtime::Native::Matcher* matcher;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Native::Matcher*) == 0x8);
    // public System.String roomName
    // Size: 0x8
    // Offset: 0x30
    ::StringW roomName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Normal.Realtime.RealtimeModel roomModel
    // Size: 0x8
    // Offset: 0x38
    ::Normal::Realtime::RealtimeModel* roomModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeModel*) == 0x8);
    // public System.String matcherURL
    // Size: 0x8
    // Offset: 0x40
    ::StringW matcherURL;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String appKey
    // Size: 0x8
    // Offset: 0x48
    ::StringW appKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Normal.Realtime.Native.Cluster[] clusterPingResults
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::Normal::Realtime::Native::Cluster> clusterPingResults;
    // Field size check
    static_assert(sizeof(::ArrayW<::Normal::Realtime::Native::Cluster>) == 0x8);
    // public Normal.Realtime.Native.Region[] preferredRegions
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::Normal::Realtime::Native::Region> preferredRegions;
    // Field size check
    static_assert(sizeof(::ArrayW<::Normal::Realtime::Native::Region>) == 0x8);
    // public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext coroutineContext
    // Size: 0x8
    // Offset: 0x60
    ::Normal::Realtime::CoroutineRunner::CoroutineContext* coroutineContext;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::CoroutineRunner::CoroutineContext*) == 0x8);
    // private Normal.Realtime.Room/Normal.Realtime.<>c__DisplayClass87_0 <>8__1
    // Size: 0x8
    // Offset: 0x68
    ::Normal::Realtime::Room::$$c__DisplayClass87_0* $$8__1;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::$$c__DisplayClass87_0*) == 0x8);
    // private Normal.Realtime.Native.Cluster[] <newClusterPingResults>5__2
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::Normal::Realtime::Native::Cluster> $newClusterPingResults$5__2;
    // Field size check
    static_assert(sizeof(::ArrayW<::Normal::Realtime::Native::Cluster>) == 0x8);
    // private System.Boolean <requestComplete>5__3
    // Size: 0x1
    // Offset: 0x78
    bool $requestComplete$5__3;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: $requestComplete$5__3 and: $clustersToPing$5__4
    char __padding13[0x7] = {};
    // private Normal.Realtime.Native.Cluster[] <clustersToPing>5__4
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::Normal::Realtime::Native::Cluster> $clustersToPing$5__4;
    // Field size check
    static_assert(sizeof(::ArrayW<::Normal::Realtime::Native::Cluster>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Ping> <pings>5__5
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::UnityEngine::Ping*>* $pings$5__5;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Ping*>*) == 0x8);
    // private System.Single <startTime>5__6
    // Size: 0x4
    // Offset: 0x90
    float $startTime$5__6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public Normal.Realtime.Room <>4__this
    ::Normal::Realtime::Room*& dyn_$$4__this();
    // Get instance field reference: public Normal.Realtime.Native.Matcher matcher
    ::Normal::Realtime::Native::Matcher*& dyn_matcher();
    // Get instance field reference: public System.String roomName
    ::StringW& dyn_roomName();
    // Get instance field reference: public Normal.Realtime.RealtimeModel roomModel
    ::Normal::Realtime::RealtimeModel*& dyn_roomModel();
    // Get instance field reference: public System.String matcherURL
    ::StringW& dyn_matcherURL();
    // Get instance field reference: public System.String appKey
    ::StringW& dyn_appKey();
    // Get instance field reference: public Normal.Realtime.Native.Cluster[] clusterPingResults
    ::ArrayW<::Normal::Realtime::Native::Cluster>& dyn_clusterPingResults();
    // Get instance field reference: public Normal.Realtime.Native.Region[] preferredRegions
    ::ArrayW<::Normal::Realtime::Native::Region>& dyn_preferredRegions();
    // Get instance field reference: public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext coroutineContext
    ::Normal::Realtime::CoroutineRunner::CoroutineContext*& dyn_coroutineContext();
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.<>c__DisplayClass87_0 <>8__1
    ::Normal::Realtime::Room::$$c__DisplayClass87_0*& dyn_$$8__1();
    // Get instance field reference: private Normal.Realtime.Native.Cluster[] <newClusterPingResults>5__2
    ::ArrayW<::Normal::Realtime::Native::Cluster>& dyn_$newClusterPingResults$5__2();
    // Get instance field reference: private System.Boolean <requestComplete>5__3
    bool& dyn_$requestComplete$5__3();
    // Get instance field reference: private Normal.Realtime.Native.Cluster[] <clustersToPing>5__4
    ::ArrayW<::Normal::Realtime::Native::Cluster>& dyn_$clustersToPing$5__4();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Ping> <pings>5__5
    ::System::Collections::Generic::List_1<::UnityEngine::Ping*>*& dyn_$pings$5__5();
    // Get instance field reference: private System.Single <startTime>5__6
    float& dyn_$startTime$5__6();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0xA69424
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xA6948C
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0xA65800
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Room::$ConnectToServer_Coroutine$d__87* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Room::$ConnectToServer_Coroutine$d__87*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xA68238
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0xA6823C
    bool MoveNext();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0xA6942C
    void System_Collections_IEnumerator_Reset();
  }; // Normal.Realtime.Room/Normal.Realtime.<ConnectToServer_Coroutine>d__87
  #pragma pack(pop)
  static check_size<sizeof(Room::$ConnectToServer_Coroutine$d__87), 144 + sizeof(float)> __Normal_Realtime_Room_$ConnectToServer_Coroutine$d__87SizeCheck;
  static_assert(sizeof(Room::$ConnectToServer_Coroutine$d__87) == 0x94);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::*)()>(&Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::*)()>(&Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::*)()>(&Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::*)()>(&Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::*)()>(&Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
