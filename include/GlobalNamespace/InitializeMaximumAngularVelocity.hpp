// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: InitializeMaximumAngularVelocity
  class InitializeMaximumAngularVelocity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::InitializeMaximumAngularVelocity);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::InitializeMaximumAngularVelocity*, "", "InitializeMaximumAngularVelocity");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: InitializeMaximumAngularVelocity
  // [TokenAttribute] Offset: FFFFFFFF
  class InitializeMaximumAngularVelocity : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single initialMaximumAngularVelocity
    // Size: 0x4
    // Offset: 0x18
    float initialMaximumAngularVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single initialMaximumAngularVelocity
    [[deprecated]] float& dyn_initialMaximumAngularVelocity();
    // private System.Void Start()
    // Offset: 0x6BAC50
    void Start();
    // public System.Void .ctor()
    // Offset: 0x6BACB0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InitializeMaximumAngularVelocity* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InitializeMaximumAngularVelocity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InitializeMaximumAngularVelocity*, creationType>()));
    }
  }; // InitializeMaximumAngularVelocity
  #pragma pack(pop)
  static check_size<sizeof(InitializeMaximumAngularVelocity), 24 + sizeof(float)> __GlobalNamespace_InitializeMaximumAngularVelocitySizeCheck;
  static_assert(sizeof(InitializeMaximumAngularVelocity) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InitializeMaximumAngularVelocity::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitializeMaximumAngularVelocity::*)()>(&GlobalNamespace::InitializeMaximumAngularVelocity::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitializeMaximumAngularVelocity*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitializeMaximumAngularVelocity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
