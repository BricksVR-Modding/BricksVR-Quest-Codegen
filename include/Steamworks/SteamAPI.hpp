// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Steamworks
namespace Steamworks {
}
// Forward declaring namespace: Steamworks::Data
namespace Steamworks::Data {
  // Forward declaring type: HSteamPipe
  struct HSteamPipe;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SteamAPI
  class SteamAPI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::SteamAPI);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::SteamAPI*, "Steamworks", "SteamAPI");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.SteamAPI
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamAPI : public ::Il2CppObject {
    public:
    // Nested type: ::Steamworks::SteamAPI::Native
    class Native;
    // static System.Boolean Init()
    // Offset: 0xE39428
    static bool Init();
    // static Steamworks.Data.HSteamPipe GetHSteamPipe()
    // Offset: 0xE394A8
    static ::Steamworks::Data::HSteamPipe GetHSteamPipe();
    // static System.Boolean RestartAppIfNecessary(System.UInt32 unOwnAppID)
    // Offset: 0xE39538
    static bool RestartAppIfNecessary(uint unOwnAppID);
  }; // Steamworks.SteamAPI
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::SteamAPI::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Steamworks::SteamAPI::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamAPI*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamAPI::GetHSteamPipe
// Il2CppName: GetHSteamPipe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::Data::HSteamPipe (*)()>(&Steamworks::SteamAPI::GetHSteamPipe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamAPI*), "GetHSteamPipe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::SteamAPI::RestartAppIfNecessary
// Il2CppName: RestartAppIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint)>(&Steamworks::SteamAPI::RestartAppIfNecessary)> {
  static const MethodInfo* get() {
    static auto* unOwnAppID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::SteamAPI*), "RestartAppIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unOwnAppID});
  }
};
