// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder
#include "UnityEngine/XR/Interaction/Toolkit/XRInteractionUpdateOrder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRInteractionManager
  class XRInteractionManager;
  // Forward declaring type: XRBaseInteractor
  class XRBaseInteractor;
  // Forward declaring type: XRInteractableEvent
  class XRInteractableEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseInteractable
  class XRBaseInteractable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*, "UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
  // [TokenAttribute] Offset: FFFFFFFF
  // [SelectionBaseAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: CE360
  class XRBaseInteractable : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType
    struct MovementType;
    public:
    // [TooltipAttribute] Offset: 0xCE3D0
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_InteractionManager
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* m_InteractionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    // [TooltipAttribute] Offset: 0xCE410
    // private System.Collections.Generic.List`1<UnityEngine.Collider> m_Colliders
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* m_Colliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // [TooltipAttribute] Offset: 0xCE560
    // private UnityEngine.LayerMask m_InteractionLayerMask
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::LayerMask m_InteractionLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: m_InteractionLayerMask and: m_HoveringInteractors
    char __padding2[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor> m_HoveringInteractors
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*>* m_HoveringInteractors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*>*) == 0x8);
    // private System.Boolean <isHovered>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool isHovered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isSelected>k__BackingField
    // Size: 0x1
    // Offset: 0x39
    bool isSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSelected and: m_RegisteredInteractionManager
    char __padding5[0x6] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_RegisteredInteractionManager
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* m_RegisteredInteractionManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*) == 0x8);
    // [HeaderAttribute] Offset: 0xCE680
    // [TooltipAttribute] Offset: 0xCE680
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnFirstHoverEnter
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnFirstHoverEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCE770
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnHoverEnter
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnHoverEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCE830
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnHoverExit
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnHoverExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCE950
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnLastHoverExit
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnLastHoverExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCEA20
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnSelectEnter
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnSelectEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCEB30
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnSelectExit
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnSelectExit;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCEC60
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnActivate
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnActivate;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCEEF0
    // private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnDeactivate
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* m_OnDeactivate;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xCEFC0
    // private UnityEngine.GameObject m_CustomReticle
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* m_CustomReticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor,UnityEngine.GameObject> m_ReticleCache
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*, ::UnityEngine::GameObject*>* m_ReticleCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*, ::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_InteractionManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_m_InteractionManager();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> m_Colliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_m_Colliders();
    // Get instance field reference: private UnityEngine.LayerMask m_InteractionLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_InteractionLayerMask();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor> m_HoveringInteractors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*>*& dyn_m_HoveringInteractors();
    // Get instance field reference: private System.Boolean <isHovered>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isHovered$k__BackingField();
    // Get instance field reference: private System.Boolean <isSelected>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isSelected$k__BackingField();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractionManager m_RegisteredInteractionManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*& dyn_m_RegisteredInteractionManager();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnFirstHoverEnter
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnFirstHoverEnter();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnHoverEnter
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnHoverEnter();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnHoverExit
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnHoverExit();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnLastHoverExit
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnLastHoverExit();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnSelectEnter
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnSelectEnter();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnSelectExit
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnSelectExit();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnActivate
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnActivate();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent m_OnDeactivate
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*& dyn_m_OnDeactivate();
    // Get instance field reference: private UnityEngine.GameObject m_CustomReticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_CustomReticle();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor,UnityEngine.GameObject> m_ReticleCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*, ::UnityEngine::GameObject*>*& dyn_m_ReticleCache();
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractionManager get_interactionManager()
    // Offset: 0x1E1520
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* get_interactionManager();
    // public System.Void set_interactionManager(UnityEngine.XR.Interaction.Toolkit.XRInteractionManager value)
    // Offset: 0x301360
    void set_interactionManager(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* value);
    // public System.Collections.Generic.List`1<UnityEngine.Collider> get_colliders()
    // Offset: 0x1E1950
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* get_colliders();
    // public UnityEngine.LayerMask get_interactionLayerMask()
    // Offset: 0x217390
    ::UnityEngine::LayerMask get_interactionLayerMask();
    // public System.Void set_interactionLayerMask(UnityEngine.LayerMask value)
    // Offset: 0x245FF0
    void set_interactionLayerMask(::UnityEngine::LayerMask value);
    // public System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor> get_hoveringInteractors()
    // Offset: 0x1E0EB0
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*>* get_hoveringInteractors();
    // public System.Boolean get_isHovered()
    // Offset: 0x251310
    bool get_isHovered();
    // private System.Void set_isHovered(System.Boolean value)
    // Offset: 0x294EC0
    void set_isHovered(bool value);
    // public System.Boolean get_isSelected()
    // Offset: 0x251300
    bool get_isSelected();
    // private System.Void set_isSelected(System.Boolean value)
    // Offset: 0x301390
    void set_isSelected(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onFirstHoverEnter()
    // Offset: 0x232190
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onFirstHoverEnter();
    // public System.Void set_onFirstHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x2322A0
    void set_onFirstHoverEnter(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onHoverEnter()
    // Offset: 0x2321C0
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onHoverEnter();
    // public System.Void set_onHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x2322C0
    void set_onHoverEnter(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onHoverExit()
    // Offset: 0x2321F0
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onHoverExit();
    // public System.Void set_onHoverExit(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x2322E0
    void set_onHoverExit(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onLastHoverExit()
    // Offset: 0x290600
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onLastHoverExit();
    // public System.Void set_onLastHoverExit(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x1E49D0
    void set_onLastHoverExit(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onSelectEnter()
    // Offset: 0x2A86C0
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onSelectEnter();
    // public System.Void set_onSelectEnter(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x2F6BD0
    void set_onSelectEnter(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onSelectExit()
    // Offset: 0x2F6AF0
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onSelectExit();
    // public System.Void set_onSelectExit(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x2F6C80
    void set_onSelectExit(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onActivate()
    // Offset: 0x2A86D0
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onActivate();
    // public System.Void set_onActivate(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x2F6BC0
    void set_onActivate(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent get_onDeactivate()
    // Offset: 0x2FFDE0
    ::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* get_onDeactivate();
    // public System.Void set_onDeactivate(UnityEngine.XR.Interaction.Toolkit.XRInteractableEvent value)
    // Offset: 0x300050
    void set_onDeactivate(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* value);
    // public UnityEngine.GameObject get_customReticle()
    // Offset: 0x301340
    ::UnityEngine::GameObject* get_customReticle();
    // public System.Void set_customReticle(UnityEngine.GameObject value)
    // Offset: 0x301350
    void set_customReticle(::UnityEngine::GameObject* value);
    // protected System.Void .ctor()
    // Offset: 0x301120
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRBaseInteractable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRBaseInteractable*, creationType>()));
    }
    // public System.Void CustomForceDrop()
    // Offset: 0x300560
    void CustomForceDrop();
    // protected System.Void Reset()
    // Offset: 0x301110
    void Reset();
    // protected System.Void Awake()
    // Offset: 0x3003D0
    void Awake();
    // private System.Void FindCreateInteractionManager()
    // Offset: 0x300570
    void FindCreateInteractionManager();
    // private System.Void RegisterWithInteractionMananger()
    // Offset: 0x300E30
    void RegisterWithInteractionMananger();
    // private System.Void OnDestroy()
    // Offset: 0x300AF0
    void OnDestroy();
    // public System.Single GetDistanceSqrToInteractor(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300760
    float GetDistanceSqrToInteractor(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Boolean IsOnValidLayerMask(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300A00
    bool IsOnValidLayerMask(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // public System.Boolean IsHoverableBy(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300A00
    bool IsHoverableBy(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // public System.Boolean IsSelectableBy(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300A00
    bool IsSelectableBy(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal System.Void OnHoverEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300B70
    void OnHoverEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal System.Void OnHoverExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300C60
    void OnHoverExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal System.Void OnSelectEnter(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300D70
    void OnSelectEnter(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal System.Void OnSelectExit(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300DD0
    void OnSelectExit(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal System.Void OnActivate(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300A40
    void OnActivate(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // public System.Void AttachCustomReticle(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x3001A0
    void AttachCustomReticle(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // public System.Void RemoveCustomReticle(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300F70
    void RemoveCustomReticle(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal System.Void OnDeactivate(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x300A90
    void OnDeactivate(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // public System.Void ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0x1DDF00
    void ProcessInteractable(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
  }; // UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
  #pragma pack(pop)
  static check_size<sizeof(XRBaseInteractable), 144 + sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*, ::UnityEngine::GameObject*>*)> __UnityEngine_XR_Interaction_Toolkit_XRBaseInteractableSizeCheck;
  static_assert(sizeof(XRBaseInteractable) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_interactionManager
// Il2CppName: get_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_interactionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_interactionManager
// Il2CppName: set_interactionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionManager*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_interactionManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_interactionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_colliders
// Il2CppName: get_colliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_colliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_colliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_interactionLayerMask
// Il2CppName: get_interactionLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_interactionLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_interactionLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_interactionLayerMask
// Il2CppName: set_interactionLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::LayerMask)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_interactionLayerMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_interactionLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_hoveringInteractors
// Il2CppName: get_hoveringInteractors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*>* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_hoveringInteractors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_hoveringInteractors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_isHovered
// Il2CppName: get_isHovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_isHovered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_isHovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_isHovered
// Il2CppName: set_isHovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_isHovered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_isHovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_isSelected
// Il2CppName: get_isSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_isSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_isSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_isSelected
// Il2CppName: set_isSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_isSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_isSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onFirstHoverEnter
// Il2CppName: get_onFirstHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onFirstHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onFirstHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onFirstHoverEnter
// Il2CppName: set_onFirstHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onFirstHoverEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onFirstHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onHoverEnter
// Il2CppName: get_onHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onHoverEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onHoverEnter
// Il2CppName: set_onHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onHoverEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onHoverExit
// Il2CppName: get_onHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onHoverExit
// Il2CppName: set_onHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onHoverExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onLastHoverExit
// Il2CppName: get_onLastHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onLastHoverExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onLastHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onLastHoverExit
// Il2CppName: set_onLastHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onLastHoverExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onLastHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onSelectEnter
// Il2CppName: get_onSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onSelectEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onSelectEnter
// Il2CppName: set_onSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onSelectEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onSelectExit
// Il2CppName: get_onSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onSelectExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onSelectExit
// Il2CppName: set_onSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onSelectExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onActivate
// Il2CppName: get_onActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onActivate
// Il2CppName: set_onActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onActivate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onDeactivate
// Il2CppName: get_onDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_onDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_onDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onDeactivate
// Il2CppName: set_onDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractableEvent*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_onDeactivate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractableEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_onDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_customReticle
// Il2CppName: get_customReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::get_customReticle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "get_customReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_customReticle
// Il2CppName: set_customReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::GameObject*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::set_customReticle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "set_customReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::CustomForceDrop
// Il2CppName: CustomForceDrop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::CustomForceDrop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "CustomForceDrop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::FindCreateInteractionManager
// Il2CppName: FindCreateInteractionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::FindCreateInteractionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "FindCreateInteractionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::RegisterWithInteractionMananger
// Il2CppName: RegisterWithInteractionMananger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::RegisterWithInteractionMananger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "RegisterWithInteractionMananger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::GetDistanceSqrToInteractor
// Il2CppName: GetDistanceSqrToInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::GetDistanceSqrToInteractor)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "GetDistanceSqrToInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::IsOnValidLayerMask
// Il2CppName: IsOnValidLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::IsOnValidLayerMask)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "IsOnValidLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::IsHoverableBy
// Il2CppName: IsHoverableBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::IsHoverableBy)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "IsHoverableBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::IsSelectableBy
// Il2CppName: IsSelectableBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::IsSelectableBy)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "IsSelectableBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnHoverEnter
// Il2CppName: OnHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnHoverEnter)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "OnHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnHoverExit
// Il2CppName: OnHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnHoverExit)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "OnHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnSelectEnter
// Il2CppName: OnSelectEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnSelectEnter)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "OnSelectEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnSelectExit
// Il2CppName: OnSelectExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnSelectExit)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "OnSelectExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnActivate)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::AttachCustomReticle
// Il2CppName: AttachCustomReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::AttachCustomReticle)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "AttachCustomReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::RemoveCustomReticle
// Il2CppName: RemoveCustomReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::RemoveCustomReticle)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "RemoveCustomReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnDeactivate
// Il2CppName: OnDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::OnDeactivate)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "OnDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::ProcessInteractable
// Il2CppName: ProcessInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::ProcessInteractable)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*), "ProcessInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
