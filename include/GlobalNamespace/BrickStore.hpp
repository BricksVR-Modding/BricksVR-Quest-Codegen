// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BrickStore
  class BrickStore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BrickStore);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BrickStore*, "", "BrickStore");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: BrickStore
  // [TokenAttribute] Offset: FFFFFFFF
  class BrickStore : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> _dict
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>* dict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xF6900
    // public TMPro.TextMeshProUGUI brickCountText
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshProUGUI* brickCountText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private System.Boolean _debug
    // Size: 0x1
    // Offset: 0x28
    bool debug;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private BrickStore _instance
    static ::GlobalNamespace::BrickStore* _get__instance();
    // Set static field: static private BrickStore _instance
    static void _set__instance(::GlobalNamespace::BrickStore* value);
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> _dict
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*& dyn__dict();
    // Get instance field reference: public TMPro.TextMeshProUGUI brickCountText
    [[deprecated]] ::TMPro::TextMeshProUGUI*& dyn_brickCountText();
    // Get instance field reference: private System.Boolean _debug
    [[deprecated]] bool& dyn__debug();
    // private System.Void Start()
    // Offset: 0x6F49B0
    void Start();
    // public System.Void Put(System.String key, UnityEngine.GameObject brick)
    // Offset: 0x6F4870
    void Put(::StringW key, ::UnityEngine::GameObject* brick);
    // public UnityEngine.GameObject Get(System.String key)
    // Offset: 0x6F47B0
    ::UnityEngine::GameObject* Get(::StringW key);
    // public System.Void ClearAndRemoveFromWorld()
    // Offset: 0x6F44C0
    void ClearAndRemoveFromWorld();
    // public System.Void Delete(System.String key)
    // Offset: 0x6F4640
    void Delete(::StringW key);
    // public System.Collections.Generic.Dictionary`2/System.Collections.Generic.ValueCollection<System.String,UnityEngine.GameObject> Values()
    // Offset: 0x6F4A90
    typename ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>::ValueCollection* Values();
    // public System.Collections.Generic.Dictionary`2/System.Collections.Generic.KeyCollection<System.String,UnityEngine.GameObject> Keys()
    // Offset: 0x6F4820
    typename ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>::KeyCollection* Keys();
    // private System.Void UpdateTableText()
    // Offset: 0x6F4A10
    void UpdateTableText();
    // static public BrickStore GetInstance()
    // Offset: 0x6F46F0
    static ::GlobalNamespace::BrickStore* GetInstance();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrickStore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BrickStore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrickStore*, creationType>()));
    }
  }; // BrickStore
  #pragma pack(pop)
  static check_size<sizeof(BrickStore), 40 + sizeof(bool)> __GlobalNamespace_BrickStoreSizeCheck;
  static_assert(sizeof(BrickStore) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickStore::*)()>(&GlobalNamespace::BrickStore::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::Put
// Il2CppName: Put
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickStore::*)(::StringW, ::UnityEngine::GameObject*)>(&GlobalNamespace::BrickStore::Put)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* brick = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "Put", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, brick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::BrickStore::*)(::StringW)>(&GlobalNamespace::BrickStore::Get)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::ClearAndRemoveFromWorld
// Il2CppName: ClearAndRemoveFromWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickStore::*)()>(&GlobalNamespace::BrickStore::ClearAndRemoveFromWorld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "ClearAndRemoveFromWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickStore::*)(::StringW)>(&GlobalNamespace::BrickStore::Delete)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::Values
// Il2CppName: Values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<typename ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>::ValueCollection* (GlobalNamespace::BrickStore::*)()>(&GlobalNamespace::BrickStore::Values)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "Values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::Keys
// Il2CppName: Keys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<typename ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>::KeyCollection* (GlobalNamespace::BrickStore::*)()>(&GlobalNamespace::BrickStore::Keys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "Keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::UpdateTableText
// Il2CppName: UpdateTableText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BrickStore::*)()>(&GlobalNamespace::BrickStore::UpdateTableText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "UpdateTableText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BrickStore* (*)()>(&GlobalNamespace::BrickStore::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BrickStore*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BrickStore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
