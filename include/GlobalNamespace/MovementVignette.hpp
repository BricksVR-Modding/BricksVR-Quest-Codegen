// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Sigtrap::VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Forward declaring type: Tunnelling
  class Tunnelling;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MovementVignette
  class MovementVignette;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MovementVignette);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MovementVignette*, "", "MovementVignette");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: MovementVignette
  // [TokenAttribute] Offset: FFFFFFFF
  class MovementVignette : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public Sigtrap.VrTunnellingPro.Tunnelling tunnelling
    // Size: 0x8
    // Offset: 0x18
    ::Sigtrap::VrTunnellingPro::Tunnelling* tunnelling;
    // Field size check
    static_assert(sizeof(::Sigtrap::VrTunnellingPro::Tunnelling*) == 0x8);
    // private System.Boolean _vignetteEnabled
    // Size: 0x1
    // Offset: 0x20
    bool vignetteEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: vignetteEnabled and: originalVelocityMin
    char __padding1[0x3] = {};
    // private System.Single _originalVelocityMin
    // Size: 0x4
    // Offset: 0x24
    float originalVelocityMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _originalVelocityMax
    // Size: 0x4
    // Offset: 0x28
    float originalVelocityMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Sigtrap.VrTunnellingPro.Tunnelling tunnelling
    ::Sigtrap::VrTunnellingPro::Tunnelling*& dyn_tunnelling();
    // Get instance field reference: private System.Boolean _vignetteEnabled
    bool& dyn__vignetteEnabled();
    // Get instance field reference: private System.Single _originalVelocityMin
    float& dyn__originalVelocityMin();
    // Get instance field reference: private System.Single _originalVelocityMax
    float& dyn__originalVelocityMax();
    // private System.Void Start()
    // Offset: 0x10AE480
    void Start();
    // public System.Void VignetteStrengthUpdated(System.Single strength)
    // Offset: 0x10AE4D0
    void VignetteStrengthUpdated(float strength);
    // public System.Void WithVignetteDisabled(System.Action action)
    // Offset: 0x10AE530
    void WithVignetteDisabled(::System::Action* action);
    // public System.Void SetPlayerScale(System.Single scale)
    // Offset: 0x10AE588
    void SetPlayerScale(float scale);
    // public System.Void .ctor()
    // Offset: 0x10AE5C4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MovementVignette* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MovementVignette::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MovementVignette*, creationType>()));
    }
  }; // MovementVignette
  #pragma pack(pop)
  static check_size<sizeof(MovementVignette), 40 + sizeof(float)> __GlobalNamespace_MovementVignetteSizeCheck;
  static_assert(sizeof(MovementVignette) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MovementVignette::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MovementVignette::*)()>(&GlobalNamespace::MovementVignette::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MovementVignette*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MovementVignette::VignetteStrengthUpdated
// Il2CppName: VignetteStrengthUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MovementVignette::*)(float)>(&GlobalNamespace::MovementVignette::VignetteStrengthUpdated)> {
  static const MethodInfo* get() {
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MovementVignette*), "VignetteStrengthUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MovementVignette::WithVignetteDisabled
// Il2CppName: WithVignetteDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MovementVignette::*)(::System::Action*)>(&GlobalNamespace::MovementVignette::WithVignetteDisabled)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MovementVignette*), "WithVignetteDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MovementVignette::SetPlayerScale
// Il2CppName: SetPlayerScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MovementVignette::*)(float)>(&GlobalNamespace::MovementVignette::SetPlayerScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MovementVignette*), "SetPlayerScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MovementVignette::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
