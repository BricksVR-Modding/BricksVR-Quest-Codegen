// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SmoothTurn
  class SmoothTurn;
  // Forward declaring type: BrickPickerManager
  class BrickPickerManager;
  // Forward declaring type: JoystickLocomotion
  class JoystickLocomotion;
  // Forward declaring type: HandBrickSpawner
  class HandBrickSpawner;
  // Forward declaring type: ControllerButtonInput
  class ControllerButtonInput;
  // Forward declaring type: PalletteBrickCollider
  class PalletteBrickCollider;
  // Forward declaring type: MovementVignette
  class MovementVignette;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: Realtime
  class Realtime;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: SnapTurnProvider
  class SnapTurnProvider;
  // Forward declaring type: XRRig
  class XRRig;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TutorialManager
  class TutorialManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TutorialManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TutorialManager*, "", "TutorialManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x188
  #pragma pack(push, 1)
  // Autogenerated type: TutorialManager
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::TutorialManager::$StartTutorialIEnum$d__59
    class $StartTutorialIEnum$d__59;
    // Nested type: ::GlobalNamespace::TutorialManager::$ConnectToNormcore$d__61
    class $ConnectToNormcore$d__61;
    // Nested type: ::GlobalNamespace::TutorialManager::$AnimateBetweenTextObjectsWithCross$d__67
    class $AnimateBetweenTextObjectsWithCross$d__67;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveToSecondStep$d__69
    class $MoveToSecondStep$d__69;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveToThirdStep$d__71
    class $MoveToThirdStep$d__71;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveToFourthStep$d__73
    class $MoveToFourthStep$d__73;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveToFifthStep$d__75
    class $MoveToFifthStep$d__75;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveToSixthStep$d__77
    class $MoveToSixthStep$d__77;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveToSeventhStep$d__79
    class $MoveToSeventhStep$d__79;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveFromSeventhToSeventhAndAHalfthStep$d__81
    class $MoveFromSeventhToSeventhAndAHalfthStep$d__81;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveFromSeventhAndAHalfthToEighthStep$d__83
    class $MoveFromSeventhAndAHalfthToEighthStep$d__83;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveFromEighthToNinthStep$d__85
    class $MoveFromEighthToNinthStep$d__85;
    // Nested type: ::GlobalNamespace::TutorialManager::$MoveToLastStep$d__87
    class $MoveToLastStep$d__87;
    public:
    // public UnityEngine.GameObject playerControllers
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* playerControllers;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject infoBoard
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* infoBoard;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject tutorialEnvContents
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* tutorialEnvContents;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public Normal.Realtime.Realtime realtime
    // Size: 0x8
    // Offset: 0x30
    ::Normal::Realtime::Realtime* realtime;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Realtime*) == 0x8);
    // public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider snapTurnProvider
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider* snapTurnProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*) == 0x8);
    // public SmoothTurn smoothTurn
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SmoothTurn* smoothTurn;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SmoothTurn*) == 0x8);
    // public BrickPickerManager brickPickerManager
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::BrickPickerManager* brickPickerManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BrickPickerManager*) == 0x8);
    // public UnityEngine.AudioSource ambientMusic
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* ambientMusic;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single _ambientMusicMaxVolume
    // Size: 0x4
    // Offset: 0x58
    float ambientMusicMaxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: ambientMusicMaxVolume and: joystickLocomotion
    char __padding8[0x4] = {};
    // public JoystickLocomotion joystickLocomotion
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::JoystickLocomotion* joystickLocomotion;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::JoystickLocomotion*) == 0x8);
    // public UnityEngine.Renderer loadingObjectRenderer
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Renderer* loadingObjectRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public HandBrickSpawner leftHandBrickSpawner
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::HandBrickSpawner* leftHandBrickSpawner;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandBrickSpawner*) == 0x8);
    // public HandBrickSpawner rightHandBrickSpawner
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::HandBrickSpawner* rightHandBrickSpawner;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandBrickSpawner*) == 0x8);
    // public UnityEngine.GameObject menuLeftHand
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* menuLeftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject menuRightHand
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* menuRightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject teleporterLeftHand
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* teleporterLeftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject teleporterRightHand
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* teleporterRightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public ControllerButtonInput buttonInput
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::ControllerButtonInput* buttonInput;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ControllerButtonInput*) == 0x8);
    // public UnityEngine.AudioSource canvasAudioSource
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::AudioSource* canvasAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.XR.Interaction.Toolkit.XRRig xrRig
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::XR::Interaction::Toolkit::XRRig* xrRig;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRig*) == 0x8);
    // public PalletteBrickCollider palletteBrickCollider
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::PalletteBrickCollider* palletteBrickCollider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PalletteBrickCollider*) == 0x8);
    // public UnityEngine.UI.Button roomMenuButton
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::UI::Button* roomMenuButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.GameObject firstBrick
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* firstBrick;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject secondBrick
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::GameObject* secondBrick;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0x103480
    // public UnityEngine.GameObject tutorialSpawnPoint
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::GameObject* tutorialSpawnPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject firstBrickSpawnPoint
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::GameObject* firstBrickSpawnPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject secondBrickSpawnPoint
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::GameObject* secondBrickSpawnPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0x1034F0
    // public TMPro.TextMeshProUGUI firstTextBox
    // Size: 0x8
    // Offset: 0xF0
    ::TMPro::TextMeshProUGUI* firstTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI secondTextBox
    // Size: 0x8
    // Offset: 0xF8
    ::TMPro::TextMeshProUGUI* secondTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI thirdTextBox
    // Size: 0x8
    // Offset: 0x100
    ::TMPro::TextMeshProUGUI* thirdTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI fourthTextBox
    // Size: 0x8
    // Offset: 0x108
    ::TMPro::TextMeshProUGUI* fourthTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI fifthTextBox
    // Size: 0x8
    // Offset: 0x110
    ::TMPro::TextMeshProUGUI* fifthTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI sixthTextBox
    // Size: 0x8
    // Offset: 0x118
    ::TMPro::TextMeshProUGUI* sixthTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI seventhTextBox
    // Size: 0x8
    // Offset: 0x120
    ::TMPro::TextMeshProUGUI* seventhTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI seventhAndAHalfthTextBox
    // Size: 0x8
    // Offset: 0x128
    ::TMPro::TextMeshProUGUI* seventhAndAHalfthTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI eighthTextBox
    // Size: 0x8
    // Offset: 0x130
    ::TMPro::TextMeshProUGUI* eighthTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI ninthTextBox
    // Size: 0x8
    // Offset: 0x138
    ::TMPro::TextMeshProUGUI* ninthTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // public TMPro.TextMeshProUGUI lastTextBox
    // Size: 0x8
    // Offset: 0x140
    ::TMPro::TextMeshProUGUI* lastTextBox;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private System.Boolean _startedTutorial
    // Size: 0x1
    // Offset: 0x148
    bool startedTutorial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _advancing
    // Size: 0x1
    // Offset: 0x149
    bool advancing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _connectedToNormcore
    // Size: 0x1
    // Offset: 0x14A
    bool connectedToNormcore;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _didConnectToRoom
    // Size: 0x1
    // Offset: 0x14B
    bool didConnectToRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _didDisconnectFromRoom
    // Size: 0x1
    // Offset: 0x14C
    bool didDisconnectFromRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: didDisconnectFromRoom and: initialLateralMovementIndex
    char __padding42[0x3] = {};
    // private System.Int32 _initialLateralMovementIndex
    // Size: 0x4
    // Offset: 0x150
    int initialLateralMovementIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _initialVerticalMovementIndex
    // Size: 0x4
    // Offset: 0x154
    int initialVerticalMovementIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _initialSnapTurnIndex
    // Size: 0x4
    // Offset: 0x158
    int initialSnapTurnIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _initialBrickMenuIndex
    // Size: 0x4
    // Offset: 0x15C
    int initialBrickMenuIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _numberOfBricks
    // Size: 0x4
    // Offset: 0x160
    int numberOfBricks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _initialHandBrickSpawnerIndex
    // Size: 0x4
    // Offset: 0x164
    int initialHandBrickSpawnerIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _initialPalletteBrickColliderIndex
    // Size: 0x4
    // Offset: 0x168
    int initialPalletteBrickColliderIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: initialPalletteBrickColliderIndex and: startTutorialCoroutine
    char __padding49[0x4] = {};
    // private UnityEngine.Coroutine _startTutorialCoroutine
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::Coroutine* startTutorialCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Action _updateAction
    // Size: 0x8
    // Offset: 0x178
    ::System::Action* updateAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public MovementVignette movementVignette
    // Size: 0x8
    // Offset: 0x180
    ::GlobalNamespace::MovementVignette* movementVignette;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MovementVignette*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private TutorialManager _instance
    static ::GlobalNamespace::TutorialManager* _get__instance();
    // Set static field: static private TutorialManager _instance
    static void _set__instance(::GlobalNamespace::TutorialManager* value);
    // Get instance field reference: public UnityEngine.GameObject playerControllers
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playerControllers();
    // Get instance field reference: public UnityEngine.GameObject infoBoard
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_infoBoard();
    // Get instance field reference: public UnityEngine.GameObject tutorialEnvContents
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_tutorialEnvContents();
    // Get instance field reference: public Normal.Realtime.Realtime realtime
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::Realtime*& dyn_realtime();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.SnapTurnProvider snapTurnProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProvider*& dyn_snapTurnProvider();
    // Get instance field reference: public SmoothTurn smoothTurn
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SmoothTurn*& dyn_smoothTurn();
    // Get instance field reference: public BrickPickerManager brickPickerManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BrickPickerManager*& dyn_brickPickerManager();
    // Get instance field reference: public UnityEngine.AudioSource ambientMusic
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_ambientMusic();
    // Get instance field reference: private System.Single _ambientMusicMaxVolume
    [[deprecated("Use field access instead!")]] float& dyn__ambientMusicMaxVolume();
    // Get instance field reference: public JoystickLocomotion joystickLocomotion
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::JoystickLocomotion*& dyn_joystickLocomotion();
    // Get instance field reference: public UnityEngine.Renderer loadingObjectRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_loadingObjectRenderer();
    // Get instance field reference: public HandBrickSpawner leftHandBrickSpawner
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HandBrickSpawner*& dyn_leftHandBrickSpawner();
    // Get instance field reference: public HandBrickSpawner rightHandBrickSpawner
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HandBrickSpawner*& dyn_rightHandBrickSpawner();
    // Get instance field reference: public UnityEngine.GameObject menuLeftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_menuLeftHand();
    // Get instance field reference: public UnityEngine.GameObject menuRightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_menuRightHand();
    // Get instance field reference: public UnityEngine.GameObject teleporterLeftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_teleporterLeftHand();
    // Get instance field reference: public UnityEngine.GameObject teleporterRightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_teleporterRightHand();
    // Get instance field reference: public ControllerButtonInput buttonInput
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ControllerButtonInput*& dyn_buttonInput();
    // Get instance field reference: public UnityEngine.AudioSource canvasAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_canvasAudioSource();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRRig xrRig
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRig*& dyn_xrRig();
    // Get instance field reference: public PalletteBrickCollider palletteBrickCollider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PalletteBrickCollider*& dyn_palletteBrickCollider();
    // Get instance field reference: public UnityEngine.UI.Button roomMenuButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn_roomMenuButton();
    // Get instance field reference: private UnityEngine.GameObject firstBrick
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_firstBrick();
    // Get instance field reference: private UnityEngine.GameObject secondBrick
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_secondBrick();
    // Get instance field reference: public UnityEngine.GameObject tutorialSpawnPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_tutorialSpawnPoint();
    // Get instance field reference: public UnityEngine.GameObject firstBrickSpawnPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_firstBrickSpawnPoint();
    // Get instance field reference: public UnityEngine.GameObject secondBrickSpawnPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_secondBrickSpawnPoint();
    // Get instance field reference: public TMPro.TextMeshProUGUI firstTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_firstTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI secondTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_secondTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI thirdTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_thirdTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI fourthTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_fourthTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI fifthTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_fifthTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI sixthTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_sixthTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI seventhTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_seventhTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI seventhAndAHalfthTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_seventhAndAHalfthTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI eighthTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_eighthTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI ninthTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_ninthTextBox();
    // Get instance field reference: public TMPro.TextMeshProUGUI lastTextBox
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn_lastTextBox();
    // Get instance field reference: private System.Boolean _startedTutorial
    [[deprecated("Use field access instead!")]] bool& dyn__startedTutorial();
    // Get instance field reference: private System.Boolean _advancing
    [[deprecated("Use field access instead!")]] bool& dyn__advancing();
    // Get instance field reference: private System.Boolean _connectedToNormcore
    [[deprecated("Use field access instead!")]] bool& dyn__connectedToNormcore();
    // Get instance field reference: private System.Boolean _didConnectToRoom
    [[deprecated("Use field access instead!")]] bool& dyn__didConnectToRoom();
    // Get instance field reference: private System.Boolean _didDisconnectFromRoom
    [[deprecated("Use field access instead!")]] bool& dyn__didDisconnectFromRoom();
    // Get instance field reference: private System.Int32 _initialLateralMovementIndex
    [[deprecated("Use field access instead!")]] int& dyn__initialLateralMovementIndex();
    // Get instance field reference: private System.Int32 _initialVerticalMovementIndex
    [[deprecated("Use field access instead!")]] int& dyn__initialVerticalMovementIndex();
    // Get instance field reference: private System.Int32 _initialSnapTurnIndex
    [[deprecated("Use field access instead!")]] int& dyn__initialSnapTurnIndex();
    // Get instance field reference: private System.Int32 _initialBrickMenuIndex
    [[deprecated("Use field access instead!")]] int& dyn__initialBrickMenuIndex();
    // Get instance field reference: private System.Int32 _numberOfBricks
    [[deprecated("Use field access instead!")]] int& dyn__numberOfBricks();
    // Get instance field reference: private System.Int32 _initialHandBrickSpawnerIndex
    [[deprecated("Use field access instead!")]] int& dyn__initialHandBrickSpawnerIndex();
    // Get instance field reference: private System.Int32 _initialPalletteBrickColliderIndex
    [[deprecated("Use field access instead!")]] int& dyn__initialPalletteBrickColliderIndex();
    // Get instance field reference: private UnityEngine.Coroutine _startTutorialCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__startTutorialCoroutine();
    // Get instance field reference: private System.Action _updateAction
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn__updateAction();
    // Get instance field reference: public MovementVignette movementVignette
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MovementVignette*& dyn_movementVignette();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TutorialManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialManager*, creationType>()));
    }
    // static public TutorialManager GetInstance()
    // Offset: 0x6DA270
    static ::GlobalNamespace::TutorialManager* GetInstance();
    // private System.Void Start()
    // Offset: 0x6DA9D0
    void Start();
    // private System.Void Update()
    // Offset: 0x6DB390
    void Update();
    // public System.Void StartTutorial()
    // Offset: 0x6DA8B0
    void StartTutorial();
    // public System.Boolean IsTutorialRunning()
    // Offset: 0x603090
    bool IsTutorialRunning();
    // private System.Collections.IEnumerator StartTutorialIEnum()
    // Offset: 0x6DA840
    ::System::Collections::IEnumerator* StartTutorialIEnum();
    // private System.Void MovePlayerToTutorial()
    // Offset: 0x6DA480
    void MovePlayerToTutorial();
    // private System.Collections.IEnumerator ConnectToNormcore()
    // Offset: 0x6D9EE0
    ::System::Collections::IEnumerator* ConnectToNormcore();
    // private System.Void DidConnectToRoom(Normal.Realtime.Realtime _)
    // Offset: 0x6DA160
    void DidConnectToRoom(::Normal::Realtime::Realtime* _);
    // private System.Void DidDisconnectFromRoom(Normal.Realtime.Realtime _)
    // Offset: 0x6DA170
    void DidDisconnectFromRoom(::Normal::Realtime::Realtime* _);
    // private System.Void PlaySuccessTrack()
    // Offset: 0x6DA810
    void PlaySuccessTrack();
    // private UnityEngine.GameObject CreateNewBrick(System.String prefabName, UnityEngine.Transform t, UnityEngine.Color color)
    // Offset: 0x6D9F50
    ::UnityEngine::GameObject* CreateNewBrick(::StringW prefabName, ::UnityEngine::Transform* t, ::UnityEngine::Color color);
    // private System.Void EnablePhysicsOnBrick(UnityEngine.GameObject brick)
    // Offset: 0x6DA1B0
    void EnablePhysicsOnBrick(::UnityEngine::GameObject* brick);
    // private System.Collections.IEnumerator AnimateBetweenTextObjectsWithCross(TMPro.TextMeshProUGUI oldText, TMPro.TextMeshProUGUI newText)
    // Offset: 0x6D9E50
    ::System::Collections::IEnumerator* AnimateBetweenTextObjectsWithCross(::TMPro::TextMeshProUGUI* oldText, ::TMPro::TextMeshProUGUI* newText);
    // private System.Void UpdateFirstPart()
    // Offset: 0x6DAD10
    void UpdateFirstPart();
    // private System.Collections.IEnumerator MoveToSecondStep()
    // Offset: 0x6DA650
    ::System::Collections::IEnumerator* MoveToSecondStep();
    // private System.Void UpdateSecondPart()
    // Offset: 0x6DAFA0
    void UpdateSecondPart();
    // private System.Collections.IEnumerator MoveToThirdStep()
    // Offset: 0x6DA7A0
    ::System::Collections::IEnumerator* MoveToThirdStep();
    // private System.Void UpdateThirdPart()
    // Offset: 0x6DB2D0
    void UpdateThirdPart();
    // private System.Collections.IEnumerator MoveToFourthStep()
    // Offset: 0x6DA570
    ::System::Collections::IEnumerator* MoveToFourthStep();
    // private System.Void UpdateFourthPart()
    // Offset: 0x6DADF0
    void UpdateFourthPart();
    // private System.Collections.IEnumerator MoveToFifthStep()
    // Offset: 0x6DA500
    ::System::Collections::IEnumerator* MoveToFifthStep();
    // private System.Void UpdateFifthPart()
    // Offset: 0x6DAC50
    void UpdateFifthPart();
    // private System.Collections.IEnumerator MoveToSixthStep()
    // Offset: 0x6DA730
    ::System::Collections::IEnumerator* MoveToSixthStep();
    // private System.Void UpdateSixthPart()
    // Offset: 0x6DB220
    void UpdateSixthPart();
    // private System.Collections.IEnumerator MoveToSeventhStep()
    // Offset: 0x6DA6C0
    ::System::Collections::IEnumerator* MoveToSeventhStep();
    // private System.Void UpdateSeventhPart()
    // Offset: 0x6DB130
    void UpdateSeventhPart();
    // private System.Collections.IEnumerator MoveFromSeventhToSeventhAndAHalfthStep()
    // Offset: 0x6DA410
    ::System::Collections::IEnumerator* MoveFromSeventhToSeventhAndAHalfthStep();
    // private System.Void UpdateSeventhAndAHalfthPart()
    // Offset: 0x6DB080
    void UpdateSeventhAndAHalfthPart();
    // private System.Collections.IEnumerator MoveFromSeventhAndAHalfthToEighthStep()
    // Offset: 0x6DA3A0
    ::System::Collections::IEnumerator* MoveFromSeventhAndAHalfthToEighthStep();
    // private System.Void UpdateEighthPart()
    // Offset: 0x6DAB80
    void UpdateEighthPart();
    // private System.Collections.IEnumerator MoveFromEighthToNinthStep()
    // Offset: 0x6DA330
    ::System::Collections::IEnumerator* MoveFromEighthToNinthStep();
    // private System.Void UpdateNinthPart()
    // Offset: 0x6DAEB0
    void UpdateNinthPart();
    // private System.Collections.IEnumerator MoveToLastStep()
    // Offset: 0x6DA5E0
    ::System::Collections::IEnumerator* MoveToLastStep();
    // private System.Void <MovePlayerToTutorial>b__60_0()
    // Offset: 0x6DAAB0
    void $MovePlayerToTutorial$b__60_0();
  }; // TutorialManager
  #pragma pack(pop)
  static check_size<sizeof(TutorialManager), 384 + sizeof(::GlobalNamespace::MovementVignette*)> __GlobalNamespace_TutorialManagerSizeCheck;
  static_assert(sizeof(TutorialManager) == 0x188);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TutorialManager* (*)()>(&GlobalNamespace::TutorialManager::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::StartTutorial
// Il2CppName: StartTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::StartTutorial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "StartTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::IsTutorialRunning
// Il2CppName: IsTutorialRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::IsTutorialRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "IsTutorialRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::StartTutorialIEnum
// Il2CppName: StartTutorialIEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::StartTutorialIEnum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "StartTutorialIEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MovePlayerToTutorial
// Il2CppName: MovePlayerToTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MovePlayerToTutorial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MovePlayerToTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::ConnectToNormcore
// Il2CppName: ConnectToNormcore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::ConnectToNormcore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "ConnectToNormcore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::DidConnectToRoom
// Il2CppName: DidConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)(::Normal::Realtime::Realtime*)>(&GlobalNamespace::TutorialManager::DidConnectToRoom)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "DidConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::DidDisconnectFromRoom
// Il2CppName: DidDisconnectFromRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)(::Normal::Realtime::Realtime*)>(&GlobalNamespace::TutorialManager::DidDisconnectFromRoom)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "DidDisconnectFromRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::PlaySuccessTrack
// Il2CppName: PlaySuccessTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::PlaySuccessTrack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "PlaySuccessTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::CreateNewBrick
// Il2CppName: CreateNewBrick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::TutorialManager::*)(::StringW, ::UnityEngine::Transform*, ::UnityEngine::Color)>(&GlobalNamespace::TutorialManager::CreateNewBrick)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "CreateNewBrick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, t, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::EnablePhysicsOnBrick
// Il2CppName: EnablePhysicsOnBrick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::TutorialManager::EnablePhysicsOnBrick)> {
  static const MethodInfo* get() {
    static auto* brick = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "EnablePhysicsOnBrick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::AnimateBetweenTextObjectsWithCross
// Il2CppName: AnimateBetweenTextObjectsWithCross
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)(::TMPro::TextMeshProUGUI*, ::TMPro::TextMeshProUGUI*)>(&GlobalNamespace::TutorialManager::AnimateBetweenTextObjectsWithCross)> {
  static const MethodInfo* get() {
    static auto* oldText = &::il2cpp_utils::GetClassFromName("TMPro", "TextMeshProUGUI")->byval_arg;
    static auto* newText = &::il2cpp_utils::GetClassFromName("TMPro", "TextMeshProUGUI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "AnimateBetweenTextObjectsWithCross", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldText, newText});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateFirstPart
// Il2CppName: UpdateFirstPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateFirstPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateFirstPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveToSecondStep
// Il2CppName: MoveToSecondStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveToSecondStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveToSecondStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateSecondPart
// Il2CppName: UpdateSecondPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateSecondPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateSecondPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveToThirdStep
// Il2CppName: MoveToThirdStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveToThirdStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveToThirdStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateThirdPart
// Il2CppName: UpdateThirdPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateThirdPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateThirdPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveToFourthStep
// Il2CppName: MoveToFourthStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveToFourthStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveToFourthStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateFourthPart
// Il2CppName: UpdateFourthPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateFourthPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateFourthPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveToFifthStep
// Il2CppName: MoveToFifthStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveToFifthStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveToFifthStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateFifthPart
// Il2CppName: UpdateFifthPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateFifthPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateFifthPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveToSixthStep
// Il2CppName: MoveToSixthStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveToSixthStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveToSixthStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateSixthPart
// Il2CppName: UpdateSixthPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateSixthPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateSixthPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveToSeventhStep
// Il2CppName: MoveToSeventhStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveToSeventhStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveToSeventhStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateSeventhPart
// Il2CppName: UpdateSeventhPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateSeventhPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateSeventhPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveFromSeventhToSeventhAndAHalfthStep
// Il2CppName: MoveFromSeventhToSeventhAndAHalfthStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveFromSeventhToSeventhAndAHalfthStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveFromSeventhToSeventhAndAHalfthStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateSeventhAndAHalfthPart
// Il2CppName: UpdateSeventhAndAHalfthPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateSeventhAndAHalfthPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateSeventhAndAHalfthPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveFromSeventhAndAHalfthToEighthStep
// Il2CppName: MoveFromSeventhAndAHalfthToEighthStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveFromSeventhAndAHalfthToEighthStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveFromSeventhAndAHalfthToEighthStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateEighthPart
// Il2CppName: UpdateEighthPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateEighthPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateEighthPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveFromEighthToNinthStep
// Il2CppName: MoveFromEighthToNinthStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveFromEighthToNinthStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveFromEighthToNinthStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::UpdateNinthPart
// Il2CppName: UpdateNinthPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::UpdateNinthPart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "UpdateNinthPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::MoveToLastStep
// Il2CppName: MoveToLastStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::MoveToLastStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "MoveToLastStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TutorialManager::$MovePlayerToTutorial$b__60_0
// Il2CppName: <MovePlayerToTutorial>b__60_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialManager::*)()>(&GlobalNamespace::TutorialManager::$MovePlayerToTutorial$b__60_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialManager*), "<MovePlayerToTutorial>b__60_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
