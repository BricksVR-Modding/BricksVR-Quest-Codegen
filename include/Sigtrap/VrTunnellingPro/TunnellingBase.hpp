// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Sigtrap.VrTunnellingPro.Angle3
#include "Sigtrap/VrTunnellingPro/Angle3.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Sigtrap::VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Forward declaring type: TunnellingPresetBase
  class TunnellingPresetBase;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Cubemap
  class Cubemap;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Forward declaring type: TunnellingBase
  class TunnellingBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Sigtrap::VrTunnellingPro::TunnellingBase);
DEFINE_IL2CPP_ARG_TYPE(::Sigtrap::VrTunnellingPro::TunnellingBase*, "Sigtrap.VrTunnellingPro", "TunnellingBase");
// Type namespace: Sigtrap.VrTunnellingPro
namespace Sigtrap::VrTunnellingPro {
  // Size: 0x1C8
  #pragma pack(push, 1)
  // Autogenerated type: Sigtrap.VrTunnellingPro.TunnellingBase
  // [TokenAttribute] Offset: FFFFFFFF
  class TunnellingBase : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Sigtrap::VrTunnellingPro::TunnellingBase::BackgroundMode
    struct BackgroundMode;
    // Nested type: ::Sigtrap::VrTunnellingPro::TunnellingBase::MaskMode
    struct MaskMode;
    // Nested type: ::Sigtrap::VrTunnellingPro::TunnellingBase::MSAA
    struct MSAA;
    // Nested type: ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode
    struct ForceVignetteMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ForceVignetteMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ForceVignetteMode
      constexpr ForceVignetteMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode NONE
      static constexpr const int NONE = 0;
      // Get static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode NONE
      static ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode _get_NONE();
      // Set static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode NONE
      static void _set_NONE(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode value);
      // static field const value: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode CONSTANT
      static constexpr const int CONSTANT = 10;
      // Get static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode CONSTANT
      static ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode _get_CONSTANT();
      // Set static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode CONSTANT
      static void _set_CONSTANT(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode value);
      // static field const value: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode MAX
      static constexpr const int MAX = 20;
      // Get static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode MAX
      static ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode _get_MAX();
      // Set static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode MAX
      static void _set_MAX(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode value);
      // static field const value: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode MIN
      static constexpr const int MIN = 30;
      // Get static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode MIN
      static ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode _get_MIN();
      // Set static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode MIN
      static void _set_MIN(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode value);
      // static field const value: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode ADD
      static constexpr const int ADD = 40;
      // Get static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode ADD
      static ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode _get_ADD();
      // Set static field: static public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode ADD
      static void _set_ADD(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode
    #pragma pack(pop)
    static check_size<sizeof(TunnellingBase::ForceVignetteMode), 0 + sizeof(int)> __Sigtrap_VrTunnellingPro_TunnellingBase_ForceVignetteModeSizeCheck;
    static_assert(sizeof(TunnellingBase::ForceVignetteMode) == 0x4);
    public:
    // protected System.Int32 _propFxInner
    // Size: 0x4
    // Offset: 0x18
    int propFxInner;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _propFxOuter
    // Size: 0x4
    // Offset: 0x1C
    int propFxOuter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _propEyeProjection
    // Size: 0x4
    // Offset: 0x20
    int propEyeProjection;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _propEyeToWorld
    // Size: 0x4
    // Offset: 0x24
    int propEyeToWorld;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _globPropFogColor
    // Size: 0x4
    // Offset: 0x28
    int globPropFogColor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _globPropFogDensity
    // Size: 0x4
    // Offset: 0x2C
    int globPropFogDensity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _globPropFogPower
    // Size: 0x4
    // Offset: 0x30
    int globPropFogPower;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _globPropFogBlend
    // Size: 0x4
    // Offset: 0x34
    int globPropFogBlend;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Matrix4x4[] _eyeToWorld
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Matrix4x4> eyeToWorld;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Matrix4x4[] _eyeProjection
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Matrix4x4> eyeProjection;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // [TooltipAttribute] Offset: 0x10A290
    // public UnityEngine.Transform motionTarget
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* motionTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x10A2F0
    // public UnityEngine.Color effectColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color effectColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0x10A320
    // [TooltipAttribute] Offset: 0x10A320
    // public System.Single effectCoverage
    // Size: 0x4
    // Offset: 0x60
    float effectCoverage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x10A370
    // [TooltipAttribute] Offset: 0x10A370
    // public System.Single effectFeather
    // Size: 0x4
    // Offset: 0x64
    float effectFeather;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Cubemap effectSkybox
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Cubemap* effectSkybox;
    // Field size check
    static_assert(sizeof(::UnityEngine::Cubemap*) == 0x8);
    // public System.Boolean applyColorToBackground
    // Size: 0x1
    // Offset: 0x70
    bool applyColorToBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x10A3C0
    // public System.Boolean useAngularVelocity
    // Size: 0x1
    // Offset: 0x71
    bool useAngularVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useAngularVelocity and: angularVelocityStrength
    char __padding16[0x2] = {};
    // [RangeAttribute] Offset: 0xBB8C0
    // public System.Single angularVelocityStrength
    // Size: 0x4
    // Offset: 0x74
    float angularVelocityStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single angularVelocityMin
    // Size: 0x4
    // Offset: 0x78
    float angularVelocityMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single angularVelocityMax
    // Size: 0x4
    // Offset: 0x7C
    float angularVelocityMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single angularVelocitySmoothing
    // Size: 0x4
    // Offset: 0x80
    float angularVelocitySmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x10A470
    // public System.Boolean useAcceleration
    // Size: 0x1
    // Offset: 0x84
    bool useAcceleration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useAcceleration and: accelerationStrength
    char __padding21[0x3] = {};
    // [RangeAttribute] Offset: 0xBB8C0
    // public System.Single accelerationStrength
    // Size: 0x4
    // Offset: 0x88
    float accelerationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single accelerationMin
    // Size: 0x4
    // Offset: 0x8C
    float accelerationMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single accelerationMax
    // Size: 0x4
    // Offset: 0x90
    float accelerationMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single accelerationSmoothing
    // Size: 0x4
    // Offset: 0x94
    float accelerationSmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x10A4A0
    // public System.Boolean useVelocity
    // Size: 0x1
    // Offset: 0x98
    bool useVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useVelocity and: velocityStrength
    char __padding26[0x3] = {};
    // [RangeAttribute] Offset: 0xBB8C0
    // public System.Single velocityStrength
    // Size: 0x4
    // Offset: 0x9C
    float velocityStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single velocityMin
    // Size: 0x4
    // Offset: 0xA0
    float velocityMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single velocityMax
    // Size: 0x4
    // Offset: 0xA4
    float velocityMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single velocitySmoothing
    // Size: 0x4
    // Offset: 0xA8
    float velocitySmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x10A520
    // public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode forceVignetteMode
    // Size: 0x4
    // Offset: 0xAC
    ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode forceVignetteMode;
    // Field size check
    static_assert(sizeof(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode) == 0x4);
    // [RangeAttribute] Offset: 0x10A5A0
    // [TooltipAttribute] Offset: 0x10A5A0
    // public System.Single forceVignetteValue
    // Size: 0x4
    // Offset: 0xB0
    float forceVignetteValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: forceVignetteValue and: motionEffectTarget
    char __padding32[0x4] = {};
    // [TooltipAttribute] Offset: 0x10A630
    // public UnityEngine.Transform motionEffectTarget
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Transform* motionEffectTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x10A660
    // public System.Boolean useCounterMotion
    // Size: 0x1
    // Offset: 0xC0
    bool useCounterMotion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useCounterMotion and: counterRotationStrength
    char __padding34[0x3] = {};
    // [RangeAttribute] Offset: 0xBB220
    // [TooltipAttribute] Offset: 0xBB220
    // public System.Single counterRotationStrength
    // Size: 0x4
    // Offset: 0xC4
    float counterRotationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xBB2C0
    // public UnityEngine.Vector3 counterRotationPerAxis
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 counterRotationPerAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xBB350
    // public System.Boolean useArtificialTilt
    // Size: 0x1
    // Offset: 0xD4
    bool useArtificialTilt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useArtificialTilt and: tiltStrength
    char __padding37[0x3] = {};
    // [TooltipAttribute] Offset: 0xBB3E0
    // public System.Single tiltStrength
    // Size: 0x4
    // Offset: 0xD8
    float tiltStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xBB410
    // public UnityEngine.Vector2 tiltMaxAngles
    // Size: 0x8
    // Offset: 0xDC
    ::UnityEngine::Vector2 tiltMaxAngles;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [RangeAttribute] Offset: 0xBB4A0
    // [TooltipAttribute] Offset: 0xBB4A0
    // public System.Single tiltSmoothTime
    // Size: 0x4
    // Offset: 0xE4
    float tiltSmoothTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xBB520
    // [TooltipAttribute] Offset: 0xBB520
    // public System.Int32 framerateDivision
    // Size: 0x4
    // Offset: 0xE8
    int framerateDivision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean divideTranslation
    // Size: 0x1
    // Offset: 0xEC
    bool divideTranslation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean divideRotation
    // Size: 0x1
    // Offset: 0xED
    bool divideRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: divideRotation and: lastRot
    char __padding43[0x2] = {};
    // private UnityEngine.Quaternion _lastRot
    // Size: 0x10
    // Offset: 0xF0
    ::UnityEngine::Quaternion lastRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _lastFwd
    // Size: 0xC
    // Offset: 0x100
    ::UnityEngine::Vector3 lastFwd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _lastPos
    // Size: 0xC
    // Offset: 0x10C
    ::UnityEngine::Vector3 lastPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _lastSpeed
    // Size: 0x4
    // Offset: 0x118
    float lastSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _lastVel
    // Size: 0xC
    // Offset: 0x11C
    ::UnityEngine::Vector3 lastVel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected UnityEngine.Quaternion _cmRot
    // Size: 0x10
    // Offset: 0x128
    ::UnityEngine::Quaternion cmRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single _avSmoothed
    // Size: 0x4
    // Offset: 0x138
    float avSmoothed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _avSlew
    // Size: 0x4
    // Offset: 0x13C
    float avSlew;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _speedSmoothed
    // Size: 0x4
    // Offset: 0x140
    float speedSmoothed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _speedSlew
    // Size: 0x4
    // Offset: 0x144
    float speedSlew;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _accelSmoothed
    // Size: 0x4
    // Offset: 0x148
    float accelSmoothed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _accelSlew
    // Size: 0x4
    // Offset: 0x14C
    float accelSlew;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform _prevMotionEffectTarget
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::Transform* prevMotionEffectTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _prevUseTilt
    // Size: 0x1
    // Offset: 0x158
    bool prevUseTilt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: prevUseTilt and: tiltAccelSmoothed
    char __padding57[0x3] = {};
    // private UnityEngine.Vector3 _tiltAccelSmoothed
    // Size: 0xC
    // Offset: 0x15C
    ::UnityEngine::Vector3 tiltAccelSmoothed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _tiltAccelSlew
    // Size: 0xC
    // Offset: 0x168
    ::UnityEngine::Vector3 tiltAccelSlew;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Sigtrap.VrTunnellingPro.Angle3 _tiltInit
    // Size: 0xC
    // Offset: 0x174
    ::Sigtrap::VrTunnellingPro::Angle3 tiltInit;
    // Field size check
    static_assert(sizeof(::Sigtrap::VrTunnellingPro::Angle3) == 0xC);
    // private System.Int32 _lastFpsDivision
    // Size: 0x4
    // Offset: 0x180
    int lastFpsDivision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 _mfxTgtLocalPosInit
    // Size: 0xC
    // Offset: 0x184
    ::UnityEngine::Vector3 mfxTgtLocalPosInit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _mfxTgtLocalRotInit
    // Size: 0x10
    // Offset: 0x190
    ::UnityEngine::Quaternion mfxTgtLocalRotInit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // protected UnityEngine.Camera _cam
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::Camera* cam;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // protected System.Boolean _hasDrawnThisFrame
    // Size: 0x1
    // Offset: 0x1A8
    bool hasDrawnThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasDrawnThisFrame and: fpsPosition
    char __padding65[0x3] = {};
    // private UnityEngine.Vector3 _fpsPosition
    // Size: 0xC
    // Offset: 0x1AC
    ::UnityEngine::Vector3 fpsPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _fpsRotation
    // Size: 0x10
    // Offset: 0x1B8
    ::UnityEngine::Quaternion fpsRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String VRTP_VERSION
    static constexpr const char* VRTP_VERSION = "1.4.0";
    // Get static field: static public System.String VRTP_VERSION
    static ::StringW _get_VRTP_VERSION();
    // Set static field: static public System.String VRTP_VERSION
    static void _set_VRTP_VERSION(::StringW value);
    // static field const value: static public System.Int32 VRTP_VERSION_MAJOR
    static constexpr const int VRTP_VERSION_MAJOR = 1;
    // Get static field: static public System.Int32 VRTP_VERSION_MAJOR
    static int _get_VRTP_VERSION_MAJOR();
    // Set static field: static public System.Int32 VRTP_VERSION_MAJOR
    static void _set_VRTP_VERSION_MAJOR(int value);
    // static field const value: static public System.Int32 VRTP_VERSION_MINOR
    static constexpr const int VRTP_VERSION_MINOR = 4;
    // Get static field: static public System.Int32 VRTP_VERSION_MINOR
    static int _get_VRTP_VERSION_MINOR();
    // Set static field: static public System.Int32 VRTP_VERSION_MINOR
    static void _set_VRTP_VERSION_MINOR(int value);
    // static field const value: static public System.Int32 VRTP_VERSION_PATCH
    static constexpr const int VRTP_VERSION_PATCH = 0;
    // Get static field: static public System.Int32 VRTP_VERSION_PATCH
    static int _get_VRTP_VERSION_PATCH();
    // Set static field: static public System.Int32 VRTP_VERSION_PATCH
    static void _set_VRTP_VERSION_PATCH(int value);
    // static field const value: static public System.String VRTP_VERSION_BETA
    static constexpr const char* VRTP_VERSION_BETA = "";
    // Get static field: static public System.String VRTP_VERSION_BETA
    static ::StringW _get_VRTP_VERSION_BETA();
    // Set static field: static public System.String VRTP_VERSION_BETA
    static void _set_VRTP_VERSION_BETA(::StringW value);
    // static field const value: static public System.String GLOBAL_PROP_FOGCOLOR
    static constexpr const char* GLOBAL_PROP_FOGCOLOR = "_VRTP_Cage_FogColor";
    // Get static field: static public System.String GLOBAL_PROP_FOGCOLOR
    static ::StringW _get_GLOBAL_PROP_FOGCOLOR();
    // Set static field: static public System.String GLOBAL_PROP_FOGCOLOR
    static void _set_GLOBAL_PROP_FOGCOLOR(::StringW value);
    // static field const value: static public System.String GLOBAL_PROP_FOGDENSITY
    static constexpr const char* GLOBAL_PROP_FOGDENSITY = "_VRTP_Cage_FogDensity";
    // Get static field: static public System.String GLOBAL_PROP_FOGDENSITY
    static ::StringW _get_GLOBAL_PROP_FOGDENSITY();
    // Set static field: static public System.String GLOBAL_PROP_FOGDENSITY
    static void _set_GLOBAL_PROP_FOGDENSITY(::StringW value);
    // static field const value: static public System.String GLOBAL_PROP_FOGPOWER
    static constexpr const char* GLOBAL_PROP_FOGPOWER = "_VRTP_Cage_FogPower";
    // Get static field: static public System.String GLOBAL_PROP_FOGPOWER
    static ::StringW _get_GLOBAL_PROP_FOGPOWER();
    // Set static field: static public System.String GLOBAL_PROP_FOGPOWER
    static void _set_GLOBAL_PROP_FOGPOWER(::StringW value);
    // static field const value: static public System.String GLOBAL_PROP_FOGBLEND
    static constexpr const char* GLOBAL_PROP_FOGBLEND = "_VRTP_Cage_FogBlend";
    // Get static field: static public System.String GLOBAL_PROP_FOGBLEND
    static ::StringW _get_GLOBAL_PROP_FOGBLEND();
    // Set static field: static public System.String GLOBAL_PROP_FOGBLEND
    static void _set_GLOBAL_PROP_FOGBLEND(::StringW value);
    // static field const value: static protected System.String PATH_SHADERS
    static constexpr const char* PATH_SHADERS = "Hidden/VrTunnellingPro/";
    // Get static field: static protected System.String PATH_SHADERS
    static ::StringW _get_PATH_SHADERS();
    // Set static field: static protected System.String PATH_SHADERS
    static void _set_PATH_SHADERS(::StringW value);
    // static field const value: static protected System.String PATH_MESHES
    static constexpr const char* PATH_MESHES = "Meshes/";
    // Get static field: static protected System.String PATH_MESHES
    static ::StringW _get_PATH_MESHES();
    // Set static field: static protected System.String PATH_MESHES
    static void _set_PATH_MESHES(::StringW value);
    // static field const value: static protected System.String PATH_IRISMESH
    static constexpr const char* PATH_IRISMESH = "Iris";
    // Get static field: static protected System.String PATH_IRISMESH
    static ::StringW _get_PATH_IRISMESH();
    // Set static field: static protected System.String PATH_IRISMESH
    static void _set_PATH_IRISMESH(::StringW value);
    // static field const value: static protected System.String PROP_OUTER
    static constexpr const char* PROP_OUTER = "_FxOuter";
    // Get static field: static protected System.String PROP_OUTER
    static ::StringW _get_PROP_OUTER();
    // Set static field: static protected System.String PROP_OUTER
    static void _set_PROP_OUTER(::StringW value);
    // static field const value: static protected System.String PROP_INNER
    static constexpr const char* PROP_INNER = "_FxInner";
    // Get static field: static protected System.String PROP_INNER
    static ::StringW _get_PROP_INNER();
    // Set static field: static protected System.String PROP_INNER
    static void _set_PROP_INNER(::StringW value);
    // static field const value: static protected System.String PROP_COLOR
    static constexpr const char* PROP_COLOR = "_Color";
    // Get static field: static protected System.String PROP_COLOR
    static ::StringW _get_PROP_COLOR();
    // Set static field: static protected System.String PROP_COLOR
    static void _set_PROP_COLOR(::StringW value);
    // static field const value: static protected System.String PROP_SKYBOX
    static constexpr const char* PROP_SKYBOX = "_Skybox";
    // Get static field: static protected System.String PROP_SKYBOX
    static ::StringW _get_PROP_SKYBOX();
    // Set static field: static protected System.String PROP_SKYBOX
    static void _set_PROP_SKYBOX(::StringW value);
    // static field const value: static protected System.String PROP_EYEPRJ
    static constexpr const char* PROP_EYEPRJ = "_EyeProjection";
    // Get static field: static protected System.String PROP_EYEPRJ
    static ::StringW _get_PROP_EYEPRJ();
    // Set static field: static protected System.String PROP_EYEPRJ
    static void _set_PROP_EYEPRJ(::StringW value);
    // static field const value: static protected System.String PROP_EYEMAT
    static constexpr const char* PROP_EYEMAT = "_EyeToWorld";
    // Get static field: static protected System.String PROP_EYEMAT
    static ::StringW _get_PROP_EYEMAT();
    // Set static field: static protected System.String PROP_EYEMAT
    static void _set_PROP_EYEMAT(::StringW value);
    // static field const value: static protected System.String KEYWORD_BKG
    static constexpr const char* KEYWORD_BKG = "TUNNEL_BKG";
    // Get static field: static protected System.String KEYWORD_BKG
    static ::StringW _get_KEYWORD_BKG();
    // Set static field: static protected System.String KEYWORD_BKG
    static void _set_KEYWORD_BKG(::StringW value);
    // static field const value: static protected System.String KEYWORD_SKYBOX
    static constexpr const char* KEYWORD_SKYBOX = "TUNNEL_SKYBOX";
    // Get static field: static protected System.String KEYWORD_SKYBOX
    static ::StringW _get_KEYWORD_SKYBOX();
    // Set static field: static protected System.String KEYWORD_SKYBOX
    static void _set_KEYWORD_SKYBOX(::StringW value);
    // static field const value: static protected System.String KEYWORD_OVERLAY
    static constexpr const char* KEYWORD_OVERLAY = "TUNNEL_OVERLAY";
    // Get static field: static protected System.String KEYWORD_OVERLAY
    static ::StringW _get_KEYWORD_OVERLAY();
    // Set static field: static protected System.String KEYWORD_OVERLAY
    static void _set_KEYWORD_OVERLAY(::StringW value);
    // static field const value: static public System.Single FEATHER_MAX
    static constexpr const float FEATHER_MAX = 0.5;
    // Get static field: static public System.Single FEATHER_MAX
    static float _get_FEATHER_MAX();
    // Set static field: static public System.Single FEATHER_MAX
    static void _set_FEATHER_MAX(float value);
    // static field const value: static public System.Single MOTION_STRENGTH_MAX
    static constexpr const float MOTION_STRENGTH_MAX = 2;
    // Get static field: static public System.Single MOTION_STRENGTH_MAX
    static float _get_MOTION_STRENGTH_MAX();
    // Set static field: static public System.Single MOTION_STRENGTH_MAX
    static void _set_MOTION_STRENGTH_MAX(float value);
    // static field const value: static public System.Single COUNTER_STRENGTH_MAX
    static constexpr const float COUNTER_STRENGTH_MAX = 2;
    // Get static field: static public System.Single COUNTER_STRENGTH_MAX
    static float _get_COUNTER_STRENGTH_MAX();
    // Set static field: static public System.Single COUNTER_STRENGTH_MAX
    static void _set_COUNTER_STRENGTH_MAX(float value);
    // static field const value: static public System.Int32 FPSDIV_MAX
    static constexpr const int FPSDIV_MAX = 60;
    // Get static field: static public System.Int32 FPSDIV_MAX
    static int _get_FPSDIV_MAX();
    // Set static field: static public System.Int32 FPSDIV_MAX
    static void _set_FPSDIV_MAX(int value);
    // static field const value: static private System.Single COVERAGE_MIN
    static constexpr const float COVERAGE_MIN = 0.65;
    // Get static field: static private System.Single COVERAGE_MIN
    static float _get_COVERAGE_MIN();
    // Set static field: static private System.Single COVERAGE_MIN
    static void _set_COVERAGE_MIN(float value);
    // Get instance field reference: protected System.Int32 _propFxInner
    [[deprecated("Use field access instead!")]] int& dyn__propFxInner();
    // Get instance field reference: protected System.Int32 _propFxOuter
    [[deprecated("Use field access instead!")]] int& dyn__propFxOuter();
    // Get instance field reference: private System.Int32 _propEyeProjection
    [[deprecated("Use field access instead!")]] int& dyn__propEyeProjection();
    // Get instance field reference: private System.Int32 _propEyeToWorld
    [[deprecated("Use field access instead!")]] int& dyn__propEyeToWorld();
    // Get instance field reference: protected System.Int32 _globPropFogColor
    [[deprecated("Use field access instead!")]] int& dyn__globPropFogColor();
    // Get instance field reference: protected System.Int32 _globPropFogDensity
    [[deprecated("Use field access instead!")]] int& dyn__globPropFogDensity();
    // Get instance field reference: protected System.Int32 _globPropFogPower
    [[deprecated("Use field access instead!")]] int& dyn__globPropFogPower();
    // Get instance field reference: protected System.Int32 _globPropFogBlend
    [[deprecated("Use field access instead!")]] int& dyn__globPropFogBlend();
    // Get instance field reference: private UnityEngine.Matrix4x4[] _eyeToWorld
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn__eyeToWorld();
    // Get instance field reference: private UnityEngine.Matrix4x4[] _eyeProjection
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn__eyeProjection();
    // Get instance field reference: public UnityEngine.Transform motionTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_motionTarget();
    // Get instance field reference: public UnityEngine.Color effectColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_effectColor();
    // Get instance field reference: public System.Single effectCoverage
    [[deprecated("Use field access instead!")]] float& dyn_effectCoverage();
    // Get instance field reference: public System.Single effectFeather
    [[deprecated("Use field access instead!")]] float& dyn_effectFeather();
    // Get instance field reference: public UnityEngine.Cubemap effectSkybox
    [[deprecated("Use field access instead!")]] ::UnityEngine::Cubemap*& dyn_effectSkybox();
    // Get instance field reference: public System.Boolean applyColorToBackground
    [[deprecated("Use field access instead!")]] bool& dyn_applyColorToBackground();
    // Get instance field reference: public System.Boolean useAngularVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_useAngularVelocity();
    // Get instance field reference: public System.Single angularVelocityStrength
    [[deprecated("Use field access instead!")]] float& dyn_angularVelocityStrength();
    // Get instance field reference: public System.Single angularVelocityMin
    [[deprecated("Use field access instead!")]] float& dyn_angularVelocityMin();
    // Get instance field reference: public System.Single angularVelocityMax
    [[deprecated("Use field access instead!")]] float& dyn_angularVelocityMax();
    // Get instance field reference: public System.Single angularVelocitySmoothing
    [[deprecated("Use field access instead!")]] float& dyn_angularVelocitySmoothing();
    // Get instance field reference: public System.Boolean useAcceleration
    [[deprecated("Use field access instead!")]] bool& dyn_useAcceleration();
    // Get instance field reference: public System.Single accelerationStrength
    [[deprecated("Use field access instead!")]] float& dyn_accelerationStrength();
    // Get instance field reference: public System.Single accelerationMin
    [[deprecated("Use field access instead!")]] float& dyn_accelerationMin();
    // Get instance field reference: public System.Single accelerationMax
    [[deprecated("Use field access instead!")]] float& dyn_accelerationMax();
    // Get instance field reference: public System.Single accelerationSmoothing
    [[deprecated("Use field access instead!")]] float& dyn_accelerationSmoothing();
    // Get instance field reference: public System.Boolean useVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_useVelocity();
    // Get instance field reference: public System.Single velocityStrength
    [[deprecated("Use field access instead!")]] float& dyn_velocityStrength();
    // Get instance field reference: public System.Single velocityMin
    [[deprecated("Use field access instead!")]] float& dyn_velocityMin();
    // Get instance field reference: public System.Single velocityMax
    [[deprecated("Use field access instead!")]] float& dyn_velocityMax();
    // Get instance field reference: public System.Single velocitySmoothing
    [[deprecated("Use field access instead!")]] float& dyn_velocitySmoothing();
    // Get instance field reference: public Sigtrap.VrTunnellingPro.TunnellingBase/Sigtrap.VrTunnellingPro.ForceVignetteMode forceVignetteMode
    [[deprecated("Use field access instead!")]] ::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode& dyn_forceVignetteMode();
    // Get instance field reference: public System.Single forceVignetteValue
    [[deprecated("Use field access instead!")]] float& dyn_forceVignetteValue();
    // Get instance field reference: public UnityEngine.Transform motionEffectTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_motionEffectTarget();
    // Get instance field reference: public System.Boolean useCounterMotion
    [[deprecated("Use field access instead!")]] bool& dyn_useCounterMotion();
    // Get instance field reference: public System.Single counterRotationStrength
    [[deprecated("Use field access instead!")]] float& dyn_counterRotationStrength();
    // Get instance field reference: public UnityEngine.Vector3 counterRotationPerAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_counterRotationPerAxis();
    // Get instance field reference: public System.Boolean useArtificialTilt
    [[deprecated("Use field access instead!")]] bool& dyn_useArtificialTilt();
    // Get instance field reference: public System.Single tiltStrength
    [[deprecated("Use field access instead!")]] float& dyn_tiltStrength();
    // Get instance field reference: public UnityEngine.Vector2 tiltMaxAngles
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_tiltMaxAngles();
    // Get instance field reference: public System.Single tiltSmoothTime
    [[deprecated("Use field access instead!")]] float& dyn_tiltSmoothTime();
    // Get instance field reference: public System.Int32 framerateDivision
    [[deprecated("Use field access instead!")]] int& dyn_framerateDivision();
    // Get instance field reference: public System.Boolean divideTranslation
    [[deprecated("Use field access instead!")]] bool& dyn_divideTranslation();
    // Get instance field reference: public System.Boolean divideRotation
    [[deprecated("Use field access instead!")]] bool& dyn_divideRotation();
    // Get instance field reference: private UnityEngine.Quaternion _lastRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__lastRot();
    // Get instance field reference: private UnityEngine.Vector3 _lastFwd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastFwd();
    // Get instance field reference: private UnityEngine.Vector3 _lastPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastPos();
    // Get instance field reference: private System.Single _lastSpeed
    [[deprecated("Use field access instead!")]] float& dyn__lastSpeed();
    // Get instance field reference: private UnityEngine.Vector3 _lastVel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastVel();
    // Get instance field reference: protected UnityEngine.Quaternion _cmRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__cmRot();
    // Get instance field reference: private System.Single _avSmoothed
    [[deprecated("Use field access instead!")]] float& dyn__avSmoothed();
    // Get instance field reference: private System.Single _avSlew
    [[deprecated("Use field access instead!")]] float& dyn__avSlew();
    // Get instance field reference: private System.Single _speedSmoothed
    [[deprecated("Use field access instead!")]] float& dyn__speedSmoothed();
    // Get instance field reference: private System.Single _speedSlew
    [[deprecated("Use field access instead!")]] float& dyn__speedSlew();
    // Get instance field reference: private System.Single _accelSmoothed
    [[deprecated("Use field access instead!")]] float& dyn__accelSmoothed();
    // Get instance field reference: private System.Single _accelSlew
    [[deprecated("Use field access instead!")]] float& dyn__accelSlew();
    // Get instance field reference: private UnityEngine.Transform _prevMotionEffectTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__prevMotionEffectTarget();
    // Get instance field reference: private System.Boolean _prevUseTilt
    [[deprecated("Use field access instead!")]] bool& dyn__prevUseTilt();
    // Get instance field reference: private UnityEngine.Vector3 _tiltAccelSmoothed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__tiltAccelSmoothed();
    // Get instance field reference: private UnityEngine.Vector3 _tiltAccelSlew
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__tiltAccelSlew();
    // Get instance field reference: private Sigtrap.VrTunnellingPro.Angle3 _tiltInit
    [[deprecated("Use field access instead!")]] ::Sigtrap::VrTunnellingPro::Angle3& dyn__tiltInit();
    // Get instance field reference: private System.Int32 _lastFpsDivision
    [[deprecated("Use field access instead!")]] int& dyn__lastFpsDivision();
    // Get instance field reference: private UnityEngine.Vector3 _mfxTgtLocalPosInit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__mfxTgtLocalPosInit();
    // Get instance field reference: private UnityEngine.Quaternion _mfxTgtLocalRotInit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__mfxTgtLocalRotInit();
    // Get instance field reference: protected UnityEngine.Camera _cam
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__cam();
    // Get instance field reference: protected System.Boolean _hasDrawnThisFrame
    [[deprecated("Use field access instead!")]] bool& dyn__hasDrawnThisFrame();
    // Get instance field reference: private UnityEngine.Vector3 _fpsPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__fpsPosition();
    // Get instance field reference: private UnityEngine.Quaternion _fpsRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__fpsRotation();
    // public System.Boolean get_usingMotionEffectTarget()
    // Offset: 0x6D3150
    bool get_usingMotionEffectTarget();
    // protected System.Void .ctor()
    // Offset: 0x6D2FB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TunnellingBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Sigtrap::VrTunnellingPro::TunnellingBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TunnellingBase*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x6D0D30
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x6D23B0
    void OnEnable();
    // protected System.Void ApplyPresetBase(Sigtrap.VrTunnellingPro.TunnellingPresetBase p)
    // Offset: 0x6D0A50
    void ApplyPresetBase(::Sigtrap::VrTunnellingPro::TunnellingPresetBase* p);
    // protected System.Void FillMaskBuffer(UnityEngine.Rendering.CommandBuffer cb, System.Collections.Generic.List`1<UnityEngine.Renderer> rs, UnityEngine.Material m)
    // Offset: 0x6D2010
    void FillMaskBuffer(::UnityEngine::Rendering::CommandBuffer* cb, ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* rs, ::UnityEngine::Material* m);
    // protected System.Void ResetMotion()
    // Offset: 0x6D23B0
    void ResetMotion();
    // public System.Void ResetCounterMotion()
    // Offset: 0x6D24C0
    void ResetCounterMotion();
    // private System.Single RemapRadius(System.Single radius)
    // Offset: 0x6D2450
    float RemapRadius(float radius);
    // protected System.Single CalculateMotion(System.Single dT)
    // Offset: 0x6D0E10
    float CalculateMotion(float dT);
    // static public UnityEngine.Vector3 SmoothDampAngle(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 vel, System.Single smoothTime, System.Single maxSpeed, System.Single dT)
    // Offset: 0x6D2550
    static ::UnityEngine::Vector3 SmoothDampAngle(::UnityEngine::Vector3 current, ::UnityEngine::Vector3 target, ByRef<::UnityEngine::Vector3> vel, float smoothTime, float maxSpeed, float dT);
    // protected System.Void UpdateCounterMotion(UnityEngine.Vector3 deltaPos, UnityEngine.Quaternion deltaRot)
    // Offset: 0x6D2710
    void UpdateCounterMotion(::UnityEngine::Vector3 deltaPos, ::UnityEngine::Quaternion deltaRot);
    // protected UnityEngine.Quaternion GetCounterRotationDelta(UnityEngine.Quaternion deltaRot)
    // Offset: 0x6D21C0
    ::UnityEngine::Quaternion GetCounterRotationDelta(::UnityEngine::Quaternion deltaRot);
    // protected System.Void UpdateEyeMatrices()
    // Offset: 0x6D27F0
    void UpdateEyeMatrices();
    // protected System.Void CorrectEyeMatrices(UnityEngine.Matrix4x4[] eyePrj, UnityEngine.Matrix4x4[] eyeToWorld)
    // Offset: 0x1DDF00
    void CorrectEyeMatrices(::ArrayW<::UnityEngine::Matrix4x4> eyePrj, ::ArrayW<::UnityEngine::Matrix4x4> eyeToWorld);
    // protected System.Void ApplyEyeMatrices(UnityEngine.Material m)
    // Offset: 0x6D0A00
    void ApplyEyeMatrices(::UnityEngine::Material* m);
  }; // Sigtrap.VrTunnellingPro.TunnellingBase
  #pragma pack(pop)
  static check_size<sizeof(TunnellingBase), 440 + sizeof(::UnityEngine::Quaternion)> __Sigtrap_VrTunnellingPro_TunnellingBaseSizeCheck;
  static_assert(sizeof(TunnellingBase) == 0x1C8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Sigtrap::VrTunnellingPro::TunnellingBase::ForceVignetteMode, "Sigtrap.VrTunnellingPro", "TunnellingBase/ForceVignetteMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::get_usingMotionEffectTarget
// Il2CppName: get_usingMotionEffectTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Sigtrap::VrTunnellingPro::TunnellingBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingBase::get_usingMotionEffectTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "get_usingMotionEffectTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingBase::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingBase::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::ApplyPresetBase
// Il2CppName: ApplyPresetBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)(::Sigtrap::VrTunnellingPro::TunnellingPresetBase*)>(&Sigtrap::VrTunnellingPro::TunnellingBase::ApplyPresetBase)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Sigtrap.VrTunnellingPro", "TunnellingPresetBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "ApplyPresetBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::FillMaskBuffer
// Il2CppName: FillMaskBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)(::UnityEngine::Rendering::CommandBuffer*, ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*, ::UnityEngine::Material*)>(&Sigtrap::VrTunnellingPro::TunnellingBase::FillMaskBuffer)> {
  static const MethodInfo* get() {
    static auto* cb = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    static auto* rs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")})->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "FillMaskBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cb, rs, m});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::ResetMotion
// Il2CppName: ResetMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingBase::ResetMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "ResetMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::ResetCounterMotion
// Il2CppName: ResetCounterMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingBase::ResetCounterMotion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "ResetCounterMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::RemapRadius
// Il2CppName: RemapRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingBase::*)(float)>(&Sigtrap::VrTunnellingPro::TunnellingBase::RemapRadius)> {
  static const MethodInfo* get() {
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "RemapRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radius});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::CalculateMotion
// Il2CppName: CalculateMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Sigtrap::VrTunnellingPro::TunnellingBase::*)(float)>(&Sigtrap::VrTunnellingPro::TunnellingBase::CalculateMotion)> {
  static const MethodInfo* get() {
    static auto* dT = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "CalculateMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dT});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::SmoothDampAngle
// Il2CppName: SmoothDampAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, float, float, float)>(&Sigtrap::VrTunnellingPro::TunnellingBase::SmoothDampAngle)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* smoothTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dT = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "SmoothDampAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, target, vel, smoothTime, maxSpeed, dT});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::UpdateCounterMotion
// Il2CppName: UpdateCounterMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Sigtrap::VrTunnellingPro::TunnellingBase::UpdateCounterMotion)> {
  static const MethodInfo* get() {
    static auto* deltaPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "UpdateCounterMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaPos, deltaRot});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::GetCounterRotationDelta
// Il2CppName: GetCounterRotationDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Sigtrap::VrTunnellingPro::TunnellingBase::*)(::UnityEngine::Quaternion)>(&Sigtrap::VrTunnellingPro::TunnellingBase::GetCounterRotationDelta)> {
  static const MethodInfo* get() {
    static auto* deltaRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "GetCounterRotationDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaRot});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::UpdateEyeMatrices
// Il2CppName: UpdateEyeMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)()>(&Sigtrap::VrTunnellingPro::TunnellingBase::UpdateEyeMatrices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "UpdateEyeMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::CorrectEyeMatrices
// Il2CppName: CorrectEyeMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)(::ArrayW<::UnityEngine::Matrix4x4>, ::ArrayW<::UnityEngine::Matrix4x4>)>(&Sigtrap::VrTunnellingPro::TunnellingBase::CorrectEyeMatrices)> {
  static const MethodInfo* get() {
    static auto* eyePrj = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* eyeToWorld = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "CorrectEyeMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyePrj, eyeToWorld});
  }
};
// Writing MetadataGetter for method: Sigtrap::VrTunnellingPro::TunnellingBase::ApplyEyeMatrices
// Il2CppName: ApplyEyeMatrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Sigtrap::VrTunnellingPro::TunnellingBase::*)(::UnityEngine::Material*)>(&Sigtrap::VrTunnellingPro::TunnellingBase::ApplyEyeMatrices)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Sigtrap::VrTunnellingPro::TunnellingBase*), "ApplyEyeMatrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
