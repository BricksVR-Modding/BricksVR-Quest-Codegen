// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: SessionCaptureFileStream
  class SessionCaptureFileStream;
  // Skipping declaration: Mode because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: SessionCapture
  class SessionCapture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::SessionCapture);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::SessionCapture*, "Normal.Realtime", "SessionCapture");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.SessionCapture
  // [TokenAttribute] Offset: FFFFFFFF
  class SessionCapture : public ::Il2CppObject {
    public:
    // Nested type: ::Normal::Realtime::SessionCapture::Mode
    struct Mode;
    // Nested type: ::Normal::Realtime::SessionCapture::DeltaUpdate
    class DeltaUpdate;
    // Nested type: ::Normal::Realtime::SessionCapture::PlaybackStream
    class PlaybackStream;
    // Nested type: ::Normal::Realtime::SessionCapture::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Normal.Realtime.SessionCapture/Normal.Realtime.Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Normal.Realtime.SessionCapture/Normal.Realtime.Mode Record
      static constexpr const int Record = 0;
      // Get static field: static public Normal.Realtime.SessionCapture/Normal.Realtime.Mode Record
      static ::Normal::Realtime::SessionCapture::Mode _get_Record();
      // Set static field: static public Normal.Realtime.SessionCapture/Normal.Realtime.Mode Record
      static void _set_Record(::Normal::Realtime::SessionCapture::Mode value);
      // static field const value: static public Normal.Realtime.SessionCapture/Normal.Realtime.Mode Playback
      static constexpr const int Playback = 1;
      // Get static field: static public Normal.Realtime.SessionCapture/Normal.Realtime.Mode Playback
      static ::Normal::Realtime::SessionCapture::Mode _get_Playback();
      // Set static field: static public Normal.Realtime.SessionCapture/Normal.Realtime.Mode Playback
      static void _set_Playback(::Normal::Realtime::SessionCapture::Mode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Normal.Realtime.SessionCapture/Normal.Realtime.Mode
    #pragma pack(pop)
    static check_size<sizeof(SessionCapture::Mode), 0 + sizeof(int)> __Normal_Realtime_SessionCapture_ModeSizeCheck;
    static_assert(sizeof(SessionCapture::Mode) == 0x4);
    public:
    // private Normal.Realtime.SessionCapture/Normal.Realtime.Mode _mode
    // Size: 0x4
    // Offset: 0x10
    ::Normal::Realtime::SessionCapture::Mode mode;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::SessionCapture::Mode) == 0x4);
    // private System.Boolean _recording
    // Size: 0x1
    // Offset: 0x14
    bool recording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _playing
    // Size: 0x1
    // Offset: 0x15
    bool playing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playing and: recordFilePath
    char __padding2[0x2] = {};
    // private System.String _recordFilePath
    // Size: 0x8
    // Offset: 0x18
    ::StringW recordFilePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Normal.Realtime.SessionCaptureFileStream _recordFileStream
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::SessionCaptureFileStream* recordFileStream;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::SessionCaptureFileStream*) == 0x8);
    // private System.Double _playbackTime
    // Size: 0x8
    // Offset: 0x28
    double playbackTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.Dictionary`2<System.UInt32,Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate>> _clientToIncomingReliableUpdatesMap
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::SessionCapture::DeltaUpdate*>*>* clientToIncomingReliableUpdatesMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::SessionCapture::DeltaUpdate*>*>*) == 0x8);
    // private System.String _primaryPlaybackFilePath
    // Size: 0x8
    // Offset: 0x38
    ::StringW primaryPlaybackFilePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Normal.Realtime.SessionCapture/Normal.Realtime.PlaybackStream _primaryPlaybackStream
    // Size: 0x8
    // Offset: 0x40
    ::Normal::Realtime::SessionCapture::PlaybackStream* primaryPlaybackStream;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::SessionCapture::PlaybackStream*) == 0x8);
    // private System.Collections.Generic.Queue`1<Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate> _primaryPlaybackDeltaUpdatesToBeProcessed
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Queue_1<::Normal::Realtime::SessionCapture::DeltaUpdate*>* primaryPlaybackDeltaUpdatesToBeProcessed;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Normal::Realtime::SessionCapture::DeltaUpdate*>*) == 0x8);
    // private System.String[] _secondaryPlaybackFilePaths
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> secondaryPlaybackFilePaths;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,Normal.Realtime.SessionCapture/Normal.Realtime.PlaybackStream> _secondaryPlaybackStreams
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<int, ::Normal::Realtime::SessionCapture::PlaybackStream*>* secondaryPlaybackStreams;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::Normal::Realtime::SessionCapture::PlaybackStream*>*) == 0x8);
    // private System.Collections.Generic.Queue`1<Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate> _playbackDeltaUpdates
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Queue_1<::Normal::Realtime::SessionCapture::DeltaUpdate*>* playbackDeltaUpdates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Normal::Realtime::SessionCapture::DeltaUpdate*>*) == 0x8);
    public:
    // Get instance field reference: private Normal.Realtime.SessionCapture/Normal.Realtime.Mode _mode
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::SessionCapture::Mode& dyn__mode();
    // Get instance field reference: private System.Boolean _recording
    [[deprecated("Use field access instead!")]] bool& dyn__recording();
    // Get instance field reference: private System.Boolean _playing
    [[deprecated("Use field access instead!")]] bool& dyn__playing();
    // Get instance field reference: private System.String _recordFilePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__recordFilePath();
    // Get instance field reference: private Normal.Realtime.SessionCaptureFileStream _recordFileStream
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::SessionCaptureFileStream*& dyn__recordFileStream();
    // Get instance field reference: private System.Double _playbackTime
    [[deprecated("Use field access instead!")]] double& dyn__playbackTime();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.Dictionary`2<System.UInt32,Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate>> _clientToIncomingReliableUpdatesMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::SessionCapture::DeltaUpdate*>*>*& dyn__clientToIncomingReliableUpdatesMap();
    // Get instance field reference: private System.String _primaryPlaybackFilePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__primaryPlaybackFilePath();
    // Get instance field reference: private Normal.Realtime.SessionCapture/Normal.Realtime.PlaybackStream _primaryPlaybackStream
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::SessionCapture::PlaybackStream*& dyn__primaryPlaybackStream();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate> _primaryPlaybackDeltaUpdatesToBeProcessed
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Normal::Realtime::SessionCapture::DeltaUpdate*>*& dyn__primaryPlaybackDeltaUpdatesToBeProcessed();
    // Get instance field reference: private System.String[] _secondaryPlaybackFilePaths
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__secondaryPlaybackFilePaths();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,Normal.Realtime.SessionCapture/Normal.Realtime.PlaybackStream> _secondaryPlaybackStreams
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::Normal::Realtime::SessionCapture::PlaybackStream*>*& dyn__secondaryPlaybackStreams();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate> _playbackDeltaUpdates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Normal::Realtime::SessionCapture::DeltaUpdate*>*& dyn__playbackDeltaUpdates();
    // public Normal.Realtime.SessionCapture/Normal.Realtime.Mode get_mode()
    // Offset: 0x1DD410
    ::Normal::Realtime::SessionCapture::Mode get_mode();
    // public System.Boolean get_recording()
    // Offset: 0x29BC20
    bool get_recording();
    // public System.Boolean get_playing()
    // Offset: 0x56E740
    bool get_playing();
    // public System.Void .ctor(System.String recordFilePath)
    // Offset: 0x89EEF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SessionCapture* New_ctor(::StringW recordFilePath) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::SessionCapture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SessionCapture*, creationType>(recordFilePath)));
    }
    // public System.Void .ctor(System.String[] playbackFilePaths)
    // Offset: 0x89EF30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SessionCapture* New_ctor(::ArrayW<::StringW> playbackFilePaths) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::SessionCapture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SessionCapture*, creationType>(playbackFilePaths)));
    }
    // public System.Void StartRecording(System.Int32 clientID, System.Double startTimestamp, System.Byte[] data)
    // Offset: 0x89EAA0
    void StartRecording(int clientID, double startTimestamp, ::ArrayW<uint8_t> data);
    // public System.Void StopRecording()
    // Offset: 0x89EDA0
    void StopRecording();
    // public System.Void WriteDeltaUpdate(System.Double timestamp, System.Int32 sender, System.Byte[] data, System.Int32 dataLength, System.Boolean reliable, System.UInt32 updateID, System.Boolean incoming)
    // Offset: 0x89EDE0
    void WriteDeltaUpdate(double timestamp, int sender, ::ArrayW<uint8_t> data, int dataLength, bool reliable, uint updateID, bool incoming);
    // public System.Byte[] StartPlayback()
    // Offset: 0x89E6C0
    ::ArrayW<uint8_t> StartPlayback();
    // public System.Void StopPlayback()
    // Offset: 0x89EBD0
    void StopPlayback();
    // public System.Void PlaybackTick(System.Double deltaTime)
    // Offset: 0x89DEE0
    void PlaybackTick(double deltaTime);
    // static private System.Boolean AdjustOutgoingUnreliableDeltaUpdateTimestamp(System.Double playbackTime, Normal.Realtime.SessionCapture/Normal.Realtime.PlaybackStream playbackStream, Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate deltaUpdate)
    // Offset: 0x89DD40
    static bool AdjustOutgoingUnreliableDeltaUpdateTimestamp(double playbackTime, ::Normal::Realtime::SessionCapture::PlaybackStream* playbackStream, ::Normal::Realtime::SessionCapture::DeltaUpdate* deltaUpdate);
    // static private System.Boolean AdjustPlaybackStreamSendTimestampOffsetWithOutgoingReliableDeltaUpdate(Normal.Realtime.SessionCapture/Normal.Realtime.PlaybackStream playbackStream, System.Collections.Generic.Dictionary`2<System.UInt32,Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate> incomingReliableUpdates, Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate outgoingReliableDeltaUpdate)
    // Offset: 0x89DD80
    static bool AdjustPlaybackStreamSendTimestampOffsetWithOutgoingReliableDeltaUpdate(::Normal::Realtime::SessionCapture::PlaybackStream* playbackStream, ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::SessionCapture::DeltaUpdate*>* incomingReliableUpdates, ::Normal::Realtime::SessionCapture::DeltaUpdate* outgoingReliableDeltaUpdate);
    // public Normal.Realtime.SessionCapture/Normal.Realtime.DeltaUpdate ReadDeltaUpdate()
    // Offset: 0x89E620
    ::Normal::Realtime::SessionCapture::DeltaUpdate* ReadDeltaUpdate();
    // protected override System.Void Finalize()
    // Offset: 0x89DE40
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Normal.Realtime.SessionCapture
  #pragma pack(pop)
  static check_size<sizeof(SessionCapture), 96 + sizeof(::System::Collections::Generic::Queue_1<::Normal::Realtime::SessionCapture::DeltaUpdate*>*)> __Normal_Realtime_SessionCaptureSizeCheck;
  static_assert(sizeof(SessionCapture) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::SessionCapture::Mode, "Normal.Realtime", "SessionCapture/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::get_mode
// Il2CppName: get_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::SessionCapture::Mode (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::get_mode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "get_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::get_recording
// Il2CppName: get_recording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::get_recording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "get_recording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::get_playing
// Il2CppName: get_playing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::get_playing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "get_playing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCapture::*)(int, double, ::ArrayW<uint8_t>)>(&Normal::Realtime::SessionCapture::StartRecording)> {
  static const MethodInfo* get() {
    static auto* clientID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startTimestamp = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientID, startTimestamp, data});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::WriteDeltaUpdate
// Il2CppName: WriteDeltaUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCapture::*)(double, int, ::ArrayW<uint8_t>, int, bool, uint, bool)>(&Normal::Realtime::SessionCapture::WriteDeltaUpdate)> {
  static const MethodInfo* get() {
    static auto* timestamp = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateID = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* incoming = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "WriteDeltaUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timestamp, sender, data, dataLength, reliable, updateID, incoming});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::StartPlayback
// Il2CppName: StartPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::StartPlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "StartPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::StopPlayback
// Il2CppName: StopPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::StopPlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "StopPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::PlaybackTick
// Il2CppName: PlaybackTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCapture::*)(double)>(&Normal::Realtime::SessionCapture::PlaybackTick)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "PlaybackTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::AdjustOutgoingUnreliableDeltaUpdateTimestamp
// Il2CppName: AdjustOutgoingUnreliableDeltaUpdateTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double, ::Normal::Realtime::SessionCapture::PlaybackStream*, ::Normal::Realtime::SessionCapture::DeltaUpdate*)>(&Normal::Realtime::SessionCapture::AdjustOutgoingUnreliableDeltaUpdateTimestamp)> {
  static const MethodInfo* get() {
    static auto* playbackTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* playbackStream = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "SessionCapture/PlaybackStream")->byval_arg;
    static auto* deltaUpdate = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "SessionCapture/DeltaUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "AdjustOutgoingUnreliableDeltaUpdateTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playbackTime, playbackStream, deltaUpdate});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::AdjustPlaybackStreamSendTimestampOffsetWithOutgoingReliableDeltaUpdate
// Il2CppName: AdjustPlaybackStreamSendTimestampOffsetWithOutgoingReliableDeltaUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Normal::Realtime::SessionCapture::PlaybackStream*, ::System::Collections::Generic::Dictionary_2<uint, ::Normal::Realtime::SessionCapture::DeltaUpdate*>*, ::Normal::Realtime::SessionCapture::DeltaUpdate*)>(&Normal::Realtime::SessionCapture::AdjustPlaybackStreamSendTimestampOffsetWithOutgoingReliableDeltaUpdate)> {
  static const MethodInfo* get() {
    static auto* playbackStream = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "SessionCapture/PlaybackStream")->byval_arg;
    static auto* incomingReliableUpdates = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("Normal.Realtime", "SessionCapture/DeltaUpdate")})->byval_arg;
    static auto* outgoingReliableDeltaUpdate = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "SessionCapture/DeltaUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "AdjustPlaybackStreamSendTimestampOffsetWithOutgoingReliableDeltaUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playbackStream, incomingReliableUpdates, outgoingReliableDeltaUpdate});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::ReadDeltaUpdate
// Il2CppName: ReadDeltaUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::SessionCapture::DeltaUpdate* (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::ReadDeltaUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "ReadDeltaUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::SessionCapture::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::SessionCapture::*)()>(&Normal::Realtime::SessionCapture::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::SessionCapture*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
