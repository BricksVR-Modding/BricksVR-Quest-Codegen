// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RigidbodyPhysicsStateFrame
  struct RigidbodyPhysicsStateFrame;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RigidbodyPhysicsStateFrame, "Normal.Realtime", "RigidbodyPhysicsStateFrame");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x3
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Normal.Realtime.RigidbodyPhysicsStateFrame
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct RigidbodyPhysicsStateFrame/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Boolean useGravity
    // Size: 0x1
    // Offset: 0x0
    bool useGravity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean isKinematic
    // Size: 0x1
    // Offset: 0x1
    bool isKinematic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean isSleeping
    // Size: 0x1
    // Offset: 0x2
    bool isSleeping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: RigidbodyPhysicsStateFrame
    constexpr RigidbodyPhysicsStateFrame(bool useGravity_ = {}, bool isKinematic_ = {}, bool isSleeping_ = {}) noexcept : useGravity{useGravity_}, isKinematic{isKinematic_}, isSleeping{isSleeping_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Boolean useGravity
    bool& dyn_useGravity();
    // Get instance field reference: public readonly System.Boolean isKinematic
    bool& dyn_isKinematic();
    // Get instance field reference: public readonly System.Boolean isSleeping
    bool& dyn_isSleeping();
    // public System.Void .ctor(System.Boolean useGravity, System.Boolean isKinematic, System.Boolean isSleeping)
    // Offset: 0xA63C18
    // ABORTED: conflicts with another method.  RigidbodyPhysicsStateFrame(bool useGravity, bool isKinematic, bool isSleeping);
  }; // Normal.Realtime.RigidbodyPhysicsStateFrame
  #pragma pack(pop)
  static check_size<sizeof(RigidbodyPhysicsStateFrame), 2 + sizeof(bool)> __Normal_Realtime_RigidbodyPhysicsStateFrameSizeCheck;
  static_assert(sizeof(RigidbodyPhysicsStateFrame) == 0x3);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RigidbodyPhysicsStateFrame::RigidbodyPhysicsStateFrame
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
