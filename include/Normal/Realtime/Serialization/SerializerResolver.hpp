// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: ISerializer
  class ISerializer;
  // Forward declaring type: ISerializer`1<T>
  template<typename T>
  class ISerializer_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: SerializerResolver
  class SerializerResolver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Serialization::SerializerResolver);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Serialization::SerializerResolver*, "Normal.Realtime.Serialization", "SerializerResolver");
// Type namespace: Normal.Realtime.Serialization
namespace Normal::Realtime::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Serialization.SerializerResolver
  // [TokenAttribute] Offset: FFFFFFFF
  class SerializerResolver : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,Normal.Realtime.Serialization.ISerializer> __serializers
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::Normal::Realtime::Serialization::ISerializer*>* _get___serializers();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,Normal.Realtime.Serialization.ISerializer> __serializers
    static void _set___serializers(::System::Collections::Generic::Dictionary_2<::System::Type*, ::Normal::Realtime::Serialization::ISerializer*>* value);
    // static private System.Void .cctor()
    // Offset: 0x89C370
    static void _cctor();
    // static public System.Void Register()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TStruct, class TSerializer>
    static void Register() {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TSerializer>, ::Normal::Realtime::Serialization::ISerializer_1<TStruct>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::SerializerResolver::Register");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Realtime.Serialization", "SerializerResolver", "Register", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStruct>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSerializer>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStruct>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSerializer>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public Normal.Realtime.Serialization.ISerializer`1<TStruct> Resolve()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TStruct>
    static ::Normal::Realtime::Serialization::ISerializer_1<TStruct>* Resolve() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Serialization::SerializerResolver::Resolve");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Realtime.Serialization", "SerializerResolver", "Resolve", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStruct>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStruct>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Normal::Realtime::Serialization::ISerializer_1<TStruct>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
  }; // Normal.Realtime.Serialization.SerializerResolver
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Serialization::SerializerResolver::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Normal::Realtime::Serialization::SerializerResolver::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Serialization::SerializerResolver*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Serialization::SerializerResolver::Register
// Il2CppName: Register
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Normal::Realtime::Serialization::SerializerResolver::Resolve
// Il2CppName: Resolve
// Cannot write MetadataGetter for generic methods!
