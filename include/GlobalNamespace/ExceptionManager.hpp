// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: LogType
  struct LogType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ExceptionManager
  class ExceptionManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ExceptionManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ExceptionManager*, "", "ExceptionManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ExceptionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ExceptionManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ExceptionManager::$EnableReportingCooldown$d__7
    class $EnableReportingCooldown$d__7;
    public:
    // private System.Int32 _exceptionsLeftBeforeTimeout
    // Size: 0x4
    // Offset: 0x18
    int exceptionsLeftBeforeTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: exceptionsLeftBeforeTimeout and: cooldownCoroutine
    char __padding0[0x4] = {};
    // private UnityEngine.Coroutine _cooldownCoroutine
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Coroutine* cooldownCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 ExceptionsPerCooldown
    static constexpr const int ExceptionsPerCooldown = 5;
    // Get static field: static private System.Int32 ExceptionsPerCooldown
    static int _get_ExceptionsPerCooldown();
    // Set static field: static private System.Int32 ExceptionsPerCooldown
    static void _set_ExceptionsPerCooldown(int value);
    // static field const value: static private System.Single CooldownTime
    static constexpr const float CooldownTime = 5;
    // Get static field: static private System.Single CooldownTime
    static float _get_CooldownTime();
    // Set static field: static private System.Single CooldownTime
    static void _set_CooldownTime(float value);
    // Get instance field reference: private System.Int32 _exceptionsLeftBeforeTimeout
    [[deprecated]] int& dyn__exceptionsLeftBeforeTimeout();
    // Get instance field reference: private UnityEngine.Coroutine _cooldownCoroutine
    [[deprecated]] ::UnityEngine::Coroutine*& dyn__cooldownCoroutine();
    // private System.Void OnEnable()
    // Offset: 0x6B4460
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x6B4400
    void OnDisable();
    // private System.Void LogReceived(System.String condition, System.String stacktrace, UnityEngine.LogType type)
    // Offset: 0x6B42F0
    void LogReceived(::StringW condition, ::StringW stacktrace, ::UnityEngine::LogType type);
    // private System.Collections.IEnumerator EnableReportingCooldown()
    // Offset: 0x6B4280
    ::System::Collections::IEnumerator* EnableReportingCooldown();
    // public System.Void .ctor()
    // Offset: 0x6B44C0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExceptionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ExceptionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExceptionManager*, creationType>()));
    }
  }; // ExceptionManager
  #pragma pack(pop)
  static check_size<sizeof(ExceptionManager), 32 + sizeof(::UnityEngine::Coroutine*)> __GlobalNamespace_ExceptionManagerSizeCheck;
  static_assert(sizeof(ExceptionManager) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ExceptionManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ExceptionManager::*)()>(&GlobalNamespace::ExceptionManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExceptionManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExceptionManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ExceptionManager::*)()>(&GlobalNamespace::ExceptionManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExceptionManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExceptionManager::LogReceived
// Il2CppName: LogReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ExceptionManager::*)(::StringW, ::StringW, ::UnityEngine::LogType)>(&GlobalNamespace::ExceptionManager::LogReceived)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stacktrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExceptionManager*), "LogReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, stacktrace, type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExceptionManager::EnableReportingCooldown
// Il2CppName: EnableReportingCooldown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::ExceptionManager::*)()>(&GlobalNamespace::ExceptionManager::EnableReportingCooldown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ExceptionManager*), "EnableReportingCooldown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ExceptionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
