// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeView
  class RealtimeView;
  // Forward declaring type: IRealtimeComponent
  class IRealtimeComponent;
  // Forward declaring type: RealtimeViewMap
  class RealtimeViewMap;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeViewHierarchy
  class RealtimeViewHierarchy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeViewHierarchy);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeViewHierarchy*, "Normal.Realtime", "RealtimeViewHierarchy");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeViewHierarchy
  // [TokenAttribute] Offset: FFFFFFFF
  class RealtimeViewHierarchy : public ::Il2CppObject {
    public:
    public:
    // public readonly Normal.Realtime.RealtimeView root
    // Size: 0x8
    // Offset: 0x10
    ::Normal::Realtime::RealtimeView* root;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeView*) == 0x8);
    // public readonly Normal.Realtime.RealtimeView parent
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::RealtimeView* parent;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeView*) == 0x8);
    // public readonly System.Collections.Generic.IReadOnlyCollection`1<Normal.Realtime.RealtimeView> children
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::RealtimeView*>* children;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::RealtimeView*>*) == 0x8);
    // public readonly System.Collections.Generic.IReadOnlyCollection`1<Normal.Realtime.IRealtimeComponent> components
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::IRealtimeComponent*>* components;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::IRealtimeComponent*>*) == 0x8);
    public:
    // Get instance field reference: public readonly Normal.Realtime.RealtimeView root
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::RealtimeView*& dyn_root();
    // Get instance field reference: public readonly Normal.Realtime.RealtimeView parent
    [[deprecated("Use field access instead!")]] ::Normal::Realtime::RealtimeView*& dyn_parent();
    // Get instance field reference: public readonly System.Collections.Generic.IReadOnlyCollection`1<Normal.Realtime.RealtimeView> children
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::RealtimeView*>*& dyn_children();
    // Get instance field reference: public readonly System.Collections.Generic.IReadOnlyCollection`1<Normal.Realtime.IRealtimeComponent> components
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::IRealtimeComponent*>*& dyn_components();
    // public System.Void .ctor(Normal.Realtime.RealtimeView view, Normal.Realtime.RealtimeViewMap children)
    // Offset: 0x891800
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeViewHierarchy* New_ctor(::Normal::Realtime::RealtimeView* view, ::Normal::Realtime::RealtimeViewMap* children) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeViewHierarchy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeViewHierarchy*, creationType>(view, children)));
    }
    // static private Normal.Realtime.RealtimeView GetParentView(Normal.Realtime.RealtimeView view)
    // Offset: 0x891460
    static ::Normal::Realtime::RealtimeView* GetParentView(::Normal::Realtime::RealtimeView* view);
    // static private System.Collections.Generic.IReadOnlyCollection`1<Normal.Realtime.RealtimeView> IngestChildViewMap(Normal.Realtime.RealtimeViewMap views)
    // Offset: 0x891590
    static ::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::RealtimeView*>* IngestChildViewMap(::Normal::Realtime::RealtimeViewMap* views);
  }; // Normal.Realtime.RealtimeViewHierarchy
  #pragma pack(pop)
  static check_size<sizeof(RealtimeViewHierarchy), 40 + sizeof(::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::IRealtimeComponent*>*)> __Normal_Realtime_RealtimeViewHierarchySizeCheck;
  static_assert(sizeof(RealtimeViewHierarchy) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewHierarchy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewHierarchy::GetParentView
// Il2CppName: GetParentView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::RealtimeView* (*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::RealtimeViewHierarchy::GetParentView)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewHierarchy*), "GetParentView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeViewHierarchy::IngestChildViewMap
// Il2CppName: IngestChildViewMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::RealtimeView*>* (*)(::Normal::Realtime::RealtimeViewMap*)>(&Normal::Realtime::RealtimeViewHierarchy::IngestChildViewMap)> {
  static const MethodInfo* get() {
    static auto* views = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeViewHierarchy*), "IngestChildViewMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{views});
  }
};
