// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.IRealtimeTransformStrategy
#include "Normal/Realtime/IRealtimeTransformStrategy.hpp"
// Including type: Normal.Realtime.StandardTransformFrame
#include "Normal/Realtime/StandardTransformFrame.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeTransform
  class RealtimeTransform;
  // Forward declaring type: Timeline`1<T>
  template<typename T>
  class Timeline_1;
  // Forward declaring type: InterpolationDelay
  class InterpolationDelay;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeTransformInterpolation
  class RealtimeTransformInterpolation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::RealtimeTransformInterpolation);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeTransformInterpolation*, "Normal.Realtime", "RealtimeTransformInterpolation");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeTransformInterpolation
  // [TokenAttribute] Offset: FFFFFFFF
  class RealtimeTransformInterpolation : public ::Il2CppObject/*, public ::Normal::Realtime::IRealtimeTransformStrategy*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly Normal.Realtime.RealtimeTransform _component
    // Size: 0x8
    // Offset: 0x10
    ::Normal::Realtime::RealtimeTransform* component;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeTransform*) == 0x8);
    // private readonly Normal.Realtime.Timeline`1<Normal.Realtime.StandardTransformFrame> _timeline
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Timeline_1<::Normal::Realtime::StandardTransformFrame>* timeline;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Timeline_1<::Normal::Realtime::StandardTransformFrame>*) == 0x8);
    // private readonly Normal.Realtime.InterpolationDelay _delay
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::InterpolationDelay* delay;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::InterpolationDelay*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Normal::Realtime::IRealtimeTransformStrategy
    operator ::Normal::Realtime::IRealtimeTransformStrategy() noexcept {
      return *reinterpret_cast<::Normal::Realtime::IRealtimeTransformStrategy*>(this);
    }
    // Get instance field reference: private readonly Normal.Realtime.RealtimeTransform _component
    ::Normal::Realtime::RealtimeTransform*& dyn__component();
    // Get instance field reference: private readonly Normal.Realtime.Timeline`1<Normal.Realtime.StandardTransformFrame> _timeline
    ::Normal::Realtime::Timeline_1<::Normal::Realtime::StandardTransformFrame>*& dyn__timeline();
    // Get instance field reference: private readonly Normal.Realtime.InterpolationDelay _delay
    ::Normal::Realtime::InterpolationDelay*& dyn__delay();
    // private System.Double get_roomTime()
    // Offset: 0xAF9B68
    double get_roomTime();
    // public System.Boolean get_isInterpolationWarmedUp()
    // Offset: 0xAF9C40
    bool get_isInterpolationWarmedUp();
    // public System.Void .ctor(Normal.Realtime.RealtimeTransform realtimeTransform)
    // Offset: 0xAF90A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RealtimeTransformInterpolation* New_ctor(::Normal::Realtime::RealtimeTransform* realtimeTransform) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::RealtimeTransformInterpolation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RealtimeTransformInterpolation*, creationType>(realtimeTransform)));
    }
    // public System.Void Reset(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF9CF0
    void Reset(::Normal::Realtime::RealtimeTransformModel* model);
    // public System.Void Update(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF9E04
    void Update(::Normal::Realtime::RealtimeTransformModel* model);
    // public System.Void OnLocalModelWillWrite(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF9F28
    void OnLocalModelWillWrite(::Normal::Realtime::RealtimeTransformModel* model);
    // public System.Void OnRemoteModelDidRead(Normal.Realtime.RealtimeTransformModel model, Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyChangeSet changes)
    // Offset: 0xAF9F8C
    void OnRemoteModelDidRead(::Normal::Realtime::RealtimeTransformModel* model, ::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet* changes);
    // private System.Void RemoteUpdate(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF9E40
    void RemoteUpdate(::Normal::Realtime::RealtimeTransformModel* model);
    // private System.Void ResetWithLocalModel(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF9DB4
    void ResetWithLocalModel(::Normal::Realtime::RealtimeTransformModel* model);
    // private System.Void ResetWithRemoteModel(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAF9DCC
    void ResetWithRemoteModel(::Normal::Realtime::RealtimeTransformModel* model);
    // private System.Void AddTimelineFrame(Normal.Realtime.RealtimeTransformModel model)
    // Offset: 0xAFA0EC
    void AddTimelineFrame(::Normal::Realtime::RealtimeTransformModel* model);
    // static private System.Boolean IsInterpolationBodyChanged(Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyChangeSet changes)
    // Offset: 0xAFA094
    static bool IsInterpolationBodyChanged(::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet* changes);
  }; // Normal.Realtime.RealtimeTransformInterpolation
  #pragma pack(pop)
  static check_size<sizeof(RealtimeTransformInterpolation), 32 + sizeof(::Normal::Realtime::InterpolationDelay*)> __Normal_Realtime_RealtimeTransformInterpolationSizeCheck;
  static_assert(sizeof(RealtimeTransformInterpolation) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::get_roomTime
// Il2CppName: get_roomTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Normal::Realtime::RealtimeTransformInterpolation::*)()>(&Normal::Realtime::RealtimeTransformInterpolation::get_roomTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "get_roomTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::get_isInterpolationWarmedUp
// Il2CppName: get_isInterpolationWarmedUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::RealtimeTransformInterpolation::*)()>(&Normal::Realtime::RealtimeTransformInterpolation::get_isInterpolationWarmedUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "get_isInterpolationWarmedUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransformInterpolation::Reset)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransformInterpolation::Update)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::OnLocalModelWillWrite
// Il2CppName: OnLocalModelWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransformInterpolation::OnLocalModelWillWrite)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "OnLocalModelWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::OnRemoteModelDidRead
// Il2CppName: OnRemoteModelDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*, ::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet*)>(&Normal::Realtime::RealtimeTransformInterpolation::OnRemoteModelDidRead)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    static auto* changes = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/PropertyChangeSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "OnRemoteModelDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model, changes});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::RemoteUpdate
// Il2CppName: RemoteUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransformInterpolation::RemoteUpdate)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "RemoteUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::ResetWithLocalModel
// Il2CppName: ResetWithLocalModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransformInterpolation::ResetWithLocalModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "ResetWithLocalModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::ResetWithRemoteModel
// Il2CppName: ResetWithRemoteModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransformInterpolation::ResetWithRemoteModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "ResetWithRemoteModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::AddTimelineFrame
// Il2CppName: AddTimelineFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::RealtimeTransformInterpolation::*)(::Normal::Realtime::RealtimeTransformModel*)>(&Normal::Realtime::RealtimeTransformInterpolation::AddTimelineFrame)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "AddTimelineFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::RealtimeTransformInterpolation::IsInterpolationBodyChanged
// Il2CppName: IsInterpolationBodyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Normal::Realtime::RealtimeTransformModel::PropertyChangeSet*)>(&Normal::Realtime::RealtimeTransformInterpolation::IsInterpolationBodyChanged)> {
  static const MethodInfo* get() {
    static auto* changes = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeTransformModel/PropertyChangeSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::RealtimeTransformInterpolation*), "IsInterpolationBodyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changes});
  }
};
