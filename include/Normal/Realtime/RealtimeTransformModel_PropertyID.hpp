// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeTransformModel
#include "Normal/Realtime/RealtimeTransformModel.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::RealtimeTransformModel::PropertyID, "Normal.Realtime", "RealtimeTransformModel/PropertyID");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID
  // [TokenAttribute] Offset: FFFFFFFF
  struct RealtimeTransformModel::PropertyID/*, public ::System::Enum*/ {
    public:
    public:
    // public System.UInt32 value__
    // Size: 0x4
    // Offset: 0x0
    uint value;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: PropertyID
    constexpr PropertyID(uint value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return value;
    }
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Position
    static constexpr const uint Position = 1u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Position
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_Position();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Position
    static void _set_Position(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Rotation
    static constexpr const uint Rotation = 2u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Rotation
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_Rotation();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Rotation
    static void _set_Rotation(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Scale
    static constexpr const uint Scale = 3u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Scale
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_Scale();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Scale
    static void _set_Scale(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Velocity
    static constexpr const uint Velocity = 4u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Velocity
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_Velocity();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID Velocity
    static void _set_Velocity(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID AngularVelocity
    static constexpr const uint AngularVelocity = 5u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID AngularVelocity
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_AngularVelocity();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID AngularVelocity
    static void _set_AngularVelocity(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsState
    static constexpr const uint PhysicsState = 7u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsState
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_PhysicsState();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsState
    static void _set_PhysicsState(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsBodyTimeOffset
    static constexpr const uint PhysicsBodyTimeOffset = 9u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsBodyTimeOffset
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_PhysicsBodyTimeOffset();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsBodyTimeOffset
    static void _set_PhysicsBodyTimeOffset(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // static field const value: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsStateTimeOffset
    static constexpr const uint PhysicsStateTimeOffset = 10u;
    // Get static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsStateTimeOffset
    static ::Normal::Realtime::RealtimeTransformModel::PropertyID _get_PhysicsStateTimeOffset();
    // Set static field: static public Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID PhysicsStateTimeOffset
    static void _set_PhysicsStateTimeOffset(::Normal::Realtime::RealtimeTransformModel::PropertyID value);
    // Get instance field reference: public System.UInt32 value__
    [[deprecated("Use field access instead!")]] uint& dyn_value__();
  }; // Normal.Realtime.RealtimeTransformModel/Normal.Realtime.PropertyID
  #pragma pack(pop)
  static check_size<sizeof(RealtimeTransformModel::PropertyID), 0 + sizeof(uint)> __Normal_Realtime_RealtimeTransformModel_PropertyIDSizeCheck;
  static_assert(sizeof(RealtimeTransformModel::PropertyID) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
