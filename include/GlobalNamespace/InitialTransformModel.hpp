// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeModel
#include "Normal/Realtime/RealtimeModel.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: ReliableProperty`1<T>
  template<typename T>
  class ReliableProperty_1;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: StreamContext because it is already included!
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: InitialTransformModel
  class InitialTransformModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::InitialTransformModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::InitialTransformModel*, "", "InitialTransformModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: InitialTransformModel
  // [TokenAttribute] Offset: FFFFFFFF
  // [RealtimeModelAttribute] Offset: D4660
  class InitialTransformModel : public ::Normal::Realtime::RealtimeModel {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    // Nested type: ::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<T>
    template<typename T>
    class PropertyChangedHandler_1;
    // Nested type: ::GlobalNamespace::InitialTransformModel::PropertyID
    struct PropertyID;
    public:
    // [RealtimePropertyAttribute] Offset: 0xF03F0
    // private UnityEngine.Vector3 _position
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [RealtimePropertyAttribute] Offset: 0xF0420
    // private UnityEngine.Quaternion _rotation
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: rotation and: positionDidChange
    char __padding1[0x4] = {};
    // private InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Vector3> positionDidChange
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Vector3>* positionDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Vector3>*) == 0x8);
    // private InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Quaternion> rotationDidChange
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Quaternion>* rotationDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Quaternion>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<UnityEngine.Vector3> _positionProperty
    // Size: 0x8
    // Offset: 0xC0
    ::Normal::Realtime::ReliableProperty_1<::UnityEngine::Vector3>* positionProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<::UnityEngine::Vector3>*) == 0x8);
    // private Normal.Realtime.ReliableProperty`1<UnityEngine.Quaternion> _rotationProperty
    // Size: 0x8
    // Offset: 0xC8
    ::Normal::Realtime::ReliableProperty_1<::UnityEngine::Quaternion>* rotationProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::ReliableProperty_1<::UnityEngine::Quaternion>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Vector3 _position
    [[deprecated]] ::UnityEngine::Vector3& dyn__position();
    // Get instance field reference: private UnityEngine.Quaternion _rotation
    [[deprecated]] ::UnityEngine::Quaternion& dyn__rotation();
    // Get instance field reference: private InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Vector3> positionDidChange
    [[deprecated]] ::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Vector3>*& dyn_positionDidChange();
    // Get instance field reference: private InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Quaternion> rotationDidChange
    [[deprecated]] ::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Quaternion>*& dyn_rotationDidChange();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<UnityEngine.Vector3> _positionProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<::UnityEngine::Vector3>*& dyn__positionProperty();
    // Get instance field reference: private Normal.Realtime.ReliableProperty`1<UnityEngine.Quaternion> _rotationProperty
    [[deprecated]] ::Normal::Realtime::ReliableProperty_1<::UnityEngine::Quaternion>*& dyn__rotationProperty();
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x6B9F80
    ::UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x6BA180
    void set_position(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x6B9FE0
    ::UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x6BA2A0
    void set_rotation(::UnityEngine::Quaternion value);
    // public System.Void add_positionDidChange(InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Vector3> value)
    // Offset: 0x6B9E40
    void add_positionDidChange(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Vector3>* value);
    // public System.Void remove_positionDidChange(InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Vector3> value)
    // Offset: 0x6BA040
    void remove_positionDidChange(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Vector3>* value);
    // public System.Void add_rotationDidChange(InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Quaternion> value)
    // Offset: 0x6B9EE0
    void add_rotationDidChange(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Quaternion>* value);
    // public System.Void remove_rotationDidChange(InitialTransformModel/PropertyChangedHandler`1<UnityEngine.Quaternion> value)
    // Offset: 0x6BA0E0
    void remove_rotationDidChange(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Quaternion>* value);
    // private System.Void FirePositionDidChange(UnityEngine.Vector3 value)
    // Offset: 0x6B9710
    void FirePositionDidChange(::UnityEngine::Vector3 value);
    // private System.Void FireRotationDidChange(UnityEngine.Quaternion value)
    // Offset: 0x6B97C0
    void FireRotationDidChange(::UnityEngine::Quaternion value);
    // private System.Void UpdateBackingFields()
    // Offset: 0x6B9B20
    void UpdateBackingFields();
    // public System.Void .ctor()
    // Offset: 0x6B9D50
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InitialTransformModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InitialTransformModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InitialTransformModel*, creationType>()));
    }
    // protected override System.Void OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    // Offset: 0x6B9860
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::OnParentReplaced(Normal.Realtime.RealtimeModel previousParent, Normal.Realtime.RealtimeModel currentParent)
    void OnParentReplaced(::Normal::Realtime::RealtimeModel* previousParent, ::Normal::Realtime::RealtimeModel* currentParent);
    // protected override System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6B9BB0
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Int32 RealtimeModel::WriteLength(Normal.Realtime.Serialization.StreamContext context)
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6B9C60
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6B98C0
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
  }; // InitialTransformModel
  #pragma pack(pop)
  static check_size<sizeof(InitialTransformModel), 200 + sizeof(::Normal::Realtime::ReliableProperty_1<::UnityEngine::Quaternion>*)> __GlobalNamespace_InitialTransformModelSizeCheck;
  static_assert(sizeof(InitialTransformModel) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::InitialTransformModel::*)()>(&GlobalNamespace::InitialTransformModel::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::UnityEngine::Vector3)>(&GlobalNamespace::InitialTransformModel::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::InitialTransformModel::*)()>(&GlobalNamespace::InitialTransformModel::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::InitialTransformModel::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::add_positionDidChange
// Il2CppName: add_positionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Vector3>*)>(&GlobalNamespace::InitialTransformModel::add_positionDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "InitialTransformModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "add_positionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::remove_positionDidChange
// Il2CppName: remove_positionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Vector3>*)>(&GlobalNamespace::InitialTransformModel::remove_positionDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "InitialTransformModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "remove_positionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::add_rotationDidChange
// Il2CppName: add_rotationDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Quaternion>*)>(&GlobalNamespace::InitialTransformModel::add_rotationDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "InitialTransformModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "add_rotationDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::remove_rotationDidChange
// Il2CppName: remove_rotationDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::GlobalNamespace::InitialTransformModel::PropertyChangedHandler_1<::UnityEngine::Quaternion>*)>(&GlobalNamespace::InitialTransformModel::remove_rotationDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "InitialTransformModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "remove_rotationDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::FirePositionDidChange
// Il2CppName: FirePositionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::UnityEngine::Vector3)>(&GlobalNamespace::InitialTransformModel::FirePositionDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "FirePositionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::FireRotationDidChange
// Il2CppName: FireRotationDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::InitialTransformModel::FireRotationDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "FireRotationDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::UpdateBackingFields
// Il2CppName: UpdateBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)()>(&GlobalNamespace::InitialTransformModel::UpdateBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "UpdateBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::OnParentReplaced
// Il2CppName: OnParentReplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::Normal::Realtime::RealtimeModel*, ::Normal::Realtime::RealtimeModel*)>(&GlobalNamespace::InitialTransformModel::OnParentReplaced)> {
  static const MethodInfo* get() {
    static auto* previousParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    static auto* currentParent = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "OnParentReplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousParent, currentParent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::InitialTransformModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::InitialTransformModel::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::InitialTransformModel::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InitialTransformModel::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InitialTransformModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::InitialTransformModel::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InitialTransformModel*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
