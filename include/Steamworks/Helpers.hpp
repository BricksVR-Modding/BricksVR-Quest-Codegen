// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: Helpers
  class Helpers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::Helpers);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Helpers*, "Steamworks", "Helpers");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.Helpers
  // [TokenAttribute] Offset: FFFFFFFF
  class Helpers : public ::Il2CppObject {
    public:
    // Get static field: static private System.IntPtr[] MemoryPool
    static ::ArrayW<::System::IntPtr> _get_MemoryPool();
    // Set static field: static private System.IntPtr[] MemoryPool
    static void _set_MemoryPool(::ArrayW<::System::IntPtr> value);
    // Get static field: static private System.Int32 MemoryPoolIndex
    static int _get_MemoryPoolIndex();
    // Set static field: static private System.Int32 MemoryPoolIndex
    static void _set_MemoryPoolIndex(int value);
    // Get static field: static private System.Byte[][] BufferPool
    static ::ArrayW<::ArrayW<uint8_t>> _get_BufferPool();
    // Set static field: static private System.Byte[][] BufferPool
    static void _set_BufferPool(::ArrayW<::ArrayW<uint8_t>> value);
    // Get static field: static private System.Int32 BufferPoolIndex
    static int _get_BufferPoolIndex();
    // Set static field: static private System.Int32 BufferPoolIndex
    static void _set_BufferPoolIndex(int value);
    // static public System.IntPtr TakeMemory()
    // Offset: 0xE366C8
    static ::System::IntPtr TakeMemory();
    // static public System.Byte[] TakeBuffer(System.Int32 minSize)
    // Offset: 0xE3684C
    static ::ArrayW<uint8_t> TakeBuffer(int minSize);
    // static System.String MemoryToString(System.IntPtr ptr)
    // Offset: 0xE36A4C
    static ::StringW MemoryToString(::System::IntPtr ptr);
  }; // Steamworks.Helpers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Helpers::TakeMemory
// Il2CppName: TakeMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Steamworks::Helpers::TakeMemory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Helpers*), "TakeMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::Helpers::TakeBuffer
// Il2CppName: TakeBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(int)>(&Steamworks::Helpers::TakeBuffer)> {
  static const MethodInfo* get() {
    static auto* minSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Helpers*), "TakeBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minSize});
  }
};
// Writing MetadataGetter for method: Steamworks::Helpers::MemoryToString
// Il2CppName: MemoryToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr)>(&Steamworks::Helpers::MemoryToString)> {
  static const MethodInfo* get() {
    static auto* ptr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Helpers*), "MemoryToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
