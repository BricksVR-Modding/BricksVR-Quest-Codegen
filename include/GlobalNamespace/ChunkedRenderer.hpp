// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SetConnectorStatesTask
#include "GlobalNamespace/SetConnectorStatesTask.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: ChunkedBrick because it is already included!
  // Skipping declaration: Coord because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ChunkedRenderer
  class ChunkedRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ChunkedRenderer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ChunkedRenderer*, "", "ChunkedRenderer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: ChunkedRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class ChunkedRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ChunkedRenderer::Coord
    struct Coord;
    // Nested type: ::GlobalNamespace::ChunkedRenderer::Chunk
    class Chunk;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: ChunkedRenderer/Coord
    // [TokenAttribute] Offset: FFFFFFFF
    struct Coord/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 x
      // Size: 0x4
      // Offset: 0x0
      int x;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 z
      // Size: 0x4
      // Offset: 0x4
      int z;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Coord
      constexpr Coord(int x_ = {}, int z_ = {}) noexcept : x{x_}, z{z_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 x
      [[deprecated]] int& dyn_x();
      // Get instance field reference: public System.Int32 z
      [[deprecated]] int& dyn_z();
      // public System.Void .ctor(System.Int32 x, System.Int32 z)
      // Offset: 0x229080
      // ABORTED: conflicts with another method.  Coord(int x, int z);
      // public System.Boolean Equals(ChunkedRenderer/Coord otherCoord)
      // Offset: 0x6B22F0
      bool Equals(::GlobalNamespace::ChunkedRenderer::Coord otherCoord);
      // public System.Boolean WithinNChunks(ChunkedRenderer/Coord otherCoord, System.Int32 n)
      // Offset: 0x6B2310
      bool WithinNChunks(::GlobalNamespace::ChunkedRenderer::Coord otherCoord, int n);
    }; // ChunkedRenderer/Coord
    #pragma pack(pop)
    static check_size<sizeof(ChunkedRenderer::Coord), 4 + sizeof(int)> __GlobalNamespace_ChunkedRenderer_CoordSizeCheck;
    static_assert(sizeof(ChunkedRenderer::Coord) == 0x8);
    public:
    // public UnityEngine.Transform chunkingCenterPointTransform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* chunkingCenterPointTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _chunkingCenterPoint
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 chunkingCenterPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Int32 renderDistance
    // Size: 0x4
    // Offset: 0x2C
    int renderDistance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _uncappedRenderDistance
    // Size: 0x1
    // Offset: 0x30
    bool uncappedRenderDistance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: uncappedRenderDistance and: chunkSize
    char __padding3[0x3] = {};
    // public System.Single chunkSize
    // Size: 0x4
    // Offset: 0x34
    float chunkSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single playerScale
    // Size: 0x4
    // Offset: 0x38
    float playerScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: playerScale and: playerHeadTransform
    char __padding5[0x4] = {};
    // public UnityEngine.Transform playerHeadTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* playerHeadTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<ChunkedRenderer/Coord,ChunkedRenderer/Chunk> _chunkDictionary
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ChunkedRenderer::Coord, ::GlobalNamespace::ChunkedRenderer::Chunk*>* chunkDictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ChunkedRenderer::Coord, ::GlobalNamespace::ChunkedRenderer::Chunk*>*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<SetConnectorStatesTask> _workQueue
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::SetConnectorStatesTask>* workQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::SetConnectorStatesTask>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 WorkQueueItemsToProcessPerFrame
    static constexpr const int WorkQueueItemsToProcessPerFrame = 30;
    // Get static field: static private System.Int32 WorkQueueItemsToProcessPerFrame
    static int _get_WorkQueueItemsToProcessPerFrame();
    // Set static field: static private System.Int32 WorkQueueItemsToProcessPerFrame
    static void _set_WorkQueueItemsToProcessPerFrame(int value);
    // Get static field: static private ChunkedRenderer _instance
    static ::GlobalNamespace::ChunkedRenderer* _get__instance();
    // Set static field: static private ChunkedRenderer _instance
    static void _set__instance(::GlobalNamespace::ChunkedRenderer* value);
    // Get instance field reference: public UnityEngine.Transform chunkingCenterPointTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn_chunkingCenterPointTransform();
    // Get instance field reference: private UnityEngine.Vector3 _chunkingCenterPoint
    [[deprecated]] ::UnityEngine::Vector3& dyn__chunkingCenterPoint();
    // Get instance field reference: public System.Int32 renderDistance
    [[deprecated]] int& dyn_renderDistance();
    // Get instance field reference: private System.Boolean _uncappedRenderDistance
    [[deprecated]] bool& dyn__uncappedRenderDistance();
    // Get instance field reference: public System.Single chunkSize
    [[deprecated]] float& dyn_chunkSize();
    // Get instance field reference: public System.Single playerScale
    [[deprecated]] float& dyn_playerScale();
    // Get instance field reference: public UnityEngine.Transform playerHeadTransform
    [[deprecated]] ::UnityEngine::Transform*& dyn_playerHeadTransform();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<ChunkedRenderer/Coord,ChunkedRenderer/Chunk> _chunkDictionary
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ChunkedRenderer::Coord, ::GlobalNamespace::ChunkedRenderer::Chunk*>*& dyn__chunkDictionary();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<SetConnectorStatesTask> _workQueue
    [[deprecated]] ::System::Collections::Generic::Queue_1<::GlobalNamespace::SetConnectorStatesTask>*& dyn__workQueue();
    // static public ChunkedRenderer GetInstance()
    // Offset: 0x6AFF20
    static ::GlobalNamespace::ChunkedRenderer* GetInstance();
    // private System.Void Awake()
    // Offset: 0x6AFB00
    void Awake();
    // public System.Void RenderDistanceSet(System.Int32 distance)
    // Offset: 0x6B0420
    void RenderDistanceSet(int distance);
    // public System.Void AddBrickToRenderer(UnityEngine.GameObject brickObject)
    // Offset: 0x6AF8A0
    void AddBrickToRenderer(::UnityEngine::GameObject* brickObject);
    // private System.Void AddBrickToRenderer(ChunkedBrick chunkedBrick)
    // Offset: 0x6AFA50
    void AddBrickToRenderer(::GlobalNamespace::ChunkedBrick chunkedBrick);
    // private ChunkedRenderer/Chunk FindOrCreateChunk(ChunkedRenderer/Coord coord)
    // Offset: 0x6AFBF0
    ::GlobalNamespace::ChunkedRenderer::Chunk* FindOrCreateChunk(::GlobalNamespace::ChunkedRenderer::Coord coord);
    // private System.Void Update()
    // Offset: 0x6B0440
    void Update();
    // private System.Void WorkThroughWorkQueue()
    // Offset: 0x6B06F0
    void WorkThroughWorkQueue();
    // private System.Void RedoChunks()
    // Offset: 0x6B0100
    void RedoChunks();
    // private System.Void OnDrawGizmos()
    // Offset: 0x6AFFE0
    void OnDrawGizmos();
    // private UnityEngine.Vector3 GetCenterOfChunk(ChunkedRenderer/Coord coord)
    // Offset: 0x6AFDA0
    ::UnityEngine::Vector3 GetCenterOfChunk(::GlobalNamespace::ChunkedRenderer::Coord coord);
    // private ChunkedRenderer/Coord GetChunkFromPosition(UnityEngine.Vector3 position)
    // Offset: 0x6AFE30
    ::GlobalNamespace::ChunkedRenderer::Coord GetChunkFromPosition(::UnityEngine::Vector3 position);
    // static private System.Single DistanceBetweenCoords(ChunkedRenderer/Coord one, ChunkedRenderer/Coord two)
    // Offset: 0x6AFB40
    static float DistanceBetweenCoords(::GlobalNamespace::ChunkedRenderer::Coord one, ::GlobalNamespace::ChunkedRenderer::Coord two);
    // public System.Void .ctor()
    // Offset: 0x6B08F0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChunkedRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChunkedRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChunkedRenderer*, creationType>()));
    }
  }; // ChunkedRenderer
  #pragma pack(pop)
  static check_size<sizeof(ChunkedRenderer), 80 + sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::SetConnectorStatesTask>*)> __GlobalNamespace_ChunkedRendererSizeCheck;
  static_assert(sizeof(ChunkedRenderer) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ChunkedRenderer::Coord, "", "ChunkedRenderer/Coord");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ChunkedRenderer* (*)()>(&GlobalNamespace::ChunkedRenderer::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)()>(&GlobalNamespace::ChunkedRenderer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::RenderDistanceSet
// Il2CppName: RenderDistanceSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)(int)>(&GlobalNamespace::ChunkedRenderer::RenderDistanceSet)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "RenderDistanceSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::AddBrickToRenderer
// Il2CppName: AddBrickToRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ChunkedRenderer::AddBrickToRenderer)> {
  static const MethodInfo* get() {
    static auto* brickObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "AddBrickToRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brickObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::AddBrickToRenderer
// Il2CppName: AddBrickToRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)(::GlobalNamespace::ChunkedBrick)>(&GlobalNamespace::ChunkedRenderer::AddBrickToRenderer)> {
  static const MethodInfo* get() {
    static auto* chunkedBrick = &::il2cpp_utils::GetClassFromName("", "ChunkedBrick")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "AddBrickToRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chunkedBrick});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::FindOrCreateChunk
// Il2CppName: FindOrCreateChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ChunkedRenderer::Chunk* (GlobalNamespace::ChunkedRenderer::*)(::GlobalNamespace::ChunkedRenderer::Coord)>(&GlobalNamespace::ChunkedRenderer::FindOrCreateChunk)> {
  static const MethodInfo* get() {
    static auto* coord = &::il2cpp_utils::GetClassFromName("", "ChunkedRenderer/Coord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "FindOrCreateChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coord});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)()>(&GlobalNamespace::ChunkedRenderer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::WorkThroughWorkQueue
// Il2CppName: WorkThroughWorkQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)()>(&GlobalNamespace::ChunkedRenderer::WorkThroughWorkQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "WorkThroughWorkQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::RedoChunks
// Il2CppName: RedoChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)()>(&GlobalNamespace::ChunkedRenderer::RedoChunks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "RedoChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChunkedRenderer::*)()>(&GlobalNamespace::ChunkedRenderer::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::GetCenterOfChunk
// Il2CppName: GetCenterOfChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::ChunkedRenderer::*)(::GlobalNamespace::ChunkedRenderer::Coord)>(&GlobalNamespace::ChunkedRenderer::GetCenterOfChunk)> {
  static const MethodInfo* get() {
    static auto* coord = &::il2cpp_utils::GetClassFromName("", "ChunkedRenderer/Coord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "GetCenterOfChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coord});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::GetChunkFromPosition
// Il2CppName: GetChunkFromPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ChunkedRenderer::Coord (GlobalNamespace::ChunkedRenderer::*)(::UnityEngine::Vector3)>(&GlobalNamespace::ChunkedRenderer::GetChunkFromPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "GetChunkFromPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::DistanceBetweenCoords
// Il2CppName: DistanceBetweenCoords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::GlobalNamespace::ChunkedRenderer::Coord, ::GlobalNamespace::ChunkedRenderer::Coord)>(&GlobalNamespace::ChunkedRenderer::DistanceBetweenCoords)> {
  static const MethodInfo* get() {
    static auto* one = &::il2cpp_utils::GetClassFromName("", "ChunkedRenderer/Coord")->byval_arg;
    static auto* two = &::il2cpp_utils::GetClassFromName("", "ChunkedRenderer/Coord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChunkedRenderer*), "DistanceBetweenCoords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{one, two});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChunkedRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
