// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AdvancedColorPicker.GraphicalColorTypeComponent
#include "AdvancedColorPicker/GraphicalColorTypeComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Forward declaring type: SliderCircle2D
  class SliderCircle2D;
  // Skipping declaration: ColorType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color32 because it is already included!
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Completed forward declares
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Forward declaring type: GradientCircle
  class GradientCircle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AdvancedColorPicker::GradientCircle);
DEFINE_IL2CPP_ARG_TYPE(::AdvancedColorPicker::GradientCircle*, "AdvancedColorPicker", "GradientCircle");
// Type namespace: AdvancedColorPicker
namespace AdvancedColorPicker {
  // Size: 0xE9
  #pragma pack(push, 1)
  // Autogenerated type: AdvancedColorPicker.GradientCircle
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 71D4BC
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class GradientCircle : public ::AdvancedColorPicker::GraphicalColorTypeComponent {
    public:
    // Writing base type padding for base size: 0xDC to desired offset: 0xE0
    char ___base_padding[0x4] = {};
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private AdvancedColorPicker.SliderCircle2D slider
    // Size: 0x8
    // Offset: 0xE0
    ::AdvancedColorPicker::SliderCircle2D* slider;
    // Field size check
    static_assert(sizeof(::AdvancedColorPicker::SliderCircle2D*) == 0x8);
    // private System.Boolean dontListenToSlider
    // Size: 0x1
    // Offset: 0xE8
    bool dontListenToSlider;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private AdvancedColorPicker.SliderCircle2D slider
    ::AdvancedColorPicker::SliderCircle2D*& dyn_slider();
    // Get instance field reference: private System.Boolean dontListenToSlider
    bool& dyn_dontListenToSlider();
    // private System.Void UpdatePickerValues(System.Single xValue, System.Single yValue)
    // Offset: 0xE20AC4
    void UpdatePickerValues(float xValue, float yValue);
    // private System.Void UpdateSliderValues()
    // Offset: 0xE20BA8
    void UpdateSliderValues();
    // private UnityEngine.Color32 GetColor(System.Single angle, System.Single distance)
    // Offset: 0xE21528
    ::UnityEngine::Color32 GetColor(float angle, float distance);
    // private System.Int32 GetMinimum(AdvancedColorPicker.ColorType type)
    // Offset: 0xE215A4
    int GetMinimum(::AdvancedColorPicker::ColorType type);
    // public override UnityEngine.Texture get_mainTexture()
    // Offset: 0xE208AC
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Texture Graphic::get_mainTexture()
    ::UnityEngine::Texture* get_mainTexture();
    // public System.Void .ctor()
    // Offset: 0xE21738
    // Implemented from: AdvancedColorPicker.GraphicalColorTypeComponent
    // Base method: System.Void GraphicalColorTypeComponent::.ctor()
    // Base method: System.Void GraphicalColorComponent::.ctor()
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GradientCircle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AdvancedColorPicker::GradientCircle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GradientCircle*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0xE20908
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0xE2096C
    // Implemented from: AdvancedColorPicker.GraphicalColorComponent
    // Base method: System.Void GraphicalColorComponent::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0xE20A18
    // Implemented from: AdvancedColorPicker.GraphicalColorComponent
    // Base method: System.Void GraphicalColorComponent::OnDisable()
    void OnDisable();
    // protected override System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper vh)
    // Offset: 0xE20CD4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnPopulateMesh(UnityEngine.UI.VertexHelper vh)
    void OnPopulateMesh(::UnityEngine::UI::VertexHelper* vh);
    // protected override System.Void DisplayNewColor()
    // Offset: 0xE216EC
    // Implemented from: AdvancedColorPicker.GraphicalColorComponent
    // Base method: System.Void GraphicalColorComponent::DisplayNewColor()
    void DisplayNewColor();
  }; // AdvancedColorPicker.GradientCircle
  #pragma pack(pop)
  static check_size<sizeof(GradientCircle), 232 + sizeof(bool)> __AdvancedColorPicker_GradientCircleSizeCheck;
  static_assert(sizeof(GradientCircle) == 0xE9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::UpdatePickerValues
// Il2CppName: UpdatePickerValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::GradientCircle::*)(float, float)>(&AdvancedColorPicker::GradientCircle::UpdatePickerValues)> {
  static const MethodInfo* get() {
    static auto* xValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* yValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "UpdatePickerValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xValue, yValue});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::UpdateSliderValues
// Il2CppName: UpdateSliderValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::GradientCircle::*)()>(&AdvancedColorPicker::GradientCircle::UpdateSliderValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "UpdateSliderValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (AdvancedColorPicker::GradientCircle::*)(float, float)>(&AdvancedColorPicker::GradientCircle::GetColor)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, distance});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::GetMinimum
// Il2CppName: GetMinimum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AdvancedColorPicker::GradientCircle::*)(::AdvancedColorPicker::ColorType)>(&AdvancedColorPicker::GradientCircle::GetMinimum)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("AdvancedColorPicker", "ColorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "GetMinimum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::get_mainTexture
// Il2CppName: get_mainTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (AdvancedColorPicker::GradientCircle::*)()>(&AdvancedColorPicker::GradientCircle::get_mainTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "get_mainTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::GradientCircle::*)()>(&AdvancedColorPicker::GradientCircle::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::GradientCircle::*)()>(&AdvancedColorPicker::GradientCircle::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::GradientCircle::*)()>(&AdvancedColorPicker::GradientCircle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::OnPopulateMesh
// Il2CppName: OnPopulateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::GradientCircle::*)(::UnityEngine::UI::VertexHelper*)>(&AdvancedColorPicker::GradientCircle::OnPopulateMesh)> {
  static const MethodInfo* get() {
    static auto* vh = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "OnPopulateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vh});
  }
};
// Writing MetadataGetter for method: AdvancedColorPicker::GradientCircle::DisplayNewColor
// Il2CppName: DisplayNewColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdvancedColorPicker::GradientCircle::*)()>(&AdvancedColorPicker::GradientCircle::DisplayNewColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdvancedColorPicker::GradientCircle*), "DisplayNewColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
