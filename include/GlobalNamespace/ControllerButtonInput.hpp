// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: Realtime
  class Realtime;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ControllerButtonInput
  class ControllerButtonInput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ControllerButtonInput);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ControllerButtonInput*, "", "ControllerButtonInput");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x42
  #pragma pack(push, 1)
  // Autogenerated type: ControllerButtonInput
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerButtonInput : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public UnityEngine.GameObject realtimeObject
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* realtimeObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject leftMenuHand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* leftMenuHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rightMenuHand
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* rightMenuHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OVRInput/Controller _activeController
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::OVRInput::Controller activeController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // Padding between fields: activeController and: realtime
    char __padding3[0x4] = {};
    // private Normal.Realtime.Realtime _realtime
    // Size: 0x8
    // Offset: 0x38
    ::Normal::Realtime::Realtime* realtime;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Realtime*) == 0x8);
    // private System.Boolean _reset
    // Size: 0x1
    // Offset: 0x40
    bool reset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean inMenu
    // Size: 0x1
    // Offset: 0x41
    bool inMenu;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject realtimeObject
    ::UnityEngine::GameObject*& dyn_realtimeObject();
    // Get instance field reference: public UnityEngine.GameObject leftMenuHand
    ::UnityEngine::GameObject*& dyn_leftMenuHand();
    // Get instance field reference: public UnityEngine.GameObject rightMenuHand
    ::UnityEngine::GameObject*& dyn_rightMenuHand();
    // Get instance field reference: private OVRInput/Controller _activeController
    ::GlobalNamespace::OVRInput::Controller& dyn__activeController();
    // Get instance field reference: private Normal.Realtime.Realtime _realtime
    ::Normal::Realtime::Realtime*& dyn__realtime();
    // Get instance field reference: private System.Boolean _reset
    bool& dyn__reset();
    // Get instance field reference: private System.Boolean inMenu
    bool& dyn_inMenu();
    // public System.Void Start()
    // Offset: 0x10A2548
    void Start();
    // private System.Void Update()
    // Offset: 0x10A25E0
    void Update();
    // public System.Void EnableMenuControls()
    // Offset: 0x10A27B4
    void EnableMenuControls();
    // public System.Void DisableMenuControls()
    // Offset: 0x10A27C0
    void DisableMenuControls();
    // private System.Void MenuLogic()
    // Offset: 0x10A2650
    void MenuLogic();
    // private System.Void ResetMenuState()
    // Offset: 0x10A27A8
    void ResetMenuState();
    // public System.Void .ctor()
    // Offset: 0x10A27C8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerButtonInput* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ControllerButtonInput::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerButtonInput*, creationType>()));
    }
  }; // ControllerButtonInput
  #pragma pack(pop)
  static check_size<sizeof(ControllerButtonInput), 65 + sizeof(bool)> __GlobalNamespace_ControllerButtonInputSizeCheck;
  static_assert(sizeof(ControllerButtonInput) == 0x42);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ControllerButtonInput::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerButtonInput::*)()>(&GlobalNamespace::ControllerButtonInput::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerButtonInput*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerButtonInput::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerButtonInput::*)()>(&GlobalNamespace::ControllerButtonInput::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerButtonInput*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerButtonInput::EnableMenuControls
// Il2CppName: EnableMenuControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerButtonInput::*)()>(&GlobalNamespace::ControllerButtonInput::EnableMenuControls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerButtonInput*), "EnableMenuControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerButtonInput::DisableMenuControls
// Il2CppName: DisableMenuControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerButtonInput::*)()>(&GlobalNamespace::ControllerButtonInput::DisableMenuControls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerButtonInput*), "DisableMenuControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerButtonInput::MenuLogic
// Il2CppName: MenuLogic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerButtonInput::*)()>(&GlobalNamespace::ControllerButtonInput::MenuLogic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerButtonInput*), "MenuLogic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerButtonInput::ResetMenuState
// Il2CppName: ResetMenuState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ControllerButtonInput::*)()>(&GlobalNamespace::ControllerButtonInput::ResetMenuState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ControllerButtonInput*), "ResetMenuState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ControllerButtonInput::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
