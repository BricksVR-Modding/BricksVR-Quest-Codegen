// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VertexColorEditor
  class VertexColorEditor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VertexColorEditor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VertexColorEditor*, "", "VertexColorEditor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: VertexColorEditor
  // [TokenAttribute] Offset: FFFFFFFF
  class VertexColorEditor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _lastColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color lastColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color32 _lastColor32
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::Color32 lastColor32;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: private UnityEngine.Color _lastColor
    [[deprecated]] ::UnityEngine::Color& dyn__lastColor();
    // Get instance field reference: private UnityEngine.Color32 _lastColor32
    [[deprecated]] ::UnityEngine::Color32& dyn__lastColor32();
    // private System.Void Start()
    // Offset: 0x927E70
    void Start();
    // private System.Void Update()
    // Offset: 0x927F30
    void Update();
    // private System.Void UpdateVertexColors()
    // Offset: 0x927EB0
    void UpdateVertexColors();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VertexColorEditor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VertexColorEditor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VertexColorEditor*, creationType>()));
    }
  }; // VertexColorEditor
  #pragma pack(pop)
  static check_size<sizeof(VertexColorEditor), 56 + sizeof(::UnityEngine::Color32)> __GlobalNamespace_VertexColorEditorSizeCheck;
  static_assert(sizeof(VertexColorEditor) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VertexColorEditor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VertexColorEditor::*)()>(&GlobalNamespace::VertexColorEditor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VertexColorEditor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VertexColorEditor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VertexColorEditor::*)()>(&GlobalNamespace::VertexColorEditor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VertexColorEditor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VertexColorEditor::UpdateVertexColors
// Il2CppName: UpdateVertexColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VertexColorEditor::*)()>(&GlobalNamespace::VertexColorEditor::UpdateVertexColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VertexColorEditor*), "UpdateVertexColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VertexColorEditor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
