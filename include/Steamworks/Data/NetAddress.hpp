// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: NetAddress
  struct NetAddress;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::NetAddress, "Steamworks.Data", "NetAddress");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0x12
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.NetAddress
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetAddress/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Steamworks::Data::NetAddress::IPV4
    struct IPV4;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Steamworks.Data.NetAddress/Steamworks.Data.IPV4
    // [TokenAttribute] Offset: FFFFFFFF
    struct IPV4/*, public ::System::ValueType*/ {
      public:
      public:
      // System.UInt64 m_8zeros
      // Size: 0x8
      // Offset: 0x0
      uint64_t m_8zeros;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // System.UInt16 m_0000
      // Size: 0x2
      // Offset: 0x8
      uint16_t m_0000;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // System.UInt16 m_ffff
      // Size: 0x2
      // Offset: 0xA
      uint16_t m_ffff;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // System.Byte ip0
      // Size: 0x1
      // Offset: 0xC
      uint8_t ip0;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // System.Byte ip1
      // Size: 0x1
      // Offset: 0xD
      uint8_t ip1;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // System.Byte ip2
      // Size: 0x1
      // Offset: 0xE
      uint8_t ip2;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // System.Byte ip3
      // Size: 0x1
      // Offset: 0xF
      uint8_t ip3;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: IPV4
      constexpr IPV4(uint64_t m_8zeros_ = {}, uint16_t m_0000_ = {}, uint16_t m_ffff_ = {}, uint8_t ip0_ = {}, uint8_t ip1_ = {}, uint8_t ip2_ = {}, uint8_t ip3_ = {}) noexcept : m_8zeros{m_8zeros_}, m_0000{m_0000_}, m_ffff{m_ffff_}, ip0{ip0_}, ip1{ip1_}, ip2{ip2_}, ip3{ip3_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.UInt64 m_8zeros
      uint64_t& dyn_m_8zeros();
      // Get instance field reference: System.UInt16 m_0000
      uint16_t& dyn_m_0000();
      // Get instance field reference: System.UInt16 m_ffff
      uint16_t& dyn_m_ffff();
      // Get instance field reference: System.Byte ip0
      uint8_t& dyn_ip0();
      // Get instance field reference: System.Byte ip1
      uint8_t& dyn_ip1();
      // Get instance field reference: System.Byte ip2
      uint8_t& dyn_ip2();
      // Get instance field reference: System.Byte ip3
      uint8_t& dyn_ip3();
    }; // Steamworks.Data.NetAddress/Steamworks.Data.IPV4
    #pragma pack(pop)
    static check_size<sizeof(NetAddress::IPV4), 15 + sizeof(uint8_t)> __Steamworks_Data_NetAddress_IPV4SizeCheck;
    static_assert(sizeof(NetAddress::IPV4) == 0x10);
    public:
    // Steamworks.Data.NetAddress/Steamworks.Data.IPV4 ip
    // Size: 0x10
    // Offset: 0x0
    ::Steamworks::Data::NetAddress::IPV4 ip;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::NetAddress::IPV4) == 0x10);
    // System.UInt16 port
    // Size: 0x2
    // Offset: 0x10
    uint16_t port;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: NetAddress
    constexpr NetAddress(::Steamworks::Data::NetAddress::IPV4 ip_ = {}, uint16_t port_ = {}) noexcept : ip{ip_}, port{port_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Steamworks.Data.NetAddress/Steamworks.Data.IPV4 ip
    ::Steamworks::Data::NetAddress::IPV4& dyn_ip();
    // Get instance field reference: System.UInt16 port
    uint16_t& dyn_port();
    // static System.Void InternalToString(ref Steamworks.Data.NetAddress self, System.IntPtr buf, System.UInt32 cbBuf, System.Boolean bWithPort)
    // Offset: 0xA57158
    static void InternalToString(ByRef<::Steamworks::Data::NetAddress> self, ::System::IntPtr buf, uint cbBuf, bool bWithPort);
    // public override System.String ToString()
    // Offset: 0xA57200
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Steamworks.Data.NetAddress
  #pragma pack(pop)
  static check_size<sizeof(NetAddress), 16 + sizeof(uint16_t)> __Steamworks_Data_NetAddressSizeCheck;
  static_assert(sizeof(NetAddress) == 0x12);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::NetAddress::IPV4, "Steamworks.Data", "NetAddress/IPV4");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Data::NetAddress::InternalToString
// Il2CppName: InternalToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Steamworks::Data::NetAddress>, ::System::IntPtr, uint, bool)>(&Steamworks::Data::NetAddress::InternalToString)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "NetAddress")->this_arg;
    static auto* buf = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cbBuf = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bWithPort = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::NetAddress), "InternalToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, buf, cbBuf, bWithPort});
  }
};
// Writing MetadataGetter for method: Steamworks::Data::NetAddress::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Steamworks::Data::NetAddress::*)()>(&Steamworks::Data::NetAddress::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::NetAddress), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
