// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventSystems.BaseRaycaster
#include "UnityEngine/EventSystems/BaseRaycaster.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.RaycastHit2D
#include "UnityEngine/RaycastHit2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: TrackedDeviceEventData
  class TrackedDeviceEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: TrackedDeviceGraphicRaycaster
  class TrackedDeviceGraphicRaycaster;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*, "UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceGraphicRaycaster");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster
  // [TokenAttribute] Offset: FFFFFFFF
  class TrackedDeviceGraphicRaycaster : public ::UnityEngine::EventSystems::BaseRaycaster {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData
    struct RaycastHitData;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitComparer
    class RaycastHitComparer;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitData
    // [TokenAttribute] Offset: FFFFFFFF
    struct RaycastHitData/*, public ::System::ValueType*/ {
      public:
      public:
      // private UnityEngine.UI.Graphic <graphic>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::UI::Graphic* graphic;
      // Field size check
      static_assert(sizeof(::UnityEngine::UI::Graphic*) == 0x8);
      // private UnityEngine.Vector3 <worldHitPosition>k__BackingField
      // Size: 0xC
      // Offset: 0x8
      ::UnityEngine::Vector3 worldHitPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private UnityEngine.Vector2 <screenPosition>k__BackingField
      // Size: 0x8
      // Offset: 0x14
      ::UnityEngine::Vector2 screenPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // private System.Single <distance>k__BackingField
      // Size: 0x4
      // Offset: 0x1C
      float distance;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: RaycastHitData
      constexpr RaycastHitData(::UnityEngine::UI::Graphic* graphic_ = {}, ::UnityEngine::Vector3 worldHitPosition_ = {}, ::UnityEngine::Vector2 screenPosition_ = {}, float distance_ = {}) noexcept : graphic{graphic_}, worldHitPosition{worldHitPosition_}, screenPosition{screenPosition_}, distance{distance_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private UnityEngine.UI.Graphic <graphic>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& dyn_$graphic$k__BackingField();
      // Get instance field reference: private UnityEngine.Vector3 <worldHitPosition>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$worldHitPosition$k__BackingField();
      // Get instance field reference: private UnityEngine.Vector2 <screenPosition>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$screenPosition$k__BackingField();
      // Get instance field reference: private System.Single <distance>k__BackingField
      [[deprecated("Use field access instead!")]] float& dyn_$distance$k__BackingField();
      // public UnityEngine.UI.Graphic get_graphic()
      // Offset: 0x2BAE20
      ::UnityEngine::UI::Graphic* get_graphic();
      // public System.Void set_graphic(UnityEngine.UI.Graphic value)
      // Offset: 0x2F6BE0
      void set_graphic(::UnityEngine::UI::Graphic* value);
      // public UnityEngine.Vector3 get_worldHitPosition()
      // Offset: 0x2F8650
      ::UnityEngine::Vector3 get_worldHitPosition();
      // public System.Void set_worldHitPosition(UnityEngine.Vector3 value)
      // Offset: 0x2F8690
      void set_worldHitPosition(::UnityEngine::Vector3 value);
      // public UnityEngine.Vector2 get_screenPosition()
      // Offset: 0x2F8630
      ::UnityEngine::Vector2 get_screenPosition();
      // public System.Void set_screenPosition(UnityEngine.Vector2 value)
      // Offset: 0x2F8680
      void set_screenPosition(::UnityEngine::Vector2 value);
      // public System.Single get_distance()
      // Offset: 0x2F8620
      float get_distance();
      // public System.Void set_distance(System.Single value)
      // Offset: 0x2F8670
      void set_distance(float value);
      // public System.Void .ctor(UnityEngine.UI.Graphic graphic, UnityEngine.Vector3 worldHitPosition, UnityEngine.Vector2 screenPosition, System.Single distance)
      // Offset: 0x2F85C0
      // ABORTED: conflicts with another method.  RaycastHitData(::UnityEngine::UI::Graphic* graphic, ::UnityEngine::Vector3 worldHitPosition, ::UnityEngine::Vector2 screenPosition, float distance);
    }; // UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitData
    #pragma pack(pop)
    static check_size<sizeof(TrackedDeviceGraphicRaycaster::RaycastHitData), 28 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_UI_TrackedDeviceGraphicRaycaster_RaycastHitDataSizeCheck;
    static_assert(sizeof(TrackedDeviceGraphicRaycaster::RaycastHitData) == 0x20);
    public:
    // private System.Boolean m_IgnoreReversedGraphics
    // Size: 0x1
    // Offset: 0x20
    bool m_IgnoreReversedGraphics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_CheckFor2DOcclusion
    // Size: 0x1
    // Offset: 0x21
    bool m_CheckFor2DOcclusion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_CheckFor3DOcclusion
    // Size: 0x1
    // Offset: 0x22
    bool m_CheckFor3DOcclusion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CheckFor3DOcclusion and: m_BlockingMask
    char __padding2[0x1] = {};
    // private UnityEngine.LayerMask m_BlockingMask
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::LayerMask m_BlockingMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.Canvas m_Canvas
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Canvas* m_Canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.RaycastHit[] occlusionHits3D
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::RaycastHit> occlusionHits3D;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.RaycastHit2D[] occlusionHits2D
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::RaycastHit2D> occlusionHits2D;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit2D>) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitComparer m_raycastHitComparer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitComparer* m_raycastHitComparer;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitComparer*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitData> m_RaycastResultsCache
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData>* m_RaycastResultsCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData>*) == 0x8);
    // private UnityEngine.RaycastHit[] physicsHits
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::RaycastHit> physicsHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.RaycastHit2D[] graphicHits
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::RaycastHit2D> graphicHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit2D>) == 0x8);
    public:
    // Get static field: static private readonly System.Int32 k_MaxRaycastHits
    static int _get_k_MaxRaycastHits();
    // Set static field: static private readonly System.Int32 k_MaxRaycastHits
    static void _set_k_MaxRaycastHits(int value);
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitData> s_SortedGraphics
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData>* _get_s_SortedGraphics();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitData> s_SortedGraphics
    static void _set_s_SortedGraphics(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData>* value);
    // Get static field: static private UnityEngine.Vector3[] s_Corners
    static ::ArrayW<::UnityEngine::Vector3> _get_s_Corners();
    // Set static field: static private UnityEngine.Vector3[] s_Corners
    static void _set_s_Corners(::ArrayW<::UnityEngine::Vector3> value);
    // Get instance field reference: private System.Boolean m_IgnoreReversedGraphics
    [[deprecated("Use field access instead!")]] bool& dyn_m_IgnoreReversedGraphics();
    // Get instance field reference: private System.Boolean m_CheckFor2DOcclusion
    [[deprecated("Use field access instead!")]] bool& dyn_m_CheckFor2DOcclusion();
    // Get instance field reference: private System.Boolean m_CheckFor3DOcclusion
    [[deprecated("Use field access instead!")]] bool& dyn_m_CheckFor3DOcclusion();
    // Get instance field reference: private UnityEngine.LayerMask m_BlockingMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_BlockingMask();
    // Get instance field reference: private UnityEngine.Canvas m_Canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn_m_Canvas();
    // Get instance field reference: private UnityEngine.RaycastHit[] occlusionHits3D
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_occlusionHits3D();
    // Get instance field reference: private UnityEngine.RaycastHit2D[] occlusionHits2D
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit2D>& dyn_occlusionHits2D();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitComparer m_raycastHitComparer
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitComparer*& dyn_m_raycastHitComparer();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitData> m_RaycastResultsCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData>*& dyn_m_RaycastResultsCache();
    // Get instance field reference: private UnityEngine.RaycastHit[] physicsHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_physicsHits();
    // Get instance field reference: private UnityEngine.RaycastHit2D[] graphicHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit2D>& dyn_graphicHits();
    // private UnityEngine.Canvas get_canvas()
    // Offset: 0x2FBA80
    ::UnityEngine::Canvas* get_canvas();
    // public System.Void .ctor()
    // Offset: 0x2FB920
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackedDeviceGraphicRaycaster* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackedDeviceGraphicRaycaster*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2FB870
    static void _cctor();
    // static private UnityEngine.RaycastHit FindClosestHit(UnityEngine.RaycastHit[] hits, System.Int32 count)
    // Offset: 0x2F9D00
    static ::UnityEngine::RaycastHit FindClosestHit(::ArrayW<::UnityEngine::RaycastHit> hits, int count);
    // static private UnityEngine.RaycastHit2D FindClosestHit(UnityEngine.RaycastHit2D[] hits, System.Int32 count)
    // Offset: 0x2F9E20
    static ::UnityEngine::RaycastHit2D FindClosestHit(::ArrayW<::UnityEngine::RaycastHit2D> hits, int count);
    // private System.Void PerformRaycasts(UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    // Offset: 0x2FA860
    void PerformRaycasts(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData* eventData, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList);
    // private System.Boolean PerformRaycast(UnityEngine.Vector3 from, UnityEngine.Vector3 to, UnityEngine.LayerMask layerMask, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    // Offset: 0x2F9F30
    bool PerformRaycast(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ::UnityEngine::LayerMask layerMask, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList);
    // private System.Void SortedRaycastGraphics(UnityEngine.Canvas canvas, UnityEngine.Ray ray, System.Single maxDistance, UnityEngine.LayerMask layerMask, System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster/UnityEngine.XR.Interaction.Toolkit.UI.RaycastHitData> results)
    // Offset: 0x2FB370
    void SortedRaycastGraphics(::UnityEngine::Canvas* canvas, ::UnityEngine::Ray ray, float maxDistance, ::UnityEngine::LayerMask layerMask, ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData>* results);
    // private System.Boolean RayIntersectsRectTransform(UnityEngine.RectTransform transform, UnityEngine.Ray ray, out UnityEngine.Vector3 worldPosition, out System.Single distance)
    // Offset: 0x2FAA30
    bool RayIntersectsRectTransform(::UnityEngine::RectTransform* transform, ::UnityEngine::Ray ray, ByRef<::UnityEngine::Vector3> worldPosition, ByRef<float> distance);
    // public override UnityEngine.Camera get_eventCamera()
    // Offset: 0x2FBB20
    // Implemented from: UnityEngine.EventSystems.BaseRaycaster
    // Base method: UnityEngine.Camera BaseRaycaster::get_eventCamera()
    ::UnityEngine::Camera* get_eventCamera();
    // public override System.Void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    // Offset: 0x2FB140
    // Implemented from: UnityEngine.EventSystems.BaseRaycaster
    // Base method: System.Void BaseRaycaster::Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)
    void Raycast(::UnityEngine::EventSystems::PointerEventData* eventData, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* resultAppendList);
  }; // UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceGraphicRaycaster
  #pragma pack(pop)
  static check_size<sizeof(TrackedDeviceGraphicRaycaster), 88 + sizeof(::ArrayW<::UnityEngine::RaycastHit2D>)> __UnityEngine_XR_Interaction_Toolkit_UI_TrackedDeviceGraphicRaycasterSizeCheck;
  static_assert(sizeof(TrackedDeviceGraphicRaycaster) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData, "UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceGraphicRaycaster/RaycastHitData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::get_canvas
// Il2CppName: get_canvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Canvas* (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::get_canvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "get_canvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::FindClosestHit
// Il2CppName: FindClosestHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit (*)(::ArrayW<::UnityEngine::RaycastHit>, int)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::FindClosestHit)> {
  static const MethodInfo* get() {
    static auto* hits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "FindClosestHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hits, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::FindClosestHit
// Il2CppName: FindClosestHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (*)(::ArrayW<::UnityEngine::RaycastHit2D>, int)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::FindClosestHit)> {
  static const MethodInfo* get() {
    static auto* hits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "FindClosestHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hits, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::PerformRaycasts
// Il2CppName: PerformRaycasts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::*)(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceEventData*, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::PerformRaycasts)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceEventData")->byval_arg;
    static auto* resultAppendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "PerformRaycasts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, resultAppendList});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::PerformRaycast
// Il2CppName: PerformRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::LayerMask, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::PerformRaycast)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* resultAppendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "PerformRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, layerMask, resultAppendList});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::SortedRaycastGraphics
// Il2CppName: SortedRaycastGraphics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::*)(::UnityEngine::Canvas*, ::UnityEngine::Ray, float, ::UnityEngine::LayerMask, ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RaycastHitData>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::SortedRaycastGraphics)> {
  static const MethodInfo* get() {
    static auto* canvas = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas")->byval_arg;
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceGraphicRaycaster/RaycastHitData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "SortedRaycastGraphics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvas, ray, maxDistance, layerMask, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RayIntersectsRectTransform
// Il2CppName: RayIntersectsRectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::*)(::UnityEngine::RectTransform*, ::UnityEngine::Ray, ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::RayIntersectsRectTransform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "RayIntersectsRectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ray, worldPosition, distance});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::get_eventCamera
// Il2CppName: get_eventCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::get_eventCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "get_eventCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::*)(::UnityEngine::EventSystems::PointerEventData*, ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster::Raycast)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    static auto* resultAppendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceGraphicRaycaster*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, resultAppendList});
  }
};
