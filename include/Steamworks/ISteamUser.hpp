// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.SteamInterface
#include "Steamworks/SteamInterface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Forward declaring namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: SteamId
  struct SteamId;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: ISteamUser
  class ISteamUser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::ISteamUser);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::ISteamUser*, "Steamworks", "ISteamUser");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.ISteamUser
  // [TokenAttribute] Offset: FFFFFFFF
  class ISteamUser : public ::Steamworks::SteamInterface {
    public:
    // System.Void .ctor(System.Boolean IsGameServer)
    // Offset: 0xE38238
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ISteamUser* New_ctor(bool IsGameServer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::ISteamUser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ISteamUser*, creationType>(IsGameServer)));
    }
    // static System.IntPtr SteamAPI_SteamUser_v020()
    // Offset: 0xE38268
    static ::System::IntPtr SteamAPI_SteamUser_v020();
    // static private Steamworks.SteamId _GetSteamID(System.IntPtr self)
    // Offset: 0xE382E0
    static ::Steamworks::SteamId _GetSteamID(::System::IntPtr self);
    // Steamworks.SteamId GetSteamID()
    // Offset: 0xE38360
    ::Steamworks::SteamId GetSteamID();
    // static private System.UInt32 _GetVoiceOptimalSampleRate(System.IntPtr self)
    // Offset: 0xE38368
    static uint _GetVoiceOptimalSampleRate(::System::IntPtr self);
    // System.UInt32 GetVoiceOptimalSampleRate()
    // Offset: 0xE383E8
    uint GetVoiceOptimalSampleRate();
    // public override System.IntPtr GetUserInterfacePointer()
    // Offset: 0xE382DC
    // Implemented from: Steamworks.SteamInterface
    // Base method: System.IntPtr SteamInterface::GetUserInterfacePointer()
    ::System::IntPtr GetUserInterfacePointer();
  }; // Steamworks.ISteamUser
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::ISteamUser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::ISteamUser::SteamAPI_SteamUser_v020
// Il2CppName: SteamAPI_SteamUser_v020
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Steamworks::ISteamUser::SteamAPI_SteamUser_v020)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamUser*), "SteamAPI_SteamUser_v020", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamUser::_GetSteamID
// Il2CppName: _GetSteamID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::SteamId (*)(::System::IntPtr)>(&Steamworks::ISteamUser::_GetSteamID)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamUser*), "_GetSteamID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamUser::GetSteamID
// Il2CppName: GetSteamID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::SteamId (Steamworks::ISteamUser::*)()>(&Steamworks::ISteamUser::GetSteamID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamUser*), "GetSteamID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamUser::_GetVoiceOptimalSampleRate
// Il2CppName: _GetVoiceOptimalSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::IntPtr)>(&Steamworks::ISteamUser::_GetVoiceOptimalSampleRate)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamUser*), "_GetVoiceOptimalSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamUser::GetVoiceOptimalSampleRate
// Il2CppName: GetVoiceOptimalSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Steamworks::ISteamUser::*)()>(&Steamworks::ISteamUser::GetVoiceOptimalSampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamUser*), "GetVoiceOptimalSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamUser::GetUserInterfacePointer
// Il2CppName: GetUserInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::ISteamUser::*)()>(&Steamworks::ISteamUser::GetUserInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamUser*), "GetUserInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
