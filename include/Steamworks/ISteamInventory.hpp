// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.SteamInterface
#include "Steamworks/SteamInterface.hpp"
// Including type: Steamworks.Data.SteamItemDetails_t
#include "Steamworks/Data/SteamItemDetails_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Forward declaring namespace: Steamworks::Data
namespace Steamworks::Data {
  // Forward declaring type: SteamInventoryResult_t
  struct SteamInventoryResult_t;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: ISteamInventory
  class ISteamInventory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::ISteamInventory);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::ISteamInventory*, "Steamworks", "ISteamInventory");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.ISteamInventory
  // [TokenAttribute] Offset: FFFFFFFF
  class ISteamInventory : public ::Steamworks::SteamInterface {
    public:
    // System.Void .ctor(System.Boolean IsGameServer)
    // Offset: 0xE37060
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ISteamInventory* New_ctor(bool IsGameServer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::ISteamInventory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ISteamInventory*, creationType>(IsGameServer)));
    }
    // static System.IntPtr SteamAPI_SteamInventory_v003()
    // Offset: 0xE37090
    static ::System::IntPtr SteamAPI_SteamInventory_v003();
    // static System.IntPtr SteamAPI_SteamGameServerInventory_v003()
    // Offset: 0xE37108
    static ::System::IntPtr SteamAPI_SteamGameServerInventory_v003();
    // static private System.Boolean _GetResultItems(System.IntPtr self, Steamworks.Data.SteamInventoryResult_t resultHandle, in Steamworks.Data.SteamItemDetails_t[] pOutItemsArray, ref System.UInt32 punOutItemsArraySize)
    // Offset: 0xE37180
    static bool _GetResultItems(::System::IntPtr self, ::Steamworks::Data::SteamInventoryResult_t resultHandle, ByRef<::ArrayW<::Steamworks::Data::SteamItemDetails_t>> pOutItemsArray, ByRef<uint> punOutItemsArraySize);
    // System.Boolean GetResultItems(Steamworks.Data.SteamInventoryResult_t resultHandle, in Steamworks.Data.SteamItemDetails_t[] pOutItemsArray, ref System.UInt32 punOutItemsArraySize)
    // Offset: 0xE37238
    bool GetResultItems(::Steamworks::Data::SteamInventoryResult_t resultHandle, ByRef<::ArrayW<::Steamworks::Data::SteamItemDetails_t>> pOutItemsArray, ByRef<uint> punOutItemsArraySize);
    // static private System.Boolean _GetResultItemProperty(System.IntPtr self, Steamworks.Data.SteamInventoryResult_t resultHandle, System.UInt32 unItemIndex, System.String pchPropertyName, System.IntPtr pchValueBuffer, ref System.UInt32 punValueBufferSizeOut)
    // Offset: 0xE37244
    static bool _GetResultItemProperty(::System::IntPtr self, ::Steamworks::Data::SteamInventoryResult_t resultHandle, uint unItemIndex, ::StringW pchPropertyName, ::System::IntPtr pchValueBuffer, ByRef<uint> punValueBufferSizeOut);
    // System.Boolean GetResultItemProperty(Steamworks.Data.SteamInventoryResult_t resultHandle, System.UInt32 unItemIndex, System.String pchPropertyName, out System.String pchValueBuffer, ref System.UInt32 punValueBufferSizeOut)
    // Offset: 0xE37324
    bool GetResultItemProperty(::Steamworks::Data::SteamInventoryResult_t resultHandle, uint unItemIndex, ::StringW pchPropertyName, ByRef<::StringW> pchValueBuffer, ByRef<uint> punValueBufferSizeOut);
    // static private System.Void _DestroyResult(System.IntPtr self, Steamworks.Data.SteamInventoryResult_t resultHandle)
    // Offset: 0xE373A8
    static void _DestroyResult(::System::IntPtr self, ::Steamworks::Data::SteamInventoryResult_t resultHandle);
    // System.Void DestroyResult(Steamworks.Data.SteamInventoryResult_t resultHandle)
    // Offset: 0xE37438
    void DestroyResult(::Steamworks::Data::SteamInventoryResult_t resultHandle);
    // static private System.Boolean _GetItemDefinitionIDs(System.IntPtr self, in Steamworks.Data.InventoryDefId[] pItemDefIDs, ref System.UInt32 punItemDefIDsArraySize)
    // Offset: 0xE37444
    static bool _GetItemDefinitionIDs(::System::IntPtr self, ByRef<::ArrayW<::Steamworks::Data::InventoryDefId>> pItemDefIDs, ByRef<uint> punItemDefIDsArraySize);
    // System.Boolean GetItemDefinitionIDs(in Steamworks.Data.InventoryDefId[] pItemDefIDs, ref System.UInt32 punItemDefIDsArraySize)
    // Offset: 0xE374EC
    bool GetItemDefinitionIDs(ByRef<::ArrayW<::Steamworks::Data::InventoryDefId>> pItemDefIDs, ByRef<uint> punItemDefIDsArraySize);
    // public override System.IntPtr GetUserInterfacePointer()
    // Offset: 0xE37104
    // Implemented from: Steamworks.SteamInterface
    // Base method: System.IntPtr SteamInterface::GetUserInterfacePointer()
    ::System::IntPtr GetUserInterfacePointer();
    // public override System.IntPtr GetServerInterfacePointer()
    // Offset: 0xE3717C
    // Implemented from: Steamworks.SteamInterface
    // Base method: System.IntPtr SteamInterface::GetServerInterfacePointer()
    ::System::IntPtr GetServerInterfacePointer();
  }; // Steamworks.ISteamInventory
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::ISteamInventory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::ISteamInventory::SteamAPI_SteamInventory_v003
// Il2CppName: SteamAPI_SteamInventory_v003
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Steamworks::ISteamInventory::SteamAPI_SteamInventory_v003)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "SteamAPI_SteamInventory_v003", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::SteamAPI_SteamGameServerInventory_v003
// Il2CppName: SteamAPI_SteamGameServerInventory_v003
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Steamworks::ISteamInventory::SteamAPI_SteamGameServerInventory_v003)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "SteamAPI_SteamGameServerInventory_v003", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::_GetResultItems
// Il2CppName: _GetResultItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::Steamworks::Data::SteamInventoryResult_t, ByRef<::ArrayW<::Steamworks::Data::SteamItemDetails_t>>, ByRef<uint>)>(&Steamworks::ISteamInventory::_GetResultItems)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* resultHandle = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamInventoryResult_t")->byval_arg;
    static auto* pOutItemsArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamItemDetails_t"), 1)->this_arg;
    static auto* punOutItemsArraySize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "_GetResultItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, resultHandle, pOutItemsArray, punOutItemsArraySize});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::GetResultItems
// Il2CppName: GetResultItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Steamworks::ISteamInventory::*)(::Steamworks::Data::SteamInventoryResult_t, ByRef<::ArrayW<::Steamworks::Data::SteamItemDetails_t>>, ByRef<uint>)>(&Steamworks::ISteamInventory::GetResultItems)> {
  static const MethodInfo* get() {
    static auto* resultHandle = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamInventoryResult_t")->byval_arg;
    static auto* pOutItemsArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamItemDetails_t"), 1)->this_arg;
    static auto* punOutItemsArraySize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "GetResultItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultHandle, pOutItemsArray, punOutItemsArraySize});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::_GetResultItemProperty
// Il2CppName: _GetResultItemProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::Steamworks::Data::SteamInventoryResult_t, uint, ::StringW, ::System::IntPtr, ByRef<uint>)>(&Steamworks::ISteamInventory::_GetResultItemProperty)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* resultHandle = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamInventoryResult_t")->byval_arg;
    static auto* unItemIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pchPropertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchValueBuffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* punValueBufferSizeOut = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "_GetResultItemProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, punValueBufferSizeOut});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::GetResultItemProperty
// Il2CppName: GetResultItemProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Steamworks::ISteamInventory::*)(::Steamworks::Data::SteamInventoryResult_t, uint, ::StringW, ByRef<::StringW>, ByRef<uint>)>(&Steamworks::ISteamInventory::GetResultItemProperty)> {
  static const MethodInfo* get() {
    static auto* resultHandle = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamInventoryResult_t")->byval_arg;
    static auto* unItemIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pchPropertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pchValueBuffer = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* punValueBufferSizeOut = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "GetResultItemProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, punValueBufferSizeOut});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::_DestroyResult
// Il2CppName: _DestroyResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::Steamworks::Data::SteamInventoryResult_t)>(&Steamworks::ISteamInventory::_DestroyResult)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* resultHandle = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamInventoryResult_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "_DestroyResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, resultHandle});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::DestroyResult
// Il2CppName: DestroyResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::ISteamInventory::*)(::Steamworks::Data::SteamInventoryResult_t)>(&Steamworks::ISteamInventory::DestroyResult)> {
  static const MethodInfo* get() {
    static auto* resultHandle = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "SteamInventoryResult_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "DestroyResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultHandle});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::_GetItemDefinitionIDs
// Il2CppName: _GetItemDefinitionIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ByRef<::ArrayW<::Steamworks::Data::InventoryDefId>>, ByRef<uint>)>(&Steamworks::ISteamInventory::_GetItemDefinitionIDs)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pItemDefIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Steamworks.Data", "InventoryDefId"), 1)->this_arg;
    static auto* punItemDefIDsArraySize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "_GetItemDefinitionIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, pItemDefIDs, punItemDefIDsArraySize});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::GetItemDefinitionIDs
// Il2CppName: GetItemDefinitionIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Steamworks::ISteamInventory::*)(ByRef<::ArrayW<::Steamworks::Data::InventoryDefId>>, ByRef<uint>)>(&Steamworks::ISteamInventory::GetItemDefinitionIDs)> {
  static const MethodInfo* get() {
    static auto* pItemDefIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Steamworks.Data", "InventoryDefId"), 1)->this_arg;
    static auto* punItemDefIDsArraySize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "GetItemDefinitionIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pItemDefIDs, punItemDefIDsArraySize});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::GetUserInterfacePointer
// Il2CppName: GetUserInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::ISteamInventory::*)()>(&Steamworks::ISteamInventory::GetUserInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "GetUserInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamInventory::GetServerInterfacePointer
// Il2CppName: GetServerInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::ISteamInventory::*)()>(&Steamworks::ISteamInventory::GetServerInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamInventory*), "GetServerInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
