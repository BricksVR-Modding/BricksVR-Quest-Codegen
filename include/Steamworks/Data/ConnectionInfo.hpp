// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Steamworks.Data.NetIdentity
#include "Steamworks/Data/NetIdentity.hpp"
// Including type: Steamworks.Data.Socket
#include "Steamworks/Data/Socket.hpp"
// Including type: Steamworks.Data.SteamNetworkingPOPID
#include "Steamworks/Data/SteamNetworkingPOPID.hpp"
// Including type: Steamworks.ConnectionState
#include "Steamworks/ConnectionState.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Forward declaring type: ConnectionInfo
  struct ConnectionInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::Data::ConnectionInfo, "Steamworks.Data", "ConnectionInfo");
// Type namespace: Steamworks.Data
namespace Steamworks::Data {
  // Size: 0xC8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Steamworks.Data.ConnectionInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct ConnectionInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // Steamworks.Data.NetIdentity identity
    // Size: 0x1A
    // Offset: 0x0
    ::Steamworks::Data::NetIdentity identity;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::NetIdentity) == 0x1A);
    // Padding between fields: identity and: userData
    char __padding0[0x6E] = {};
    // System.Int64 userData
    // Size: 0x8
    // Offset: 0x88
    int64_t userData;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // Steamworks.Data.Socket listenSocket
    // Size: 0x4
    // Offset: 0x90
    ::Steamworks::Data::Socket listenSocket;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::Socket) == 0x4);
    // Steamworks.Data.NetAddress address
    // Size: 0x12
    // Offset: 0x94
    ::Steamworks::Data::NetAddress address;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::NetAddress) == 0x12);
    // System.UInt16 pad
    // Size: 0x2
    // Offset: 0xA6
    uint16_t pad;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Steamworks.Data.SteamNetworkingPOPID popRemote
    // Size: 0x4
    // Offset: 0xA8
    ::Steamworks::Data::SteamNetworkingPOPID popRemote;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::SteamNetworkingPOPID) == 0x4);
    // Steamworks.Data.SteamNetworkingPOPID popRelay
    // Size: 0x4
    // Offset: 0xAC
    ::Steamworks::Data::SteamNetworkingPOPID popRelay;
    // Field size check
    static_assert(sizeof(::Steamworks::Data::SteamNetworkingPOPID) == 0x4);
    // Steamworks.ConnectionState state
    // Size: 0x4
    // Offset: 0xB0
    ::Steamworks::ConnectionState state;
    // Field size check
    static_assert(sizeof(::Steamworks::ConnectionState) == 0x4);
    // System.Int32 endReason
    // Size: 0x4
    // Offset: 0xB4
    int endReason;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.String endDebug
    // Size: 0x8
    // Offset: 0xB8
    ::StringW endDebug;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String connectionDescription
    // Size: 0x8
    // Offset: 0xC0
    ::StringW connectionDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: ConnectionInfo
    constexpr ConnectionInfo(::Steamworks::Data::NetIdentity identity_ = {}, int64_t userData_ = {}, ::Steamworks::Data::Socket listenSocket_ = {}, ::Steamworks::Data::NetAddress address_ = {}, uint16_t pad_ = {}, ::Steamworks::Data::SteamNetworkingPOPID popRemote_ = {}, ::Steamworks::Data::SteamNetworkingPOPID popRelay_ = {}, ::Steamworks::ConnectionState state_ = {}, int endReason_ = {}, ::StringW endDebug_ = {}, ::StringW connectionDescription_ = {}) noexcept : identity{identity_}, userData{userData_}, listenSocket{listenSocket_}, address{address_}, pad{pad_}, popRemote{popRemote_}, popRelay{popRelay_}, state{state_}, endReason{endReason_}, endDebug{endDebug_}, connectionDescription{connectionDescription_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Steamworks.Data.NetIdentity identity
    [[deprecated]] ::Steamworks::Data::NetIdentity& dyn_identity();
    // Get instance field reference: System.Int64 userData
    [[deprecated]] int64_t& dyn_userData();
    // Get instance field reference: Steamworks.Data.Socket listenSocket
    [[deprecated]] ::Steamworks::Data::Socket& dyn_listenSocket();
    // Get instance field reference: Steamworks.Data.NetAddress address
    [[deprecated]] ::Steamworks::Data::NetAddress& dyn_address();
    // Get instance field reference: System.UInt16 pad
    [[deprecated]] uint16_t& dyn_pad();
    // Get instance field reference: Steamworks.Data.SteamNetworkingPOPID popRemote
    [[deprecated]] ::Steamworks::Data::SteamNetworkingPOPID& dyn_popRemote();
    // Get instance field reference: Steamworks.Data.SteamNetworkingPOPID popRelay
    [[deprecated]] ::Steamworks::Data::SteamNetworkingPOPID& dyn_popRelay();
    // Get instance field reference: Steamworks.ConnectionState state
    [[deprecated]] ::Steamworks::ConnectionState& dyn_state();
    // Get instance field reference: System.Int32 endReason
    [[deprecated]] int& dyn_endReason();
    // Get instance field reference: System.String endDebug
    [[deprecated]] ::StringW& dyn_endDebug();
    // Get instance field reference: System.String connectionDescription
    [[deprecated]] ::StringW& dyn_connectionDescription();
    // public Steamworks.ConnectionState get_State()
    // Offset: 0x2F6A90
    ::Steamworks::ConnectionState get_State();
  }; // Steamworks.Data.ConnectionInfo
  #pragma pack(pop)
  static check_size<sizeof(ConnectionInfo), 192 + sizeof(::StringW)> __Steamworks_Data_ConnectionInfoSizeCheck;
  static_assert(sizeof(ConnectionInfo) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::Data::ConnectionInfo::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Steamworks::ConnectionState (Steamworks::Data::ConnectionInfo::*)()>(&Steamworks::Data::ConnectionInfo::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::Data::ConnectionInfo), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
