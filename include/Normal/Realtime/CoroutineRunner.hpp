// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: CoroutineRunner
  class CoroutineRunner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::CoroutineRunner);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::CoroutineRunner*, "Normal.Realtime", "CoroutineRunner");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.CoroutineRunner
  // [TokenAttribute] Offset: FFFFFFFF
  class CoroutineRunner : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Normal::Realtime::CoroutineRunner::CoroutineContext
    class CoroutineContext;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Collections.Generic.HashSet`1<Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext> _activeCoroutines
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::HashSet_1<::Normal::Realtime::CoroutineRunner::CoroutineContext*>* activeCoroutines;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Normal::Realtime::CoroutineRunner::CoroutineContext*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext> _activeCoroutines
    ::System::Collections::Generic::HashSet_1<::Normal::Realtime::CoroutineRunner::CoroutineContext*>*& dyn__activeCoroutines();
    // public Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext RunCoroutine(Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext coroutineContext)
    // Offset: 0xAE6A70
    ::Normal::Realtime::CoroutineRunner::CoroutineContext* RunCoroutine(::Normal::Realtime::CoroutineRunner::CoroutineContext* coroutineContext);
    // private System.Void CoroutineCompletedOrCancelled(Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext coroutineContext)
    // Offset: 0xAE6D44
    void CoroutineCompletedOrCancelled(::Normal::Realtime::CoroutineRunner::CoroutineContext* coroutineContext);
    // private System.Void OnDestroy()
    // Offset: 0xAE6DAC
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0xAE6EBC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CoroutineRunner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::CoroutineRunner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CoroutineRunner*, creationType>()));
    }
  }; // Normal.Realtime.CoroutineRunner
  #pragma pack(pop)
  static check_size<sizeof(CoroutineRunner), 24 + sizeof(::System::Collections::Generic::HashSet_1<::Normal::Realtime::CoroutineRunner::CoroutineContext*>*)> __Normal_Realtime_CoroutineRunnerSizeCheck;
  static_assert(sizeof(CoroutineRunner) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::RunCoroutine
// Il2CppName: RunCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::CoroutineRunner::CoroutineContext* (Normal::Realtime::CoroutineRunner::*)(::Normal::Realtime::CoroutineRunner::CoroutineContext*)>(&Normal::Realtime::CoroutineRunner::RunCoroutine)> {
  static const MethodInfo* get() {
    static auto* coroutineContext = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "CoroutineRunner/CoroutineContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner*), "RunCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coroutineContext});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::CoroutineCompletedOrCancelled
// Il2CppName: CoroutineCompletedOrCancelled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::*)(::Normal::Realtime::CoroutineRunner::CoroutineContext*)>(&Normal::Realtime::CoroutineRunner::CoroutineCompletedOrCancelled)> {
  static const MethodInfo* get() {
    static auto* coroutineContext = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "CoroutineRunner/CoroutineContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner*), "CoroutineCompletedOrCancelled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coroutineContext});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::CoroutineRunner::*)()>(&Normal::Realtime::CoroutineRunner::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::CoroutineRunner*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::CoroutineRunner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
