// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BrickAttach
  class BrickAttach;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LegoConnectorScript
  class LegoConnectorScript;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LegoConnectorScript);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LegoConnectorScript*, "", "LegoConnectorScript");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: LegoConnectorScript
  // [TokenAttribute] Offset: FFFFFFFF
  class LegoConnectorScript : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LegoConnectorScript::$$c
    class $$c;
    public:
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> connectorsCollidingWith
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* connectorsCollidingWith;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Boolean female
    // Size: 0x1
    // Offset: 0x20
    bool female;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: female and: otherLabel
    char __padding1[0x7] = {};
    // private System.String _otherLabel
    // Size: 0x8
    // Offset: 0x28
    ::StringW otherLabel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Collider[] _colliderBuffer
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Collider*> colliderBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.BoxCollider _collider
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::BoxCollider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // private UnityEngine.GameObject _brick
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* brick;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private BrickAttach _brickAttach
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::BrickAttach* brickAttach;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BrickAttach*) == 0x8);
    // public System.Boolean covered
    // Size: 0x1
    // Offset: 0x50
    bool covered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean outOfRenderDistance
    // Size: 0x1
    // Offset: 0x51
    bool outOfRenderDistance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean placed
    // Size: 0x1
    // Offset: 0x52
    bool placed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: placed and: uuid
    char __padding9[0x5] = {};
    // private System.String _uuid
    // Size: 0x8
    // Offset: 0x58
    ::StringW uuid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> connectorsCollidingWith
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_connectorsCollidingWith();
    // Get instance field reference: public System.Boolean female
    [[deprecated("Use field access instead!")]] bool& dyn_female();
    // Get instance field reference: private System.String _otherLabel
    [[deprecated("Use field access instead!")]] ::StringW& dyn__otherLabel();
    // Get instance field reference: private UnityEngine.Collider[] _colliderBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__colliderBuffer();
    // Get instance field reference: private UnityEngine.BoxCollider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn__collider();
    // Get instance field reference: private UnityEngine.GameObject _brick
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__brick();
    // Get instance field reference: private BrickAttach _brickAttach
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BrickAttach*& dyn__brickAttach();
    // Get instance field reference: public System.Boolean covered
    [[deprecated("Use field access instead!")]] bool& dyn_covered();
    // Get instance field reference: public System.Boolean outOfRenderDistance
    [[deprecated("Use field access instead!")]] bool& dyn_outOfRenderDistance();
    // Get instance field reference: public System.Boolean placed
    [[deprecated("Use field access instead!")]] bool& dyn_placed();
    // Get instance field reference: private System.String _uuid
    [[deprecated("Use field access instead!")]] ::StringW& dyn__uuid();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LegoConnectorScript* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegoConnectorScript::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LegoConnectorScript*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x6BC190
    void Awake();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x6BCCD0
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x6BCD90
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public UnityEngine.GameObject ClosestConnector()
    // Offset: 0x6BC800
    ::UnityEngine::GameObject* ClosestConnector();
    // static private UnityEngine.Vector3 GetConnectorPosFromCollider(UnityEngine.GameObject connector)
    // Offset: 0x6BCC10
    static ::UnityEngine::Vector3 GetConnectorPosFromCollider(::UnityEngine::GameObject* connector);
    // public System.Void RecalculateEnabled()
    // Offset: 0x6BCE30
    void RecalculateEnabled();
    // private System.Void EnableConnector()
    // Offset: 0x6BCBE0
    void EnableConnector();
    // private System.Void DisableConnector()
    // Offset: 0x6BCBB0
    void DisableConnector();
    // public System.Void SetOutOfRenderDistance(System.Boolean isOutOfRenderDistance)
    // Offset: 0x6BCF30
    void SetOutOfRenderDistance(bool isOutOfRenderDistance);
    // private System.Void SetConnectorColliderEnabled()
    // Offset: 0x6BCEF0
    void SetConnectorColliderEnabled();
    // public UnityEngine.GameObject BrickCollidingWith(System.String allowedUuids)
    // Offset: 0x6BC340
    ::UnityEngine::GameObject* BrickCollidingWith(::StringW allowedUuids);
    // public System.String Uuid()
    // Offset: 0x6BCF70
    ::StringW Uuid();
  }; // LegoConnectorScript
  #pragma pack(pop)
  static check_size<sizeof(LegoConnectorScript), 88 + sizeof(::StringW)> __GlobalNamespace_LegoConnectorScriptSizeCheck;
  static_assert(sizeof(LegoConnectorScript) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)()>(&GlobalNamespace::LegoConnectorScript::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)(::UnityEngine::Collider*)>(&GlobalNamespace::LegoConnectorScript::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)(::UnityEngine::Collider*)>(&GlobalNamespace::LegoConnectorScript::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::ClosestConnector
// Il2CppName: ClosestConnector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::LegoConnectorScript::*)()>(&GlobalNamespace::LegoConnectorScript::ClosestConnector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "ClosestConnector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::GetConnectorPosFromCollider
// Il2CppName: GetConnectorPosFromCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LegoConnectorScript::GetConnectorPosFromCollider)> {
  static const MethodInfo* get() {
    static auto* connector = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "GetConnectorPosFromCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connector});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::RecalculateEnabled
// Il2CppName: RecalculateEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)()>(&GlobalNamespace::LegoConnectorScript::RecalculateEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "RecalculateEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::EnableConnector
// Il2CppName: EnableConnector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)()>(&GlobalNamespace::LegoConnectorScript::EnableConnector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "EnableConnector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::DisableConnector
// Il2CppName: DisableConnector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)()>(&GlobalNamespace::LegoConnectorScript::DisableConnector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "DisableConnector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::SetOutOfRenderDistance
// Il2CppName: SetOutOfRenderDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)(bool)>(&GlobalNamespace::LegoConnectorScript::SetOutOfRenderDistance)> {
  static const MethodInfo* get() {
    static auto* isOutOfRenderDistance = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "SetOutOfRenderDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOutOfRenderDistance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::SetConnectorColliderEnabled
// Il2CppName: SetConnectorColliderEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LegoConnectorScript::*)()>(&GlobalNamespace::LegoConnectorScript::SetConnectorColliderEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "SetConnectorColliderEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::BrickCollidingWith
// Il2CppName: BrickCollidingWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::LegoConnectorScript::*)(::StringW)>(&GlobalNamespace::LegoConnectorScript::BrickCollidingWith)> {
  static const MethodInfo* get() {
    static auto* allowedUuids = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "BrickCollidingWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allowedUuids});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LegoConnectorScript::Uuid
// Il2CppName: Uuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LegoConnectorScript::*)()>(&GlobalNamespace::LegoConnectorScript::Uuid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LegoConnectorScript*), "Uuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
