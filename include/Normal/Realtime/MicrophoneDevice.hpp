// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: MicrophoneDevice
  class MicrophoneDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::MicrophoneDevice);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::MicrophoneDevice*, "Normal.Realtime", "MicrophoneDevice");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.MicrophoneDevice
  // [TokenAttribute] Offset: FFFFFFFF
  class MicrophoneDevice : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.AudioClip _microphone
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AudioClip* microphone;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.String _deviceName
    // Size: 0x8
    // Offset: 0x18
    ::StringW deviceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _sampleRate
    // Size: 0x4
    // Offset: 0x20
    int sampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _numberOfChannels
    // Size: 0x4
    // Offset: 0x24
    int numberOfChannels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _sampleCount
    // Size: 0x4
    // Offset: 0x28
    int sampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private Normal.Realtime.MicrophoneDevice <sharedMicrophone>k__BackingField
    static ::Normal::Realtime::MicrophoneDevice* _get_$sharedMicrophone$k__BackingField();
    // Set static field: static private Normal.Realtime.MicrophoneDevice <sharedMicrophone>k__BackingField
    static void _set_$sharedMicrophone$k__BackingField(::Normal::Realtime::MicrophoneDevice* value);
    // Get instance field reference: private UnityEngine.AudioClip _microphone
    ::UnityEngine::AudioClip*& dyn__microphone();
    // Get instance field reference: private System.String _deviceName
    ::StringW& dyn__deviceName();
    // Get instance field reference: private System.Int32 _sampleRate
    int& dyn__sampleRate();
    // Get instance field reference: private System.Int32 _numberOfChannels
    int& dyn__numberOfChannels();
    // Get instance field reference: private System.Int32 _sampleCount
    int& dyn__sampleCount();
    // static public Normal.Realtime.MicrophoneDevice get_sharedMicrophone()
    // Offset: 0xFEE534
    static ::Normal::Realtime::MicrophoneDevice* get_sharedMicrophone();
    // static private System.Void set_sharedMicrophone(Normal.Realtime.MicrophoneDevice value)
    // Offset: 0xFEE584
    static void set_sharedMicrophone(::Normal::Realtime::MicrophoneDevice* value);
    // public System.Int32 get_sampleRate()
    // Offset: 0xFEE5D8
    int get_sampleRate();
    // public System.Int32 get_numberOfChannels()
    // Offset: 0xFEE5E0
    int get_numberOfChannels();
    // public System.Int32 get_deviceWriteHeadPosition()
    // Offset: 0xFED600
    int get_deviceWriteHeadPosition();
    // public System.Int32 get_deviceBufferSampleCount()
    // Offset: 0xFEE5E8
    int get_deviceBufferSampleCount();
    // private System.Void .ctor(System.String deviceName, UnityEngine.AudioClip microphone)
    // Offset: 0xFEE70C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicrophoneDevice* New_ctor(::StringW deviceName, ::UnityEngine::AudioClip* microphone) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::MicrophoneDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicrophoneDevice*, creationType>(deviceName, microphone)));
    }
    // static public Normal.Realtime.MicrophoneDevice Start(System.String deviceName)
    // Offset: 0xFEE5F0
    static ::Normal::Realtime::MicrophoneDevice* Start(::StringW deviceName);
    // public System.Void Dispose()
    // Offset: 0xFEE96C
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0xFEE8B4
    void Dispose(bool disposing);
    // public System.Boolean GetBufferData(System.Single[] buffer, System.Int32 offsetSamples)
    // Offset: 0xFED890
    bool GetBufferData(::ArrayW<float> buffer, int offsetSamples);
    // protected override System.Void Finalize()
    // Offset: 0xFEE7C4
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Normal.Realtime.MicrophoneDevice
  #pragma pack(pop)
  static check_size<sizeof(MicrophoneDevice), 40 + sizeof(int)> __Normal_Realtime_MicrophoneDeviceSizeCheck;
  static_assert(sizeof(MicrophoneDevice) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::get_sharedMicrophone
// Il2CppName: get_sharedMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::MicrophoneDevice* (*)()>(&Normal::Realtime::MicrophoneDevice::get_sharedMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "get_sharedMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::set_sharedMicrophone
// Il2CppName: set_sharedMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Normal::Realtime::MicrophoneDevice*)>(&Normal::Realtime::MicrophoneDevice::set_sharedMicrophone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "MicrophoneDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "set_sharedMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::get_sampleRate
// Il2CppName: get_sampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::MicrophoneDevice::*)()>(&Normal::Realtime::MicrophoneDevice::get_sampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "get_sampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::get_numberOfChannels
// Il2CppName: get_numberOfChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::MicrophoneDevice::*)()>(&Normal::Realtime::MicrophoneDevice::get_numberOfChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "get_numberOfChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::get_deviceWriteHeadPosition
// Il2CppName: get_deviceWriteHeadPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::MicrophoneDevice::*)()>(&Normal::Realtime::MicrophoneDevice::get_deviceWriteHeadPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "get_deviceWriteHeadPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::get_deviceBufferSampleCount
// Il2CppName: get_deviceBufferSampleCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::MicrophoneDevice::*)()>(&Normal::Realtime::MicrophoneDevice::get_deviceBufferSampleCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "get_deviceBufferSampleCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::MicrophoneDevice* (*)(::StringW)>(&Normal::Realtime::MicrophoneDevice::Start)> {
  static const MethodInfo* get() {
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceName});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::MicrophoneDevice::*)()>(&Normal::Realtime::MicrophoneDevice::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::MicrophoneDevice::*)(bool)>(&Normal::Realtime::MicrophoneDevice::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::GetBufferData
// Il2CppName: GetBufferData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::MicrophoneDevice::*)(::ArrayW<float>, int)>(&Normal::Realtime::MicrophoneDevice::GetBufferData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* offsetSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "GetBufferData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offsetSamples});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::MicrophoneDevice::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::MicrophoneDevice::*)()>(&Normal::Realtime::MicrophoneDevice::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::MicrophoneDevice*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
