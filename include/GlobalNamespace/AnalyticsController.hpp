// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NormalSessionManager
  class NormalSessionManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AnalyticsController
  class AnalyticsController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AnalyticsController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AnalyticsController*, "", "AnalyticsController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: AnalyticsController
  // [TokenAttribute] Offset: FFFFFFFF
  class AnalyticsController : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public NormalSessionManager normalSessionManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::NormalSessionManager* normalSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NormalSessionManager*) == 0x8);
    // private System.Single _nextUpdate
    // Size: 0x4
    // Offset: 0x20
    float nextUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public NormalSessionManager normalSessionManager
    ::GlobalNamespace::NormalSessionManager*& dyn_normalSessionManager();
    // Get instance field reference: private System.Single _nextUpdate
    float& dyn__nextUpdate();
    // private System.Void Update()
    // Offset: 0x10C7924
    void Update();
    // private System.String AnalyticsUrl(System.String userId, System.String roomName, System.String token, System.String minorVersion)
    // Offset: 0x10C7AA8
    ::StringW AnalyticsUrl(::StringW userId, ::StringW roomName, ::StringW token, ::StringW minorVersion);
    // private System.String AnalyticsToken(System.String uuid, System.String roomCode)
    // Offset: 0x10C7A34
    ::StringW AnalyticsToken(::StringW uuid, ::StringW roomCode);
    // static private System.String Sha1(System.String str)
    // Offset: 0x10C7CB0
    static ::StringW Sha1(::StringW str);
    // public System.Void .ctor()
    // Offset: 0x10C7E2C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnalyticsController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnalyticsController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnalyticsController*, creationType>()));
    }
  }; // AnalyticsController
  #pragma pack(pop)
  static check_size<sizeof(AnalyticsController), 32 + sizeof(float)> __GlobalNamespace_AnalyticsControllerSizeCheck;
  static_assert(sizeof(AnalyticsController) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AnalyticsController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnalyticsController::*)()>(&GlobalNamespace::AnalyticsController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnalyticsController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnalyticsController::AnalyticsUrl
// Il2CppName: AnalyticsUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::AnalyticsController::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&GlobalNamespace::AnalyticsController::AnalyticsUrl)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* minorVersion = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnalyticsController*), "AnalyticsUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, roomName, token, minorVersion});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnalyticsController::AnalyticsToken
// Il2CppName: AnalyticsToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::AnalyticsController::*)(::StringW, ::StringW)>(&GlobalNamespace::AnalyticsController::AnalyticsToken)> {
  static const MethodInfo* get() {
    static auto* uuid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomCode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnalyticsController*), "AnalyticsToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uuid, roomCode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnalyticsController::Sha1
// Il2CppName: Sha1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GlobalNamespace::AnalyticsController::Sha1)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnalyticsController*), "Sha1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnalyticsController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
