// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRRig
  class XRRig;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AdjustPlayerScale
  class AdjustPlayerScale;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: KeepPlayerOutOfWalls
  class KeepPlayerOutOfWalls;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::KeepPlayerOutOfWalls);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::KeepPlayerOutOfWalls*, "", "KeepPlayerOutOfWalls");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: KeepPlayerOutOfWalls
  // [TokenAttribute] Offset: FFFFFFFF
  class KeepPlayerOutOfWalls : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.XR.Interaction.Toolkit.XRRig rig
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRRig* rig;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRig*) == 0x8);
    // public UnityEngine.LayerMask layerMask
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::LayerMask layerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: layerMask and: adjustPlayerScale
    char __padding1[0x4] = {};
    // public AdjustPlayerScale adjustPlayerScale
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::AdjustPlayerScale* adjustPlayerScale;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AdjustPlayerScale*) == 0x8);
    // private UnityEngine.Vector3 _lastGoodPosition
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 lastGoodPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: lastGoodPosition and: transform
    char __padding3[0x4] = {};
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.SphereCollider _collider
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::SphereCollider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // private System.Boolean _wallClipAllowed
    // Size: 0x1
    // Offset: 0x50
    bool wallClipAllowed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wallClipAllowed and: collidersCollidingWith
    char __padding6[0x7] = {};
    // private readonly System.Collections.Generic.List`1<UnityEngine.Collider> _collidersCollidingWith
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* collidersCollidingWith;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.XRRig rig
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRig*& dyn_rig();
    // Get instance field reference: public UnityEngine.LayerMask layerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_layerMask();
    // Get instance field reference: public AdjustPlayerScale adjustPlayerScale
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AdjustPlayerScale*& dyn_adjustPlayerScale();
    // Get instance field reference: private UnityEngine.Vector3 _lastGoodPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastGoodPosition();
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private UnityEngine.SphereCollider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn__collider();
    // Get instance field reference: private System.Boolean _wallClipAllowed
    [[deprecated("Use field access instead!")]] bool& dyn__wallClipAllowed();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.Collider> _collidersCollidingWith
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn__collidersCollidingWith();
    // private System.Boolean get_CollidingWithObjects()
    // Offset: 0x6BC030
    bool get_CollidingWithObjects();
    // public System.Void .ctor()
    // Offset: 0x6BBFC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeepPlayerOutOfWalls* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KeepPlayerOutOfWalls::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeepPlayerOutOfWalls*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x6BBF60
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x6BBC10
    void LateUpdate();
    // public System.Void SetIsAllowedToGoThroughBricks(System.Boolean allowed)
    // Offset: 0x36CDB0
    void SetIsAllowedToGoThroughBricks(bool allowed);
    // private System.Void GetPlayerOutOfWall()
    // Offset: 0x6BB8C0
    void GetPlayerOutOfWall();
    // public System.Boolean IsHeadPositionAllowed(UnityEngine.Vector3 position)
    // Offset: 0x6BBAE0
    bool IsHeadPositionAllowed(::UnityEngine::Vector3 position);
    // private System.Boolean IsOutOfWall(UnityEngine.Vector3 position)
    // Offset: 0x6BBB80
    bool IsOutOfWall(::UnityEngine::Vector3 position);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x6BBE80
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x6BBEF0
    void OnTriggerExit(::UnityEngine::Collider* other);
  }; // KeepPlayerOutOfWalls
  #pragma pack(pop)
  static check_size<sizeof(KeepPlayerOutOfWalls), 88 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*)> __GlobalNamespace_KeepPlayerOutOfWallsSizeCheck;
  static_assert(sizeof(KeepPlayerOutOfWalls) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::get_CollidingWithObjects
// Il2CppName: get_CollidingWithObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::KeepPlayerOutOfWalls::*)()>(&GlobalNamespace::KeepPlayerOutOfWalls::get_CollidingWithObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "get_CollidingWithObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeepPlayerOutOfWalls::*)()>(&GlobalNamespace::KeepPlayerOutOfWalls::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeepPlayerOutOfWalls::*)()>(&GlobalNamespace::KeepPlayerOutOfWalls::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::SetIsAllowedToGoThroughBricks
// Il2CppName: SetIsAllowedToGoThroughBricks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeepPlayerOutOfWalls::*)(bool)>(&GlobalNamespace::KeepPlayerOutOfWalls::SetIsAllowedToGoThroughBricks)> {
  static const MethodInfo* get() {
    static auto* allowed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "SetIsAllowedToGoThroughBricks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allowed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::GetPlayerOutOfWall
// Il2CppName: GetPlayerOutOfWall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeepPlayerOutOfWalls::*)()>(&GlobalNamespace::KeepPlayerOutOfWalls::GetPlayerOutOfWall)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "GetPlayerOutOfWall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::IsHeadPositionAllowed
// Il2CppName: IsHeadPositionAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::KeepPlayerOutOfWalls::*)(::UnityEngine::Vector3)>(&GlobalNamespace::KeepPlayerOutOfWalls::IsHeadPositionAllowed)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "IsHeadPositionAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::IsOutOfWall
// Il2CppName: IsOutOfWall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::KeepPlayerOutOfWalls::*)(::UnityEngine::Vector3)>(&GlobalNamespace::KeepPlayerOutOfWalls::IsOutOfWall)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "IsOutOfWall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeepPlayerOutOfWalls::*)(::UnityEngine::Collider*)>(&GlobalNamespace::KeepPlayerOutOfWalls::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::KeepPlayerOutOfWalls::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::KeepPlayerOutOfWalls::*)(::UnityEngine::Collider*)>(&GlobalNamespace::KeepPlayerOutOfWalls::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::KeepPlayerOutOfWalls*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
