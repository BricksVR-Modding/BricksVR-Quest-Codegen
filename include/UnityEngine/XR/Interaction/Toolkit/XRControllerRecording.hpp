// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerRecording
  class XRControllerRecording;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*, "UnityEngine.XR.Interaction.Toolkit", "XRControllerRecording");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRControllerRecording
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: CCB30
  // [PreferBinarySerialization] Offset: FFFFFFFF
  class XRControllerRecording : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame
    struct Frame;
    // Size: 0x27
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRControllerRecording/UnityEngine.XR.Interaction.Toolkit.Frame
    // [TokenAttribute] Offset: FFFFFFFF
    struct Frame/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Double time
      // Size: 0x8
      // Offset: 0x0
      double time;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x8
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion rotation
      // Size: 0x10
      // Offset: 0x14
      ::UnityEngine::Quaternion rotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public System.Boolean selectActive
      // Size: 0x1
      // Offset: 0x24
      bool selectActive;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean activateActive
      // Size: 0x1
      // Offset: 0x25
      bool activateActive;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean pressActive
      // Size: 0x1
      // Offset: 0x26
      bool pressActive;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: Frame
      constexpr Frame(double time_ = {}, ::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Quaternion rotation_ = {}, bool selectActive_ = {}, bool activateActive_ = {}, bool pressActive_ = {}) noexcept : time{time_}, position{position_}, rotation{rotation_}, selectActive{selectActive_}, activateActive{activateActive_}, pressActive{pressActive_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Double time
      [[deprecated]] double& dyn_time();
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public UnityEngine.Quaternion rotation
      [[deprecated]] ::UnityEngine::Quaternion& dyn_rotation();
      // Get instance field reference: public System.Boolean selectActive
      [[deprecated]] bool& dyn_selectActive();
      // Get instance field reference: public System.Boolean activateActive
      [[deprecated]] bool& dyn_activateActive();
      // Get instance field reference: public System.Boolean pressActive
      [[deprecated]] bool& dyn_pressActive();
      // public System.Void .ctor(System.Double time, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Boolean selectActive, System.Boolean activateActive, System.Boolean pressActive)
      // Offset: 0x2F5180
      // ABORTED: conflicts with another method.  Frame(double time, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, bool selectActive, bool activateActive, bool pressActive);
      // public override System.String ToString()
      // Offset: 0x2F4E50
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // UnityEngine.XR.Interaction.Toolkit.XRControllerRecording/UnityEngine.XR.Interaction.Toolkit.Frame
    #pragma pack(pop)
    static check_size<sizeof(XRControllerRecording::Frame), 38 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRControllerRecording_FrameSizeCheck;
    static_assert(sizeof(XRControllerRecording::Frame) == 0x27);
    public:
    // [TooltipAttribute] Offset: 0xCCC20
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRControllerRecording/UnityEngine.XR.Interaction.Toolkit.Frame> m_Frames
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame>* m_Frames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRControllerRecording/UnityEngine.XR.Interaction.Toolkit.Frame> m_Frames
    [[deprecated]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame>*& dyn_m_Frames();
    // System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRControllerRecording/UnityEngine.XR.Interaction.Toolkit.Frame> get_frames()
    // Offset: 0x1E1520
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame>* get_frames();
    // public System.Double get_duration()
    // Offset: 0x302D60
    double get_duration();
    // System.Void AddRecordingFrame(System.Double time, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Boolean selectActive, System.Boolean activateActive, System.Boolean pressActive)
    // Offset: 0x302BB0
    void AddRecordingFrame(double time, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, bool selectActive, bool activateActive, bool pressActive);
    // System.Void InitRecording()
    // Offset: 0x302CA0
    void InitRecording();
    // System.Void SaveRecording()
    // Offset: 0x1DDF00
    void SaveRecording();
    // public System.Void .ctor()
    // Offset: 0x302CF0
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRControllerRecording* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRControllerRecording*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.XRControllerRecording
  #pragma pack(pop)
  static check_size<sizeof(XRControllerRecording), 24 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame>*)> __UnityEngine_XR_Interaction_Toolkit_XRControllerRecordingSizeCheck;
  static_assert(sizeof(XRControllerRecording) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame, "UnityEngine.XR.Interaction.Toolkit", "XRControllerRecording/Frame");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_frames
// Il2CppName: get_frames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::Frame>* (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_frames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "get_frames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::AddRecordingFrame
// Il2CppName: AddRecordingFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)(double, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, bool, bool, bool)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::AddRecordingFrame)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* selectActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* activateActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pressActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "AddRecordingFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, position, rotation, selectActive, activateActive, pressActive});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::InitRecording
// Il2CppName: InitRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::InitRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "InitRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::SaveRecording
// Il2CppName: SaveRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::SaveRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "SaveRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
