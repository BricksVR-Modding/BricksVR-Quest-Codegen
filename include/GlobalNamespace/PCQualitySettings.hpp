// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ShadowResolution
#include "UnityEngine/ShadowResolution.hpp"
// Including type: UnityEngine.ShadowmaskMode
#include "UnityEngine/ShadowmaskMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PCQualitySettings
  class PCQualitySettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PCQualitySettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PCQualitySettings*, "", "PCQualitySettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: PCQualitySettings
  // [TokenAttribute] Offset: FFFFFFFF
  class PCQualitySettings : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [TooltipAttribute] Offset: 0xFD880
    // private System.Int32 QualitySetting
    // Size: 0x4
    // Offset: 0x18
    int QualitySetting;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xFD940
    // private System.Int32 shadowDistance
    // Size: 0x4
    // Offset: 0x1C
    int shadowDistance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xFDA70
    // private System.Int32 antiAliasing
    // Size: 0x4
    // Offset: 0x20
    int antiAliasing;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xFEE80
    // private UnityEngine.ShadowResolution shadowResolution
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::ShadowResolution shadowResolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::ShadowResolution) == 0x4);
    // [TooltipAttribute] Offset: 0xFEF10
    // private UnityEngine.ShadowmaskMode shadowMask
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::ShadowmaskMode shadowMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::ShadowmaskMode) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 QualitySetting
    [[deprecated]] int& dyn_QualitySetting();
    // Get instance field reference: private System.Int32 shadowDistance
    [[deprecated]] int& dyn_shadowDistance();
    // Get instance field reference: private System.Int32 antiAliasing
    [[deprecated]] int& dyn_antiAliasing();
    // Get instance field reference: private UnityEngine.ShadowResolution shadowResolution
    [[deprecated]] ::UnityEngine::ShadowResolution& dyn_shadowResolution();
    // Get instance field reference: private UnityEngine.ShadowmaskMode shadowMask
    [[deprecated]] ::UnityEngine::ShadowmaskMode& dyn_shadowMask();
    // private System.Void Start()
    // Offset: 0x677BF0
    void Start();
    // public System.Void ChangeQuality(System.Int32 level)
    // Offset: 0x677BE0
    void ChangeQuality(int level);
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PCQualitySettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PCQualitySettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PCQualitySettings*, creationType>()));
    }
  }; // PCQualitySettings
  #pragma pack(pop)
  static check_size<sizeof(PCQualitySettings), 40 + sizeof(::UnityEngine::ShadowmaskMode)> __GlobalNamespace_PCQualitySettingsSizeCheck;
  static_assert(sizeof(PCQualitySettings) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PCQualitySettings::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PCQualitySettings::*)()>(&GlobalNamespace::PCQualitySettings::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PCQualitySettings*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PCQualitySettings::ChangeQuality
// Il2CppName: ChangeQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PCQualitySettings::*)(int)>(&GlobalNamespace::PCQualitySettings::ChangeQuality)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PCQualitySettings*), "ChangeQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PCQualitySettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
