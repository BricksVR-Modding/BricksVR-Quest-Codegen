// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Normal.Realtime.CoroutineRunner
#include "Normal/Realtime/CoroutineRunner.hpp"
// Including type: Normal.Realtime.Native.Region
#include "Normal/Realtime/Native/Region.hpp"
// Including type: Normal.Realtime.Native.Cluster
#include "Normal/Realtime/Native/Cluster.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: Datastore
  class Datastore;
  // Forward declaring type: RealtimeModel
  class RealtimeModel;
  // Forward declaring type: SessionCapture
  class SessionCapture;
  // Forward declaring type: IRealtimePrefabLoadDelegate
  class IRealtimePrefabLoadDelegate;
  // Forward declaring type: IRealtimePrefabInstantiateDelegate
  class IRealtimePrefabInstantiateDelegate;
  // Skipping declaration: ConnectionState because it is already included!
}
// Forward declaring namespace: Normal::Realtime::Native
namespace Normal::Realtime::Native {
  // Forward declaring type: Client
  class Client;
  // Forward declaring type: Matcher
  class Matcher;
  // Forward declaring type: AudioInputStream
  class AudioInputStream;
  // Forward declaring type: AudioOutputStream
  class AudioOutputStream;
  // Forward declaring type: NetworkInfo
  struct NetworkInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Component because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: Room
  class Room;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Room);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Room*, "Normal.Realtime", "Room");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Room
  // [TokenAttribute] Offset: FFFFFFFF
  class Room : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Normal::Realtime::Room::ConnectionStateChanged
    class ConnectionStateChanged;
    // Nested type: ::Normal::Realtime::Room::RPCMessageReceived
    class RPCMessageReceived;
    // Nested type: ::Normal::Realtime::Room::ConnectionState
    struct ConnectionState;
    // Nested type: ::Normal::Realtime::Room::RoomEventHandler
    class RoomEventHandler;
    // Nested type: ::Normal::Realtime::Room::$$c__DisplayClass87_0
    class $$c__DisplayClass87_0;
    // Nested type: ::Normal::Realtime::Room::$ConnectToServer_Coroutine$d__87
    class $ConnectToServer_Coroutine$d__87;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Normal.Realtime.Room/Normal.Realtime.ConnectionState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConnectionState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Error
      static constexpr const int Error = -1;
      // Get static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Error
      static ::Normal::Realtime::Room::ConnectionState _get_Error();
      // Set static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Error
      static void _set_Error(::Normal::Realtime::Room::ConnectionState value);
      // static field const value: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Disconnected
      static constexpr const int Disconnected = 0;
      // Get static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Disconnected
      static ::Normal::Realtime::Room::ConnectionState _get_Disconnected();
      // Set static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Disconnected
      static void _set_Disconnected(::Normal::Realtime::Room::ConnectionState value);
      // static field const value: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState RequestingRoom
      static constexpr const int RequestingRoom = 1;
      // Get static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState RequestingRoom
      static ::Normal::Realtime::Room::ConnectionState _get_RequestingRoom();
      // Set static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState RequestingRoom
      static void _set_RequestingRoom(::Normal::Realtime::Room::ConnectionState value);
      // static field const value: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState PingingClusters
      static constexpr const int PingingClusters = 2;
      // Get static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState PingingClusters
      static ::Normal::Realtime::Room::ConnectionState _get_PingingClusters();
      // Set static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState PingingClusters
      static void _set_PingingClusters(::Normal::Realtime::Room::ConnectionState value);
      // static field const value: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState ConnectingToRoom
      static constexpr const int ConnectingToRoom = 3;
      // Get static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState ConnectingToRoom
      static ::Normal::Realtime::Room::ConnectionState _get_ConnectingToRoom();
      // Set static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState ConnectingToRoom
      static void _set_ConnectingToRoom(::Normal::Realtime::Room::ConnectionState value);
      // static field const value: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState ConnectedToRoom
      static constexpr const int ConnectedToRoom = 4;
      // Get static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState ConnectedToRoom
      static ::Normal::Realtime::Room::ConnectionState _get_ConnectedToRoom();
      // Set static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState ConnectedToRoom
      static void _set_ConnectedToRoom(::Normal::Realtime::Room::ConnectionState value);
      // static field const value: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Ready
      static constexpr const int Ready = 5;
      // Get static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Ready
      static ::Normal::Realtime::Room::ConnectionState _get_Ready();
      // Set static field: static public Normal.Realtime.Room/Normal.Realtime.ConnectionState Ready
      static void _set_Ready(::Normal::Realtime::Room::ConnectionState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // Normal.Realtime.Room/Normal.Realtime.ConnectionState
    #pragma pack(pop)
    static check_size<sizeof(Room::ConnectionState), 0 + sizeof(int)> __Normal_Realtime_Room_ConnectionStateSizeCheck;
    static_assert(sizeof(Room::ConnectionState) == 0x4);
    public:
    // private Normal.Realtime.Room/Normal.Realtime.ConnectionStateChanged connectionStateChanged
    // Size: 0x8
    // Offset: 0x10
    ::Normal::Realtime::Room::ConnectionStateChanged* connectionStateChanged;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::ConnectionStateChanged*) == 0x8);
    // private Normal.Realtime.Room/Normal.Realtime.RPCMessageReceived rpcMessageReceived
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Room::RPCMessageReceived* rpcMessageReceived;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::RPCMessageReceived*) == 0x8);
    // private System.String _name
    // Size: 0x8
    // Offset: 0x20
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Double _time
    // Size: 0x8
    // Offset: 0x28
    double time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Normal.Realtime.Room/Normal.Realtime.ConnectionState _connectionState
    // Size: 0x4
    // Offset: 0x30
    ::Normal::Realtime::Room::ConnectionState connectionState;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::ConnectionState) == 0x4);
    // Padding between fields: connectionState and: datastoreFrameDuration
    char __padding4[0x4] = {};
    // private System.Double <datastoreFrameDuration>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    double datastoreFrameDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Boolean _debugLogging
    // Size: 0x1
    // Offset: 0x40
    bool debugLogging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugLogging and: client
    char __padding6[0x7] = {};
    // private Normal.Realtime.Native.Client _client
    // Size: 0x8
    // Offset: 0x48
    ::Normal::Realtime::Native::Client* client;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Native::Client*) == 0x8);
    // private Normal.Realtime.CoroutineRunner _coroutineRunner
    // Size: 0x8
    // Offset: 0x50
    ::Normal::Realtime::CoroutineRunner* coroutineRunner;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::CoroutineRunner*) == 0x8);
    // private Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext _activeConnectToServerCoroutine
    // Size: 0x8
    // Offset: 0x58
    ::Normal::Realtime::CoroutineRunner::CoroutineContext* activeConnectToServerCoroutine;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::CoroutineRunner::CoroutineContext*) == 0x8);
    // private UnityEngine.Component <realtime>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Component* realtime;
    // Field size check
    static_assert(sizeof(::UnityEngine::Component*) == 0x8);
    // private Normal.Realtime.Datastore _datastore
    // Size: 0x8
    // Offset: 0x68
    ::Normal::Realtime::Datastore* datastore;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Datastore*) == 0x8);
    // private System.Double _deltaTime
    // Size: 0x8
    // Offset: 0x70
    double deltaTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.UInt32 _nextUpdateID
    // Size: 0x4
    // Offset: 0x78
    uint nextUpdateID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: nextUpdateID and: roomModel
    char __padding13[0x4] = {};
    // private Normal.Realtime.RealtimeModel _roomModel
    // Size: 0x8
    // Offset: 0x80
    ::Normal::Realtime::RealtimeModel* roomModel;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::RealtimeModel*) == 0x8);
    // private Normal.Realtime.SessionCapture _sessionCapture
    // Size: 0x8
    // Offset: 0x88
    ::Normal::Realtime::SessionCapture* sessionCapture;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::SessionCapture*) == 0x8);
    // private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onWillWrite
    // Size: 0x8
    // Offset: 0x90
    ::Normal::Realtime::Room::RoomEventHandler* onWillWrite;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::RoomEventHandler*) == 0x8);
    // private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onWillRead
    // Size: 0x8
    // Offset: 0x98
    ::Normal::Realtime::Room::RoomEventHandler* onWillRead;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::RoomEventHandler*) == 0x8);
    // private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onDidWrite
    // Size: 0x8
    // Offset: 0xA0
    ::Normal::Realtime::Room::RoomEventHandler* onDidWrite;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::RoomEventHandler*) == 0x8);
    // private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onDidRead
    // Size: 0x8
    // Offset: 0xA8
    ::Normal::Realtime::Room::RoomEventHandler* onDidRead;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room::RoomEventHandler*) == 0x8);
    // private Normal.Realtime.IRealtimePrefabLoadDelegate <prefabLoadDelegate>k__BackingField
    // Size: 0x8
    // Offset: 0xB0
    ::Normal::Realtime::IRealtimePrefabLoadDelegate* prefabLoadDelegate;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::IRealtimePrefabLoadDelegate*) == 0x8);
    // private Normal.Realtime.IRealtimePrefabInstantiateDelegate <prefabInstantiateDelegate>k__BackingField
    // Size: 0x8
    // Offset: 0xB8
    ::Normal::Realtime::IRealtimePrefabInstantiateDelegate* prefabInstantiateDelegate;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::IRealtimePrefabInstantiateDelegate*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.ConnectionStateChanged connectionStateChanged
    [[deprecated]] ::Normal::Realtime::Room::ConnectionStateChanged*& dyn_connectionStateChanged();
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.RPCMessageReceived rpcMessageReceived
    [[deprecated]] ::Normal::Realtime::Room::RPCMessageReceived*& dyn_rpcMessageReceived();
    // Get instance field reference: private System.String _name
    [[deprecated]] ::StringW& dyn__name();
    // Get instance field reference: private System.Double _time
    [[deprecated]] double& dyn__time();
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.ConnectionState _connectionState
    [[deprecated]] ::Normal::Realtime::Room::ConnectionState& dyn__connectionState();
    // Get instance field reference: private System.Double <datastoreFrameDuration>k__BackingField
    [[deprecated]] double& dyn_$datastoreFrameDuration$k__BackingField();
    // Get instance field reference: private System.Boolean _debugLogging
    [[deprecated]] bool& dyn__debugLogging();
    // Get instance field reference: private Normal.Realtime.Native.Client _client
    [[deprecated]] ::Normal::Realtime::Native::Client*& dyn__client();
    // Get instance field reference: private Normal.Realtime.CoroutineRunner _coroutineRunner
    [[deprecated]] ::Normal::Realtime::CoroutineRunner*& dyn__coroutineRunner();
    // Get instance field reference: private Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext _activeConnectToServerCoroutine
    [[deprecated]] ::Normal::Realtime::CoroutineRunner::CoroutineContext*& dyn__activeConnectToServerCoroutine();
    // Get instance field reference: private UnityEngine.Component <realtime>k__BackingField
    [[deprecated]] ::UnityEngine::Component*& dyn_$realtime$k__BackingField();
    // Get instance field reference: private Normal.Realtime.Datastore _datastore
    [[deprecated]] ::Normal::Realtime::Datastore*& dyn__datastore();
    // Get instance field reference: private System.Double _deltaTime
    [[deprecated]] double& dyn__deltaTime();
    // Get instance field reference: private System.UInt32 _nextUpdateID
    [[deprecated]] uint& dyn__nextUpdateID();
    // Get instance field reference: private Normal.Realtime.RealtimeModel _roomModel
    [[deprecated]] ::Normal::Realtime::RealtimeModel*& dyn__roomModel();
    // Get instance field reference: private Normal.Realtime.SessionCapture _sessionCapture
    [[deprecated]] ::Normal::Realtime::SessionCapture*& dyn__sessionCapture();
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onWillWrite
    [[deprecated]] ::Normal::Realtime::Room::RoomEventHandler*& dyn_onWillWrite();
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onWillRead
    [[deprecated]] ::Normal::Realtime::Room::RoomEventHandler*& dyn_onWillRead();
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onDidWrite
    [[deprecated]] ::Normal::Realtime::Room::RoomEventHandler*& dyn_onDidWrite();
    // Get instance field reference: private Normal.Realtime.Room/Normal.Realtime.RoomEventHandler onDidRead
    [[deprecated]] ::Normal::Realtime::Room::RoomEventHandler*& dyn_onDidRead();
    // Get instance field reference: private Normal.Realtime.IRealtimePrefabLoadDelegate <prefabLoadDelegate>k__BackingField
    [[deprecated]] ::Normal::Realtime::IRealtimePrefabLoadDelegate*& dyn_$prefabLoadDelegate$k__BackingField();
    // Get instance field reference: private Normal.Realtime.IRealtimePrefabInstantiateDelegate <prefabInstantiateDelegate>k__BackingField
    [[deprecated]] ::Normal::Realtime::IRealtimePrefabInstantiateDelegate*& dyn_$prefabInstantiateDelegate$k__BackingField();
    // public System.String get_name()
    // Offset: 0x1E1950
    ::StringW get_name();
    // public System.Int32 get_clientID()
    // Offset: 0x899BC0
    int get_clientID();
    // public System.Double get_time()
    // Offset: 0x899C90
    double get_time();
    // public Normal.Realtime.Room/Normal.Realtime.ConnectionState get_connectionState()
    // Offset: 0x217230
    ::Normal::Realtime::Room::ConnectionState get_connectionState();
    // public System.Boolean get_connecting()
    // Offset: 0x899C00
    bool get_connecting();
    // public System.Boolean get_connected()
    // Offset: 0x899BF0
    bool get_connected();
    // public System.Boolean get_disconnected()
    // Offset: 0x899C30
    bool get_disconnected();
    // public System.Double get_datastoreFrameDuration()
    // Offset: 0x899C20
    double get_datastoreFrameDuration();
    // public System.Void set_datastoreFrameDuration(System.Double value)
    // Offset: 0x89A060
    void set_datastoreFrameDuration(double value);
    // public System.Boolean get_debugLogging()
    // Offset: 0x23FD80
    bool get_debugLogging();
    // public System.Void set_debugLogging(System.Boolean value)
    // Offset: 0x89A070
    void set_debugLogging(bool value);
    // public UnityEngine.Component get_realtime()
    // Offset: 0x290600
    ::UnityEngine::Component* get_realtime();
    // public System.Void set_realtime(UnityEngine.Component value)
    // Offset: 0x1E49D0
    void set_realtime(::UnityEngine::Component* value);
    // public Normal.Realtime.Datastore get_datastore()
    // Offset: 0x2A86C0
    ::Normal::Realtime::Datastore* get_datastore();
    // private System.Boolean get_sessionCaptureRecord()
    // Offset: 0x899C70
    bool get_sessionCaptureRecord();
    // private System.Boolean get_sessionCapturePlayback()
    // Offset: 0x899C50
    bool get_sessionCapturePlayback();
    // Normal.Realtime.IRealtimePrefabLoadDelegate get_prefabLoadDelegate()
    // Offset: 0x2FFDD0
    ::Normal::Realtime::IRealtimePrefabLoadDelegate* get_prefabLoadDelegate();
    // private System.Void set_prefabLoadDelegate(Normal.Realtime.IRealtimePrefabLoadDelegate value)
    // Offset: 0x1E0D00
    void set_prefabLoadDelegate(::Normal::Realtime::IRealtimePrefabLoadDelegate* value);
    // Normal.Realtime.IRealtimePrefabInstantiateDelegate get_prefabInstantiateDelegate()
    // Offset: 0x2F6B00
    ::Normal::Realtime::IRealtimePrefabInstantiateDelegate* get_prefabInstantiateDelegate();
    // private System.Void set_prefabInstantiateDelegate(Normal.Realtime.IRealtimePrefabInstantiateDelegate value)
    // Offset: 0x1E0CF0
    void set_prefabInstantiateDelegate(::Normal::Realtime::IRealtimePrefabInstantiateDelegate* value);
    // public System.Void add_connectionStateChanged(Normal.Realtime.Room/Normal.Realtime.ConnectionStateChanged value)
    // Offset: 0x899800
    void add_connectionStateChanged(::Normal::Realtime::Room::ConnectionStateChanged* value);
    // public System.Void remove_connectionStateChanged(Normal.Realtime.Room/Normal.Realtime.ConnectionStateChanged value)
    // Offset: 0x899CA0
    void remove_connectionStateChanged(::Normal::Realtime::Room::ConnectionStateChanged* value);
    // public System.Void add_rpcMessageReceived(Normal.Realtime.Room/Normal.Realtime.RPCMessageReceived value)
    // Offset: 0x899B20
    void add_rpcMessageReceived(::Normal::Realtime::Room::RPCMessageReceived* value);
    // public System.Void remove_rpcMessageReceived(Normal.Realtime.Room/Normal.Realtime.RPCMessageReceived value)
    // Offset: 0x899FC0
    void remove_rpcMessageReceived(::Normal::Realtime::Room::RPCMessageReceived* value);
    // public System.Void add_onWillWrite(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x899A80
    void add_onWillWrite(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void remove_onWillWrite(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x899F20
    void remove_onWillWrite(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void add_onWillRead(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x8999E0
    void add_onWillRead(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void remove_onWillRead(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x899E80
    void remove_onWillRead(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void add_onDidWrite(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x899940
    void add_onDidWrite(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void remove_onDidWrite(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x899DE0
    void remove_onDidWrite(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void add_onDidRead(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x8998A0
    void add_onDidRead(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void remove_onDidRead(Normal.Realtime.Room/Normal.Realtime.RoomEventHandler value)
    // Offset: 0x899D40
    void remove_onDidRead(::Normal::Realtime::Room::RoomEventHandler* value);
    // public System.Void .ctor(Normal.Realtime.SessionCapture sessionCapture)
    // Offset: 0x899680
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Room* New_ctor(::Normal::Realtime::SessionCapture* sessionCapture) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Room::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Room*, creationType>(sessionCapture)));
    }
    // public System.Void Dispose()
    // Offset: 0x897C40
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x897CA0
    void Dispose(bool disposing);
    // public System.Void Connect(System.String roomName, System.String appKey, System.String matcherURL, Normal.Realtime.RealtimeModel roomModel)
    // Offset: 0x897640
    void Connect(::StringW roomName, ::StringW appKey, ::StringW matcherURL, ::Normal::Realtime::RealtimeModel* roomModel);
    // System.Void Connect(System.String roomName, System.String appKey, System.String matcherURL, Normal.Realtime.RealtimeModel roomModel, Normal.Realtime.IRealtimePrefabLoadDelegate prefabLoadDelegate, Normal.Realtime.IRealtimePrefabInstantiateDelegate prefabInstantiateDelegate)
    // Offset: 0x897460
    void Connect(::StringW roomName, ::StringW appKey, ::StringW matcherURL, ::Normal::Realtime::RealtimeModel* roomModel, ::Normal::Realtime::IRealtimePrefabLoadDelegate* prefabLoadDelegate, ::Normal::Realtime::IRealtimePrefabInstantiateDelegate* prefabInstantiateDelegate);
    // public System.Void Disconnect()
    // Offset: 0x897C30
    void Disconnect();
    // private System.Void CreateCoroutineRunner()
    // Offset: 0x8978B0
    void CreateCoroutineRunner();
    // private System.Void DestroyCoroutineRunner()
    // Offset: 0x897AA0
    void DestroyCoroutineRunner();
    // private System.Void SetConnectionState(Normal.Realtime.Room/Normal.Realtime.ConnectionState connectionState)
    // Offset: 0x898EA0
    void SetConnectionState(::Normal::Realtime::Room::ConnectionState connectionState);
    // private System.Void CreateClient()
    // Offset: 0x8977B0
    void CreateClient();
    // private System.Void DestroyClient(System.Boolean disposing)
    // Offset: 0x8979A0
    void DestroyClient(bool disposing);
    // private System.Void ConnectToServer(System.String roomName, System.String appKey, System.String matcherURL, Normal.Realtime.RealtimeModel roomModel)
    // Offset: 0x897240
    void ConnectToServer(::StringW roomName, ::StringW appKey, ::StringW matcherURL, ::Normal::Realtime::RealtimeModel* roomModel);
    // private System.Collections.IEnumerator ConnectToServer_Coroutine(Normal.Realtime.CoroutineRunner/Normal.Realtime.CoroutineContext coroutineContext, System.String roomName, System.String appKey, System.String matcherURL, Normal.Realtime.RealtimeModel roomModel, Normal.Realtime.Native.Region[] preferredRegions, Normal.Realtime.Native.Matcher matcher, Normal.Realtime.Native.Cluster[] clusterPingResults)
    // Offset: 0x897130
    ::System::Collections::IEnumerator* ConnectToServer_Coroutine(::Normal::Realtime::CoroutineRunner::CoroutineContext* coroutineContext, ::StringW roomName, ::StringW appKey, ::StringW matcherURL, ::Normal::Realtime::RealtimeModel* roomModel, ::ArrayW<::Normal::Realtime::Native::Region> preferredRegions, ::Normal::Realtime::Native::Matcher* matcher, ::ArrayW<::Normal::Realtime::Native::Cluster> clusterPingResults);
    // private System.Void Disconnect(System.Boolean error)
    // Offset: 0x897B60
    void Disconnect(bool error);
    // public System.Void Tick(System.Double deltaTime)
    // Offset: 0x899270
    void Tick(double deltaTime);
    // private System.Void RoomTick(System.Double deltaTime)
    // Offset: 0x898840
    void RoomTick(double deltaTime);
    // private System.Void ClientTick()
    // Offset: 0x896F90
    void ClientTick();
    // private System.Void ClientConnectToRoom(System.String serverAnswer)
    // Offset: 0x896F50
    void ClientConnectToRoom(::StringW serverAnswer);
    // private System.Void PersistenceTick(System.Double deltaTime)
    // Offset: 0x897E70
    void PersistenceTick(double deltaTime);
    // private System.Void ReceivedPersistenceMessage(Normal.Realtime.Native.Client client, System.Int32 sender, System.Byte[] data, System.Boolean reliable)
    // Offset: 0x898100
    void ReceivedPersistenceMessage(::Normal::Realtime::Native::Client* client, int sender, ::ArrayW<uint8_t> data, bool reliable);
    // private System.Void SafeDispatchOnWillWrite()
    // Offset: 0x898BC0
    void SafeDispatchOnWillWrite();
    // private System.Void SafeDispatchOnWillRead()
    // Offset: 0x898B20
    void SafeDispatchOnWillRead();
    // private System.Void SafeDispatchOnDidWrite()
    // Offset: 0x898A80
    void SafeDispatchOnDidWrite();
    // private System.Void SafeDispatchOnDidRead()
    // Offset: 0x8989E0
    void SafeDispatchOnDidRead();
    // private System.Void StartSessonCapturePlayback(Normal.Realtime.RealtimeModel roomModel)
    // Offset: 0x899170
    void StartSessonCapturePlayback(::Normal::Realtime::RealtimeModel* roomModel);
    // private System.Void StopSessionCapturePlayback()
    // Offset: 0x899200
    void StopSessionCapturePlayback();
    // private System.Void SessionCapturePlaybackTick(System.Double deltaTime)
    // Offset: 0x898DC0
    void SessionCapturePlaybackTick(double deltaTime);
    // public System.Boolean SendRPCMessage(System.Byte[] data, System.Boolean reliable)
    // Offset: 0x898D10
    bool SendRPCMessage(::ArrayW<uint8_t> data, bool reliable);
    // public System.Boolean SendRPCMessage(System.Byte[] data, System.Int32 dataLength, System.Boolean reliable)
    // Offset: 0x898C60
    bool SendRPCMessage(::ArrayW<uint8_t> data, int dataLength, bool reliable);
    // private System.Void ReceivedRPCMessage(Normal.Realtime.Native.Client client, System.Int32 senderID, System.Byte[] data, System.Boolean reliable)
    // Offset: 0x898790
    void ReceivedRPCMessage(::Normal::Realtime::Native::Client* client, int senderID, ::ArrayW<uint8_t> data, bool reliable);
    // public Normal.Realtime.Native.AudioInputStream CreateAudioInputStream(System.Boolean voice, System.Int32 sampleRate, System.Int32 channels)
    // Offset: 0x897780
    ::Normal::Realtime::Native::AudioInputStream* CreateAudioInputStream(bool voice, int sampleRate, int channels);
    // public Normal.Realtime.Native.AudioOutputStream GetAudioOutputStream(System.Int32 clientID, System.Int32 streamID)
    // Offset: 0x897DE0
    ::Normal::Realtime::Native::AudioOutputStream* GetAudioOutputStream(int clientID, int streamID);
    // public Normal.Realtime.Native.NetworkInfo GetNetworkStatistics()
    // Offset: 0x897E10
    ::Normal::Realtime::Native::NetworkInfo GetNetworkStatistics();
    // public System.Void .ctor()
    // Offset: 0x899500
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Room* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Room::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Room*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x897D70
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Normal.Realtime.Room
  #pragma pack(pop)
  static check_size<sizeof(Room), 184 + sizeof(::Normal::Realtime::IRealtimePrefabInstantiateDelegate*)> __Normal_Realtime_RoomSizeCheck;
  static_assert(sizeof(Room) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Room::ConnectionState, "Normal.Realtime", "Room/ConnectionState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Room::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_clientID
// Il2CppName: get_clientID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_clientID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_clientID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_connectionState
// Il2CppName: get_connectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Room::ConnectionState (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_connectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_connectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_connecting
// Il2CppName: get_connecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_connecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_connecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_connected
// Il2CppName: get_connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_connected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_disconnected
// Il2CppName: get_disconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_disconnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_disconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_datastoreFrameDuration
// Il2CppName: get_datastoreFrameDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_datastoreFrameDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_datastoreFrameDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::set_datastoreFrameDuration
// Il2CppName: set_datastoreFrameDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(double)>(&Normal::Realtime::Room::set_datastoreFrameDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "set_datastoreFrameDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_debugLogging
// Il2CppName: get_debugLogging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_debugLogging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_debugLogging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::set_debugLogging
// Il2CppName: set_debugLogging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(bool)>(&Normal::Realtime::Room::set_debugLogging)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "set_debugLogging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_realtime
// Il2CppName: get_realtime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Component* (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_realtime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_realtime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::set_realtime
// Il2CppName: set_realtime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::UnityEngine::Component*)>(&Normal::Realtime::Room::set_realtime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "set_realtime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_datastore
// Il2CppName: get_datastore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Datastore* (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_datastore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_datastore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_sessionCaptureRecord
// Il2CppName: get_sessionCaptureRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_sessionCaptureRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_sessionCaptureRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_sessionCapturePlayback
// Il2CppName: get_sessionCapturePlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_sessionCapturePlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_sessionCapturePlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_prefabLoadDelegate
// Il2CppName: get_prefabLoadDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::IRealtimePrefabLoadDelegate* (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_prefabLoadDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_prefabLoadDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::set_prefabLoadDelegate
// Il2CppName: set_prefabLoadDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::IRealtimePrefabLoadDelegate*)>(&Normal::Realtime::Room::set_prefabLoadDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IRealtimePrefabLoadDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "set_prefabLoadDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::get_prefabInstantiateDelegate
// Il2CppName: get_prefabInstantiateDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::IRealtimePrefabInstantiateDelegate* (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::get_prefabInstantiateDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "get_prefabInstantiateDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::set_prefabInstantiateDelegate
// Il2CppName: set_prefabInstantiateDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::IRealtimePrefabInstantiateDelegate*)>(&Normal::Realtime::Room::set_prefabInstantiateDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IRealtimePrefabInstantiateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "set_prefabInstantiateDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::add_connectionStateChanged
// Il2CppName: add_connectionStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::ConnectionStateChanged*)>(&Normal::Realtime::Room::add_connectionStateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/ConnectionStateChanged")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "add_connectionStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::remove_connectionStateChanged
// Il2CppName: remove_connectionStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::ConnectionStateChanged*)>(&Normal::Realtime::Room::remove_connectionStateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/ConnectionStateChanged")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "remove_connectionStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::add_rpcMessageReceived
// Il2CppName: add_rpcMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RPCMessageReceived*)>(&Normal::Realtime::Room::add_rpcMessageReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RPCMessageReceived")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "add_rpcMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::remove_rpcMessageReceived
// Il2CppName: remove_rpcMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RPCMessageReceived*)>(&Normal::Realtime::Room::remove_rpcMessageReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RPCMessageReceived")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "remove_rpcMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::add_onWillWrite
// Il2CppName: add_onWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::add_onWillWrite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "add_onWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::remove_onWillWrite
// Il2CppName: remove_onWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::remove_onWillWrite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "remove_onWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::add_onWillRead
// Il2CppName: add_onWillRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::add_onWillRead)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "add_onWillRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::remove_onWillRead
// Il2CppName: remove_onWillRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::remove_onWillRead)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "remove_onWillRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::add_onDidWrite
// Il2CppName: add_onDidWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::add_onDidWrite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "add_onDidWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::remove_onDidWrite
// Il2CppName: remove_onDidWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::remove_onDidWrite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "remove_onDidWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::add_onDidRead
// Il2CppName: add_onDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::add_onDidRead)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "add_onDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::remove_onDidRead
// Il2CppName: remove_onDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::RoomEventHandler*)>(&Normal::Realtime::Room::remove_onDidRead)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/RoomEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "remove_onDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Room::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(bool)>(&Normal::Realtime::Room::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::StringW, ::StringW, ::StringW, ::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::Room::Connect)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcherURL = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, appKey, matcherURL, roomModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::StringW, ::StringW, ::StringW, ::Normal::Realtime::RealtimeModel*, ::Normal::Realtime::IRealtimePrefabLoadDelegate*, ::Normal::Realtime::IRealtimePrefabInstantiateDelegate*)>(&Normal::Realtime::Room::Connect)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcherURL = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    static auto* prefabLoadDelegate = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IRealtimePrefabLoadDelegate")->byval_arg;
    static auto* prefabInstantiateDelegate = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "IRealtimePrefabInstantiateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, appKey, matcherURL, roomModel, prefabLoadDelegate, prefabInstantiateDelegate});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::CreateCoroutineRunner
// Il2CppName: CreateCoroutineRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::CreateCoroutineRunner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "CreateCoroutineRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::DestroyCoroutineRunner
// Il2CppName: DestroyCoroutineRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::DestroyCoroutineRunner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "DestroyCoroutineRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SetConnectionState
// Il2CppName: SetConnectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Room::ConnectionState)>(&Normal::Realtime::Room::SetConnectionState)> {
  static const MethodInfo* get() {
    static auto* connectionState = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SetConnectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionState});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::CreateClient
// Il2CppName: CreateClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::CreateClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "CreateClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::DestroyClient
// Il2CppName: DestroyClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(bool)>(&Normal::Realtime::Room::DestroyClient)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "DestroyClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::ConnectToServer
// Il2CppName: ConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::StringW, ::StringW, ::StringW, ::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::Room::ConnectToServer)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcherURL = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "ConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, appKey, matcherURL, roomModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::ConnectToServer_Coroutine
// Il2CppName: ConnectToServer_Coroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Normal::Realtime::Room::*)(::Normal::Realtime::CoroutineRunner::CoroutineContext*, ::StringW, ::StringW, ::StringW, ::Normal::Realtime::RealtimeModel*, ::ArrayW<::Normal::Realtime::Native::Region>, ::Normal::Realtime::Native::Matcher*, ::ArrayW<::Normal::Realtime::Native::Cluster>)>(&Normal::Realtime::Room::ConnectToServer_Coroutine)> {
  static const MethodInfo* get() {
    static auto* coroutineContext = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "CoroutineRunner/CoroutineContext")->byval_arg;
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcherURL = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    static auto* preferredRegions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Region"), 1)->byval_arg;
    static auto* matcher = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Matcher")->byval_arg;
    static auto* clusterPingResults = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Cluster"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "ConnectToServer_Coroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coroutineContext, roomName, appKey, matcherURL, roomModel, preferredRegions, matcher, clusterPingResults});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(bool)>(&Normal::Realtime::Room::Disconnect)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(double)>(&Normal::Realtime::Room::Tick)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::RoomTick
// Il2CppName: RoomTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(double)>(&Normal::Realtime::Room::RoomTick)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "RoomTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::ClientTick
// Il2CppName: ClientTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::ClientTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "ClientTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::ClientConnectToRoom
// Il2CppName: ClientConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::StringW)>(&Normal::Realtime::Room::ClientConnectToRoom)> {
  static const MethodInfo* get() {
    static auto* serverAnswer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "ClientConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverAnswer});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::PersistenceTick
// Il2CppName: PersistenceTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(double)>(&Normal::Realtime::Room::PersistenceTick)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "PersistenceTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::ReceivedPersistenceMessage
// Il2CppName: ReceivedPersistenceMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Native::Client*, int, ::ArrayW<uint8_t>, bool)>(&Normal::Realtime::Room::ReceivedPersistenceMessage)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Client")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "ReceivedPersistenceMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, sender, data, reliable});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SafeDispatchOnWillWrite
// Il2CppName: SafeDispatchOnWillWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::SafeDispatchOnWillWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SafeDispatchOnWillWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SafeDispatchOnWillRead
// Il2CppName: SafeDispatchOnWillRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::SafeDispatchOnWillRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SafeDispatchOnWillRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SafeDispatchOnDidWrite
// Il2CppName: SafeDispatchOnDidWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::SafeDispatchOnDidWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SafeDispatchOnDidWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SafeDispatchOnDidRead
// Il2CppName: SafeDispatchOnDidRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::SafeDispatchOnDidRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SafeDispatchOnDidRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::StartSessonCapturePlayback
// Il2CppName: StartSessonCapturePlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::Room::StartSessonCapturePlayback)> {
  static const MethodInfo* get() {
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "StartSessonCapturePlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::StopSessionCapturePlayback
// Il2CppName: StopSessionCapturePlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::StopSessionCapturePlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "StopSessionCapturePlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SessionCapturePlaybackTick
// Il2CppName: SessionCapturePlaybackTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(double)>(&Normal::Realtime::Room::SessionCapturePlaybackTick)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SessionCapturePlaybackTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SendRPCMessage
// Il2CppName: SendRPCMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)(::ArrayW<uint8_t>, bool)>(&Normal::Realtime::Room::SendRPCMessage)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SendRPCMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, reliable});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::SendRPCMessage
// Il2CppName: SendRPCMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Room::*)(::ArrayW<uint8_t>, int, bool)>(&Normal::Realtime::Room::SendRPCMessage)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "SendRPCMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataLength, reliable});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::ReceivedRPCMessage
// Il2CppName: ReceivedRPCMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)(::Normal::Realtime::Native::Client*, int, ::ArrayW<uint8_t>, bool)>(&Normal::Realtime::Room::ReceivedRPCMessage)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Native", "Client")->byval_arg;
    static auto* senderID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "ReceivedRPCMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, senderID, data, reliable});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::CreateAudioInputStream
// Il2CppName: CreateAudioInputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Native::AudioInputStream* (Normal::Realtime::Room::*)(bool, int, int)>(&Normal::Realtime::Room::CreateAudioInputStream)> {
  static const MethodInfo* get() {
    static auto* voice = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "CreateAudioInputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voice, sampleRate, channels});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::GetAudioOutputStream
// Il2CppName: GetAudioOutputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Native::AudioOutputStream* (Normal::Realtime::Room::*)(int, int)>(&Normal::Realtime::Room::GetAudioOutputStream)> {
  static const MethodInfo* get() {
    static auto* clientID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* streamID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "GetAudioOutputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientID, streamID});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::GetNetworkStatistics
// Il2CppName: GetNetworkStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Native::NetworkInfo (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::GetNetworkStatistics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "GetNetworkStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Room::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Room::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Room::*)()>(&Normal::Realtime::Room::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Room*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
