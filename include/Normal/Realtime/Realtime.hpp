// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Normal.Realtime.Room
#include "Normal/Realtime/Room.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: RealtimeModel
  class RealtimeModel;
  // Forward declaring type: RealtimeView
  class RealtimeView;
  // Forward declaring type: Datastore
  class Datastore;
  // Forward declaring type: RealtimeViewModel
  class RealtimeViewModel;
}
// Forward declaring namespace: Normal
namespace Normal {
  // Forward declaring type: NormcoreAppSettings
  class NormcoreAppSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Forward declaring type: IModel
  class IModel;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Forward declaring type: Realtime
  class Realtime;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Normal::Realtime::Realtime);
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Realtime*, "Normal.Realtime", "Realtime");
// Type namespace: Normal.Realtime
namespace Normal::Realtime {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Normal.Realtime.Realtime
  // [TokenAttribute] Offset: FFFFFFFF
  class Realtime : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Normal::Realtime::Realtime::InstantiateOptions
    struct InstantiateOptions;
    // Nested type: ::Normal::Realtime::Realtime::RealtimeEvent
    class RealtimeEvent;
    // Nested type: ::Normal::Realtime::Realtime::$$c__DisplayClass81_0
    class $$c__DisplayClass81_0;
    // Nested type: ::Normal::Realtime::Realtime::$$c__DisplayClass81_1
    class $$c__DisplayClass81_1;
    // Nested type: ::Normal::Realtime::Realtime::$ConnectSceneViewsToDatastoreTimeout$d__84
    class $ConnectSceneViewsToDatastoreTimeout$d__84;
    // Nested type: ::Normal::Realtime::Realtime::$$c__DisplayClass85_0
    class $$c__DisplayClass85_0;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Normal.Realtime.Realtime/Normal.Realtime.InstantiateOptions
    // [TokenAttribute] Offset: FFFFFFFF
    struct InstantiateOptions/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Nullable`1<System.Boolean> ownedByClient
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::System::Nullable_1<bool> ownedByClient;
      // public System.Nullable`1<System.Boolean> preventOwnershipTakeover
      // Size: 0xFFFFFFFF
      // Offset: 0x2
      ::System::Nullable_1<bool> preventOwnershipTakeover;
      // public System.Nullable`1<System.Boolean> destroyWhenOwnerLeaves
      // Size: 0xFFFFFFFF
      // Offset: 0x4
      ::System::Nullable_1<bool> destroyWhenOwnerLeaves;
      // public System.Nullable`1<System.Boolean> destroyWhenLastClientLeaves
      // Size: 0xFFFFFFFF
      // Offset: 0x6
      ::System::Nullable_1<bool> destroyWhenLastClientLeaves;
      // public Normal.Realtime.Realtime useInstance
      // Size: 0x8
      // Offset: 0x8
      ::Normal::Realtime::Realtime* useInstance;
      // Field size check
      static_assert(sizeof(::Normal::Realtime::Realtime*) == 0x8);
      public:
      // Creating value type constructor for type: InstantiateOptions
      constexpr InstantiateOptions(::System::Nullable_1<bool> ownedByClient_ = {}, ::System::Nullable_1<bool> preventOwnershipTakeover_ = {}, ::System::Nullable_1<bool> destroyWhenOwnerLeaves_ = {}, ::System::Nullable_1<bool> destroyWhenLastClientLeaves_ = {}, ::Normal::Realtime::Realtime* useInstance_ = {}) noexcept : ownedByClient{ownedByClient_}, preventOwnershipTakeover{preventOwnershipTakeover_}, destroyWhenOwnerLeaves{destroyWhenOwnerLeaves_}, destroyWhenLastClientLeaves{destroyWhenLastClientLeaves_}, useInstance{useInstance_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly Normal.Realtime.Realtime/Normal.Realtime.InstantiateOptions defaults
      static ::Normal::Realtime::Realtime::InstantiateOptions _get_defaults();
      // Set static field: static public readonly Normal.Realtime.Realtime/Normal.Realtime.InstantiateOptions defaults
      static void _set_defaults(::Normal::Realtime::Realtime::InstantiateOptions value);
      // Get instance field reference: public System.Nullable`1<System.Boolean> ownedByClient
      ::System::Nullable_1<bool>& dyn_ownedByClient();
      // Get instance field reference: public System.Nullable`1<System.Boolean> preventOwnershipTakeover
      ::System::Nullable_1<bool>& dyn_preventOwnershipTakeover();
      // Get instance field reference: public System.Nullable`1<System.Boolean> destroyWhenOwnerLeaves
      ::System::Nullable_1<bool>& dyn_destroyWhenOwnerLeaves();
      // Get instance field reference: public System.Nullable`1<System.Boolean> destroyWhenLastClientLeaves
      ::System::Nullable_1<bool>& dyn_destroyWhenLastClientLeaves();
      // Get instance field reference: public Normal.Realtime.Realtime useInstance
      ::Normal::Realtime::Realtime*& dyn_useInstance();
      // static private System.Void .cctor()
      // Offset: 0xAF5B60
      static void _cctor();
    }; // Normal.Realtime.Realtime/Normal.Realtime.InstantiateOptions
    // WARNING Not writing size check since size may be invalid!
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent didConnectToRoom
    // Size: 0x8
    // Offset: 0x18
    ::Normal::Realtime::Realtime::RealtimeEvent* didConnectToRoom;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Realtime::RealtimeEvent*) == 0x8);
    // private Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent didDisconnectFromRoom
    // Size: 0x8
    // Offset: 0x20
    ::Normal::Realtime::Realtime::RealtimeEvent* didDisconnectFromRoom;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Realtime::RealtimeEvent*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x7163E8
    // private System.String _obsoleteAppKey
    // Size: 0x8
    // Offset: 0x28
    ::StringW obsoleteAppKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Normal.NormcoreAppSettings _normcoreAppSettings
    // Size: 0x8
    // Offset: 0x30
    ::Normal::NormcoreAppSettings* normcoreAppSettings;
    // Field size check
    static_assert(sizeof(::Normal::NormcoreAppSettings*) == 0x8);
    // private System.String _roomToJoinOnStart
    // Size: 0x8
    // Offset: 0x38
    ::StringW roomToJoinOnStart;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _joinRoomOnStart
    // Size: 0x1
    // Offset: 0x40
    bool joinRoomOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: joinRoomOnStart and: room
    char __padding5[0x7] = {};
    // private Normal.Realtime.Room _room
    // Size: 0x8
    // Offset: 0x48
    ::Normal::Realtime::Room* room;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::Room*) == 0x8);
    // private System.Collections.Generic.HashSet`1<Normal.Realtime.RealtimeView> _sceneViews
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>* sceneViews;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>*) == 0x8);
    // private System.Boolean _sceneViewsConnected
    // Size: 0x1
    // Offset: 0x58
    bool sceneViewsConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sceneViewsConnected and: prefabViews
    char __padding8[0x7] = {};
    // private System.Collections.Generic.HashSet`1<Normal.Realtime.RealtimeView> _prefabViews
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>* prefabViews;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>*) == 0x8);
    // private UnityEngine.GameObject _lastPrefabInstantiated
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* lastPrefabInstantiated;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Coroutine _connectSceneViewsTimeoutRoutine
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Coroutine* connectSceneViewsTimeoutRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Collections.Generic.HashSet`1<Normal.Realtime.Realtime> __instances
    static ::System::Collections::Generic::HashSet_1<::Normal::Realtime::Realtime*>* _get___instances();
    // Set static field: static private readonly System.Collections.Generic.HashSet`1<Normal.Realtime.Realtime> __instances
    static void _set___instances(::System::Collections::Generic::HashSet_1<::Normal::Realtime::Realtime*>* value);
    // static field const value: static private System.String UNSUPPORTED_INSTANTIATE_MESSAGE
    static constexpr const char* UNSUPPORTED_INSTANTIATE_MESSAGE = "This version of Realtime.Instantiate() is not supported. Please use Realtime.Instantiate(string prefabName).";
    // Get static field: static private System.String UNSUPPORTED_INSTANTIATE_MESSAGE
    static ::StringW _get_UNSUPPORTED_INSTANTIATE_MESSAGE();
    // Set static field: static private System.String UNSUPPORTED_INSTANTIATE_MESSAGE
    static void _set_UNSUPPORTED_INSTANTIATE_MESSAGE(::StringW value);
    // static field const value: static private System.String UNSUPPORTED_DESTROY_MESSAGE
    static constexpr const char* UNSUPPORTED_DESTROY_MESSAGE = "This version of Realtime.Destroy() is not supported. Please use Realtime.Destroy(GameObject gameObject) or Realtime.Destroy(RealtimeView realtimeView).";
    // Get static field: static private System.String UNSUPPORTED_DESTROY_MESSAGE
    static ::StringW _get_UNSUPPORTED_DESTROY_MESSAGE();
    // Set static field: static private System.String UNSUPPORTED_DESTROY_MESSAGE
    static void _set_UNSUPPORTED_DESTROY_MESSAGE(::StringW value);
    // Get instance field reference: private Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent didConnectToRoom
    ::Normal::Realtime::Realtime::RealtimeEvent*& dyn_didConnectToRoom();
    // Get instance field reference: private Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent didDisconnectFromRoom
    ::Normal::Realtime::Realtime::RealtimeEvent*& dyn_didDisconnectFromRoom();
    // Get instance field reference: private System.String _obsoleteAppKey
    ::StringW& dyn__obsoleteAppKey();
    // Get instance field reference: private Normal.NormcoreAppSettings _normcoreAppSettings
    ::Normal::NormcoreAppSettings*& dyn__normcoreAppSettings();
    // Get instance field reference: private System.String _roomToJoinOnStart
    ::StringW& dyn__roomToJoinOnStart();
    // Get instance field reference: private System.Boolean _joinRoomOnStart
    bool& dyn__joinRoomOnStart();
    // Get instance field reference: private Normal.Realtime.Room _room
    ::Normal::Realtime::Room*& dyn__room();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Normal.Realtime.RealtimeView> _sceneViews
    ::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>*& dyn__sceneViews();
    // Get instance field reference: private System.Boolean _sceneViewsConnected
    bool& dyn__sceneViewsConnected();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Normal.Realtime.RealtimeView> _prefabViews
    ::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>*& dyn__prefabViews();
    // Get instance field reference: private UnityEngine.GameObject _lastPrefabInstantiated
    ::UnityEngine::GameObject*& dyn__lastPrefabInstantiated();
    // Get instance field reference: private UnityEngine.Coroutine _connectSceneViewsTimeoutRoutine
    ::UnityEngine::Coroutine*& dyn__connectSceneViewsTimeoutRoutine();
    // static public System.Collections.Generic.IReadOnlyCollection`1<Normal.Realtime.Realtime> get_instances()
    // Offset: 0xAF1C00
    static ::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::Realtime*>* get_instances();
    // public System.String get_roomToJoinOnStart()
    // Offset: 0xAF3220
    ::StringW get_roomToJoinOnStart();
    // public System.Boolean get_joinRoomOnStart()
    // Offset: 0xAF3228
    bool get_joinRoomOnStart();
    // public Normal.NormcoreAppSettings get_normcoreAppSettings()
    // Offset: 0xAF3230
    ::Normal::NormcoreAppSettings* get_normcoreAppSettings();
    // public System.Void set_normcoreAppSettings(Normal.NormcoreAppSettings value)
    // Offset: 0xAF3238
    void set_normcoreAppSettings(::Normal::NormcoreAppSettings* value);
    // public Normal.Realtime.Room get_room()
    // Offset: 0xAF3240
    ::Normal::Realtime::Room* get_room();
    // public System.Void set_room(Normal.Realtime.Room value)
    // Offset: 0xAF3248
    void set_room(::Normal::Realtime::Room* value);
    // public System.Boolean get_connecting()
    // Offset: 0xAF35BC
    bool get_connecting();
    // public System.Boolean get_connected()
    // Offset: 0xAF3620
    bool get_connected();
    // public System.Boolean get_disconnected()
    // Offset: 0xAF3664
    bool get_disconnected();
    // public System.Int32 get_clientID()
    // Offset: 0xAF367C
    int get_clientID();
    // public System.Void add_didConnectToRoom(Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent value)
    // Offset: 0xAF2F90
    void add_didConnectToRoom(::Normal::Realtime::Realtime::RealtimeEvent* value);
    // public System.Void remove_didConnectToRoom(Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent value)
    // Offset: 0xAF3034
    void remove_didConnectToRoom(::Normal::Realtime::Realtime::RealtimeEvent* value);
    // public System.Void add_didDisconnectFromRoom(Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent value)
    // Offset: 0xAF30D8
    void add_didDisconnectFromRoom(::Normal::Realtime::Realtime::RealtimeEvent* value);
    // public System.Void remove_didDisconnectFromRoom(Normal.Realtime.Realtime/Normal.Realtime.RealtimeEvent value)
    // Offset: 0xAF317C
    void remove_didDisconnectFromRoom(::Normal::Realtime::Realtime::RealtimeEvent* value);
    // static public UnityEngine.GameObject Instantiate(System.String prefabName, System.Nullable`1<Normal.Realtime.Realtime/Normal.Realtime.InstantiateOptions> options)
    // Offset: 0xAF1C68
    static ::UnityEngine::GameObject* Instantiate(::StringW prefabName, ::System::Nullable_1<::Normal::Realtime::Realtime::InstantiateOptions> options);
    // static public UnityEngine.GameObject Instantiate(System.String prefabName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Nullable`1<Normal.Realtime.Realtime/Normal.Realtime.InstantiateOptions> options)
    // Offset: 0xAF2180
    static ::UnityEngine::GameObject* Instantiate(::StringW prefabName, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::System::Nullable_1<::Normal::Realtime::Realtime::InstantiateOptions> options);
    // static public UnityEngine.GameObject Instantiate(System.String prefabName, Normal.Realtime.Realtime useInstance)
    // Offset: 0xAF24C4
    static ::UnityEngine::GameObject* Instantiate(::StringW prefabName, ::Normal::Realtime::Realtime* useInstance);
    // static public UnityEngine.GameObject Instantiate(System.String prefabName, System.Boolean ownedByClient, System.Boolean preventOwnershipTakeover, System.Boolean destroyWhenOwnerOrLastClientLeaves, Normal.Realtime.Realtime useInstance)
    // Offset: 0xAF2544
    static ::UnityEngine::GameObject* Instantiate(::StringW prefabName, bool ownedByClient, bool preventOwnershipTakeover, bool destroyWhenOwnerOrLastClientLeaves, ::Normal::Realtime::Realtime* useInstance);
    // static public UnityEngine.GameObject Instantiate(System.String prefabName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Boolean ownedByClient, System.Boolean preventOwnershipTakeover, System.Boolean destroyWhenOwnerOrLastClientLeaves, Normal.Realtime.Realtime useInstance)
    // Offset: 0xAF2640
    static ::UnityEngine::GameObject* Instantiate(::StringW prefabName, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, bool ownedByClient, bool preventOwnershipTakeover, bool destroyWhenOwnerOrLastClientLeaves, ::Normal::Realtime::Realtime* useInstance);
    // static private Normal.Realtime.Realtime FindRealtimeInstance()
    // Offset: 0xAF1DB0
    static ::Normal::Realtime::Realtime* FindRealtimeInstance();
    // static private System.Void RepositionRealtimePrefab(UnityEngine.GameObject gameObject, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0xAF2284
    static void RepositionRealtimePrefab(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // static public System.Void Destroy(UnityEngine.GameObject gameObject)
    // Offset: 0xAF273C
    static void Destroy(::UnityEngine::GameObject* gameObject);
    // static public System.Void Destroy(Normal.Realtime.RealtimeView realtimeView)
    // Offset: 0xAF288C
    static void Destroy(::Normal::Realtime::RealtimeView* realtimeView);
    // static public UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parent)
    // Offset: 0xAF2AF8
    static ::UnityEngine::Object* Instantiate(::UnityEngine::Object* original, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Transform* parent);
    // static public T Instantiate(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parent)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Instantiate(T original, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Transform* parent) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Realtime::Instantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Realtime", "Realtime", "Instantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(parent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, original, position, rotation, parent);
    }
    // static public UnityEngine.GameObject Instantiate(UnityEngine.GameObject original)
    // Offset: 0xAF2C3C
    static ::UnityEngine::GameObject* Instantiate(::UnityEngine::GameObject* original);
    // static public UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Transform parent)
    // Offset: 0xAF2D14
    static ::UnityEngine::Object* Instantiate(::UnityEngine::Object* original, ::UnityEngine::Transform* parent);
    // static public System.Void DestroyObject(UnityEngine.Object obj, System.Single t)
    // Offset: 0xAF2EE8
    static void DestroyObject(::UnityEngine::Object* obj, float t);
    // static public System.Void DestroyObject(UnityEngine.Object obj)
    // Offset: 0xAF2F3C
    static void DestroyObject(::UnityEngine::Object* obj);
    // private System.Void Awake()
    // Offset: 0xAF3694
    void Awake();
    // private System.Void Start()
    // Offset: 0xAF3770
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0xAF399C
    void OnDestroy();
    // private System.Void OnApplicationQuit()
    // Offset: 0xAF3AA0
    void OnApplicationQuit();
    // private System.Void Update()
    // Offset: 0xAF3B58
    void Update();
    // private System.Void FireDidConnectToRoom()
    // Offset: 0xAF3BC8
    void FireDidConnectToRoom();
    // private System.Void FireDidDisconnectFromRoom()
    // Offset: 0xAF404C
    void FireDidDisconnectFromRoom();
    // public System.Void Connect(System.String roomName, Normal.Realtime.Serialization.IModel roomModel)
    // Offset: 0xAF413C
    void Connect(::StringW roomName, ::Normal::Realtime::Serialization::IModel* roomModel);
    // public System.Void Connect(System.String roomName, Normal.Realtime.RealtimeModel roomModel)
    // Offset: 0xAF3788
    void Connect(::StringW roomName, ::Normal::Realtime::RealtimeModel* roomModel);
    // public System.Void Disconnect()
    // Offset: 0xAF3A54
    void Disconnect();
    // private System.Void RoomConnectionStateChanged(Normal.Realtime.Room room, Normal.Realtime.Room/Normal.Realtime.ConnectionState previousConnectionState, Normal.Realtime.Room/Normal.Realtime.ConnectionState connectionState)
    // Offset: 0xAF4220
    void RoomConnectionStateChanged(::Normal::Realtime::Room* room, ::Normal::Realtime::Room::ConnectionState previousConnectionState, ::Normal::Realtime::Room::ConnectionState connectionState);
    // private System.Void SetRoom(Normal.Realtime.Room room)
    // Offset: 0xAF324C
    void SetRoom(::Normal::Realtime::Room* room);
    // System.Void RegisterSceneRealtimeView(Normal.Realtime.RealtimeView view)
    // Offset: 0xAF48C0
    void RegisterSceneRealtimeView(::Normal::Realtime::RealtimeView* view);
    // System.Void UnregisterSceneRealtimeView(Normal.Realtime.RealtimeView view, System.Boolean isViewDestroyed)
    // Offset: 0xAF4DC0
    void UnregisterSceneRealtimeView(::Normal::Realtime::RealtimeView* view, bool isViewDestroyed);
    // private System.Void ConnectSceneViewsToDatastore(System.Action didConnectSceneViewsToDatastore)
    // Offset: 0xAF42E8
    void ConnectSceneViewsToDatastore(::System::Action* didConnectSceneViewsToDatastore);
    // private System.Void StartConnectSceneViewsTimeout(System.Collections.Generic.HashSet`1<Normal.Realtime.RealtimeView> viewsThatAreConnectingToTheDatastore)
    // Offset: 0xAF4E94
    void StartConnectSceneViewsTimeout(::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>* viewsThatAreConnectingToTheDatastore);
    // private System.Void StopConnectSceneViewsTimeout()
    // Offset: 0xAF41F0
    void StopConnectSceneViewsTimeout();
    // private System.Collections.IEnumerator ConnectSceneViewsToDatastoreTimeout(System.Collections.Generic.HashSet`1<Normal.Realtime.RealtimeView> viewsThatAreConnectingToTheDatastore)
    // Offset: 0xAF4ED0
    ::System::Collections::IEnumerator* ConnectSceneViewsToDatastoreTimeout(::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>* viewsThatAreConnectingToTheDatastore);
    // private System.Void ConnectSceneViewToDatastore(Normal.Realtime.RealtimeView view, System.Action`1<System.Boolean> completionHandler)
    // Offset: 0xAF4BAC
    void ConnectSceneViewToDatastore(::Normal::Realtime::RealtimeView* view, ::System::Action_1<bool>* completionHandler);
    // private System.Void DisconnectSceneViewsFromDatastore()
    // Offset: 0xAF4528
    void DisconnectSceneViewsFromDatastore();
    // private System.Void ReplaceSceneViewModelWithFreshModel(Normal.Realtime.RealtimeView view)
    // Offset: 0xAF4AE8
    void ReplaceSceneViewModelWithFreshModel(::Normal::Realtime::RealtimeView* view);
    // private UnityEngine.GameObject InstantiateInternal(System.String prefabName, System.Boolean ownedByClient, System.Boolean preventOwnershipTakeover, System.Boolean destroyWhenOwnerOrLastClientLeaves, System.Boolean destroyWhenOwnerLeaves, System.Boolean destroyWhenLastClientLeaves)
    // Offset: 0xAF1EF4
    ::UnityEngine::GameObject* InstantiateInternal(::StringW prefabName, bool ownedByClient, bool preventOwnershipTakeover, bool destroyWhenOwnerOrLastClientLeaves, bool destroyWhenOwnerLeaves, bool destroyWhenLastClientLeaves);
    // private System.Void DestroyRealtimeView(Normal.Realtime.RealtimeView realtimeView)
    // Offset: 0xAF2954
    void DestroyRealtimeView(::Normal::Realtime::RealtimeView* realtimeView);
    // private System.Void PrefabRealtimeViewModelAdded(Normal.Realtime.Datastore datastore, Normal.Realtime.RealtimeViewModel model, System.Boolean remote)
    // Offset: 0xAF5030
    void PrefabRealtimeViewModelAdded(::Normal::Realtime::Datastore* datastore, ::Normal::Realtime::RealtimeViewModel* model, bool remote);
    // private System.Void PrefabRealtimeViewModelRemoved(Normal.Realtime.Datastore datastore, Normal.Realtime.RealtimeViewModel model, System.Boolean remote)
    // Offset: 0xAF51C0
    void PrefabRealtimeViewModelRemoved(::Normal::Realtime::Datastore* datastore, ::Normal::Realtime::RealtimeViewModel* model, bool remote);
    // private System.Void CreatePrefabRealtimeViewsForDatastore()
    // Offset: 0xAF5378
    void CreatePrefabRealtimeViewsForDatastore();
    // private System.Void DestroyAllPrefabRealtimeViews()
    // Offset: 0xAF4614
    void DestroyAllPrefabRealtimeViews();
    // private UnityEngine.GameObject CreatePrefabForRealtimeViewModel(Normal.Realtime.RealtimeViewModel model)
    // Offset: 0xAF5060
    ::UnityEngine::GameObject* CreatePrefabForRealtimeViewModel(::Normal::Realtime::RealtimeViewModel* model);
    // private System.Void <RoomConnectionStateChanged>b__77_0()
    // Offset: 0xAF5678
    void $RoomConnectionStateChanged$b__77_0();
    // private System.Void <SetRoom>b__78_0()
    // Offset: 0xAF567C
    void $SetRoom$b__78_0();
    // public System.Void .ctor()
    // Offset: 0xAF55A4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Realtime* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Realtime::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Realtime*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xAF5604
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
    // static public UnityEngine.Object Instantiate(UnityEngine.Object original)
    // Offset: 0xAF2B64
    // Implemented from: UnityEngine.Object
    // Base method: UnityEngine.Object Object::Instantiate(UnityEngine.Object original)
    static ::UnityEngine::Object* Instantiate(::UnityEngine::Object* original);
    // static public UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0xAF2BD0
    // Implemented from: UnityEngine.Object
    // Base method: UnityEngine.Object Object::Instantiate(UnityEngine.Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    static ::UnityEngine::Object* Instantiate(::UnityEngine::Object* original, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // static public T Instantiate(T original, UnityEngine.Transform parent, System.Boolean worldPositionStays)
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.Object
    // Base method: T Object::Instantiate(T original, UnityEngine.Transform parent, System.Boolean worldPositionStays)
    template<class T>
    static T Instantiate(T original, ::UnityEngine::Transform* parent, bool worldPositionStays) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Realtime::Instantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Realtime", "Realtime", "Instantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(worldPositionStays)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, original, parent, worldPositionStays);
    }
    // static public T Instantiate(T original)
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.Object
    // Base method: T Object::Instantiate(T original)
    template<class T>
    static T Instantiate(T original) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Realtime::Instantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Realtime", "Realtime", "Instantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, original);
    }
    // static public T Instantiate(T original, UnityEngine.Transform parent)
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.Object
    // Base method: T Object::Instantiate(T original, UnityEngine.Transform parent)
    template<class T>
    static T Instantiate(T original, ::UnityEngine::Transform* parent) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Realtime::Instantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Realtime", "Realtime", "Instantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(parent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, original, parent);
    }
    // static public T Instantiate(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.Object
    // Base method: T Object::Instantiate(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    template<class T>
    static T Instantiate(T original, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Normal::Realtime::Realtime::Instantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Normal.Realtime", "Realtime", "Instantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, original, position, rotation);
    }
    // static public UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Transform parent, System.Boolean instantiateInWorldSpace)
    // Offset: 0xAF2CA8
    // Implemented from: UnityEngine.Object
    // Base method: UnityEngine.Object Object::Instantiate(UnityEngine.Object original, UnityEngine.Transform parent, System.Boolean instantiateInWorldSpace)
    static ::UnityEngine::Object* Instantiate(::UnityEngine::Object* original, ::UnityEngine::Transform* parent, bool instantiateInWorldSpace);
    // static public System.Void Destroy(UnityEngine.Object obj)
    // Offset: 0xAF2D80
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::Destroy(UnityEngine.Object obj)
    static void Destroy(::UnityEngine::Object* obj);
    // static public System.Void Destroy(UnityEngine.Object obj, System.Single t)
    // Offset: 0xAF2DEC
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::Destroy(UnityEngine.Object obj, System.Single t)
    static void Destroy(::UnityEngine::Object* obj, float t);
    // static public System.Void DestroyImmediate(UnityEngine.Object obj, System.Boolean allowDestroyingAssets)
    // Offset: 0xAF2E40
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::DestroyImmediate(UnityEngine.Object obj, System.Boolean allowDestroyingAssets)
    static void DestroyImmediate(::UnityEngine::Object* obj, bool allowDestroyingAssets);
    // static public System.Void DestroyImmediate(UnityEngine.Object obj)
    // Offset: 0xAF2E94
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::DestroyImmediate(UnityEngine.Object obj)
    static void DestroyImmediate(::UnityEngine::Object* obj);
  }; // Normal.Realtime.Realtime
  #pragma pack(pop)
  static check_size<sizeof(Realtime), 112 + sizeof(::UnityEngine::Coroutine*)> __Normal_Realtime_RealtimeSizeCheck;
  static_assert(sizeof(Realtime) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Normal::Realtime::Realtime::InstantiateOptions, "Normal.Realtime", "Realtime/InstantiateOptions");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_instances
// Il2CppName: get_instances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyCollection_1<::Normal::Realtime::Realtime*>* (*)()>(&Normal::Realtime::Realtime::get_instances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_instances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_roomToJoinOnStart
// Il2CppName: get_roomToJoinOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_roomToJoinOnStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_roomToJoinOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_joinRoomOnStart
// Il2CppName: get_joinRoomOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_joinRoomOnStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_joinRoomOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_normcoreAppSettings
// Il2CppName: get_normcoreAppSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::NormcoreAppSettings* (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_normcoreAppSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_normcoreAppSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::set_normcoreAppSettings
// Il2CppName: set_normcoreAppSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::NormcoreAppSettings*)>(&Normal::Realtime::Realtime::set_normcoreAppSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal", "NormcoreAppSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "set_normcoreAppSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_room
// Il2CppName: get_room
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Room* (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_room)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_room", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::set_room
// Il2CppName: set_room
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::Realtime::set_room)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "set_room", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_connecting
// Il2CppName: get_connecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_connecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_connecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_connected
// Il2CppName: get_connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_connected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_disconnected
// Il2CppName: get_disconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_disconnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_disconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::get_clientID
// Il2CppName: get_clientID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::get_clientID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "get_clientID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::add_didConnectToRoom
// Il2CppName: add_didConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Realtime::RealtimeEvent*)>(&Normal::Realtime::Realtime::add_didConnectToRoom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime/RealtimeEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "add_didConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::remove_didConnectToRoom
// Il2CppName: remove_didConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Realtime::RealtimeEvent*)>(&Normal::Realtime::Realtime::remove_didConnectToRoom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime/RealtimeEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "remove_didConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::add_didDisconnectFromRoom
// Il2CppName: add_didDisconnectFromRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Realtime::RealtimeEvent*)>(&Normal::Realtime::Realtime::add_didDisconnectFromRoom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime/RealtimeEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "add_didDisconnectFromRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::remove_didDisconnectFromRoom
// Il2CppName: remove_didDisconnectFromRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Realtime::RealtimeEvent*)>(&Normal::Realtime::Realtime::remove_didDisconnectFromRoom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime/RealtimeEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "remove_didDisconnectFromRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::StringW, ::System::Nullable_1<::Normal::Realtime::Realtime::InstantiateOptions>)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime/InstantiateOptions")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, options});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::StringW, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::System::Nullable_1<::Normal::Realtime::Realtime::InstantiateOptions>)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* options = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime/InstantiateOptions")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, position, rotation, options});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::StringW, ::Normal::Realtime::Realtime*)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* useInstance = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, useInstance});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::StringW, bool, bool, bool, ::Normal::Realtime::Realtime*)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ownedByClient = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* preventOwnershipTakeover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destroyWhenOwnerOrLastClientLeaves = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useInstance = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, ownedByClient, preventOwnershipTakeover, destroyWhenOwnerOrLastClientLeaves, useInstance});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::StringW, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, bool, bool, bool, ::Normal::Realtime::Realtime*)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* ownedByClient = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* preventOwnershipTakeover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destroyWhenOwnerOrLastClientLeaves = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useInstance = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Realtime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, position, rotation, ownedByClient, preventOwnershipTakeover, destroyWhenOwnerOrLastClientLeaves, useInstance});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::FindRealtimeInstance
// Il2CppName: FindRealtimeInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Normal::Realtime::Realtime* (*)()>(&Normal::Realtime::Realtime::FindRealtimeInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "FindRealtimeInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::RepositionRealtimePrefab
// Il2CppName: RepositionRealtimePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Normal::Realtime::Realtime::RepositionRealtimePrefab)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "RepositionRealtimePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, position, rotation});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&Normal::Realtime::Realtime::Destroy)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::Realtime::Destroy)> {
  static const MethodInfo* get() {
    static auto* realtimeView = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{realtimeView});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (*)(::UnityEngine::Object*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Transform*)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, position, rotation, parent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::UnityEngine::GameObject*)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (*)(::UnityEngine::Object*, ::UnityEngine::Transform*)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, parent});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::DestroyObject
// Il2CppName: DestroyObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Object*, float)>(&Normal::Realtime::Realtime::DestroyObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "DestroyObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, t});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::DestroyObject
// Il2CppName: DestroyObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Object*)>(&Normal::Realtime::Realtime::DestroyObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "DestroyObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::FireDidConnectToRoom
// Il2CppName: FireDidConnectToRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::FireDidConnectToRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "FireDidConnectToRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::FireDidDisconnectFromRoom
// Il2CppName: FireDidDisconnectFromRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::FireDidDisconnectFromRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "FireDidDisconnectFromRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::StringW, ::Normal::Realtime::Serialization::IModel*)>(&Normal::Realtime::Realtime::Connect)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "IModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, roomModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::StringW, ::Normal::Realtime::RealtimeModel*)>(&Normal::Realtime::Realtime::Connect)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomModel = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, roomModel});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::RoomConnectionStateChanged
// Il2CppName: RoomConnectionStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Room*, ::Normal::Realtime::Room::ConnectionState, ::Normal::Realtime::Room::ConnectionState)>(&Normal::Realtime::Realtime::RoomConnectionStateChanged)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    static auto* previousConnectionState = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/ConnectionState")->byval_arg;
    static auto* connectionState = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room/ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "RoomConnectionStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room, previousConnectionState, connectionState});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::SetRoom
// Il2CppName: SetRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Room*)>(&Normal::Realtime::Realtime::SetRoom)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "SetRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::RegisterSceneRealtimeView
// Il2CppName: RegisterSceneRealtimeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::Realtime::RegisterSceneRealtimeView)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "RegisterSceneRealtimeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::UnregisterSceneRealtimeView
// Il2CppName: UnregisterSceneRealtimeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::RealtimeView*, bool)>(&Normal::Realtime::Realtime::UnregisterSceneRealtimeView)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    static auto* isViewDestroyed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "UnregisterSceneRealtimeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view, isViewDestroyed});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::ConnectSceneViewsToDatastore
// Il2CppName: ConnectSceneViewsToDatastore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::System::Action*)>(&Normal::Realtime::Realtime::ConnectSceneViewsToDatastore)> {
  static const MethodInfo* get() {
    static auto* didConnectSceneViewsToDatastore = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "ConnectSceneViewsToDatastore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{didConnectSceneViewsToDatastore});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::StartConnectSceneViewsTimeout
// Il2CppName: StartConnectSceneViewsTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>*)>(&Normal::Realtime::Realtime::StartConnectSceneViewsTimeout)> {
  static const MethodInfo* get() {
    static auto* viewsThatAreConnectingToTheDatastore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "StartConnectSceneViewsTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewsThatAreConnectingToTheDatastore});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::StopConnectSceneViewsTimeout
// Il2CppName: StopConnectSceneViewsTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::StopConnectSceneViewsTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "StopConnectSceneViewsTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::ConnectSceneViewsToDatastoreTimeout
// Il2CppName: ConnectSceneViewsToDatastoreTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Normal::Realtime::Realtime::*)(::System::Collections::Generic::HashSet_1<::Normal::Realtime::RealtimeView*>*)>(&Normal::Realtime::Realtime::ConnectSceneViewsToDatastoreTimeout)> {
  static const MethodInfo* get() {
    static auto* viewsThatAreConnectingToTheDatastore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "ConnectSceneViewsToDatastoreTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewsThatAreConnectingToTheDatastore});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::ConnectSceneViewToDatastore
// Il2CppName: ConnectSceneViewToDatastore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::RealtimeView*, ::System::Action_1<bool>*)>(&Normal::Realtime::Realtime::ConnectSceneViewToDatastore)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    static auto* completionHandler = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "ConnectSceneViewToDatastore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view, completionHandler});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::DisconnectSceneViewsFromDatastore
// Il2CppName: DisconnectSceneViewsFromDatastore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::DisconnectSceneViewsFromDatastore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "DisconnectSceneViewsFromDatastore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::ReplaceSceneViewModelWithFreshModel
// Il2CppName: ReplaceSceneViewModelWithFreshModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::Realtime::ReplaceSceneViewModelWithFreshModel)> {
  static const MethodInfo* get() {
    static auto* view = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "ReplaceSceneViewModelWithFreshModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{view});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::InstantiateInternal
// Il2CppName: InstantiateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Normal::Realtime::Realtime::*)(::StringW, bool, bool, bool, bool, bool)>(&Normal::Realtime::Realtime::InstantiateInternal)> {
  static const MethodInfo* get() {
    static auto* prefabName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ownedByClient = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* preventOwnershipTakeover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destroyWhenOwnerOrLastClientLeaves = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destroyWhenOwnerLeaves = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destroyWhenLastClientLeaves = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "InstantiateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabName, ownedByClient, preventOwnershipTakeover, destroyWhenOwnerOrLastClientLeaves, destroyWhenOwnerLeaves, destroyWhenLastClientLeaves});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::DestroyRealtimeView
// Il2CppName: DestroyRealtimeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::RealtimeView*)>(&Normal::Realtime::Realtime::DestroyRealtimeView)> {
  static const MethodInfo* get() {
    static auto* realtimeView = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "DestroyRealtimeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{realtimeView});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::PrefabRealtimeViewModelAdded
// Il2CppName: PrefabRealtimeViewModelAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Datastore*, ::Normal::Realtime::RealtimeViewModel*, bool)>(&Normal::Realtime::Realtime::PrefabRealtimeViewModelAdded)> {
  static const MethodInfo* get() {
    static auto* datastore = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Datastore")->byval_arg;
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    static auto* remote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "PrefabRealtimeViewModelAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{datastore, model, remote});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::PrefabRealtimeViewModelRemoved
// Il2CppName: PrefabRealtimeViewModelRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)(::Normal::Realtime::Datastore*, ::Normal::Realtime::RealtimeViewModel*, bool)>(&Normal::Realtime::Realtime::PrefabRealtimeViewModelRemoved)> {
  static const MethodInfo* get() {
    static auto* datastore = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "Datastore")->byval_arg;
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    static auto* remote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "PrefabRealtimeViewModelRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{datastore, model, remote});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::CreatePrefabRealtimeViewsForDatastore
// Il2CppName: CreatePrefabRealtimeViewsForDatastore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::CreatePrefabRealtimeViewsForDatastore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "CreatePrefabRealtimeViewsForDatastore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::DestroyAllPrefabRealtimeViews
// Il2CppName: DestroyAllPrefabRealtimeViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::DestroyAllPrefabRealtimeViews)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "DestroyAllPrefabRealtimeViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::CreatePrefabForRealtimeViewModel
// Il2CppName: CreatePrefabForRealtimeViewModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Normal::Realtime::Realtime::*)(::Normal::Realtime::RealtimeViewModel*)>(&Normal::Realtime::Realtime::CreatePrefabForRealtimeViewModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("Normal.Realtime", "RealtimeViewModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "CreatePrefabForRealtimeViewModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::$RoomConnectionStateChanged$b__77_0
// Il2CppName: <RoomConnectionStateChanged>b__77_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::$RoomConnectionStateChanged$b__77_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "<RoomConnectionStateChanged>b__77_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::$SetRoom$b__78_0
// Il2CppName: <SetRoom>b__78_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Normal::Realtime::Realtime::*)()>(&Normal::Realtime::Realtime::$SetRoom$b__78_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "<SetRoom>b__78_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Normal::Realtime::Realtime::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Normal::Realtime::Realtime::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (*)(::UnityEngine::Object*)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (*)(::UnityEngine::Object*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, position, rotation});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (*)(::UnityEngine::Object*, ::UnityEngine::Transform*, bool)>(&Normal::Realtime::Realtime::Instantiate)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* instantiateInWorldSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, parent, instantiateInWorldSpace});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Object*)>(&Normal::Realtime::Realtime::Destroy)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Object*, float)>(&Normal::Realtime::Realtime::Destroy)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, t});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::DestroyImmediate
// Il2CppName: DestroyImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Object*, bool)>(&Normal::Realtime::Realtime::DestroyImmediate)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* allowDestroyingAssets = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "DestroyImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, allowDestroyingAssets});
  }
};
// Writing MetadataGetter for method: Normal::Realtime::Realtime::DestroyImmediate
// Il2CppName: DestroyImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Object*)>(&Normal::Realtime::Realtime::DestroyImmediate)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Normal::Realtime::Realtime*), "DestroyImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
