// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Normal.Realtime.RealtimeModel
#include "Normal/Realtime/RealtimeModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Normal::Realtime
namespace Normal::Realtime {
  // Forward declaring type: UnreliableProperty`1<T>
  template<typename T>
  class UnreliableProperty_1;
}
// Forward declaring namespace: Normal::Realtime::Serialization
namespace Normal::Realtime::Serialization {
  // Skipping declaration: StreamContext because it is already included!
  // Forward declaring type: WriteStream
  class WriteStream;
  // Forward declaring type: ReadStream
  class ReadStream;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HandGestureModel
  class HandGestureModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HandGestureModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandGestureModel*, "", "HandGestureModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: HandGestureModel
  // [TokenAttribute] Offset: FFFFFFFF
  // [RealtimeModelAttribute] Offset: D4660
  class HandGestureModel : public ::Normal::Realtime::RealtimeModel {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    // Nested type: ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<T>
    template<typename T>
    class PropertyChangedHandler_1;
    // Nested type: ::GlobalNamespace::HandGestureModel::PropertyID
    struct PropertyID;
    public:
    // [RealtimePropertyAttribute] Offset: 0xFB280
    // private System.Int32 _handPoseId
    // Size: 0x4
    // Offset: 0x90
    int handPoseId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0xFB2B0
    // private System.Single _flex
    // Size: 0x4
    // Offset: 0x94
    float flex;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0xFB340
    // private System.Single _point
    // Size: 0x4
    // Offset: 0x98
    float point;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0xFB3A0
    // private System.Single _thumbsUp
    // Size: 0x4
    // Offset: 0x9C
    float thumbsUp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RealtimePropertyAttribute] Offset: 0xFB410
    // private System.Single _pinch
    // Size: 0x4
    // Offset: 0xA0
    float pinch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: pinch and: handPoseIdDidChange
    char __padding4[0x4] = {};
    // private HandGestureModel/PropertyChangedHandler`1<System.Int32> handPoseIdDidChange
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<int>* handPoseIdDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<int>*) == 0x8);
    // private HandGestureModel/PropertyChangedHandler`1<System.Single> flexDidChange
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* flexDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*) == 0x8);
    // private HandGestureModel/PropertyChangedHandler`1<System.Single> pointDidChange
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* pointDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*) == 0x8);
    // private HandGestureModel/PropertyChangedHandler`1<System.Single> thumbsUpDidChange
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* thumbsUpDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*) == 0x8);
    // private HandGestureModel/PropertyChangedHandler`1<System.Single> pinchDidChange
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* pinchDidChange;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<System.Int32> _handPoseIdProperty
    // Size: 0x8
    // Offset: 0xD0
    ::Normal::Realtime::UnreliableProperty_1<int>* handPoseIdProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<int>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<System.Single> _flexProperty
    // Size: 0x8
    // Offset: 0xD8
    ::Normal::Realtime::UnreliableProperty_1<float>* flexProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<float>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<System.Single> _pointProperty
    // Size: 0x8
    // Offset: 0xE0
    ::Normal::Realtime::UnreliableProperty_1<float>* pointProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<float>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<System.Single> _thumbsUpProperty
    // Size: 0x8
    // Offset: 0xE8
    ::Normal::Realtime::UnreliableProperty_1<float>* thumbsUpProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<float>*) == 0x8);
    // private Normal.Realtime.UnreliableProperty`1<System.Single> _pinchProperty
    // Size: 0x8
    // Offset: 0xF0
    ::Normal::Realtime::UnreliableProperty_1<float>* pinchProperty;
    // Field size check
    static_assert(sizeof(::Normal::Realtime::UnreliableProperty_1<float>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _handPoseId
    [[deprecated]] int& dyn__handPoseId();
    // Get instance field reference: private System.Single _flex
    [[deprecated]] float& dyn__flex();
    // Get instance field reference: private System.Single _point
    [[deprecated]] float& dyn__point();
    // Get instance field reference: private System.Single _thumbsUp
    [[deprecated]] float& dyn__thumbsUp();
    // Get instance field reference: private System.Single _pinch
    [[deprecated]] float& dyn__pinch();
    // Get instance field reference: private HandGestureModel/PropertyChangedHandler`1<System.Int32> handPoseIdDidChange
    [[deprecated]] ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<int>*& dyn_handPoseIdDidChange();
    // Get instance field reference: private HandGestureModel/PropertyChangedHandler`1<System.Single> flexDidChange
    [[deprecated]] ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*& dyn_flexDidChange();
    // Get instance field reference: private HandGestureModel/PropertyChangedHandler`1<System.Single> pointDidChange
    [[deprecated]] ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*& dyn_pointDidChange();
    // Get instance field reference: private HandGestureModel/PropertyChangedHandler`1<System.Single> thumbsUpDidChange
    [[deprecated]] ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*& dyn_thumbsUpDidChange();
    // Get instance field reference: private HandGestureModel/PropertyChangedHandler`1<System.Single> pinchDidChange
    [[deprecated]] ::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*& dyn_pinchDidChange();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<System.Int32> _handPoseIdProperty
    [[deprecated]] ::Normal::Realtime::UnreliableProperty_1<int>*& dyn__handPoseIdProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<System.Single> _flexProperty
    [[deprecated]] ::Normal::Realtime::UnreliableProperty_1<float>*& dyn__flexProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<System.Single> _pointProperty
    [[deprecated]] ::Normal::Realtime::UnreliableProperty_1<float>*& dyn__pointProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<System.Single> _thumbsUpProperty
    [[deprecated]] ::Normal::Realtime::UnreliableProperty_1<float>*& dyn__thumbsUpProperty();
    // Get instance field reference: private Normal.Realtime.UnreliableProperty`1<System.Single> _pinchProperty
    [[deprecated]] ::Normal::Realtime::UnreliableProperty_1<float>*& dyn__pinchProperty();
    // public System.Int32 get_handPoseId()
    // Offset: 0x6B8540
    int get_handPoseId();
    // public System.Void set_handPoseId(System.Int32 value)
    // Offset: 0x6B8A10
    void set_handPoseId(int value);
    // public System.Single get_flex()
    // Offset: 0x6B84F0
    float get_flex();
    // public System.Void set_flex(System.Single value)
    // Offset: 0x6B8990
    void set_flex(float value);
    // public System.Single get_point()
    // Offset: 0x6B85D0
    float get_point();
    // public System.Void set_point(System.Single value)
    // Offset: 0x6B8B10
    void set_point(float value);
    // public System.Single get_thumbsUp()
    // Offset: 0x6B8620
    float get_thumbsUp();
    // public System.Void set_thumbsUp(System.Single value)
    // Offset: 0x6B8B90
    void set_thumbsUp(float value);
    // public System.Single get_pinch()
    // Offset: 0x6B8580
    float get_pinch();
    // public System.Void set_pinch(System.Single value)
    // Offset: 0x6B8A90
    void set_pinch(float value);
    // public System.Void add_handPoseIdDidChange(HandGestureModel/PropertyChangedHandler`1<System.Int32> value)
    // Offset: 0x6B8270
    void add_handPoseIdDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<int>* value);
    // public System.Void remove_handPoseIdDidChange(HandGestureModel/PropertyChangedHandler`1<System.Int32> value)
    // Offset: 0x6B8710
    void remove_handPoseIdDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<int>* value);
    // public System.Void add_flexDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B81D0
    void add_flexDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // public System.Void remove_flexDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B8670
    void remove_flexDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // public System.Void add_pointDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B83B0
    void add_pointDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // public System.Void remove_pointDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B8850
    void remove_pointDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // public System.Void add_thumbsUpDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B8450
    void add_thumbsUpDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // public System.Void remove_thumbsUpDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B88F0
    void remove_thumbsUpDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // public System.Void add_pinchDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B8310
    void add_pinchDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // public System.Void remove_pinchDidChange(HandGestureModel/PropertyChangedHandler`1<System.Single> value)
    // Offset: 0x6B87B0
    void remove_pinchDidChange(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>* value);
    // private System.Void FireHandPoseIdDidChange(System.Int32 value)
    // Offset: 0x6B74F0
    void FireHandPoseIdDidChange(int value);
    // private System.Void FireFlexDidChange(System.Single value)
    // Offset: 0x6B7450
    void FireFlexDidChange(float value);
    // private System.Void FirePointDidChange(System.Single value)
    // Offset: 0x6B7630
    void FirePointDidChange(float value);
    // private System.Void FireThumbsUpDidChange(System.Single value)
    // Offset: 0x6B76D0
    void FireThumbsUpDidChange(float value);
    // private System.Void FirePinchDidChange(System.Single value)
    // Offset: 0x6B7590
    void FirePinchDidChange(float value);
    // private System.Void UpdateBackingFields()
    // Offset: 0x6B7C00
    void UpdateBackingFields();
    // public System.Void .ctor()
    // Offset: 0x6B8030
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandGestureModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandGestureModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandGestureModel*, creationType>()));
    }
    // protected override System.Int32 WriteLength(Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6B7D10
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Int32 RealtimeModel::WriteLength(Normal.Realtime.Serialization.StreamContext context)
    int WriteLength(::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6B7E80
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Write(Normal.Realtime.Serialization.WriteStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Write(::Normal::Realtime::Serialization::WriteStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
    // protected override System.Void Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    // Offset: 0x6B7770
    // Implemented from: Normal.Realtime.RealtimeModel
    // Base method: System.Void RealtimeModel::Read(Normal.Realtime.Serialization.ReadStream stream, Normal.Realtime.Serialization.StreamContext context)
    void Read(::Normal::Realtime::Serialization::ReadStream* stream, ::Normal::Realtime::Serialization::StreamContext context);
  }; // HandGestureModel
  #pragma pack(pop)
  static check_size<sizeof(HandGestureModel), 240 + sizeof(::Normal::Realtime::UnreliableProperty_1<float>*)> __GlobalNamespace_HandGestureModelSizeCheck;
  static_assert(sizeof(HandGestureModel) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::get_handPoseId
// Il2CppName: get_handPoseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::HandGestureModel::*)()>(&GlobalNamespace::HandGestureModel::get_handPoseId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "get_handPoseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::set_handPoseId
// Il2CppName: set_handPoseId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(int)>(&GlobalNamespace::HandGestureModel::set_handPoseId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "set_handPoseId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::get_flex
// Il2CppName: get_flex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::HandGestureModel::*)()>(&GlobalNamespace::HandGestureModel::get_flex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "get_flex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::set_flex
// Il2CppName: set_flex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::set_flex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "set_flex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::get_point
// Il2CppName: get_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::HandGestureModel::*)()>(&GlobalNamespace::HandGestureModel::get_point)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "get_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::set_point
// Il2CppName: set_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::set_point)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "set_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::get_thumbsUp
// Il2CppName: get_thumbsUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::HandGestureModel::*)()>(&GlobalNamespace::HandGestureModel::get_thumbsUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "get_thumbsUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::set_thumbsUp
// Il2CppName: set_thumbsUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::set_thumbsUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "set_thumbsUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::get_pinch
// Il2CppName: get_pinch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::HandGestureModel::*)()>(&GlobalNamespace::HandGestureModel::get_pinch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "get_pinch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::set_pinch
// Il2CppName: set_pinch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::set_pinch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "set_pinch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::add_handPoseIdDidChange
// Il2CppName: add_handPoseIdDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<int>*)>(&GlobalNamespace::HandGestureModel::add_handPoseIdDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "add_handPoseIdDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::remove_handPoseIdDidChange
// Il2CppName: remove_handPoseIdDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<int>*)>(&GlobalNamespace::HandGestureModel::remove_handPoseIdDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "remove_handPoseIdDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::add_flexDidChange
// Il2CppName: add_flexDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::add_flexDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "add_flexDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::remove_flexDidChange
// Il2CppName: remove_flexDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::remove_flexDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "remove_flexDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::add_pointDidChange
// Il2CppName: add_pointDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::add_pointDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "add_pointDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::remove_pointDidChange
// Il2CppName: remove_pointDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::remove_pointDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "remove_pointDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::add_thumbsUpDidChange
// Il2CppName: add_thumbsUpDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::add_thumbsUpDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "add_thumbsUpDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::remove_thumbsUpDidChange
// Il2CppName: remove_thumbsUpDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::remove_thumbsUpDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "remove_thumbsUpDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::add_pinchDidChange
// Il2CppName: add_pinchDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::add_pinchDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "add_pinchDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::remove_pinchDidChange
// Il2CppName: remove_pinchDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::GlobalNamespace::HandGestureModel::PropertyChangedHandler_1<float>*)>(&GlobalNamespace::HandGestureModel::remove_pinchDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "HandGestureModel/PropertyChangedHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "remove_pinchDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::FireHandPoseIdDidChange
// Il2CppName: FireHandPoseIdDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(int)>(&GlobalNamespace::HandGestureModel::FireHandPoseIdDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "FireHandPoseIdDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::FireFlexDidChange
// Il2CppName: FireFlexDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::FireFlexDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "FireFlexDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::FirePointDidChange
// Il2CppName: FirePointDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::FirePointDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "FirePointDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::FireThumbsUpDidChange
// Il2CppName: FireThumbsUpDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::FireThumbsUpDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "FireThumbsUpDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::FirePinchDidChange
// Il2CppName: FirePinchDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(float)>(&GlobalNamespace::HandGestureModel::FirePinchDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "FirePinchDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::UpdateBackingFields
// Il2CppName: UpdateBackingFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)()>(&GlobalNamespace::HandGestureModel::UpdateBackingFields)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "UpdateBackingFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::WriteLength
// Il2CppName: WriteLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::HandGestureModel::*)(::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::HandGestureModel::WriteLength)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "WriteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::Normal::Realtime::Serialization::WriteStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::HandGestureModel::Write)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "WriteStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandGestureModel::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandGestureModel::*)(::Normal::Realtime::Serialization::ReadStream*, ::Normal::Realtime::Serialization::StreamContext)>(&GlobalNamespace::HandGestureModel::Read)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "ReadStream")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("Normal.Realtime.Serialization", "StreamContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandGestureModel*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, context});
  }
};
