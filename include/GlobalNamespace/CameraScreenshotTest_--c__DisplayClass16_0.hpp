// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: CameraScreenshotTest
#include "GlobalNamespace/CameraScreenshotTest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0*, "", "CameraScreenshotTest/<>c__DisplayClass16_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: CameraScreenshotTest/<>c__DisplayClass16_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class CameraScreenshotTest::$$c__DisplayClass16_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String filename
    // Size: 0x8
    // Offset: 0x10
    ::StringW filename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Byte[] fileHeader
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> fileHeader;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Byte[] fileData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> fileData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: public System.String filename
    [[deprecated("Use field access instead!")]] ::StringW& dyn_filename();
    // Get instance field reference: public System.Byte[] fileHeader
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_fileHeader();
    // Get instance field reference: public System.Byte[] fileData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_fileData();
    // public System.Void .ctor()
    // Offset: 0x1DD400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CameraScreenshotTest::$$c__DisplayClass16_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CameraScreenshotTest::$$c__DisplayClass16_0*, creationType>()));
    }
    // System.Void <TakeScreenshot>b__0()
    // Offset: 0x6C3C40
    void $TakeScreenshot$b__0();
  }; // CameraScreenshotTest/<>c__DisplayClass16_0
  #pragma pack(pop)
  static check_size<sizeof(CameraScreenshotTest::$$c__DisplayClass16_0), 32 + sizeof(::ArrayW<uint8_t>)> __GlobalNamespace_CameraScreenshotTest_$$c__DisplayClass16_0SizeCheck;
  static_assert(sizeof(CameraScreenshotTest::$$c__DisplayClass16_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0::$TakeScreenshot$b__0
// Il2CppName: <TakeScreenshot>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0::*)()>(&GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0::$TakeScreenshot$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CameraScreenshotTest::$$c__DisplayClass16_0*), "<TakeScreenshot>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
