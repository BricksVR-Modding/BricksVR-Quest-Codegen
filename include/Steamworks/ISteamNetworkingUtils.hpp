// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Steamworks.SteamInterface
#include "Steamworks/SteamInterface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Forward declaring namespace: Steamworks::Data
namespace Steamworks::Data {
  // Forward declaring type: NetIdentity
  struct NetIdentity;
}
// Completed forward declares
// Type namespace: Steamworks
namespace Steamworks {
  // Forward declaring type: ISteamNetworkingUtils
  class ISteamNetworkingUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Steamworks::ISteamNetworkingUtils);
DEFINE_IL2CPP_ARG_TYPE(::Steamworks::ISteamNetworkingUtils*, "Steamworks", "ISteamNetworkingUtils");
// Type namespace: Steamworks
namespace Steamworks {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Steamworks.ISteamNetworkingUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class ISteamNetworkingUtils : public ::Steamworks::SteamInterface {
    public:
    // System.Void .ctor(System.Boolean IsGameServer)
    // Offset: 0x5BDB50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ISteamNetworkingUtils* New_ctor(bool IsGameServer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Steamworks::ISteamNetworkingUtils::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ISteamNetworkingUtils*, creationType>(IsGameServer)));
    }
    // static System.IntPtr SteamAPI_SteamNetworkingUtils_v003()
    // Offset: 0x5BEE40
    static ::System::IntPtr SteamAPI_SteamNetworkingUtils_v003();
    // static private System.Void _SteamNetworkingIdentity_ToString(System.IntPtr self, ref Steamworks.Data.NetIdentity identity, System.IntPtr buf, System.UInt32 cbBuf)
    // Offset: 0x5BEF80
    static void _SteamNetworkingIdentity_ToString(::System::IntPtr self, ByRef<::Steamworks::Data::NetIdentity> identity, ::System::IntPtr buf, uint cbBuf);
    // System.Void SteamNetworkingIdentity_ToString(ref Steamworks.Data.NetIdentity identity, out System.String buf)
    // Offset: 0x5BEEB0
    void SteamNetworkingIdentity_ToString(ByRef<::Steamworks::Data::NetIdentity> identity, ByRef<::StringW> buf);
    // public override System.IntPtr GetGlobalInterfacePointer()
    // Offset: 0x5BEE40
    // Implemented from: Steamworks.SteamInterface
    // Base method: System.IntPtr SteamInterface::GetGlobalInterfacePointer()
    ::System::IntPtr GetGlobalInterfacePointer();
  }; // Steamworks.ISteamNetworkingUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingUtils::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingUtils::SteamAPI_SteamNetworkingUtils_v003
// Il2CppName: SteamAPI_SteamNetworkingUtils_v003
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&Steamworks::ISteamNetworkingUtils::SteamAPI_SteamNetworkingUtils_v003)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingUtils*), "SteamAPI_SteamNetworkingUtils_v003", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingUtils::_SteamNetworkingIdentity_ToString
// Il2CppName: _SteamNetworkingIdentity_ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ByRef<::Steamworks::Data::NetIdentity>, ::System::IntPtr, uint)>(&Steamworks::ISteamNetworkingUtils::_SteamNetworkingIdentity_ToString)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* identity = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "NetIdentity")->this_arg;
    static auto* buf = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cbBuf = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingUtils*), "_SteamNetworkingIdentity_ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, identity, buf, cbBuf});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingUtils::SteamNetworkingIdentity_ToString
// Il2CppName: SteamNetworkingIdentity_ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Steamworks::ISteamNetworkingUtils::*)(ByRef<::Steamworks::Data::NetIdentity>, ByRef<::StringW>)>(&Steamworks::ISteamNetworkingUtils::SteamNetworkingIdentity_ToString)> {
  static const MethodInfo* get() {
    static auto* identity = &::il2cpp_utils::GetClassFromName("Steamworks.Data", "NetIdentity")->this_arg;
    static auto* buf = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingUtils*), "SteamNetworkingIdentity_ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{identity, buf});
  }
};
// Writing MetadataGetter for method: Steamworks::ISteamNetworkingUtils::GetGlobalInterfacePointer
// Il2CppName: GetGlobalInterfacePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Steamworks::ISteamNetworkingUtils::*)()>(&Steamworks::ISteamNetworkingUtils::GetGlobalInterfacePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Steamworks::ISteamNetworkingUtils*), "GetGlobalInterfacePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
