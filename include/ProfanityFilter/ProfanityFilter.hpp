// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ProfanityFilter.ProfanityBase
#include "ProfanityFilter/ProfanityBase.hpp"
// Including type: ProfanityFilter.Interfaces.IProfanityFilter
#include "ProfanityFilter/Interfaces/IProfanityFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ProfanityFilter
namespace ProfanityFilter {
}
// Forward declaring namespace: ProfanityFilter::Interfaces
namespace ProfanityFilter::Interfaces {
  // Forward declaring type: IAllowList
  class IAllowList;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: ProfanityFilter
namespace ProfanityFilter {
  // Forward declaring type: ProfanityFilter
  class ProfanityFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ProfanityFilter::ProfanityFilter);
DEFINE_IL2CPP_ARG_TYPE(::ProfanityFilter::ProfanityFilter*, "ProfanityFilter", "ProfanityFilter");
// Type namespace: ProfanityFilter
namespace ProfanityFilter {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ProfanityFilter.ProfanityFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class ProfanityFilter : public ::ProfanityFilter::ProfanityBase/*, public ::ProfanityFilter::Interfaces::IProfanityFilter*/ {
    public:
    // Nested type: ::ProfanityFilter::ProfanityFilter::$$c__DisplayClass8_0
    class $$c__DisplayClass8_0;
    // Nested type: ::ProfanityFilter::ProfanityFilter::$$c__DisplayClass8_1
    class $$c__DisplayClass8_1;
    // Nested type: ::ProfanityFilter::ProfanityFilter::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    // Nested type: ::ProfanityFilter::ProfanityFilter::$$c
    class $$c;
    // Nested type: ::ProfanityFilter::ProfanityFilter::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    public:
    // private readonly ProfanityFilter.Interfaces.IAllowList <AllowList>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::ProfanityFilter::Interfaces::IAllowList* AllowList;
    // Field size check
    static_assert(sizeof(::ProfanityFilter::Interfaces::IAllowList*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::ProfanityFilter::Interfaces::IProfanityFilter
    operator ::ProfanityFilter::Interfaces::IProfanityFilter() noexcept {
      return *reinterpret_cast<::ProfanityFilter::Interfaces::IProfanityFilter*>(this);
    }
    // Creating conversion operator: operator ::ProfanityFilter::Interfaces::IAllowList*
    constexpr operator ::ProfanityFilter::Interfaces::IAllowList*() const noexcept {
      return AllowList;
    }
    // Get instance field reference: private readonly ProfanityFilter.Interfaces.IAllowList <AllowList>k__BackingField
    [[deprecated("Use field access instead!")]] ::ProfanityFilter::Interfaces::IAllowList*& dyn_$AllowList$k__BackingField();
    // public ProfanityFilter.Interfaces.IAllowList get_AllowList()
    // Offset: 0x1E1950
    ::ProfanityFilter::Interfaces::IAllowList* get_AllowList();
    // public System.Boolean IsProfanity(System.String word)
    // Offset: 0x6C7880
    bool IsProfanity(::StringW word);
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.String> DetectAllProfanities(System.String sentence)
    // Offset: 0x6C6FA0
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* DetectAllProfanities(::StringW sentence);
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.String> DetectAllProfanities(System.String sentence, System.Boolean removePartialMatches)
    // Offset: 0x6C6D00
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* DetectAllProfanities(::StringW sentence, bool removePartialMatches);
    // public System.String CensorString(System.String sentence)
    // Offset: 0x6C6700
    ::StringW CensorString(::StringW sentence);
    // public System.String CensorString(System.String sentence, System.Char censorCharacter)
    // Offset: 0x6C66E0
    ::StringW CensorString(::StringW sentence, ::Il2CppChar censorCharacter);
    // public System.String CensorString(System.String sentence, System.Char censorCharacter, System.Boolean ignoreNumbers)
    // Offset: 0x6C64C0
    ::StringW CensorString(::StringW sentence, ::Il2CppChar censorCharacter, bool ignoreNumbers);
    // public System.Nullable`1<System.ValueTuple`3<System.Int32,System.Int32,System.String>> GetCompleteWord(System.String toCheck, System.String profanity)
    // Offset: 0x6C7580
    ::System::Nullable_1<::System::ValueTuple_3<int, int, ::StringW>> GetCompleteWord(::StringW toCheck, ::StringW profanity);
    // public System.Boolean ContainsProfanity(System.String term)
    // Offset: 0x6C6720
    bool ContainsProfanity(::StringW term);
    // private System.Text.StringBuilder CensorStringByProfanityList(System.Char censorCharacter, System.Collections.Generic.List`1<System.String> swearList, System.Text.StringBuilder censored, System.Text.StringBuilder tracker, System.Boolean ignoreNumeric)
    // Offset: 0x6C6000
    ::System::Text::StringBuilder* CensorStringByProfanityList(::Il2CppChar censorCharacter, ::System::Collections::Generic::List_1<::StringW>* swearList, ::System::Text::StringBuilder* censored, ::System::Text::StringBuilder* tracker, bool ignoreNumeric);
    // private System.Collections.Generic.List`1<System.String> FilterSwearListForCompleteWordsOnly(System.String sentence, System.Collections.Generic.List`1<System.String> swearList)
    // Offset: 0x6C6FB0
    ::System::Collections::Generic::List_1<::StringW>* FilterSwearListForCompleteWordsOnly(::StringW sentence, ::System::Collections::Generic::List_1<::StringW>* swearList);
    // private System.Collections.Generic.List`1<System.String> FilterWordListByAllowList(System.String[] words)
    // Offset: 0x6C7440
    ::System::Collections::Generic::List_1<::StringW>* FilterWordListByAllowList(::ArrayW<::StringW> words);
    // static private System.String ConvertWordListToSentence(System.Collections.Generic.List`1<System.String> postAllowList)
    // Offset: 0x6C6B40
    static ::StringW ConvertWordListToSentence(::System::Collections::Generic::List_1<::StringW>* postAllowList);
    // private System.Void AddMultiWordProfanities(System.Collections.Generic.List`1<System.String> swearList, System.String postAllowListSentence)
    // Offset: 0x6C5F10
    void AddMultiWordProfanities(::System::Collections::Generic::List_1<::StringW>* swearList, ::StringW postAllowListSentence);
    // static private System.String CreateCensoredString(System.String word, System.Char censorCharacter)
    // Offset: 0x6C6C50
    static ::StringW CreateCensoredString(::StringW word, ::Il2CppChar censorCharacter);
    // public System.Void .ctor()
    // Offset: 0x6C7A10
    // Implemented from: ProfanityFilter.ProfanityBase
    // Base method: System.Void ProfanityBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfanityFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ProfanityFilter::ProfanityFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfanityFilter*, creationType>()));
    }
    // public System.Void .ctor(System.String[] profanityList)
    // Offset: 0x6C7A80
    // Implemented from: ProfanityFilter.ProfanityBase
    // Base method: System.Void ProfanityBase::.ctor(System.String[] profanityList)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfanityFilter* New_ctor(::ArrayW<::StringW> profanityList) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ProfanityFilter::ProfanityFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfanityFilter*, creationType>(profanityList)));
    }
    // public System.Void .ctor(System.Collections.Generic.List`1<System.String> profanityList)
    // Offset: 0x6C79A0
    // Implemented from: ProfanityFilter.ProfanityBase
    // Base method: System.Void ProfanityBase::.ctor(System.Collections.Generic.List`1<System.String> profanityList)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfanityFilter* New_ctor(::System::Collections::Generic::List_1<::StringW>* profanityList) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ProfanityFilter::ProfanityFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfanityFilter*, creationType>(profanityList)));
    }
  }; // ProfanityFilter.ProfanityFilter
  #pragma pack(pop)
  static check_size<sizeof(ProfanityFilter), 32 + sizeof(::ProfanityFilter::Interfaces::IAllowList*)> __ProfanityFilter_ProfanityFilterSizeCheck;
  static_assert(sizeof(ProfanityFilter) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::get_AllowList
// Il2CppName: get_AllowList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ProfanityFilter::Interfaces::IAllowList* (ProfanityFilter::ProfanityFilter::*)()>(&ProfanityFilter::ProfanityFilter::get_AllowList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "get_AllowList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::IsProfanity
// Il2CppName: IsProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::ProfanityFilter::*)(::StringW)>(&ProfanityFilter::ProfanityFilter::IsProfanity)> {
  static const MethodInfo* get() {
    static auto* word = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "IsProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{word});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::DetectAllProfanities
// Il2CppName: DetectAllProfanities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* (ProfanityFilter::ProfanityFilter::*)(::StringW)>(&ProfanityFilter::ProfanityFilter::DetectAllProfanities)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "DetectAllProfanities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::DetectAllProfanities
// Il2CppName: DetectAllProfanities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::StringW>* (ProfanityFilter::ProfanityFilter::*)(::StringW, bool)>(&ProfanityFilter::ProfanityFilter::DetectAllProfanities)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* removePartialMatches = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "DetectAllProfanities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence, removePartialMatches});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::CensorString
// Il2CppName: CensorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ProfanityFilter::ProfanityFilter::*)(::StringW)>(&ProfanityFilter::ProfanityFilter::CensorString)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "CensorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::CensorString
// Il2CppName: CensorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ProfanityFilter::ProfanityFilter::*)(::StringW, ::Il2CppChar)>(&ProfanityFilter::ProfanityFilter::CensorString)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* censorCharacter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "CensorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence, censorCharacter});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::CensorString
// Il2CppName: CensorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ProfanityFilter::ProfanityFilter::*)(::StringW, ::Il2CppChar, bool)>(&ProfanityFilter::ProfanityFilter::CensorString)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* censorCharacter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* ignoreNumbers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "CensorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence, censorCharacter, ignoreNumbers});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::GetCompleteWord
// Il2CppName: GetCompleteWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::ValueTuple_3<int, int, ::StringW>> (ProfanityFilter::ProfanityFilter::*)(::StringW, ::StringW)>(&ProfanityFilter::ProfanityFilter::GetCompleteWord)> {
  static const MethodInfo* get() {
    static auto* toCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* profanity = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "GetCompleteWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toCheck, profanity});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::ContainsProfanity
// Il2CppName: ContainsProfanity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProfanityFilter::ProfanityFilter::*)(::StringW)>(&ProfanityFilter::ProfanityFilter::ContainsProfanity)> {
  static const MethodInfo* get() {
    static auto* term = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "ContainsProfanity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{term});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::CensorStringByProfanityList
// Il2CppName: CensorStringByProfanityList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (ProfanityFilter::ProfanityFilter::*)(::Il2CppChar, ::System::Collections::Generic::List_1<::StringW>*, ::System::Text::StringBuilder*, ::System::Text::StringBuilder*, bool)>(&ProfanityFilter::ProfanityFilter::CensorStringByProfanityList)> {
  static const MethodInfo* get() {
    static auto* censorCharacter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* swearList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* censored = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* tracker = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* ignoreNumeric = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "CensorStringByProfanityList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{censorCharacter, swearList, censored, tracker, ignoreNumeric});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::FilterSwearListForCompleteWordsOnly
// Il2CppName: FilterSwearListForCompleteWordsOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (ProfanityFilter::ProfanityFilter::*)(::StringW, ::System::Collections::Generic::List_1<::StringW>*)>(&ProfanityFilter::ProfanityFilter::FilterSwearListForCompleteWordsOnly)> {
  static const MethodInfo* get() {
    static auto* sentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* swearList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "FilterSwearListForCompleteWordsOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sentence, swearList});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::FilterWordListByAllowList
// Il2CppName: FilterWordListByAllowList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (ProfanityFilter::ProfanityFilter::*)(::ArrayW<::StringW>)>(&ProfanityFilter::ProfanityFilter::FilterWordListByAllowList)> {
  static const MethodInfo* get() {
    static auto* words = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "FilterWordListByAllowList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{words});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::ConvertWordListToSentence
// Il2CppName: ConvertWordListToSentence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Collections::Generic::List_1<::StringW>*)>(&ProfanityFilter::ProfanityFilter::ConvertWordListToSentence)> {
  static const MethodInfo* get() {
    static auto* postAllowList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "ConvertWordListToSentence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{postAllowList});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::AddMultiWordProfanities
// Il2CppName: AddMultiWordProfanities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfanityFilter::ProfanityFilter::*)(::System::Collections::Generic::List_1<::StringW>*, ::StringW)>(&ProfanityFilter::ProfanityFilter::AddMultiWordProfanities)> {
  static const MethodInfo* get() {
    static auto* swearList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* postAllowListSentence = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "AddMultiWordProfanities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{swearList, postAllowListSentence});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::CreateCensoredString
// Il2CppName: CreateCensoredString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::Il2CppChar)>(&ProfanityFilter::ProfanityFilter::CreateCensoredString)> {
  static const MethodInfo* get() {
    static auto* word = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* censorCharacter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ProfanityFilter::ProfanityFilter*), "CreateCensoredString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{word, censorCharacter});
  }
};
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ProfanityFilter::ProfanityFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
