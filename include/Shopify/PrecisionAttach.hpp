// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseInteractable
  class XRBaseInteractable;
}
// Completed forward declares
// Type namespace: Shopify
namespace Shopify {
  // Forward declaring type: PrecisionAttach
  class PrecisionAttach;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Shopify::PrecisionAttach);
DEFINE_IL2CPP_ARG_TYPE(::Shopify::PrecisionAttach*, "Shopify", "PrecisionAttach");
// Type namespace: Shopify
namespace Shopify {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Shopify.PrecisionAttach
  // [TokenAttribute] Offset: FFFFFFFF
  class PrecisionAttach : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform _mAttachPoint
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* mAttachPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _originalPosition
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 originalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _originalRotation
    // Size: 0x10
    // Offset: 0x2C
    ::UnityEngine::Quaternion originalRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform _mAttachPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__mAttachPoint();
    // Get instance field reference: private UnityEngine.Vector3 _originalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__originalPosition();
    // Get instance field reference: private UnityEngine.Quaternion _originalRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__originalRotation();
    // public System.Void .ctor()
    // Offset: 0x1DDE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrecisionAttach* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Shopify::PrecisionAttach::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrecisionAttach*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x6C5B40
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x6C5CA0
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x6C5BA0
    void OnDisable();
    // public System.Void UpdatePos(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x6C5E00
    void UpdatePos(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // private System.Void ResetPos(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0x6C5DA0
    void ResetPos(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
  }; // Shopify.PrecisionAttach
  #pragma pack(pop)
  static check_size<sizeof(PrecisionAttach), 44 + sizeof(::UnityEngine::Quaternion)> __Shopify_PrecisionAttachSizeCheck;
  static_assert(sizeof(PrecisionAttach) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Shopify::PrecisionAttach::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Shopify::PrecisionAttach::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Shopify::PrecisionAttach::*)()>(&Shopify::PrecisionAttach::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Shopify::PrecisionAttach*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Shopify::PrecisionAttach::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Shopify::PrecisionAttach::*)()>(&Shopify::PrecisionAttach::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Shopify::PrecisionAttach*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Shopify::PrecisionAttach::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Shopify::PrecisionAttach::*)()>(&Shopify::PrecisionAttach::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Shopify::PrecisionAttach*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Shopify::PrecisionAttach::UpdatePos
// Il2CppName: UpdatePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Shopify::PrecisionAttach::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&Shopify::PrecisionAttach::UpdatePos)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Shopify::PrecisionAttach*), "UpdatePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Shopify::PrecisionAttach::ResetPos
// Il2CppName: ResetPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Shopify::PrecisionAttach::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&Shopify::PrecisionAttach::ResetPos)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Shopify::PrecisionAttach*), "ResetPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
